
NET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018988  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003850  08018b38  08018b38  00028b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c388  0801c388  0003008c  2**0
                  CONTENTS
  4 .ARM          00000008  0801c388  0801c388  0002c388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c390  0801c390  0003008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c390  0801c390  0002c390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c394  0801c394  0002c394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0801c398  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003008c  2**0
                  CONTENTS
 10 .bss          0000d85c  2000008c  2000008c  0003008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000d8e8  2000d8e8  0003008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00036b22  00000000  00000000  000300ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000084e3  00000000  00000000  00066c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002858  00000000  00000000  0006f108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001fe0  00000000  00000000  00071960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003791e  00000000  00000000  00073940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003ef60  00000000  00000000  000ab25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010659d  00000000  00000000  000ea1be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000b258  00000000  00000000  001f075c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003b  00000000  00000000  001fb9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08018b20 	.word	0x08018b20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	08018b20 	.word	0x08018b20

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <mqtt_thread>:
#include "MQTTFunctions.h"

static void mqtt_thread(void *arg){
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	while (1){
 8000594:	e7fe      	b.n	8000594 <mqtt_thread+0x8>
	...

08000598 <MQTT_init>:
	}
}


void MQTT_init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af02      	add	r7, sp, #8
  sys_thread_new("mqtt_thread", mqtt_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityLow);
 800059e:	2308      	movs	r3, #8
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a6:	2200      	movs	r2, #0
 80005a8:	4903      	ldr	r1, [pc, #12]	; (80005b8 <MQTT_init+0x20>)
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <MQTT_init+0x24>)
 80005ac:	f017 f830 	bl	8017610 <sys_thread_new>
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	0800058d 	.word	0x0800058d
 80005bc:	08018b38 	.word	0x08018b38

080005c0 <tcp_thread>:
static struct netconn *conn, *newconn;
static struct netbuf *buf;
char msg1[100];
char smsg1[200];

static void tcp_thread(void *arg){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	6078      	str	r0, [r7, #4]
	err_t err;

	conn = netconn_new(NETCONN_TCP);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2100      	movs	r1, #0
 80005cc:	2010      	movs	r0, #16
 80005ce:	f008 ff9b 	bl	8009508 <netconn_new_with_proto_and_callback>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a36      	ldr	r2, [pc, #216]	; (80006b0 <tcp_thread+0xf0>)
 80005d6:	6013      	str	r3, [r2, #0]
	if (conn!=NULL){
 80005d8:	4b35      	ldr	r3, [pc, #212]	; (80006b0 <tcp_thread+0xf0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d062      	beq.n	80006a6 <tcp_thread+0xe6>
		err = netconn_bind(conn, IP_ADDR_ANY, 80);
 80005e0:	4b33      	ldr	r3, [pc, #204]	; (80006b0 <tcp_thread+0xf0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2250      	movs	r2, #80	; 0x50
 80005e6:	4933      	ldr	r1, [pc, #204]	; (80006b4 <tcp_thread+0xf4>)
 80005e8:	4618      	mov	r0, r3
 80005ea:	f009 f847 	bl	800967c <netconn_bind>
 80005ee:	4603      	mov	r3, r0
 80005f0:	73fb      	strb	r3, [r7, #15]
		if (err == ERR_OK){
 80005f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d150      	bne.n	800069c <tcp_thread+0xdc>
			netconn_listen(conn);
 80005fa:	4b2d      	ldr	r3, [pc, #180]	; (80006b0 <tcp_thread+0xf0>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	21ff      	movs	r1, #255	; 0xff
 8000600:	4618      	mov	r0, r3
 8000602:	f009 f8ab 	bl	800975c <netconn_listen_with_backlog>
			while (1){
				if (netconn_accept(conn, &newconn) == ERR_OK){
 8000606:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <tcp_thread+0xf0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	492b      	ldr	r1, [pc, #172]	; (80006b8 <tcp_thread+0xf8>)
 800060c:	4618      	mov	r0, r3
 800060e:	f009 f8d1 	bl	80097b4 <netconn_accept>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1f6      	bne.n	8000606 <tcp_thread+0x46>
					while (netconn_recv(newconn, &buf) == ERR_OK){
 8000618:	e02c      	b.n	8000674 <tcp_thread+0xb4>
						do{
							strncpy (msg1, buf->p->payload, buf->p->len);
 800061a:	4b28      	ldr	r3, [pc, #160]	; (80006bc <tcp_thread+0xfc>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6859      	ldr	r1, [r3, #4]
 8000622:	4b26      	ldr	r3, [pc, #152]	; (80006bc <tcp_thread+0xfc>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	895b      	ldrh	r3, [r3, #10]
 800062a:	461a      	mov	r2, r3
 800062c:	4824      	ldr	r0, [pc, #144]	; (80006c0 <tcp_thread+0x100>)
 800062e:	f017 f9d4 	bl	80179da <strncpy>
							int len = sprintf (smsg1, "\"%s\" Received\n", msg1);
 8000632:	4a23      	ldr	r2, [pc, #140]	; (80006c0 <tcp_thread+0x100>)
 8000634:	4923      	ldr	r1, [pc, #140]	; (80006c4 <tcp_thread+0x104>)
 8000636:	4824      	ldr	r0, [pc, #144]	; (80006c8 <tcp_thread+0x108>)
 8000638:	f017 f93a 	bl	80178b0 <siprintf>
 800063c:	60b8      	str	r0, [r7, #8]
							netconn_write(newconn, smsg1, len, NETCONN_COPY);
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <tcp_thread+0xf8>)
 8000640:	6818      	ldr	r0, [r3, #0]
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	2300      	movs	r3, #0
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2301      	movs	r3, #1
 800064a:	491f      	ldr	r1, [pc, #124]	; (80006c8 <tcp_thread+0x108>)
 800064c:	f009 fb62 	bl	8009d14 <netconn_write_partly>
							memset (msg1, '\0', 100);
 8000650:	2264      	movs	r2, #100	; 0x64
 8000652:	2100      	movs	r1, #0
 8000654:	481a      	ldr	r0, [pc, #104]	; (80006c0 <tcp_thread+0x100>)
 8000656:	f017 f9b8 	bl	80179ca <memset>
						}while (netbuf_next(buf) >0);
 800065a:	4b18      	ldr	r3, [pc, #96]	; (80006bc <tcp_thread+0xfc>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f00b fa12 	bl	800ba88 <netbuf_next>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	dcd7      	bgt.n	800061a <tcp_thread+0x5a>
						netbuf_delete(buf);
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <tcp_thread+0xfc>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4618      	mov	r0, r3
 8000670:	f00b f9ea 	bl	800ba48 <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK){
 8000674:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <tcp_thread+0xf8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4910      	ldr	r1, [pc, #64]	; (80006bc <tcp_thread+0xfc>)
 800067a:	4618      	mov	r0, r3
 800067c:	f009 faa2 	bl	8009bc4 <netconn_recv>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d0c9      	beq.n	800061a <tcp_thread+0x5a>
					}
					netconn_close(newconn);
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <tcp_thread+0xf8>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4618      	mov	r0, r3
 800068c:	f009 fc44 	bl	8009f18 <netconn_close>
					netconn_delete(newconn);
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <tcp_thread+0xf8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4618      	mov	r0, r3
 8000696:	f008 ffd5 	bl	8009644 <netconn_delete>
				if (netconn_accept(conn, &newconn) == ERR_OK){
 800069a:	e7b4      	b.n	8000606 <tcp_thread+0x46>
				}
			}
		}
		else	netconn_delete(conn);
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <tcp_thread+0xf0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f008 ffcf 	bl	8009644 <netconn_delete>
	}
}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200000a8 	.word	0x200000a8
 80006b4:	0801c298 	.word	0x0801c298
 80006b8:	200000ac 	.word	0x200000ac
 80006bc:	200000b0 	.word	0x200000b0
 80006c0:	200000b4 	.word	0x200000b4
 80006c4:	08018b44 	.word	0x08018b44
 80006c8:	20000118 	.word	0x20000118

080006cc <TCPServer_init>:


void TCPServer_init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af02      	add	r7, sp, #8
  sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 80006d2:	2318      	movs	r3, #24
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006da:	2200      	movs	r2, #0
 80006dc:	4903      	ldr	r1, [pc, #12]	; (80006ec <TCPServer_init+0x20>)
 80006de:	4804      	ldr	r0, [pc, #16]	; (80006f0 <TCPServer_init+0x24>)
 80006e0:	f016 ff96 	bl	8017610 <sys_thread_new>
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	080005c1 	.word	0x080005c1
 80006f0:	08018b54 	.word	0x08018b54

080006f4 <udp_thread>:
char smsg[200];
static ip_addr_t *addr;
static unsigned short port;

static void udp_thread(void *arg)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	err_t err, recv_err;
	struct pbuf *txBuf;

	conn = netconn_new(NETCONN_UDP);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2100      	movs	r1, #0
 8000700:	2020      	movs	r0, #32
 8000702:	f008 ff01 	bl	8009508 <netconn_new_with_proto_and_callback>
 8000706:	4603      	mov	r3, r0
 8000708:	4a3b      	ldr	r2, [pc, #236]	; (80007f8 <udp_thread+0x104>)
 800070a:	6013      	str	r3, [r2, #0]
	if (conn!= NULL){
 800070c:	4b3a      	ldr	r3, [pc, #232]	; (80007f8 <udp_thread+0x104>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d06c      	beq.n	80007ee <udp_thread+0xfa>
		err = netconn_bind(conn, IP_ADDR_ANY, 7400);
 8000714:	4b38      	ldr	r3, [pc, #224]	; (80007f8 <udp_thread+0x104>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f641 42e8 	movw	r2, #7400	; 0x1ce8
 800071c:	4937      	ldr	r1, [pc, #220]	; (80007fc <udp_thread+0x108>)
 800071e:	4618      	mov	r0, r3
 8000720:	f008 ffac 	bl	800967c <netconn_bind>
 8000724:	4603      	mov	r3, r0
 8000726:	75fb      	strb	r3, [r7, #23]
		if (err == ERR_OK){
 8000728:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d159      	bne.n	80007e4 <udp_thread+0xf0>
			while (1){
				recv_err = netconn_recv(conn, &buf);
 8000730:	4b31      	ldr	r3, [pc, #196]	; (80007f8 <udp_thread+0x104>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4932      	ldr	r1, [pc, #200]	; (8000800 <udp_thread+0x10c>)
 8000736:	4618      	mov	r0, r3
 8000738:	f009 fa44 	bl	8009bc4 <netconn_recv>
 800073c:	4603      	mov	r3, r0
 800073e:	75bb      	strb	r3, [r7, #22]
				if (recv_err == ERR_OK){
 8000740:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1f3      	bne.n	8000730 <udp_thread+0x3c>
					addr = netbuf_fromaddr(buf);
 8000748:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <udp_thread+0x10c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3308      	adds	r3, #8
 800074e:	4a2d      	ldr	r2, [pc, #180]	; (8000804 <udp_thread+0x110>)
 8000750:	6013      	str	r3, [r2, #0]
					port = netbuf_fromport(buf);
 8000752:	4b2b      	ldr	r3, [pc, #172]	; (8000800 <udp_thread+0x10c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	899a      	ldrh	r2, [r3, #12]
 8000758:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <udp_thread+0x114>)
 800075a:	801a      	strh	r2, [r3, #0]
					strcpy (msg, buf->p->payload);
 800075c:	4b28      	ldr	r3, [pc, #160]	; (8000800 <udp_thread+0x10c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	4619      	mov	r1, r3
 8000766:	4829      	ldr	r0, [pc, #164]	; (800080c <udp_thread+0x118>)
 8000768:	f017 fa0d 	bl	8017b86 <strcpy>
					int len = sprintf (smsg, "\"%s\" was sent by the Client\n", (char *) buf->p->payload);
 800076c:	4b24      	ldr	r3, [pc, #144]	; (8000800 <udp_thread+0x10c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	461a      	mov	r2, r3
 8000776:	4926      	ldr	r1, [pc, #152]	; (8000810 <udp_thread+0x11c>)
 8000778:	4826      	ldr	r0, [pc, #152]	; (8000814 <udp_thread+0x120>)
 800077a:	f017 f899 	bl	80178b0 <siprintf>
 800077e:	6138      	str	r0, [r7, #16]
					txBuf = pbuf_alloc(PBUF_TRANSPORT,len, PBUF_RAM);
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	b29b      	uxth	r3, r3
 8000784:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000788:	4619      	mov	r1, r3
 800078a:	2036      	movs	r0, #54	; 0x36
 800078c:	f00c fc72 	bl	800d074 <pbuf_alloc>
 8000790:	60f8      	str	r0, [r7, #12]
					pbuf_take(txBuf, smsg, len);
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	b29b      	uxth	r3, r3
 8000796:	461a      	mov	r2, r3
 8000798:	491e      	ldr	r1, [pc, #120]	; (8000814 <udp_thread+0x120>)
 800079a:	68f8      	ldr	r0, [r7, #12]
 800079c:	f00d f9c6 	bl	800db2c <pbuf_take>
					buf->p = txBuf;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <udp_thread+0x10c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	68fa      	ldr	r2, [r7, #12]
 80007a6:	601a      	str	r2, [r3, #0]
					netconn_connect(conn, addr, port);
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <udp_thread+0x104>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a15      	ldr	r2, [pc, #84]	; (8000804 <udp_thread+0x110>)
 80007ae:	6811      	ldr	r1, [r2, #0]
 80007b0:	4a15      	ldr	r2, [pc, #84]	; (8000808 <udp_thread+0x114>)
 80007b2:	8812      	ldrh	r2, [r2, #0]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f008 ff99 	bl	80096ec <netconn_connect>
					netconn_send(conn,buf);
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <udp_thread+0x104>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a10      	ldr	r2, [pc, #64]	; (8000800 <udp_thread+0x10c>)
 80007c0:	6812      	ldr	r2, [r2, #0]
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f009 fa77 	bl	8009cb8 <netconn_send>
					buf->addr.addr = 0;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <udp_thread+0x10c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
					pbuf_free(txBuf);
 80007d2:	68f8      	ldr	r0, [r7, #12]
 80007d4:	f00c ff32 	bl	800d63c <pbuf_free>
					netbuf_delete(buf);
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <udp_thread+0x10c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f00b f933 	bl	800ba48 <netbuf_delete>
				recv_err = netconn_recv(conn, &buf);
 80007e2:	e7a5      	b.n	8000730 <udp_thread+0x3c>
				}
			}
		}
		else
		{
			netconn_delete(conn);
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <udp_thread+0x104>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f008 ff2b 	bl	8009644 <netconn_delete>
		}
	}
}
 80007ee:	bf00      	nop
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200001e0 	.word	0x200001e0
 80007fc:	0801c298 	.word	0x0801c298
 8000800:	200001e4 	.word	0x200001e4
 8000804:	20000314 	.word	0x20000314
 8000808:	20000318 	.word	0x20000318
 800080c:	200001e8 	.word	0x200001e8
 8000810:	08018b60 	.word	0x08018b60
 8000814:	2000024c 	.word	0x2000024c

08000818 <UDPServer_init>:

void UDPServer_init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af02      	add	r7, sp, #8
  sys_thread_new("udp_thread", udp_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityLow);
 800081e:	2308      	movs	r3, #8
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000826:	2200      	movs	r2, #0
 8000828:	4903      	ldr	r1, [pc, #12]	; (8000838 <UDPServer_init+0x20>)
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <UDPServer_init+0x24>)
 800082c:	f016 fef0 	bl	8017610 <sys_thread_new>
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	080006f5 	.word	0x080006f5
 800083c:	08018b80 	.word	0x08018b80

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f000 fdb2 	bl	80013ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f836 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f000 f8f6 	bl	8000a3c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000850:	f000 f89c 	bl	800098c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000854:	f000 f8c4 	bl	80009e0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000858:	f004 ffaa 	bl	80057b0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TCPTask */
  TCPTaskHandle = osThreadNew(StartTCPTask, NULL, &TCPTask_attributes);
 800085c:	4a0d      	ldr	r2, [pc, #52]	; (8000894 <main+0x54>)
 800085e:	2100      	movs	r1, #0
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <main+0x58>)
 8000862:	f005 f804 	bl	800586e <osThreadNew>
 8000866:	4603      	mov	r3, r0
 8000868:	4a0c      	ldr	r2, [pc, #48]	; (800089c <main+0x5c>)
 800086a:	6013      	str	r3, [r2, #0]

  /* creation of UDPTask */
  UDPTaskHandle = osThreadNew(StartUDPTask, NULL, &UDPTask_attributes);
 800086c:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <main+0x60>)
 800086e:	2100      	movs	r1, #0
 8000870:	480c      	ldr	r0, [pc, #48]	; (80008a4 <main+0x64>)
 8000872:	f004 fffc 	bl	800586e <osThreadNew>
 8000876:	4603      	mov	r3, r0
 8000878:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <main+0x68>)
 800087a:	6013      	str	r3, [r2, #0]

  /* creation of MQTTTask */
  MQTTTaskHandle = osThreadNew(StartMQTTTask, NULL, &MQTTTask_attributes);
 800087c:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <main+0x6c>)
 800087e:	2100      	movs	r1, #0
 8000880:	480b      	ldr	r0, [pc, #44]	; (80008b0 <main+0x70>)
 8000882:	f004 fff4 	bl	800586e <osThreadNew>
 8000886:	4603      	mov	r3, r0
 8000888:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <main+0x74>)
 800088a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800088c:	f004 ffb4 	bl	80057f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000890:	e7fe      	b.n	8000890 <main+0x50>
 8000892:	bf00      	nop
 8000894:	0801c0f4 	.word	0x0801c0f4
 8000898:	08000b99 	.word	0x08000b99
 800089c:	20000848 	.word	0x20000848
 80008a0:	0801c118 	.word	0x0801c118
 80008a4:	08000bb1 	.word	0x08000bb1
 80008a8:	2000084c 	.word	0x2000084c
 80008ac:	0801c13c 	.word	0x0801c13c
 80008b0:	08000bc5 	.word	0x08000bc5
 80008b4:	20000850 	.word	0x20000850

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b094      	sub	sp, #80	; 0x50
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0320 	add.w	r3, r7, #32
 80008c2:	2230      	movs	r2, #48	; 0x30
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f017 f87f 	bl	80179ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	4b28      	ldr	r3, [pc, #160]	; (8000984 <SystemClock_Config+0xcc>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	4a27      	ldr	r2, [pc, #156]	; (8000984 <SystemClock_Config+0xcc>)
 80008e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ea:	6413      	str	r3, [r2, #64]	; 0x40
 80008ec:	4b25      	ldr	r3, [pc, #148]	; (8000984 <SystemClock_Config+0xcc>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	4b22      	ldr	r3, [pc, #136]	; (8000988 <SystemClock_Config+0xd0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a21      	ldr	r2, [pc, #132]	; (8000988 <SystemClock_Config+0xd0>)
 8000902:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <SystemClock_Config+0xd0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000914:	2301      	movs	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000918:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091e:	2302      	movs	r3, #2
 8000920:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000922:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000926:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000928:	2304      	movs	r3, #4
 800092a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800092c:	23a8      	movs	r3, #168	; 0xa8
 800092e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000930:	2302      	movs	r3, #2
 8000932:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000934:	2307      	movs	r3, #7
 8000936:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000938:	f107 0320 	add.w	r3, r7, #32
 800093c:	4618      	mov	r0, r3
 800093e:	f002 fbad 	bl	800309c <HAL_RCC_OscConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000948:	f000 f958 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094c:	230f      	movs	r3, #15
 800094e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000950:	2302      	movs	r3, #2
 8000952:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000958:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800095c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800095e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000962:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	2105      	movs	r1, #5
 800096a:	4618      	mov	r0, r3
 800096c:	f002 fe0e 	bl	800358c <HAL_RCC_ClockConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000976:	f000 f941 	bl	8000bfc <Error_Handler>
  }
}
 800097a:	bf00      	nop
 800097c:	3750      	adds	r7, #80	; 0x50
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40007000 	.word	0x40007000

0800098c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <MX_USART3_UART_Init+0x50>)
 8000994:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009c4:	f003 fad6 	bl	8003f74 <HAL_UART_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009ce:	f000 f915 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	2000031c 	.word	0x2000031c
 80009dc:	40004800 	.word	0x40004800

080009e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ee:	2204      	movs	r2, #4
 80009f0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f4:	2202      	movs	r2, #2
 80009f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a00:	2202      	movs	r2, #2
 8000a02:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a24:	f002 fa2b 	bl	8002e7e <HAL_PCD_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a2e:	f000 f8e5 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000364 	.word	0x20000364

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	; 0x30
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	61bb      	str	r3, [r7, #24]
 8000a56:	4b4c      	ldr	r3, [pc, #304]	; (8000b88 <MX_GPIO_Init+0x14c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a4b      	ldr	r2, [pc, #300]	; (8000b88 <MX_GPIO_Init+0x14c>)
 8000a5c:	f043 0304 	orr.w	r3, r3, #4
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b49      	ldr	r3, [pc, #292]	; (8000b88 <MX_GPIO_Init+0x14c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0304 	and.w	r3, r3, #4
 8000a6a:	61bb      	str	r3, [r7, #24]
 8000a6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	4b45      	ldr	r3, [pc, #276]	; (8000b88 <MX_GPIO_Init+0x14c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a44      	ldr	r2, [pc, #272]	; (8000b88 <MX_GPIO_Init+0x14c>)
 8000a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b42      	ldr	r3, [pc, #264]	; (8000b88 <MX_GPIO_Init+0x14c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b3e      	ldr	r3, [pc, #248]	; (8000b88 <MX_GPIO_Init+0x14c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a3d      	ldr	r2, [pc, #244]	; (8000b88 <MX_GPIO_Init+0x14c>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b3b      	ldr	r3, [pc, #236]	; (8000b88 <MX_GPIO_Init+0x14c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b37      	ldr	r3, [pc, #220]	; (8000b88 <MX_GPIO_Init+0x14c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a36      	ldr	r2, [pc, #216]	; (8000b88 <MX_GPIO_Init+0x14c>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b34      	ldr	r3, [pc, #208]	; (8000b88 <MX_GPIO_Init+0x14c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	4b30      	ldr	r3, [pc, #192]	; (8000b88 <MX_GPIO_Init+0x14c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a2f      	ldr	r2, [pc, #188]	; (8000b88 <MX_GPIO_Init+0x14c>)
 8000acc:	f043 0308 	orr.w	r3, r3, #8
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b2d      	ldr	r3, [pc, #180]	; (8000b88 <MX_GPIO_Init+0x14c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0308 	and.w	r3, r3, #8
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <MX_GPIO_Init+0x14c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a28      	ldr	r2, [pc, #160]	; (8000b88 <MX_GPIO_Init+0x14c>)
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <MX_GPIO_Init+0x14c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b00:	4822      	ldr	r0, [pc, #136]	; (8000b8c <MX_GPIO_Init+0x150>)
 8000b02:	f002 f9a3 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2140      	movs	r1, #64	; 0x40
 8000b0a:	4821      	ldr	r0, [pc, #132]	; (8000b90 <MX_GPIO_Init+0x154>)
 8000b0c:	f002 f99e 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	481b      	ldr	r0, [pc, #108]	; (8000b94 <MX_GPIO_Init+0x158>)
 8000b28:	f001 ffe4 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b2c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	4811      	ldr	r0, [pc, #68]	; (8000b8c <MX_GPIO_Init+0x150>)
 8000b46:	f001 ffd5 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b4a:	2340      	movs	r3, #64	; 0x40
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480b      	ldr	r0, [pc, #44]	; (8000b90 <MX_GPIO_Init+0x154>)
 8000b62:	f001 ffc7 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b66:	2380      	movs	r3, #128	; 0x80
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_GPIO_Init+0x154>)
 8000b7a:	f001 ffbb 	bl	8002af4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b7e:	bf00      	nop
 8000b80:	3730      	adds	r7, #48	; 0x30
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020400 	.word	0x40020400
 8000b90:	40021800 	.word	0x40021800
 8000b94:	40020800 	.word	0x40020800

08000b98 <StartTCPTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTCPTask */
void StartTCPTask(void *argument)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000ba0:	f003 ffac 	bl	8004afc <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  TCPServer_init();
 8000ba4:	f7ff fd92 	bl	80006cc <TCPServer_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f004 fef2 	bl	8005992 <osDelay>
 8000bae:	e7fb      	b.n	8000ba8 <StartTCPTask+0x10>

08000bb0 <StartUDPTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUDPTask */
void StartUDPTask(void *argument)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUDPTask */
  UDPServer_init();
 8000bb8:	f7ff fe2e 	bl	8000818 <UDPServer_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f004 fee8 	bl	8005992 <osDelay>
 8000bc2:	e7fb      	b.n	8000bbc <StartUDPTask+0xc>

08000bc4 <StartMQTTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMQTTTask */
void StartMQTTTask(void *argument)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMQTTTask */
	MQTT_init();
 8000bcc:	f7ff fce4 	bl	8000598 <MQTT_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f004 fede 	bl	8005992 <osDelay>
 8000bd6:	e7fb      	b.n	8000bd0 <StartMQTTTask+0xc>

08000bd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d101      	bne.n	8000bee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bea:	f000 fc01 	bl	80013f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40010000 	.word	0x40010000

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <Error_Handler+0x8>
	...

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_MspInit+0x54>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a11      	ldr	r2, [pc, #68]	; (8000c5c <HAL_MspInit+0x54>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <HAL_MspInit+0x54>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_MspInit+0x54>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <HAL_MspInit+0x54>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <HAL_MspInit+0x54>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	210f      	movs	r1, #15
 8000c4a:	f06f 0001 	mvn.w	r0, #1
 8000c4e:	f000 fccb 	bl	80015e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800

08000c60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <HAL_UART_MspInit+0x84>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d12c      	bne.n	8000cdc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c90:	6413      	str	r3, [r2, #64]	; 0x40
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ccc:	2307      	movs	r3, #7
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <HAL_UART_MspInit+0x8c>)
 8000cd8:	f001 ff0c 	bl	8002af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cdc:	bf00      	nop
 8000cde:	3728      	adds	r7, #40	; 0x28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40004800 	.word	0x40004800
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020c00 	.word	0x40020c00

08000cf0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d10:	d13f      	bne.n	8000d92 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <HAL_PCD_MspInit+0xac>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a20      	ldr	r2, [pc, #128]	; (8000d9c <HAL_PCD_MspInit+0xac>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <HAL_PCD_MspInit+0xac>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d2e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d40:	230a      	movs	r3, #10
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4815      	ldr	r0, [pc, #84]	; (8000da0 <HAL_PCD_MspInit+0xb0>)
 8000d4c:	f001 fed2 	bl	8002af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	480e      	ldr	r0, [pc, #56]	; (8000da0 <HAL_PCD_MspInit+0xb0>)
 8000d66:	f001 fec5 	bl	8002af4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <HAL_PCD_MspInit+0xac>)
 8000d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <HAL_PCD_MspInit+0xac>)
 8000d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d74:	6353      	str	r3, [r2, #52]	; 0x34
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <HAL_PCD_MspInit+0xac>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <HAL_PCD_MspInit+0xac>)
 8000d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d84:	6453      	str	r3, [r2, #68]	; 0x44
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <HAL_PCD_MspInit+0xac>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020000 	.word	0x40020000

08000da4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	; 0x30
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	4b2f      	ldr	r3, [pc, #188]	; (8000e78 <HAL_InitTick+0xd4>)
 8000dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbc:	4a2e      	ldr	r2, [pc, #184]	; (8000e78 <HAL_InitTick+0xd4>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc4:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <HAL_InitTick+0xd4>)
 8000dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dd0:	f107 020c 	add.w	r2, r7, #12
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f002 fdf6 	bl	80039cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000de0:	f002 fde0 	bl	80039a4 <HAL_RCC_GetPCLK2Freq>
 8000de4:	4603      	mov	r3, r0
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dec:	4a23      	ldr	r2, [pc, #140]	; (8000e7c <HAL_InitTick+0xd8>)
 8000dee:	fba2 2303 	umull	r2, r3, r2, r3
 8000df2:	0c9b      	lsrs	r3, r3, #18
 8000df4:	3b01      	subs	r3, #1
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000df8:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <HAL_InitTick+0xdc>)
 8000dfa:	4a22      	ldr	r2, [pc, #136]	; (8000e84 <HAL_InitTick+0xe0>)
 8000dfc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000dfe:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <HAL_InitTick+0xdc>)
 8000e00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e04:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e06:	4a1e      	ldr	r2, [pc, #120]	; (8000e80 <HAL_InitTick+0xdc>)
 8000e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <HAL_InitTick+0xdc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <HAL_InitTick+0xdc>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e18:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <HAL_InitTick+0xdc>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e1e:	4818      	ldr	r0, [pc, #96]	; (8000e80 <HAL_InitTick+0xdc>)
 8000e20:	f002 fe06 	bl	8003a30 <HAL_TIM_Base_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000e2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d11b      	bne.n	8000e6a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e32:	4813      	ldr	r0, [pc, #76]	; (8000e80 <HAL_InitTick+0xdc>)
 8000e34:	f002 fe56 	bl	8003ae4 <HAL_TIM_Base_Start_IT>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d111      	bne.n	8000e6a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e46:	2019      	movs	r0, #25
 8000e48:	f000 fbea 	bl	8001620 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b0f      	cmp	r3, #15
 8000e50:	d808      	bhi.n	8000e64 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000e52:	2200      	movs	r2, #0
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	2019      	movs	r0, #25
 8000e58:	f000 fbc6 	bl	80015e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_InitTick+0xe4>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	e002      	b.n	8000e6a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3730      	adds	r7, #48	; 0x30
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	431bde83 	.word	0x431bde83
 8000e80:	20000854 	.word	0x20000854
 8000e84:	40010000 	.word	0x40010000
 8000e88:	20000004 	.word	0x20000004

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e90:	e7fe      	b.n	8000e90 <NMI_Handler+0x4>

08000e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <MemManage_Handler+0x4>

08000e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ebe:	f002 fe81 	bl	8003bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000854 	.word	0x20000854

08000ecc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <ETH_IRQHandler+0x10>)
 8000ed2:	f000 ff39 	bl	8001d48 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200053e8 	.word	0x200053e8

08000ee0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return 1;
 8000ee4:	2301      	movs	r3, #1
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <_kill>:

int _kill(int pid, int sig)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <_kill+0x20>)
 8000efc:	2216      	movs	r2, #22
 8000efe:	601a      	str	r2, [r3, #0]
  return -1;
 8000f00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	2000d8d8 	.word	0x2000d8d8

08000f14 <_exit>:

void _exit (int status)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ffe5 	bl	8000ef0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f26:	e7fe      	b.n	8000f26 <_exit+0x12>

08000f28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	e00a      	b.n	8000f50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f3a:	f3af 8000 	nop.w
 8000f3e:	4601      	mov	r1, r0
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	60ba      	str	r2, [r7, #8]
 8000f46:	b2ca      	uxtb	r2, r1
 8000f48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	dbf0      	blt.n	8000f3a <_read+0x12>
  }

  return len;
 8000f58:	687b      	ldr	r3, [r7, #4]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	60f8      	str	r0, [r7, #12]
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	e009      	b.n	8000f88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	1c5a      	adds	r2, r3, #1
 8000f78:	60ba      	str	r2, [r7, #8]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3301      	adds	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	dbf1      	blt.n	8000f74 <_write+0x12>
  }
  return len;
 8000f90:	687b      	ldr	r3, [r7, #4]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_close>:

int _close(int file)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fc2:	605a      	str	r2, [r3, #4]
  return 0;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <_isatty>:

int _isatty(int file)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <_sbrk+0x5c>)
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <_sbrk+0x60>)
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <_sbrk+0x64>)
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <_sbrk+0x68>)
 8001024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	429a      	cmp	r2, r3
 8001032:	d205      	bcs.n	8001040 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <_sbrk+0x6c>)
 8001036:	220c      	movs	r2, #12
 8001038:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	e009      	b.n	8001054 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <_sbrk+0x64>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	4a06      	ldr	r2, [pc, #24]	; (8001068 <_sbrk+0x64>)
 8001050:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001052:	68fb      	ldr	r3, [r7, #12]
}
 8001054:	4618      	mov	r0, r3
 8001056:	371c      	adds	r7, #28
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	20030000 	.word	0x20030000
 8001064:	00000400 	.word	0x00000400
 8001068:	2000089c 	.word	0x2000089c
 800106c:	2000d8e8 	.word	0x2000d8e8
 8001070:	2000d8d8 	.word	0x2000d8d8

08001074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <SystemInit+0x20>)
 800107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107e:	4a05      	ldr	r2, [pc, #20]	; (8001094 <SystemInit+0x20>)
 8001080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800109c:	f7ff ffea 	bl	8001074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010a2:	490d      	ldr	r1, [pc, #52]	; (80010d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b8:	4c0a      	ldr	r4, [pc, #40]	; (80010e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c6:	f016 fd37 	bl	8017b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ca:	f7ff fbb9 	bl	8000840 <main>
  bx  lr    
 80010ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010d0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80010dc:	0801c398 	.word	0x0801c398
  ldr r2, =_sbss
 80010e0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80010e4:	2000d8e8 	.word	0x2000d8e8

080010e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC_IRQHandler>

080010ea <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00b      	beq.n	8001112 <LAN8742_RegisterBusIO+0x28>
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d007      	beq.n	8001112 <LAN8742_RegisterBusIO+0x28>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <LAN8742_RegisterBusIO+0x28>
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d102      	bne.n	8001118 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	e014      	b.n	8001142 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	691a      	ldr	r2, [r3, #16]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d17c      	bne.n	8001268 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d002      	beq.n	800117c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2220      	movs	r2, #32
 8001180:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	e01c      	b.n	80011c2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	f107 0208 	add.w	r2, r7, #8
 8001190:	2112      	movs	r1, #18
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	4798      	blx	r3
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	da03      	bge.n	80011a4 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 800119c:	f06f 0304 	mvn.w	r3, #4
 80011a0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80011a2:	e00b      	b.n	80011bc <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	f003 031f 	and.w	r3, r3, #31
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d105      	bne.n	80011bc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
         break;
 80011ba:	e005      	b.n	80011c8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	3301      	adds	r3, #1
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	2b1f      	cmp	r3, #31
 80011c6:	d9df      	bls.n	8001188 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b1f      	cmp	r3, #31
 80011ce:	d902      	bls.n	80011d6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80011d0:	f06f 0302 	mvn.w	r3, #2
 80011d4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d145      	bne.n	8001268 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	6810      	ldr	r0, [r2, #0]
 80011e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011e8:	2100      	movs	r1, #0
 80011ea:	4798      	blx	r3
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db37      	blt.n	8001262 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6810      	ldr	r0, [r2, #0]
 80011fa:	f107 0208 	add.w	r2, r7, #8
 80011fe:	2100      	movs	r1, #0
 8001200:	4798      	blx	r3
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	db28      	blt.n	800125a <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4798      	blx	r3
 800120e:	4603      	mov	r3, r0
 8001210:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001212:	e01c      	b.n	800124e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4798      	blx	r3
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001226:	d80e      	bhi.n	8001246 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6810      	ldr	r0, [r2, #0]
 8001230:	f107 0208 	add.w	r2, r7, #8
 8001234:	2100      	movs	r1, #0
 8001236:	4798      	blx	r3
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	da07      	bge.n	800124e <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 800123e:	f06f 0304 	mvn.w	r3, #4
 8001242:	613b      	str	r3, [r7, #16]
                 break;
 8001244:	e010      	b.n	8001268 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001246:	f06f 0301 	mvn.w	r3, #1
 800124a:	613b      	str	r3, [r7, #16]
               break;
 800124c:	e00c      	b.n	8001268 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1dd      	bne.n	8001214 <LAN8742_Init+0xc6>
 8001258:	e006      	b.n	8001268 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800125a:	f06f 0304 	mvn.w	r3, #4
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	e002      	b.n	8001268 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001262:	f06f 0303 	mvn.w	r3, #3
 8001266:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d112      	bne.n	8001294 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	4798      	blx	r3
 8001274:	4603      	mov	r3, r0
 8001276:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001278:	bf00      	nop
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4798      	blx	r3
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800128c:	d9f5      	bls.n	800127a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2201      	movs	r2, #1
 8001292:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001294:	693b      	ldr	r3, [r7, #16]
 }
 8001296:	4618      	mov	r0, r3
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b084      	sub	sp, #16
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	6810      	ldr	r0, [r2, #0]
 80012b2:	f107 020c 	add.w	r2, r7, #12
 80012b6:	2101      	movs	r1, #1
 80012b8:	4798      	blx	r3
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	da02      	bge.n	80012c6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012c0:	f06f 0304 	mvn.w	r3, #4
 80012c4:	e06e      	b.n	80013a4 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	6810      	ldr	r0, [r2, #0]
 80012ce:	f107 020c 	add.w	r2, r7, #12
 80012d2:	2101      	movs	r1, #1
 80012d4:	4798      	blx	r3
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	da02      	bge.n	80012e2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012dc:	f06f 0304 	mvn.w	r3, #4
 80012e0:	e060      	b.n	80013a4 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e059      	b.n	80013a4 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	6810      	ldr	r0, [r2, #0]
 80012f8:	f107 020c 	add.w	r2, r7, #12
 80012fc:	2100      	movs	r1, #0
 80012fe:	4798      	blx	r3
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	da02      	bge.n	800130c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001306:	f06f 0304 	mvn.w	r3, #4
 800130a:	e04b      	b.n	80013a4 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d11b      	bne.n	800134e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d006      	beq.n	800132e <LAN8742_GetLinkState+0x90>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800132a:	2302      	movs	r3, #2
 800132c:	e03a      	b.n	80013a4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001338:	2303      	movs	r3, #3
 800133a:	e033      	b.n	80013a4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001346:	2304      	movs	r3, #4
 8001348:	e02c      	b.n	80013a4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800134a:	2305      	movs	r3, #5
 800134c:	e02a      	b.n	80013a4 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6810      	ldr	r0, [r2, #0]
 8001356:	f107 020c 	add.w	r2, r7, #12
 800135a:	211f      	movs	r1, #31
 800135c:	4798      	blx	r3
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	da02      	bge.n	800136a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001364:	f06f 0304 	mvn.w	r3, #4
 8001368:	e01c      	b.n	80013a4 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001374:	2306      	movs	r3, #6
 8001376:	e015      	b.n	80013a4 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f003 031c 	and.w	r3, r3, #28
 800137e:	2b18      	cmp	r3, #24
 8001380:	d101      	bne.n	8001386 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001382:	2302      	movs	r3, #2
 8001384:	e00e      	b.n	80013a4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f003 031c 	and.w	r3, r3, #28
 800138c:	2b08      	cmp	r3, #8
 800138e:	d101      	bne.n	8001394 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001390:	2303      	movs	r3, #3
 8001392:	e007      	b.n	80013a4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 031c 	and.w	r3, r3, #28
 800139a:	2b14      	cmp	r3, #20
 800139c:	d101      	bne.n	80013a2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800139e:	2304      	movs	r3, #4
 80013a0:	e000      	b.n	80013a4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80013a2:	2305      	movs	r3, #5
    }
  }
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_Init+0x40>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <HAL_Init+0x40>)
 80013b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <HAL_Init+0x40>)
 80013c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a07      	ldr	r2, [pc, #28]	; (80013ec <HAL_Init+0x40>)
 80013ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d4:	2003      	movs	r0, #3
 80013d6:	f000 f8fc 	bl	80015d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013da:	200f      	movs	r0, #15
 80013dc:	f7ff fce2 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e0:	f7ff fc12 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023c00 	.word	0x40023c00

080013f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_IncTick+0x20>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x24>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_IncTick+0x24>)
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000008 	.word	0x20000008
 8001414:	200008a0 	.word	0x200008a0

08001418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <HAL_GetTick+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	200008a0 	.word	0x200008a0

08001430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001438:	f7ff ffee 	bl	8001418 <HAL_GetTick>
 800143c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001448:	d005      	beq.n	8001456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_Delay+0x44>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001456:	bf00      	nop
 8001458:	f7ff ffde 	bl	8001418 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	429a      	cmp	r2, r3
 8001466:	d8f7      	bhi.n	8001458 <HAL_Delay+0x28>
  {
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000008 	.word	0x20000008

08001478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014aa:	4a04      	ldr	r2, [pc, #16]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	60d3      	str	r3, [r2, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	db0b      	blt.n	8001506 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	4907      	ldr	r1, [pc, #28]	; (8001514 <__NVIC_EnableIRQ+0x38>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
         );
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ff4c 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015fa:	f7ff ff61 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 80015fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	68b9      	ldr	r1, [r7, #8]
 8001604:	6978      	ldr	r0, [r7, #20]
 8001606:	f7ff ffb1 	bl	800156c <NVIC_EncodePriority>
 800160a:	4602      	mov	r2, r0
 800160c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff80 	bl	8001518 <__NVIC_SetPriority>
}
 8001618:	bf00      	nop
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ff54 	bl	80014dc <__NVIC_EnableIRQ>
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e06c      	b.n	8001728 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001654:	2b00      	cmp	r3, #0
 8001656:	d106      	bne.n	8001666 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2223      	movs	r2, #35	; 0x23
 800165c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f003 fe3b 	bl	80052dc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	4b31      	ldr	r3, [pc, #196]	; (8001730 <HAL_ETH_Init+0xf4>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	4a30      	ldr	r2, [pc, #192]	; (8001730 <HAL_ETH_Init+0xf4>)
 8001670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001674:	6453      	str	r3, [r2, #68]	; 0x44
 8001676:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <HAL_ETH_Init+0xf4>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001682:	4b2c      	ldr	r3, [pc, #176]	; (8001734 <HAL_ETH_Init+0xf8>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4a2b      	ldr	r2, [pc, #172]	; (8001734 <HAL_ETH_Init+0xf8>)
 8001688:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800168c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800168e:	4b29      	ldr	r3, [pc, #164]	; (8001734 <HAL_ETH_Init+0xf8>)
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	4927      	ldr	r1, [pc, #156]	; (8001734 <HAL_ETH_Init+0xf8>)
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800169c:	4b25      	ldr	r3, [pc, #148]	; (8001734 <HAL_ETH_Init+0xf8>)
 800169e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b8:	f7ff feae 	bl	8001418 <HAL_GetTick>
 80016bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016be:	e011      	b.n	80016e4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80016c0:	f7ff feaa 	bl	8001418 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016ce:	d909      	bls.n	80016e4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2204      	movs	r2, #4
 80016d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	22e0      	movs	r2, #224	; 0xe0
 80016dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e021      	b.n	8001728 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1e4      	bne.n	80016c0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 ff56 	bl	80025a8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 fffd 	bl	80026fc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f001 f853 	bl	80027ae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	461a      	mov	r2, r3
 800170e:	2100      	movs	r1, #0
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 ffbb 	bl	800268c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2210      	movs	r2, #16
 8001722:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	40013800 	.word	0x40013800

08001738 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001746:	2b10      	cmp	r3, #16
 8001748:	d17f      	bne.n	800184a <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2223      	movs	r2, #35	; 0x23
 800174e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001766:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001778:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800177c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001790:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2204      	movs	r2, #4
 8001798:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f9f8 	bl	8001b90 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0208 	orr.w	r2, r2, #8
 80017ae:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017b8:	2001      	movs	r0, #1
 80017ba:	f7ff fe39 	bl	8001430 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f042 0204 	orr.w	r2, r2, #4
 80017d4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017de:	2001      	movs	r0, #1
 80017e0:	f7ff fe26 	bl	8001430 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 fd7c 	bl	80022ea <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001804:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001808:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001820:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8001834:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8001838:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800183c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2223      	movs	r2, #35	; 0x23
 8001842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	e000      	b.n	800184c <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
  }
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001862:	2b23      	cmp	r3, #35	; 0x23
 8001864:	d170      	bne.n	8001948 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2223      	movs	r2, #35	; 0x23
 800186a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8001880:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8001884:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001888:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800189c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018a0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	f023 0302 	bic.w	r3, r3, #2
 80018b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018b8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0204 	bic.w	r2, r2, #4
 80018c8:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f7ff fdac 	bl	8001430 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 fd02 	bl	80022ea <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0208 	bic.w	r2, r2, #8
 80018f4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018fe:	2001      	movs	r0, #1
 8001900:	f7ff fd96 	bl	8001430 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	e00e      	b.n	8001930 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	3212      	adds	r2, #18
 8001918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800191c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d9ed      	bls.n	8001912 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2210      	movs	r2, #16
 8001940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	e000      	b.n	800194a <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
  }
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001968:	f043 0201 	orr.w	r2, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e045      	b.n	8001a02 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800197c:	2b23      	cmp	r3, #35	; 0x23
 800197e:	d13f      	bne.n	8001a00 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001988:	2201      	movs	r2, #1
 800198a:	6839      	ldr	r1, [r7, #0]
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 ff7b 	bl	8002888 <ETH_Prepare_Tx_Descriptors>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d009      	beq.n	80019ac <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800199e:	f043 0202 	orr.w	r2, r3, #2
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e02a      	b.n	8001a02 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80019ac:	f3bf 8f4f 	dsb	sy
}
 80019b0:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d904      	bls.n	80019ce <HAL_ETH_Transmit_IT+0x7c>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	1f1a      	subs	r2, r3, #4
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00d      	beq.n	80019fc <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e8:	461a      	mov	r2, r3
 80019ea:	2304      	movs	r3, #4
 80019ec:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f6:	461a      	mov	r2, r3
 80019f8:	2300      	movs	r3, #0
 80019fa:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e000      	b.n	8001a02 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
  }
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b088      	sub	sp, #32
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d109      	bne.n	8001a36 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a28:	f043 0201 	orr.w	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e0a8      	b.n	8001b88 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a3c:	2b23      	cmp	r3, #35	; 0x23
 8001a3e:	d001      	beq.n	8001a44 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0a1      	b.n	8001b88 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a48:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69fa      	ldr	r2, [r7, #28]
 8001a4e:	3212      	adds	r2, #18
 8001a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a54:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a5a:	f1c3 0304 	rsb	r3, r3, #4
 8001a5e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a60:	e06a      	b.n	8001b38 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	69da      	ldr	r2, [r3, #28]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	699a      	ldr	r2, [r3, #24]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d103      	bne.n	8001a92 <HAL_ETH_ReadData+0x88>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d040      	beq.n	8001b14 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d005      	beq.n	8001aaa <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00c      	beq.n	8001ad6 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	0c1b      	lsrs	r3, r3, #16
 8001ac2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001ac6:	3b04      	subs	r3, #4
 8001ac8:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001aee:	461a      	mov	r2, r3
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	f003 fdcc 	bl	8005690 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	441a      	add	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	2200      	movs	r2, #0
 8001b12:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	3301      	adds	r3, #1
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d902      	bls.n	8001b26 <HAL_ETH_ReadData+0x11c>
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	3b04      	subs	r3, #4
 8001b24:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69fa      	ldr	r2, [r7, #28]
 8001b2a:	3212      	adds	r2, #18
 8001b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b30:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	db06      	blt.n	8001b4e <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d202      	bcs.n	8001b4e <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d089      	beq.n	8001a62 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	441a      	add	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d002      	beq.n	8001b68 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f814 	bl	8001b90 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d108      	bne.n	8001b86 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e000      	b.n	8001b88 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3720      	adds	r7, #32
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ba4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	3212      	adds	r2, #18
 8001bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bb6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001bb8:	e03d      	b.n	8001c36 <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d112      	bne.n	8001be8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001bc2:	f107 0308 	add.w	r3, r7, #8
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 fd32 	bl	8005630 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d102      	bne.n	8001bd8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	74fb      	strb	r3, [r7, #19]
 8001bd6:	e007      	b.n	8001be8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	461a      	mov	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001be8:	7cfb      	ldrb	r3, [r7, #19]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d023      	beq.n	8001c36 <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d103      	bne.n	8001bfe <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	4a24      	ldr	r2, [pc, #144]	; (8001c8c <ETH_UpdateDescriptor+0xfc>)
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	e003      	b.n	8001c06 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001c04:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3301      	adds	r3, #1
 8001c16:	61fb      	str	r3, [r7, #28]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d902      	bls.n	8001c24 <ETH_UpdateDescriptor+0x94>
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3b04      	subs	r3, #4
 8001c22:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	3212      	adds	r2, #18
 8001c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2e:	617b      	str	r3, [r7, #20]
      desccount--;
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <ETH_UpdateDescriptor+0xb2>
 8001c3c:	7cfb      	ldrb	r3, [r7, #19]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1bb      	bne.n	8001bba <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d01a      	beq.n	8001c82 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001c56:	f3bf 8f5f 	dmb	sy
}
 8001c5a:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6919      	ldr	r1, [r3, #16]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	18ca      	adds	r2, r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c74:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69fa      	ldr	r2, [r7, #28]
 8001c7a:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001c82:	bf00      	nop
 8001c84:	3720      	adds	r7, #32
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	80004600 	.word	0x80004600

08001c90 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3318      	adds	r3, #24
 8001c9c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001caa:	2301      	movs	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001cae:	e03f      	b.n	8001d30 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d106      	bne.n	8001cd8 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001cd8:	7bbb      	ldrb	r3, [r7, #14]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d028      	beq.n	8001d30 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68d9      	ldr	r1, [r3, #12]
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	440b      	add	r3, r1
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db1b      	blt.n	8001d2c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 fd05 	bl	8005710 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	2200      	movs	r2, #0
 8001d12:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	3301      	adds	r3, #1
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d2a:	e001      	b.n	8001d30 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <HAL_ETH_ReleaseTxPacket+0xac>
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1b9      	bne.n	8001cb0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5e:	2b40      	cmp	r3, #64	; 0x40
 8001d60:	d112      	bne.n	8001d88 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d70:	2b40      	cmp	r3, #64	; 0x40
 8001d72:	d109      	bne.n	8001d88 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b50      	ldr	r3, [pc, #320]	; (8001ec0 <HAL_ETH_IRQHandler+0x178>)
 8001d80:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f003 f806 	bl	8004d94 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d113      	bne.n	8001dc2 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d10a      	bne.n	8001dc2 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db4:	461a      	mov	r2, r3
 8001db6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001dba:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f002 fff9 	bl	8004db4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dd4:	d14c      	bne.n	8001e70 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001de8:	d142      	bne.n	8001e70 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df0:	f043 0208 	orr.w	r2, r3, #8
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e0c:	d11a      	bne.n	8001e44 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e16:	695a      	ldr	r2, [r3, #20]
 8001e18:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <HAL_ETH_IRQHandler+0x17c>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001e34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e38:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	22e0      	movs	r2, #224	; 0xe0
 8001e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001e42:	e012      	b.n	8001e6a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4c:	695a      	ldr	r2, [r3, #20]
 8001e4e:	f248 6380 	movw	r3, #34432	; 0x8680
 8001e52:	4013      	ands	r3, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e62:	461a      	mov	r2, r3
 8001e64:	f248 6380 	movw	r3, #34432	; 0x8680
 8001e68:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f002 ffb2 	bl	8004dd4 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d10e      	bne.n	8001e9c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e84:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f81c 	bl	8001ecc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_ETH_IRQHandler+0x180>)
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d006      	beq.n	8001eb6 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001ea8:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <HAL_ETH_IRQHandler+0x180>)
 8001eaa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001eae:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f815 	bl	8001ee0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	00010040 	.word	0x00010040
 8001ec4:	007e2000 	.word	0x007e2000
 8001ec8:	40013c00 	.word	0x40013c00

08001ecc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
 8001f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f003 031c 	and.w	r3, r3, #28
 8001f10:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	02db      	lsls	r3, r3, #11
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	019b      	lsls	r3, r3, #6
 8001f22:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f023 0302 	bic.w	r3, r3, #2
 8001f32:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001f44:	f7ff fa68 	bl	8001418 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f4a:	e00d      	b.n	8001f68 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001f4c:	f7ff fa64 	bl	8001418 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5a:	d301      	bcc.n	8001f60 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e010      	b.n	8001f82 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1ec      	bne.n	8001f4c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f003 031c 	and.w	r3, r3, #28
 8001fa6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	02db      	lsls	r3, r3, #11
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	019b      	lsls	r3, r3, #6
 8001fb8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fe4:	f7ff fa18 	bl	8001418 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fea:	e00d      	b.n	8002008 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001fec:	f7ff fa14 	bl	8001418 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffa:	d301      	bcc.n	8002000 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e009      	b.n	8002014 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1ec      	bne.n	8001fec <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0d9      	b.n	80021e4 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	bf14      	ite	ne
 800203e:	2301      	movne	r3, #1
 8002040:	2300      	moveq	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf0c      	ite	eq
 8002068:	2301      	moveq	r3, #1
 800206a:	2300      	movne	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002080:	2b00      	cmp	r3, #0
 8002082:	bf14      	ite	ne
 8002084:	2301      	movne	r3, #1
 8002086:	2300      	moveq	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800209a:	2b00      	cmp	r3, #0
 800209c:	bf0c      	ite	eq
 800209e:	2301      	moveq	r3, #1
 80020a0:	2300      	movne	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bf14      	ite	ne
 80020b8:	2301      	movne	r3, #1
 80020ba:	2300      	moveq	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	bf0c      	ite	eq
 80020ee:	2301      	moveq	r3, #1
 80020f0:	2300      	movne	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	461a      	mov	r2, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211e:	2b00      	cmp	r3, #0
 8002120:	bf14      	ite	ne
 8002122:	2301      	movne	r3, #1
 8002124:	2300      	moveq	r3, #0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf14      	ite	ne
 800214a:	2301      	movne	r3, #1
 800214c:	2300      	moveq	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf14      	ite	ne
 8002164:	2301      	movne	r3, #1
 8002166:	2300      	moveq	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217c:	2b00      	cmp	r3, #0
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	0c1b      	lsrs	r3, r3, #16
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf14      	ite	ne
 80021b8:	2301      	movne	r3, #1
 80021ba:	2300      	moveq	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf14      	ite	ne
 80021d4:	2301      	movne	r3, #1
 80021d6:	2300      	moveq	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e00b      	b.n	800221c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800220a:	2b10      	cmp	r3, #16
 800220c:	d105      	bne.n	800221a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800220e:	6839      	ldr	r1, [r7, #0]
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f88f 	bl	8002334 <ETH_SetMACConfig>

    return HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	e000      	b.n	800221c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
  }
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f023 031c 	bic.w	r3, r3, #28
 800223a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800223c:	f001 fb92 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 8002240:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	4a1d      	ldr	r2, [pc, #116]	; (80022bc <HAL_ETH_SetMDIOClockRange+0x98>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d908      	bls.n	800225c <HAL_ETH_SetMDIOClockRange+0x38>
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	4a1c      	ldr	r2, [pc, #112]	; (80022c0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d804      	bhi.n	800225c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f043 0308 	orr.w	r3, r3, #8
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	e027      	b.n	80022ac <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4a18      	ldr	r2, [pc, #96]	; (80022c0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d908      	bls.n	8002276 <HAL_ETH_SetMDIOClockRange+0x52>
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	4a17      	ldr	r2, [pc, #92]	; (80022c4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d204      	bcs.n	8002276 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f043 030c 	orr.w	r3, r3, #12
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	e01a      	b.n	80022ac <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4a12      	ldr	r2, [pc, #72]	; (80022c4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d303      	bcc.n	8002286 <HAL_ETH_SetMDIOClockRange+0x62>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	4a11      	ldr	r2, [pc, #68]	; (80022c8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d911      	bls.n	80022aa <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	4a0f      	ldr	r2, [pc, #60]	; (80022c8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d908      	bls.n	80022a0 <HAL_ETH_SetMDIOClockRange+0x7c>
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	4a0e      	ldr	r2, [pc, #56]	; (80022cc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d804      	bhi.n	80022a0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f043 0304 	orr.w	r3, r3, #4
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	e005      	b.n	80022ac <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f043 0310 	orr.w	r3, r3, #16
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	e000      	b.n	80022ac <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80022aa:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	611a      	str	r2, [r3, #16]
}
 80022b4:	bf00      	nop
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	01312cff 	.word	0x01312cff
 80022c0:	02160ebf 	.word	0x02160ebf
 80022c4:	03938700 	.word	0x03938700
 80022c8:	05f5e0ff 	.word	0x05f5e0ff
 80022cc:	08f0d17f 	.word	0x08f0d17f

080022d0 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002308:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800230c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800231a:	2001      	movs	r0, #1
 800231c:	f7ff f888 	bl	8001430 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800232a:	6193      	str	r3, [r2, #24]
}
 800232c:	bf00      	nop
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4b51      	ldr	r3, [pc, #324]	; (8002490 <ETH_SetMACConfig+0x15c>)
 800234a:	4013      	ands	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	7c1b      	ldrb	r3, [r3, #16]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <ETH_SetMACConfig+0x28>
 8002356:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800235a:	e000      	b.n	800235e <ETH_SetMACConfig+0x2a>
 800235c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	7c5b      	ldrb	r3, [r3, #17]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <ETH_SetMACConfig+0x38>
 8002366:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800236a:	e000      	b.n	800236e <ETH_SetMACConfig+0x3a>
 800236c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800236e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002374:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	7fdb      	ldrb	r3, [r3, #31]
 800237a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800237c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002382:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	7f92      	ldrb	r2, [r2, #30]
 8002388:	2a00      	cmp	r2, #0
 800238a:	d102      	bne.n	8002392 <ETH_SetMACConfig+0x5e>
 800238c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002390:	e000      	b.n	8002394 <ETH_SetMACConfig+0x60>
 8002392:	2200      	movs	r2, #0
                        macconf->Speed |
 8002394:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	7f1b      	ldrb	r3, [r3, #28]
 800239a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800239c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80023a2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	791b      	ldrb	r3, [r3, #4]
 80023a8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80023aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	f892 2020 	ldrb.w	r2, [r2, #32]
 80023b2:	2a00      	cmp	r2, #0
 80023b4:	d102      	bne.n	80023bc <ETH_SetMACConfig+0x88>
 80023b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ba:	e000      	b.n	80023be <ETH_SetMACConfig+0x8a>
 80023bc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80023be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	7bdb      	ldrb	r3, [r3, #15]
 80023c4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80023c6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80023cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023d4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023d6:	4313      	orrs	r3, r2
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ee:	2001      	movs	r0, #1
 80023f0:	f7ff f81e 	bl	8001430 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	f64f 7341 	movw	r3, #65345	; 0xff41
 800240a:	4013      	ands	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002412:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800241a:	2a00      	cmp	r2, #0
 800241c:	d101      	bne.n	8002422 <ETH_SetMACConfig+0xee>
 800241e:	2280      	movs	r2, #128	; 0x80
 8002420:	e000      	b.n	8002424 <ETH_SetMACConfig+0xf0>
 8002422:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002424:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800242a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002432:	2a01      	cmp	r2, #1
 8002434:	d101      	bne.n	800243a <ETH_SetMACConfig+0x106>
 8002436:	2208      	movs	r2, #8
 8002438:	e000      	b.n	800243c <ETH_SetMACConfig+0x108>
 800243a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800243c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002444:	2a01      	cmp	r2, #1
 8002446:	d101      	bne.n	800244c <ETH_SetMACConfig+0x118>
 8002448:	2204      	movs	r2, #4
 800244a:	e000      	b.n	800244e <ETH_SetMACConfig+0x11a>
 800244c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800244e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002456:	2a01      	cmp	r2, #1
 8002458:	d101      	bne.n	800245e <ETH_SetMACConfig+0x12a>
 800245a:	2202      	movs	r2, #2
 800245c:	e000      	b.n	8002460 <ETH_SetMACConfig+0x12c>
 800245e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002460:	4313      	orrs	r3, r2
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	4313      	orrs	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002478:	2001      	movs	r0, #1
 800247a:	f7fe ffd9 	bl	8001430 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	619a      	str	r2, [r3, #24]
}
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	ff20810f 	.word	0xff20810f

08002494 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	4b3d      	ldr	r3, [pc, #244]	; (80025a4 <ETH_SetDMAConfig+0x110>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	7b1b      	ldrb	r3, [r3, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <ETH_SetDMAConfig+0x2c>
 80024ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024be:	e000      	b.n	80024c2 <ETH_SetDMAConfig+0x2e>
 80024c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	7b5b      	ldrb	r3, [r3, #13]
 80024c6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80024c8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	7f52      	ldrb	r2, [r2, #29]
 80024ce:	2a00      	cmp	r2, #0
 80024d0:	d102      	bne.n	80024d8 <ETH_SetDMAConfig+0x44>
 80024d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024d6:	e000      	b.n	80024da <ETH_SetDMAConfig+0x46>
 80024d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80024da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	7b9b      	ldrb	r3, [r3, #14]
 80024e0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80024e2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80024e8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	7f1b      	ldrb	r3, [r3, #28]
 80024ee:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80024f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	7f9b      	ldrb	r3, [r3, #30]
 80024f6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80024f8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80024fe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002506:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002508:	4313      	orrs	r3, r2
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002518:	461a      	mov	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800252a:	2001      	movs	r0, #1
 800252c:	f7fe ff80 	bl	8001430 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002538:	461a      	mov	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	791b      	ldrb	r3, [r3, #4]
 8002542:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002548:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800254e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002554:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800255c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800255e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002566:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800256c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002576:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800257a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002588:	2001      	movs	r0, #1
 800258a:	f7fe ff51 	bl	8001430 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002596:	461a      	mov	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6013      	str	r3, [r2, #0]
}
 800259c:	bf00      	nop
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	f8de3f23 	.word	0xf8de3f23

080025a8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b0a6      	sub	sp, #152	; 0x98
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80025b0:	2301      	movs	r3, #1
 80025b2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80025b6:	2301      	movs	r3, #1
 80025b8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80025bc:	2300      	movs	r3, #0
 80025be:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80025c6:	2301      	movs	r3, #1
 80025c8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80025d2:	2301      	movs	r3, #1
 80025d4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80025de:	2300      	movs	r3, #0
 80025e0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80025e4:	2300      	movs	r3, #0
 80025e6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80025fe:	2300      	movs	r3, #0
 8002600:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002604:	2300      	movs	r3, #0
 8002606:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800260a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800260e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002610:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002614:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002616:	2300      	movs	r3, #0
 8002618:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800261c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002620:	4619      	mov	r1, r3
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff fe86 	bl	8002334 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002628:	2301      	movs	r3, #1
 800262a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800262c:	2301      	movs	r3, #1
 800262e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002630:	2301      	movs	r3, #1
 8002632:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002636:	2301      	movs	r3, #1
 8002638:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800263e:	2300      	movs	r3, #0
 8002640:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800264a:	2300      	movs	r3, #0
 800264c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800264e:	2301      	movs	r3, #1
 8002650:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002654:	2301      	movs	r3, #1
 8002656:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800265c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800265e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002662:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002668:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800266a:	2301      	movs	r3, #1
 800266c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002670:	2300      	movs	r3, #0
 8002672:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002678:	f107 0308 	add.w	r3, r7, #8
 800267c:	4619      	mov	r1, r3
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ff08 	bl	8002494 <ETH_SetDMAConfig>
}
 8002684:	bf00      	nop
 8002686:	3798      	adds	r7, #152	; 0x98
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3305      	adds	r3, #5
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	021b      	lsls	r3, r3, #8
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	3204      	adds	r2, #4
 80026a4:	7812      	ldrb	r2, [r2, #0]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <ETH_MACAddressConfig+0x68>)
 80026ae:	4413      	add	r3, r2
 80026b0:	461a      	mov	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3303      	adds	r3, #3
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	061a      	lsls	r2, r3, #24
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3302      	adds	r3, #2
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	041b      	lsls	r3, r3, #16
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3301      	adds	r3, #1
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	4313      	orrs	r3, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	7812      	ldrb	r2, [r2, #0]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <ETH_MACAddressConfig+0x6c>)
 80026de:	4413      	add	r3, r2
 80026e0:	461a      	mov	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	6013      	str	r3, [r2, #0]
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40028040 	.word	0x40028040
 80026f8:	40028044 	.word	0x40028044

080026fc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	e03e      	b.n	8002788 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68d9      	ldr	r1, [r3, #12]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	440b      	add	r3, r1
 800271a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2200      	movs	r2, #0
 8002726:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2200      	movs	r2, #0
 8002732:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002734:	68b9      	ldr	r1, [r7, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	3206      	adds	r2, #6
 800273c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d80c      	bhi.n	800276c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68d9      	ldr	r1, [r3, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	440b      	add	r3, r1
 8002764:	461a      	mov	r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	e004      	b.n	8002776 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	461a      	mov	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	3301      	adds	r3, #1
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b03      	cmp	r3, #3
 800278c:	d9bd      	bls.n	800270a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027a0:	611a      	str	r2, [r3, #16]
}
 80027a2:	bf00      	nop
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b085      	sub	sp, #20
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	e046      	b.n	800284a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6919      	ldr	r1, [r3, #16]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	440b      	add	r3, r1
 80027cc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2200      	movs	r2, #0
 80027d8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2200      	movs	r2, #0
 80027e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2200      	movs	r2, #0
 80027ea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2200      	movs	r2, #0
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80027f8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002800:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	3212      	adds	r2, #18
 8002816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d80c      	bhi.n	800283a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6919      	ldr	r1, [r3, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	440b      	add	r3, r1
 8002832:	461a      	mov	r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	60da      	str	r2, [r3, #12]
 8002838:	e004      	b.n	8002844 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	461a      	mov	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3301      	adds	r3, #1
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2b03      	cmp	r3, #3
 800284e:	d9b5      	bls.n	80027bc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800287a:	60da      	str	r2, [r3, #12]
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002888:	b480      	push	{r7}
 800288a:	b08d      	sub	sp, #52	; 0x34
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	3318      	adds	r3, #24
 8002898:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028ca:	d007      	beq.n	80028dc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d0:	3304      	adds	r3, #4
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80028dc:	2302      	movs	r3, #2
 80028de:	e103      	b.n	8002ae8 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	3301      	adds	r3, #1
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80028f8:	f023 031f 	bic.w	r3, r3, #31
 80028fc:	69fa      	ldr	r2, [r7, #28]
 80028fe:	6852      	ldr	r2, [r2, #4]
 8002900:	431a      	orrs	r2, r3
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d008      	beq.n	8002924 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	431a      	orrs	r2, r3
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	431a      	orrs	r2, r3
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002966:	f3bf 8f5f 	dmb	sy
}
 800296a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002978:	e084      	b.n	8002a84 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d006      	beq.n	800299a <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	e005      	b.n	80029a6 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80029a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a8:	3301      	adds	r3, #1
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d902      	bls.n	80029b8 <ETH_Prepare_Tx_Descriptors+0x130>
 80029b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b4:	3b04      	subs	r3, #4
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029da:	d007      	beq.n	80029ec <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e0:	3304      	adds	r3, #4
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d029      	beq.n	8002a40 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80029fa:	2300      	movs	r3, #0
 80029fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80029fe:	e019      	b.n	8002a34 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002a00:	f3bf 8f5f 	dmb	sy
}
 8002a04:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a14:	3301      	adds	r3, #1
 8002a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d902      	bls.n	8002a24 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a20:	3b04      	subs	r3, #4
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a2c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a30:	3301      	adds	r3, #1
 8002a32:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d3e1      	bcc.n	8002a00 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e053      	b.n	8002ae8 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	3301      	adds	r3, #1
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	461a      	mov	r2, r3
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002a5e:	f023 031f 	bic.w	r3, r3, #31
 8002a62:	69fa      	ldr	r2, [r7, #28]
 8002a64:	6852      	ldr	r2, [r2, #4]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002a72:	f3bf 8f5f 	dmb	sy
}
 8002a76:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f47f af76 	bne.w	800297a <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d006      	beq.n	8002aa2 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	e005      	b.n	8002aae <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002abe:	6979      	ldr	r1, [r7, #20]
 8002ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ace:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad0:	b672      	cpsid	i
}
 8002ad2:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	4413      	add	r3, r2
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002ae2:	b662      	cpsie	i
}
 8002ae4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3734      	adds	r7, #52	; 0x34
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	; 0x24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	e177      	b.n	8002e00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b10:	2201      	movs	r2, #1
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	f040 8166 	bne.w	8002dfa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d005      	beq.n	8002b46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d130      	bne.n	8002ba8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	2203      	movs	r2, #3
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 0201 	and.w	r2, r3, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d017      	beq.n	8002be4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d123      	bne.n	8002c38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	08da      	lsrs	r2, r3, #3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3208      	adds	r2, #8
 8002bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	220f      	movs	r2, #15
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	08da      	lsrs	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3208      	adds	r2, #8
 8002c32:	69b9      	ldr	r1, [r7, #24]
 8002c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	2203      	movs	r2, #3
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0203 	and.w	r2, r3, #3
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80c0 	beq.w	8002dfa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	4b66      	ldr	r3, [pc, #408]	; (8002e18 <HAL_GPIO_Init+0x324>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	4a65      	ldr	r2, [pc, #404]	; (8002e18 <HAL_GPIO_Init+0x324>)
 8002c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c88:	6453      	str	r3, [r2, #68]	; 0x44
 8002c8a:	4b63      	ldr	r3, [pc, #396]	; (8002e18 <HAL_GPIO_Init+0x324>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c96:	4a61      	ldr	r2, [pc, #388]	; (8002e1c <HAL_GPIO_Init+0x328>)
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	089b      	lsrs	r3, r3, #2
 8002c9c:	3302      	adds	r3, #2
 8002c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	220f      	movs	r2, #15
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a58      	ldr	r2, [pc, #352]	; (8002e20 <HAL_GPIO_Init+0x32c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d037      	beq.n	8002d32 <HAL_GPIO_Init+0x23e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a57      	ldr	r2, [pc, #348]	; (8002e24 <HAL_GPIO_Init+0x330>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d031      	beq.n	8002d2e <HAL_GPIO_Init+0x23a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a56      	ldr	r2, [pc, #344]	; (8002e28 <HAL_GPIO_Init+0x334>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d02b      	beq.n	8002d2a <HAL_GPIO_Init+0x236>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a55      	ldr	r2, [pc, #340]	; (8002e2c <HAL_GPIO_Init+0x338>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d025      	beq.n	8002d26 <HAL_GPIO_Init+0x232>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a54      	ldr	r2, [pc, #336]	; (8002e30 <HAL_GPIO_Init+0x33c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d01f      	beq.n	8002d22 <HAL_GPIO_Init+0x22e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a53      	ldr	r2, [pc, #332]	; (8002e34 <HAL_GPIO_Init+0x340>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d019      	beq.n	8002d1e <HAL_GPIO_Init+0x22a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a52      	ldr	r2, [pc, #328]	; (8002e38 <HAL_GPIO_Init+0x344>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d013      	beq.n	8002d1a <HAL_GPIO_Init+0x226>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a51      	ldr	r2, [pc, #324]	; (8002e3c <HAL_GPIO_Init+0x348>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00d      	beq.n	8002d16 <HAL_GPIO_Init+0x222>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a50      	ldr	r2, [pc, #320]	; (8002e40 <HAL_GPIO_Init+0x34c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d007      	beq.n	8002d12 <HAL_GPIO_Init+0x21e>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a4f      	ldr	r2, [pc, #316]	; (8002e44 <HAL_GPIO_Init+0x350>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d101      	bne.n	8002d0e <HAL_GPIO_Init+0x21a>
 8002d0a:	2309      	movs	r3, #9
 8002d0c:	e012      	b.n	8002d34 <HAL_GPIO_Init+0x240>
 8002d0e:	230a      	movs	r3, #10
 8002d10:	e010      	b.n	8002d34 <HAL_GPIO_Init+0x240>
 8002d12:	2308      	movs	r3, #8
 8002d14:	e00e      	b.n	8002d34 <HAL_GPIO_Init+0x240>
 8002d16:	2307      	movs	r3, #7
 8002d18:	e00c      	b.n	8002d34 <HAL_GPIO_Init+0x240>
 8002d1a:	2306      	movs	r3, #6
 8002d1c:	e00a      	b.n	8002d34 <HAL_GPIO_Init+0x240>
 8002d1e:	2305      	movs	r3, #5
 8002d20:	e008      	b.n	8002d34 <HAL_GPIO_Init+0x240>
 8002d22:	2304      	movs	r3, #4
 8002d24:	e006      	b.n	8002d34 <HAL_GPIO_Init+0x240>
 8002d26:	2303      	movs	r3, #3
 8002d28:	e004      	b.n	8002d34 <HAL_GPIO_Init+0x240>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e002      	b.n	8002d34 <HAL_GPIO_Init+0x240>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <HAL_GPIO_Init+0x240>
 8002d32:	2300      	movs	r3, #0
 8002d34:	69fa      	ldr	r2, [r7, #28]
 8002d36:	f002 0203 	and.w	r2, r2, #3
 8002d3a:	0092      	lsls	r2, r2, #2
 8002d3c:	4093      	lsls	r3, r2
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d44:	4935      	ldr	r1, [pc, #212]	; (8002e1c <HAL_GPIO_Init+0x328>)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	089b      	lsrs	r3, r3, #2
 8002d4a:	3302      	adds	r3, #2
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d52:	4b3d      	ldr	r3, [pc, #244]	; (8002e48 <HAL_GPIO_Init+0x354>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d76:	4a34      	ldr	r2, [pc, #208]	; (8002e48 <HAL_GPIO_Init+0x354>)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d7c:	4b32      	ldr	r3, [pc, #200]	; (8002e48 <HAL_GPIO_Init+0x354>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002da0:	4a29      	ldr	r2, [pc, #164]	; (8002e48 <HAL_GPIO_Init+0x354>)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002da6:	4b28      	ldr	r3, [pc, #160]	; (8002e48 <HAL_GPIO_Init+0x354>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dca:	4a1f      	ldr	r2, [pc, #124]	; (8002e48 <HAL_GPIO_Init+0x354>)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dd0:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <HAL_GPIO_Init+0x354>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002df4:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <HAL_GPIO_Init+0x354>)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	61fb      	str	r3, [r7, #28]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2b0f      	cmp	r3, #15
 8002e04:	f67f ae84 	bls.w	8002b10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	3724      	adds	r7, #36	; 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40013800 	.word	0x40013800
 8002e20:	40020000 	.word	0x40020000
 8002e24:	40020400 	.word	0x40020400
 8002e28:	40020800 	.word	0x40020800
 8002e2c:	40020c00 	.word	0x40020c00
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40021400 	.word	0x40021400
 8002e38:	40021800 	.word	0x40021800
 8002e3c:	40021c00 	.word	0x40021c00
 8002e40:	40022000 	.word	0x40022000
 8002e44:	40022400 	.word	0x40022400
 8002e48:	40013c00 	.word	0x40013c00

08002e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	807b      	strh	r3, [r7, #2]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e5c:	787b      	ldrb	r3, [r7, #1]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e68:	e003      	b.n	8002e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e6a:	887b      	ldrh	r3, [r7, #2]
 8002e6c:	041a      	lsls	r2, r3, #16
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	619a      	str	r2, [r3, #24]
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af02      	add	r7, sp, #8
 8002e84:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e101      	b.n	8003094 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fd ff20 	bl	8000cf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ebe:	d102      	bne.n	8002ec6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f001 fb7a 	bl	80045c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6818      	ldr	r0, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	7c1a      	ldrb	r2, [r3, #16]
 8002ed8:	f88d 2000 	strb.w	r2, [sp]
 8002edc:	3304      	adds	r3, #4
 8002ede:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ee0:	f001 fb0c 	bl	80044fc <USB_CoreInit>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2202      	movs	r2, #2
 8002eee:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e0ce      	b.n	8003094 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2100      	movs	r1, #0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f001 fb72 	bl	80045e6 <USB_SetCurrentMode>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0bf      	b.n	8003094 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f14:	2300      	movs	r3, #0
 8002f16:	73fb      	strb	r3, [r7, #15]
 8002f18:	e04a      	b.n	8002fb0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f1a:	7bfa      	ldrb	r2, [r7, #15]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	3315      	adds	r3, #21
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f2e:	7bfa      	ldrb	r2, [r7, #15]
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	3314      	adds	r3, #20
 8002f3e:	7bfa      	ldrb	r2, [r7, #15]
 8002f40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f42:	7bfa      	ldrb	r2, [r7, #15]
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	b298      	uxth	r0, r3
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	332e      	adds	r3, #46	; 0x2e
 8002f56:	4602      	mov	r2, r0
 8002f58:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f5a:	7bfa      	ldrb	r2, [r7, #15]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4413      	add	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	3318      	adds	r3, #24
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f6e:	7bfa      	ldrb	r2, [r7, #15]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	331c      	adds	r3, #28
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f82:	7bfa      	ldrb	r2, [r7, #15]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	3320      	adds	r3, #32
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f96:	7bfa      	ldrb	r2, [r7, #15]
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	3324      	adds	r3, #36	; 0x24
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
 8002fac:	3301      	adds	r3, #1
 8002fae:	73fb      	strb	r3, [r7, #15]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	791b      	ldrb	r3, [r3, #4]
 8002fb4:	7bfa      	ldrb	r2, [r7, #15]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d3af      	bcc.n	8002f1a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fba:	2300      	movs	r3, #0
 8002fbc:	73fb      	strb	r3, [r7, #15]
 8002fbe:	e044      	b.n	800304a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fc0:	7bfa      	ldrb	r2, [r7, #15]
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fd6:	7bfa      	ldrb	r2, [r7, #15]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4413      	add	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002fe8:	7bfa      	ldrb	r2, [r7, #15]
 8002fea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fec:	7bfa      	ldrb	r2, [r7, #15]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002ffe:	2200      	movs	r2, #0
 8003000:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003002:	7bfa      	ldrb	r2, [r7, #15]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003018:	7bfa      	ldrb	r2, [r7, #15]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	3301      	adds	r3, #1
 8003048:	73fb      	strb	r3, [r7, #15]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	791b      	ldrb	r3, [r3, #4]
 800304e:	7bfa      	ldrb	r2, [r7, #15]
 8003050:	429a      	cmp	r2, r3
 8003052:	d3b5      	bcc.n	8002fc0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	7c1a      	ldrb	r2, [r3, #16]
 800305c:	f88d 2000 	strb.w	r2, [sp]
 8003060:	3304      	adds	r3, #4
 8003062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003064:	f001 fb0c 	bl	8004680 <USB_DevInit>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2202      	movs	r2, #2
 8003072:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e00c      	b.n	8003094 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f001 fcd4 	bl	8004a3a <USB_DevDisconnect>

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e267      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d075      	beq.n	80031a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ba:	4b88      	ldr	r3, [pc, #544]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d00c      	beq.n	80030e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030c6:	4b85      	ldr	r3, [pc, #532]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d112      	bne.n	80030f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030d2:	4b82      	ldr	r3, [pc, #520]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030de:	d10b      	bne.n	80030f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e0:	4b7e      	ldr	r3, [pc, #504]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d05b      	beq.n	80031a4 <HAL_RCC_OscConfig+0x108>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d157      	bne.n	80031a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e242      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003100:	d106      	bne.n	8003110 <HAL_RCC_OscConfig+0x74>
 8003102:	4b76      	ldr	r3, [pc, #472]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a75      	ldr	r2, [pc, #468]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e01d      	b.n	800314c <HAL_RCC_OscConfig+0xb0>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0x98>
 800311a:	4b70      	ldr	r3, [pc, #448]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a6f      	ldr	r2, [pc, #444]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	4b6d      	ldr	r3, [pc, #436]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a6c      	ldr	r2, [pc, #432]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 800312c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	e00b      	b.n	800314c <HAL_RCC_OscConfig+0xb0>
 8003134:	4b69      	ldr	r3, [pc, #420]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a68      	ldr	r2, [pc, #416]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 800313a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	4b66      	ldr	r3, [pc, #408]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a65      	ldr	r2, [pc, #404]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800314a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d013      	beq.n	800317c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003154:	f7fe f960 	bl	8001418 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800315c:	f7fe f95c 	bl	8001418 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b64      	cmp	r3, #100	; 0x64
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e207      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	4b5b      	ldr	r3, [pc, #364]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0xc0>
 800317a:	e014      	b.n	80031a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7fe f94c 	bl	8001418 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003184:	f7fe f948 	bl	8001418 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	; 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e1f3      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003196:	4b51      	ldr	r3, [pc, #324]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0xe8>
 80031a2:	e000      	b.n	80031a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d063      	beq.n	800327a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031b2:	4b4a      	ldr	r3, [pc, #296]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031be:	4b47      	ldr	r3, [pc, #284]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d11c      	bne.n	8003204 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ca:	4b44      	ldr	r3, [pc, #272]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d116      	bne.n	8003204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d6:	4b41      	ldr	r3, [pc, #260]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <HAL_RCC_OscConfig+0x152>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d001      	beq.n	80031ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e1c7      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ee:	4b3b      	ldr	r3, [pc, #236]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4937      	ldr	r1, [pc, #220]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003202:	e03a      	b.n	800327a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d020      	beq.n	800324e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800320c:	4b34      	ldr	r3, [pc, #208]	; (80032e0 <HAL_RCC_OscConfig+0x244>)
 800320e:	2201      	movs	r2, #1
 8003210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003212:	f7fe f901 	bl	8001418 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800321a:	f7fe f8fd 	bl	8001418 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e1a8      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322c:	4b2b      	ldr	r3, [pc, #172]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0f0      	beq.n	800321a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003238:	4b28      	ldr	r3, [pc, #160]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4925      	ldr	r1, [pc, #148]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003248:	4313      	orrs	r3, r2
 800324a:	600b      	str	r3, [r1, #0]
 800324c:	e015      	b.n	800327a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324e:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <HAL_RCC_OscConfig+0x244>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe f8e0 	bl	8001418 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325c:	f7fe f8dc 	bl	8001418 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e187      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326e:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d036      	beq.n	80032f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d016      	beq.n	80032bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328e:	4b15      	ldr	r3, [pc, #84]	; (80032e4 <HAL_RCC_OscConfig+0x248>)
 8003290:	2201      	movs	r2, #1
 8003292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7fe f8c0 	bl	8001418 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800329c:	f7fe f8bc 	bl	8001418 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e167      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ae:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80032b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x200>
 80032ba:	e01b      	b.n	80032f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032bc:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <HAL_RCC_OscConfig+0x248>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c2:	f7fe f8a9 	bl	8001418 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c8:	e00e      	b.n	80032e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ca:	f7fe f8a5 	bl	8001418 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d907      	bls.n	80032e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e150      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
 80032dc:	40023800 	.word	0x40023800
 80032e0:	42470000 	.word	0x42470000
 80032e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e8:	4b88      	ldr	r3, [pc, #544]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80032ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1ea      	bne.n	80032ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8097 	beq.w	8003430 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003302:	2300      	movs	r3, #0
 8003304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003306:	4b81      	ldr	r3, [pc, #516]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10f      	bne.n	8003332 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	4b7d      	ldr	r3, [pc, #500]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	4a7c      	ldr	r2, [pc, #496]	; (800350c <HAL_RCC_OscConfig+0x470>)
 800331c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003320:	6413      	str	r3, [r2, #64]	; 0x40
 8003322:	4b7a      	ldr	r3, [pc, #488]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332e:	2301      	movs	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003332:	4b77      	ldr	r3, [pc, #476]	; (8003510 <HAL_RCC_OscConfig+0x474>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	2b00      	cmp	r3, #0
 800333c:	d118      	bne.n	8003370 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333e:	4b74      	ldr	r3, [pc, #464]	; (8003510 <HAL_RCC_OscConfig+0x474>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a73      	ldr	r2, [pc, #460]	; (8003510 <HAL_RCC_OscConfig+0x474>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334a:	f7fe f865 	bl	8001418 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003352:	f7fe f861 	bl	8001418 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e10c      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003364:	4b6a      	ldr	r3, [pc, #424]	; (8003510 <HAL_RCC_OscConfig+0x474>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d106      	bne.n	8003386 <HAL_RCC_OscConfig+0x2ea>
 8003378:	4b64      	ldr	r3, [pc, #400]	; (800350c <HAL_RCC_OscConfig+0x470>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	4a63      	ldr	r2, [pc, #396]	; (800350c <HAL_RCC_OscConfig+0x470>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6713      	str	r3, [r2, #112]	; 0x70
 8003384:	e01c      	b.n	80033c0 <HAL_RCC_OscConfig+0x324>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b05      	cmp	r3, #5
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x30c>
 800338e:	4b5f      	ldr	r3, [pc, #380]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003392:	4a5e      	ldr	r2, [pc, #376]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003394:	f043 0304 	orr.w	r3, r3, #4
 8003398:	6713      	str	r3, [r2, #112]	; 0x70
 800339a:	4b5c      	ldr	r3, [pc, #368]	; (800350c <HAL_RCC_OscConfig+0x470>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	4a5b      	ldr	r2, [pc, #364]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6713      	str	r3, [r2, #112]	; 0x70
 80033a6:	e00b      	b.n	80033c0 <HAL_RCC_OscConfig+0x324>
 80033a8:	4b58      	ldr	r3, [pc, #352]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ac:	4a57      	ldr	r2, [pc, #348]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	6713      	str	r3, [r2, #112]	; 0x70
 80033b4:	4b55      	ldr	r3, [pc, #340]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b8:	4a54      	ldr	r2, [pc, #336]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80033ba:	f023 0304 	bic.w	r3, r3, #4
 80033be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d015      	beq.n	80033f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7fe f826 	bl	8001418 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d0:	f7fe f822 	bl	8001418 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	; 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e0cb      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e6:	4b49      	ldr	r3, [pc, #292]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0ee      	beq.n	80033d0 <HAL_RCC_OscConfig+0x334>
 80033f2:	e014      	b.n	800341e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f4:	f7fe f810 	bl	8001418 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fa:	e00a      	b.n	8003412 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033fc:	f7fe f80c 	bl	8001418 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f241 3288 	movw	r2, #5000	; 0x1388
 800340a:	4293      	cmp	r3, r2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e0b5      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003412:	4b3e      	ldr	r3, [pc, #248]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1ee      	bne.n	80033fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800341e:	7dfb      	ldrb	r3, [r7, #23]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d105      	bne.n	8003430 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003424:	4b39      	ldr	r3, [pc, #228]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	4a38      	ldr	r2, [pc, #224]	; (800350c <HAL_RCC_OscConfig+0x470>)
 800342a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800342e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80a1 	beq.w	800357c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800343a:	4b34      	ldr	r3, [pc, #208]	; (800350c <HAL_RCC_OscConfig+0x470>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b08      	cmp	r3, #8
 8003444:	d05c      	beq.n	8003500 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d141      	bne.n	80034d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344e:	4b31      	ldr	r3, [pc, #196]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fd ffe0 	bl	8001418 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345c:	f7fd ffdc 	bl	8001418 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e087      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346e:	4b27      	ldr	r3, [pc, #156]	; (800350c <HAL_RCC_OscConfig+0x470>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69da      	ldr	r2, [r3, #28]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	019b      	lsls	r3, r3, #6
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	3b01      	subs	r3, #1
 8003494:	041b      	lsls	r3, r3, #16
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	061b      	lsls	r3, r3, #24
 800349e:	491b      	ldr	r1, [pc, #108]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a4:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034aa:	f7fd ffb5 	bl	8001418 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b2:	f7fd ffb1 	bl	8001418 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e05c      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c4:	4b11      	ldr	r3, [pc, #68]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x416>
 80034d0:	e054      	b.n	800357c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d2:	4b10      	ldr	r3, [pc, #64]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7fd ff9e 	bl	8001418 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e0:	f7fd ff9a 	bl	8001418 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e045      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_RCC_OscConfig+0x470>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x444>
 80034fe:	e03d      	b.n	800357c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d107      	bne.n	8003518 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e038      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
 800350c:	40023800 	.word	0x40023800
 8003510:	40007000 	.word	0x40007000
 8003514:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003518:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <HAL_RCC_OscConfig+0x4ec>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d028      	beq.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d121      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d11a      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003548:	4013      	ands	r3, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800354e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003550:	4293      	cmp	r3, r2
 8003552:	d111      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	085b      	lsrs	r3, r3, #1
 8003560:	3b01      	subs	r3, #1
 8003562:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003564:	429a      	cmp	r2, r3
 8003566:	d107      	bne.n	8003578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800

0800358c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0cc      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035a0:	4b68      	ldr	r3, [pc, #416]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 030f 	and.w	r3, r3, #15
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d90c      	bls.n	80035c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ae:	4b65      	ldr	r3, [pc, #404]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	4b63      	ldr	r3, [pc, #396]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0b8      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d020      	beq.n	8003616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e0:	4b59      	ldr	r3, [pc, #356]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	4a58      	ldr	r2, [pc, #352]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f8:	4b53      	ldr	r3, [pc, #332]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4a52      	ldr	r2, [pc, #328]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003604:	4b50      	ldr	r3, [pc, #320]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	494d      	ldr	r1, [pc, #308]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d044      	beq.n	80036ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d107      	bne.n	800363a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362a:	4b47      	ldr	r3, [pc, #284]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d119      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e07f      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d003      	beq.n	800364a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003646:	2b03      	cmp	r3, #3
 8003648:	d107      	bne.n	800365a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364a:	4b3f      	ldr	r3, [pc, #252]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e06f      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365a:	4b3b      	ldr	r3, [pc, #236]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e067      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800366a:	4b37      	ldr	r3, [pc, #220]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f023 0203 	bic.w	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4934      	ldr	r1, [pc, #208]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003678:	4313      	orrs	r3, r2
 800367a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800367c:	f7fd fecc 	bl	8001418 <HAL_GetTick>
 8003680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003682:	e00a      	b.n	800369a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003684:	f7fd fec8 	bl	8001418 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e04f      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369a:	4b2b      	ldr	r3, [pc, #172]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 020c 	and.w	r2, r3, #12
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d1eb      	bne.n	8003684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ac:	4b25      	ldr	r3, [pc, #148]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d20c      	bcs.n	80036d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ba:	4b22      	ldr	r3, [pc, #136]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b20      	ldr	r3, [pc, #128]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e032      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e0:	4b19      	ldr	r3, [pc, #100]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4916      	ldr	r1, [pc, #88]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036fe:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	490e      	ldr	r1, [pc, #56]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003712:	f000 f821 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 8003716:	4602      	mov	r2, r0
 8003718:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	490a      	ldr	r1, [pc, #40]	; (800374c <HAL_RCC_ClockConfig+0x1c0>)
 8003724:	5ccb      	ldrb	r3, [r1, r3]
 8003726:	fa22 f303 	lsr.w	r3, r2, r3
 800372a:	4a09      	ldr	r2, [pc, #36]	; (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 800372c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800372e:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_RCC_ClockConfig+0x1c8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fd fb36 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023c00 	.word	0x40023c00
 8003748:	40023800 	.word	0x40023800
 800374c:	0801c160 	.word	0x0801c160
 8003750:	20000000 	.word	0x20000000
 8003754:	20000004 	.word	0x20000004

08003758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800375c:	b094      	sub	sp, #80	; 0x50
 800375e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	647b      	str	r3, [r7, #68]	; 0x44
 8003764:	2300      	movs	r3, #0
 8003766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003768:	2300      	movs	r3, #0
 800376a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003770:	4b79      	ldr	r3, [pc, #484]	; (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 030c 	and.w	r3, r3, #12
 8003778:	2b08      	cmp	r3, #8
 800377a:	d00d      	beq.n	8003798 <HAL_RCC_GetSysClockFreq+0x40>
 800377c:	2b08      	cmp	r3, #8
 800377e:	f200 80e1 	bhi.w	8003944 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0x34>
 8003786:	2b04      	cmp	r3, #4
 8003788:	d003      	beq.n	8003792 <HAL_RCC_GetSysClockFreq+0x3a>
 800378a:	e0db      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800378c:	4b73      	ldr	r3, [pc, #460]	; (800395c <HAL_RCC_GetSysClockFreq+0x204>)
 800378e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003790:	e0db      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003792:	4b73      	ldr	r3, [pc, #460]	; (8003960 <HAL_RCC_GetSysClockFreq+0x208>)
 8003794:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003796:	e0d8      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003798:	4b6f      	ldr	r3, [pc, #444]	; (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037a2:	4b6d      	ldr	r3, [pc, #436]	; (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d063      	beq.n	8003876 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ae:	4b6a      	ldr	r3, [pc, #424]	; (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	099b      	lsrs	r3, r3, #6
 80037b4:	2200      	movs	r2, #0
 80037b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80037b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c0:	633b      	str	r3, [r7, #48]	; 0x30
 80037c2:	2300      	movs	r3, #0
 80037c4:	637b      	str	r3, [r7, #52]	; 0x34
 80037c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037ca:	4622      	mov	r2, r4
 80037cc:	462b      	mov	r3, r5
 80037ce:	f04f 0000 	mov.w	r0, #0
 80037d2:	f04f 0100 	mov.w	r1, #0
 80037d6:	0159      	lsls	r1, r3, #5
 80037d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037dc:	0150      	lsls	r0, r2, #5
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4621      	mov	r1, r4
 80037e4:	1a51      	subs	r1, r2, r1
 80037e6:	6139      	str	r1, [r7, #16]
 80037e8:	4629      	mov	r1, r5
 80037ea:	eb63 0301 	sbc.w	r3, r3, r1
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037fc:	4659      	mov	r1, fp
 80037fe:	018b      	lsls	r3, r1, #6
 8003800:	4651      	mov	r1, sl
 8003802:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003806:	4651      	mov	r1, sl
 8003808:	018a      	lsls	r2, r1, #6
 800380a:	4651      	mov	r1, sl
 800380c:	ebb2 0801 	subs.w	r8, r2, r1
 8003810:	4659      	mov	r1, fp
 8003812:	eb63 0901 	sbc.w	r9, r3, r1
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800382a:	4690      	mov	r8, r2
 800382c:	4699      	mov	r9, r3
 800382e:	4623      	mov	r3, r4
 8003830:	eb18 0303 	adds.w	r3, r8, r3
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	462b      	mov	r3, r5
 8003838:	eb49 0303 	adc.w	r3, r9, r3
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800384a:	4629      	mov	r1, r5
 800384c:	024b      	lsls	r3, r1, #9
 800384e:	4621      	mov	r1, r4
 8003850:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003854:	4621      	mov	r1, r4
 8003856:	024a      	lsls	r2, r1, #9
 8003858:	4610      	mov	r0, r2
 800385a:	4619      	mov	r1, r3
 800385c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800385e:	2200      	movs	r2, #0
 8003860:	62bb      	str	r3, [r7, #40]	; 0x28
 8003862:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003864:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003868:	f7fc fd12 	bl	8000290 <__aeabi_uldivmod>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4613      	mov	r3, r2
 8003872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003874:	e058      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003876:	4b38      	ldr	r3, [pc, #224]	; (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	099b      	lsrs	r3, r3, #6
 800387c:	2200      	movs	r2, #0
 800387e:	4618      	mov	r0, r3
 8003880:	4611      	mov	r1, r2
 8003882:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003886:	623b      	str	r3, [r7, #32]
 8003888:	2300      	movs	r3, #0
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
 800388c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003890:	4642      	mov	r2, r8
 8003892:	464b      	mov	r3, r9
 8003894:	f04f 0000 	mov.w	r0, #0
 8003898:	f04f 0100 	mov.w	r1, #0
 800389c:	0159      	lsls	r1, r3, #5
 800389e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038a2:	0150      	lsls	r0, r2, #5
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4641      	mov	r1, r8
 80038aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80038ae:	4649      	mov	r1, r9
 80038b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	f04f 0300 	mov.w	r3, #0
 80038bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038c8:	ebb2 040a 	subs.w	r4, r2, sl
 80038cc:	eb63 050b 	sbc.w	r5, r3, fp
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	00eb      	lsls	r3, r5, #3
 80038da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038de:	00e2      	lsls	r2, r4, #3
 80038e0:	4614      	mov	r4, r2
 80038e2:	461d      	mov	r5, r3
 80038e4:	4643      	mov	r3, r8
 80038e6:	18e3      	adds	r3, r4, r3
 80038e8:	603b      	str	r3, [r7, #0]
 80038ea:	464b      	mov	r3, r9
 80038ec:	eb45 0303 	adc.w	r3, r5, r3
 80038f0:	607b      	str	r3, [r7, #4]
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038fe:	4629      	mov	r1, r5
 8003900:	028b      	lsls	r3, r1, #10
 8003902:	4621      	mov	r1, r4
 8003904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003908:	4621      	mov	r1, r4
 800390a:	028a      	lsls	r2, r1, #10
 800390c:	4610      	mov	r0, r2
 800390e:	4619      	mov	r1, r3
 8003910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003912:	2200      	movs	r2, #0
 8003914:	61bb      	str	r3, [r7, #24]
 8003916:	61fa      	str	r2, [r7, #28]
 8003918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800391c:	f7fc fcb8 	bl	8000290 <__aeabi_uldivmod>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4613      	mov	r3, r2
 8003926:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003928:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <HAL_RCC_GetSysClockFreq+0x200>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	0c1b      	lsrs	r3, r3, #16
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	3301      	adds	r3, #1
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003938:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800393a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800393c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003940:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003942:	e002      	b.n	800394a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <HAL_RCC_GetSysClockFreq+0x204>)
 8003946:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800394a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800394c:	4618      	mov	r0, r3
 800394e:	3750      	adds	r7, #80	; 0x50
 8003950:	46bd      	mov	sp, r7
 8003952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003956:	bf00      	nop
 8003958:	40023800 	.word	0x40023800
 800395c:	00f42400 	.word	0x00f42400
 8003960:	007a1200 	.word	0x007a1200

08003964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <HAL_RCC_GetHCLKFreq+0x14>)
 800396a:	681b      	ldr	r3, [r3, #0]
}
 800396c:	4618      	mov	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000000 	.word	0x20000000

0800397c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003980:	f7ff fff0 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 8003984:	4602      	mov	r2, r0
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	0a9b      	lsrs	r3, r3, #10
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	4903      	ldr	r1, [pc, #12]	; (80039a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003992:	5ccb      	ldrb	r3, [r1, r3]
 8003994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003998:	4618      	mov	r0, r3
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40023800 	.word	0x40023800
 80039a0:	0801c170 	.word	0x0801c170

080039a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039a8:	f7ff ffdc 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	0b5b      	lsrs	r3, r3, #13
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	4903      	ldr	r1, [pc, #12]	; (80039c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ba:	5ccb      	ldrb	r3, [r1, r3]
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40023800 	.word	0x40023800
 80039c8:	0801c170 	.word	0x0801c170

080039cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	220f      	movs	r2, #15
 80039da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039dc:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <HAL_RCC_GetClockConfig+0x5c>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 0203 	and.w	r2, r3, #3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039e8:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <HAL_RCC_GetClockConfig+0x5c>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039f4:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <HAL_RCC_GetClockConfig+0x5c>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a00:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <HAL_RCC_GetClockConfig+0x5c>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	08db      	lsrs	r3, r3, #3
 8003a06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a0e:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <HAL_RCC_GetClockConfig+0x60>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 020f 	and.w	r2, r3, #15
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	601a      	str	r2, [r3, #0]
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	40023c00 	.word	0x40023c00

08003a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e041      	b.n	8003ac6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f839 	bl	8003ace <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	f000 f9c0 	bl	8003df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
	...

08003ae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d001      	beq.n	8003afc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e04e      	b.n	8003b9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a23      	ldr	r2, [pc, #140]	; (8003ba8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d022      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x80>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b26:	d01d      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x80>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1f      	ldr	r2, [pc, #124]	; (8003bac <HAL_TIM_Base_Start_IT+0xc8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d018      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x80>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1e      	ldr	r2, [pc, #120]	; (8003bb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d013      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x80>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1c      	ldr	r2, [pc, #112]	; (8003bb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00e      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x80>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1b      	ldr	r2, [pc, #108]	; (8003bb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d009      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x80>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a19      	ldr	r2, [pc, #100]	; (8003bbc <HAL_TIM_Base_Start_IT+0xd8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d004      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x80>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a18      	ldr	r2, [pc, #96]	; (8003bc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d111      	bne.n	8003b88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b06      	cmp	r3, #6
 8003b74:	d010      	beq.n	8003b98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0201 	orr.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b86:	e007      	b.n	8003b98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40010000 	.word	0x40010000
 8003bac:	40000400 	.word	0x40000400
 8003bb0:	40000800 	.word	0x40000800
 8003bb4:	40000c00 	.word	0x40000c00
 8003bb8:	40010400 	.word	0x40010400
 8003bbc:	40014000 	.word	0x40014000
 8003bc0:	40001800 	.word	0x40001800

08003bc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d020      	beq.n	8003c28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d01b      	beq.n	8003c28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0202 	mvn.w	r2, #2
 8003bf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f8d2 	bl	8003db8 <HAL_TIM_IC_CaptureCallback>
 8003c14:	e005      	b.n	8003c22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f8c4 	bl	8003da4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f8d5 	bl	8003dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d020      	beq.n	8003c74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01b      	beq.n	8003c74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f06f 0204 	mvn.w	r2, #4
 8003c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f8ac 	bl	8003db8 <HAL_TIM_IC_CaptureCallback>
 8003c60:	e005      	b.n	8003c6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f89e 	bl	8003da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f8af 	bl	8003dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d020      	beq.n	8003cc0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01b      	beq.n	8003cc0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0208 	mvn.w	r2, #8
 8003c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2204      	movs	r2, #4
 8003c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f886 	bl	8003db8 <HAL_TIM_IC_CaptureCallback>
 8003cac:	e005      	b.n	8003cba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f878 	bl	8003da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f889 	bl	8003dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d020      	beq.n	8003d0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d01b      	beq.n	8003d0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0210 	mvn.w	r2, #16
 8003cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f860 	bl	8003db8 <HAL_TIM_IC_CaptureCallback>
 8003cf8:	e005      	b.n	8003d06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f852 	bl	8003da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f863 	bl	8003dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00c      	beq.n	8003d30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d007      	beq.n	8003d30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f06f 0201 	mvn.w	r2, #1
 8003d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fc ff54 	bl	8000bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00c      	beq.n	8003d54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d007      	beq.n	8003d54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f906 	bl	8003f60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00c      	beq.n	8003d78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d007      	beq.n	8003d78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f834 	bl	8003de0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f003 0320 	and.w	r3, r3, #32
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00c      	beq.n	8003d9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d007      	beq.n	8003d9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0220 	mvn.w	r2, #32
 8003d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f8d8 	bl	8003f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d9c:	bf00      	nop
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a46      	ldr	r2, [pc, #280]	; (8003f20 <TIM_Base_SetConfig+0x12c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d013      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e12:	d00f      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a43      	ldr	r2, [pc, #268]	; (8003f24 <TIM_Base_SetConfig+0x130>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00b      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a42      	ldr	r2, [pc, #264]	; (8003f28 <TIM_Base_SetConfig+0x134>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d007      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a41      	ldr	r2, [pc, #260]	; (8003f2c <TIM_Base_SetConfig+0x138>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d003      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a40      	ldr	r2, [pc, #256]	; (8003f30 <TIM_Base_SetConfig+0x13c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d108      	bne.n	8003e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a35      	ldr	r2, [pc, #212]	; (8003f20 <TIM_Base_SetConfig+0x12c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d02b      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e54:	d027      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a32      	ldr	r2, [pc, #200]	; (8003f24 <TIM_Base_SetConfig+0x130>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d023      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a31      	ldr	r2, [pc, #196]	; (8003f28 <TIM_Base_SetConfig+0x134>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d01f      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a30      	ldr	r2, [pc, #192]	; (8003f2c <TIM_Base_SetConfig+0x138>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d01b      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a2f      	ldr	r2, [pc, #188]	; (8003f30 <TIM_Base_SetConfig+0x13c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d017      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a2e      	ldr	r2, [pc, #184]	; (8003f34 <TIM_Base_SetConfig+0x140>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a2d      	ldr	r2, [pc, #180]	; (8003f38 <TIM_Base_SetConfig+0x144>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00f      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a2c      	ldr	r2, [pc, #176]	; (8003f3c <TIM_Base_SetConfig+0x148>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00b      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a2b      	ldr	r2, [pc, #172]	; (8003f40 <TIM_Base_SetConfig+0x14c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d007      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a2a      	ldr	r2, [pc, #168]	; (8003f44 <TIM_Base_SetConfig+0x150>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d003      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a29      	ldr	r2, [pc, #164]	; (8003f48 <TIM_Base_SetConfig+0x154>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d108      	bne.n	8003eb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a10      	ldr	r2, [pc, #64]	; (8003f20 <TIM_Base_SetConfig+0x12c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d003      	beq.n	8003eec <TIM_Base_SetConfig+0xf8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <TIM_Base_SetConfig+0x13c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d103      	bne.n	8003ef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d105      	bne.n	8003f12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f023 0201 	bic.w	r2, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	611a      	str	r2, [r3, #16]
  }
}
 8003f12:	bf00      	nop
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40010000 	.word	0x40010000
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800
 8003f2c:	40000c00 	.word	0x40000c00
 8003f30:	40010400 	.word	0x40010400
 8003f34:	40014000 	.word	0x40014000
 8003f38:	40014400 	.word	0x40014400
 8003f3c:	40014800 	.word	0x40014800
 8003f40:	40001800 	.word	0x40001800
 8003f44:	40001c00 	.word	0x40001c00
 8003f48:	40002000 	.word	0x40002000

08003f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e042      	b.n	800400c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7fc fe60 	bl	8000c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2224      	movs	r2, #36	; 0x24
 8003fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f82b 	bl	8004014 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695a      	ldr	r2, [r3, #20]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004018:	b0c0      	sub	sp, #256	; 0x100
 800401a:	af00      	add	r7, sp, #0
 800401c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004030:	68d9      	ldr	r1, [r3, #12]
 8004032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	ea40 0301 	orr.w	r3, r0, r1
 800403c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800403e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	431a      	orrs	r2, r3
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	431a      	orrs	r2, r3
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800406c:	f021 010c 	bic.w	r1, r1, #12
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800407a:	430b      	orrs	r3, r1
 800407c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800407e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800408a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408e:	6999      	ldr	r1, [r3, #24]
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	ea40 0301 	orr.w	r3, r0, r1
 800409a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	4b8f      	ldr	r3, [pc, #572]	; (80042e0 <UART_SetConfig+0x2cc>)
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d005      	beq.n	80040b4 <UART_SetConfig+0xa0>
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4b8d      	ldr	r3, [pc, #564]	; (80042e4 <UART_SetConfig+0x2d0>)
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d104      	bne.n	80040be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040b4:	f7ff fc76 	bl	80039a4 <HAL_RCC_GetPCLK2Freq>
 80040b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040bc:	e003      	b.n	80040c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040be:	f7ff fc5d 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 80040c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d0:	f040 810c 	bne.w	80042ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040d8:	2200      	movs	r2, #0
 80040da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040e6:	4622      	mov	r2, r4
 80040e8:	462b      	mov	r3, r5
 80040ea:	1891      	adds	r1, r2, r2
 80040ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80040ee:	415b      	adcs	r3, r3
 80040f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040f6:	4621      	mov	r1, r4
 80040f8:	eb12 0801 	adds.w	r8, r2, r1
 80040fc:	4629      	mov	r1, r5
 80040fe:	eb43 0901 	adc.w	r9, r3, r1
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800410e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004112:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004116:	4690      	mov	r8, r2
 8004118:	4699      	mov	r9, r3
 800411a:	4623      	mov	r3, r4
 800411c:	eb18 0303 	adds.w	r3, r8, r3
 8004120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004124:	462b      	mov	r3, r5
 8004126:	eb49 0303 	adc.w	r3, r9, r3
 800412a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800412e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800413a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800413e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004142:	460b      	mov	r3, r1
 8004144:	18db      	adds	r3, r3, r3
 8004146:	653b      	str	r3, [r7, #80]	; 0x50
 8004148:	4613      	mov	r3, r2
 800414a:	eb42 0303 	adc.w	r3, r2, r3
 800414e:	657b      	str	r3, [r7, #84]	; 0x54
 8004150:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004154:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004158:	f7fc f89a 	bl	8000290 <__aeabi_uldivmod>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4b61      	ldr	r3, [pc, #388]	; (80042e8 <UART_SetConfig+0x2d4>)
 8004162:	fba3 2302 	umull	r2, r3, r3, r2
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	011c      	lsls	r4, r3, #4
 800416a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800416e:	2200      	movs	r2, #0
 8004170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004174:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004178:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800417c:	4642      	mov	r2, r8
 800417e:	464b      	mov	r3, r9
 8004180:	1891      	adds	r1, r2, r2
 8004182:	64b9      	str	r1, [r7, #72]	; 0x48
 8004184:	415b      	adcs	r3, r3
 8004186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004188:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800418c:	4641      	mov	r1, r8
 800418e:	eb12 0a01 	adds.w	sl, r2, r1
 8004192:	4649      	mov	r1, r9
 8004194:	eb43 0b01 	adc.w	fp, r3, r1
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041ac:	4692      	mov	sl, r2
 80041ae:	469b      	mov	fp, r3
 80041b0:	4643      	mov	r3, r8
 80041b2:	eb1a 0303 	adds.w	r3, sl, r3
 80041b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041ba:	464b      	mov	r3, r9
 80041bc:	eb4b 0303 	adc.w	r3, fp, r3
 80041c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041d8:	460b      	mov	r3, r1
 80041da:	18db      	adds	r3, r3, r3
 80041dc:	643b      	str	r3, [r7, #64]	; 0x40
 80041de:	4613      	mov	r3, r2
 80041e0:	eb42 0303 	adc.w	r3, r2, r3
 80041e4:	647b      	str	r3, [r7, #68]	; 0x44
 80041e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041ee:	f7fc f84f 	bl	8000290 <__aeabi_uldivmod>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4611      	mov	r1, r2
 80041f8:	4b3b      	ldr	r3, [pc, #236]	; (80042e8 <UART_SetConfig+0x2d4>)
 80041fa:	fba3 2301 	umull	r2, r3, r3, r1
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	2264      	movs	r2, #100	; 0x64
 8004202:	fb02 f303 	mul.w	r3, r2, r3
 8004206:	1acb      	subs	r3, r1, r3
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800420e:	4b36      	ldr	r3, [pc, #216]	; (80042e8 <UART_SetConfig+0x2d4>)
 8004210:	fba3 2302 	umull	r2, r3, r3, r2
 8004214:	095b      	lsrs	r3, r3, #5
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800421c:	441c      	add	r4, r3
 800421e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004222:	2200      	movs	r2, #0
 8004224:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004228:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800422c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004230:	4642      	mov	r2, r8
 8004232:	464b      	mov	r3, r9
 8004234:	1891      	adds	r1, r2, r2
 8004236:	63b9      	str	r1, [r7, #56]	; 0x38
 8004238:	415b      	adcs	r3, r3
 800423a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800423c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004240:	4641      	mov	r1, r8
 8004242:	1851      	adds	r1, r2, r1
 8004244:	6339      	str	r1, [r7, #48]	; 0x30
 8004246:	4649      	mov	r1, r9
 8004248:	414b      	adcs	r3, r1
 800424a:	637b      	str	r3, [r7, #52]	; 0x34
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004258:	4659      	mov	r1, fp
 800425a:	00cb      	lsls	r3, r1, #3
 800425c:	4651      	mov	r1, sl
 800425e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004262:	4651      	mov	r1, sl
 8004264:	00ca      	lsls	r2, r1, #3
 8004266:	4610      	mov	r0, r2
 8004268:	4619      	mov	r1, r3
 800426a:	4603      	mov	r3, r0
 800426c:	4642      	mov	r2, r8
 800426e:	189b      	adds	r3, r3, r2
 8004270:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004274:	464b      	mov	r3, r9
 8004276:	460a      	mov	r2, r1
 8004278:	eb42 0303 	adc.w	r3, r2, r3
 800427c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800428c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004290:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004294:	460b      	mov	r3, r1
 8004296:	18db      	adds	r3, r3, r3
 8004298:	62bb      	str	r3, [r7, #40]	; 0x28
 800429a:	4613      	mov	r3, r2
 800429c:	eb42 0303 	adc.w	r3, r2, r3
 80042a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042aa:	f7fb fff1 	bl	8000290 <__aeabi_uldivmod>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <UART_SetConfig+0x2d4>)
 80042b4:	fba3 1302 	umull	r1, r3, r3, r2
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	2164      	movs	r1, #100	; 0x64
 80042bc:	fb01 f303 	mul.w	r3, r1, r3
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	3332      	adds	r3, #50	; 0x32
 80042c6:	4a08      	ldr	r2, [pc, #32]	; (80042e8 <UART_SetConfig+0x2d4>)
 80042c8:	fba2 2303 	umull	r2, r3, r2, r3
 80042cc:	095b      	lsrs	r3, r3, #5
 80042ce:	f003 0207 	and.w	r2, r3, #7
 80042d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4422      	add	r2, r4
 80042da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042dc:	e106      	b.n	80044ec <UART_SetConfig+0x4d8>
 80042de:	bf00      	nop
 80042e0:	40011000 	.word	0x40011000
 80042e4:	40011400 	.word	0x40011400
 80042e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f0:	2200      	movs	r2, #0
 80042f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042fe:	4642      	mov	r2, r8
 8004300:	464b      	mov	r3, r9
 8004302:	1891      	adds	r1, r2, r2
 8004304:	6239      	str	r1, [r7, #32]
 8004306:	415b      	adcs	r3, r3
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
 800430a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800430e:	4641      	mov	r1, r8
 8004310:	1854      	adds	r4, r2, r1
 8004312:	4649      	mov	r1, r9
 8004314:	eb43 0501 	adc.w	r5, r3, r1
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	00eb      	lsls	r3, r5, #3
 8004322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004326:	00e2      	lsls	r2, r4, #3
 8004328:	4614      	mov	r4, r2
 800432a:	461d      	mov	r5, r3
 800432c:	4643      	mov	r3, r8
 800432e:	18e3      	adds	r3, r4, r3
 8004330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004334:	464b      	mov	r3, r9
 8004336:	eb45 0303 	adc.w	r3, r5, r3
 800433a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800433e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800434a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800435a:	4629      	mov	r1, r5
 800435c:	008b      	lsls	r3, r1, #2
 800435e:	4621      	mov	r1, r4
 8004360:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004364:	4621      	mov	r1, r4
 8004366:	008a      	lsls	r2, r1, #2
 8004368:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800436c:	f7fb ff90 	bl	8000290 <__aeabi_uldivmod>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4b60      	ldr	r3, [pc, #384]	; (80044f8 <UART_SetConfig+0x4e4>)
 8004376:	fba3 2302 	umull	r2, r3, r3, r2
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	011c      	lsls	r4, r3, #4
 800437e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004382:	2200      	movs	r2, #0
 8004384:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004388:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800438c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004390:	4642      	mov	r2, r8
 8004392:	464b      	mov	r3, r9
 8004394:	1891      	adds	r1, r2, r2
 8004396:	61b9      	str	r1, [r7, #24]
 8004398:	415b      	adcs	r3, r3
 800439a:	61fb      	str	r3, [r7, #28]
 800439c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a0:	4641      	mov	r1, r8
 80043a2:	1851      	adds	r1, r2, r1
 80043a4:	6139      	str	r1, [r7, #16]
 80043a6:	4649      	mov	r1, r9
 80043a8:	414b      	adcs	r3, r1
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043b8:	4659      	mov	r1, fp
 80043ba:	00cb      	lsls	r3, r1, #3
 80043bc:	4651      	mov	r1, sl
 80043be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043c2:	4651      	mov	r1, sl
 80043c4:	00ca      	lsls	r2, r1, #3
 80043c6:	4610      	mov	r0, r2
 80043c8:	4619      	mov	r1, r3
 80043ca:	4603      	mov	r3, r0
 80043cc:	4642      	mov	r2, r8
 80043ce:	189b      	adds	r3, r3, r2
 80043d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043d4:	464b      	mov	r3, r9
 80043d6:	460a      	mov	r2, r1
 80043d8:	eb42 0303 	adc.w	r3, r2, r3
 80043dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80043ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043f8:	4649      	mov	r1, r9
 80043fa:	008b      	lsls	r3, r1, #2
 80043fc:	4641      	mov	r1, r8
 80043fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004402:	4641      	mov	r1, r8
 8004404:	008a      	lsls	r2, r1, #2
 8004406:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800440a:	f7fb ff41 	bl	8000290 <__aeabi_uldivmod>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	4611      	mov	r1, r2
 8004414:	4b38      	ldr	r3, [pc, #224]	; (80044f8 <UART_SetConfig+0x4e4>)
 8004416:	fba3 2301 	umull	r2, r3, r3, r1
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	2264      	movs	r2, #100	; 0x64
 800441e:	fb02 f303 	mul.w	r3, r2, r3
 8004422:	1acb      	subs	r3, r1, r3
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	3332      	adds	r3, #50	; 0x32
 8004428:	4a33      	ldr	r2, [pc, #204]	; (80044f8 <UART_SetConfig+0x4e4>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004434:	441c      	add	r4, r3
 8004436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800443a:	2200      	movs	r2, #0
 800443c:	673b      	str	r3, [r7, #112]	; 0x70
 800443e:	677a      	str	r2, [r7, #116]	; 0x74
 8004440:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004444:	4642      	mov	r2, r8
 8004446:	464b      	mov	r3, r9
 8004448:	1891      	adds	r1, r2, r2
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	415b      	adcs	r3, r3
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004454:	4641      	mov	r1, r8
 8004456:	1851      	adds	r1, r2, r1
 8004458:	6039      	str	r1, [r7, #0]
 800445a:	4649      	mov	r1, r9
 800445c:	414b      	adcs	r3, r1
 800445e:	607b      	str	r3, [r7, #4]
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800446c:	4659      	mov	r1, fp
 800446e:	00cb      	lsls	r3, r1, #3
 8004470:	4651      	mov	r1, sl
 8004472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004476:	4651      	mov	r1, sl
 8004478:	00ca      	lsls	r2, r1, #3
 800447a:	4610      	mov	r0, r2
 800447c:	4619      	mov	r1, r3
 800447e:	4603      	mov	r3, r0
 8004480:	4642      	mov	r2, r8
 8004482:	189b      	adds	r3, r3, r2
 8004484:	66bb      	str	r3, [r7, #104]	; 0x68
 8004486:	464b      	mov	r3, r9
 8004488:	460a      	mov	r2, r1
 800448a:	eb42 0303 	adc.w	r3, r2, r3
 800448e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	663b      	str	r3, [r7, #96]	; 0x60
 800449a:	667a      	str	r2, [r7, #100]	; 0x64
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044a8:	4649      	mov	r1, r9
 80044aa:	008b      	lsls	r3, r1, #2
 80044ac:	4641      	mov	r1, r8
 80044ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044b2:	4641      	mov	r1, r8
 80044b4:	008a      	lsls	r2, r1, #2
 80044b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044ba:	f7fb fee9 	bl	8000290 <__aeabi_uldivmod>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4b0d      	ldr	r3, [pc, #52]	; (80044f8 <UART_SetConfig+0x4e4>)
 80044c4:	fba3 1302 	umull	r1, r3, r3, r2
 80044c8:	095b      	lsrs	r3, r3, #5
 80044ca:	2164      	movs	r1, #100	; 0x64
 80044cc:	fb01 f303 	mul.w	r3, r1, r3
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	3332      	adds	r3, #50	; 0x32
 80044d6:	4a08      	ldr	r2, [pc, #32]	; (80044f8 <UART_SetConfig+0x4e4>)
 80044d8:	fba2 2303 	umull	r2, r3, r2, r3
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	f003 020f 	and.w	r2, r3, #15
 80044e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4422      	add	r2, r4
 80044ea:	609a      	str	r2, [r3, #8]
}
 80044ec:	bf00      	nop
 80044ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044f2:	46bd      	mov	sp, r7
 80044f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f8:	51eb851f 	.word	0x51eb851f

080044fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044fc:	b084      	sub	sp, #16
 80044fe:	b580      	push	{r7, lr}
 8004500:	b084      	sub	sp, #16
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	f107 001c 	add.w	r0, r7, #28
 800450a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800450e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004512:	2b01      	cmp	r3, #1
 8004514:	d123      	bne.n	800455e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800452a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800453e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004542:	2b01      	cmp	r3, #1
 8004544:	d105      	bne.n	8004552 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 faa0 	bl	8004a98 <USB_CoreReset>
 8004558:	4603      	mov	r3, r0
 800455a:	73fb      	strb	r3, [r7, #15]
 800455c:	e01b      	b.n	8004596 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 fa94 	bl	8004a98 <USB_CoreReset>
 8004570:	4603      	mov	r3, r0
 8004572:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004574:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004578:	2b00      	cmp	r3, #0
 800457a:	d106      	bne.n	800458a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	639a      	str	r2, [r3, #56]	; 0x38
 8004588:	e005      	b.n	8004596 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004596:	7fbb      	ldrb	r3, [r7, #30]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d10b      	bne.n	80045b4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f043 0206 	orr.w	r2, r3, #6
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f043 0220 	orr.w	r2, r3, #32
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045c0:	b004      	add	sp, #16
 80045c2:	4770      	bx	lr

080045c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f023 0201 	bic.w	r2, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	460b      	mov	r3, r1
 80045f0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004602:	78fb      	ldrb	r3, [r7, #3]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d115      	bne.n	8004634 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004614:	200a      	movs	r0, #10
 8004616:	f7fc ff0b 	bl	8001430 <HAL_Delay>
      ms += 10U;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	330a      	adds	r3, #10
 800461e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fa2b 	bl	8004a7c <USB_GetMode>
 8004626:	4603      	mov	r3, r0
 8004628:	2b01      	cmp	r3, #1
 800462a:	d01e      	beq.n	800466a <USB_SetCurrentMode+0x84>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2bc7      	cmp	r3, #199	; 0xc7
 8004630:	d9f0      	bls.n	8004614 <USB_SetCurrentMode+0x2e>
 8004632:	e01a      	b.n	800466a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004634:	78fb      	ldrb	r3, [r7, #3]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d115      	bne.n	8004666 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004646:	200a      	movs	r0, #10
 8004648:	f7fc fef2 	bl	8001430 <HAL_Delay>
      ms += 10U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	330a      	adds	r3, #10
 8004650:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fa12 	bl	8004a7c <USB_GetMode>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d005      	beq.n	800466a <USB_SetCurrentMode+0x84>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2bc7      	cmp	r3, #199	; 0xc7
 8004662:	d9f0      	bls.n	8004646 <USB_SetCurrentMode+0x60>
 8004664:	e001      	b.n	800466a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e005      	b.n	8004676 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2bc8      	cmp	r3, #200	; 0xc8
 800466e:	d101      	bne.n	8004674 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004680:	b084      	sub	sp, #16
 8004682:	b580      	push	{r7, lr}
 8004684:	b086      	sub	sp, #24
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800468e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800469a:	2300      	movs	r3, #0
 800469c:	613b      	str	r3, [r7, #16]
 800469e:	e009      	b.n	80046b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	3340      	adds	r3, #64	; 0x40
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	2200      	movs	r2, #0
 80046ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	3301      	adds	r3, #1
 80046b2:	613b      	str	r3, [r7, #16]
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2b0e      	cmp	r3, #14
 80046b8:	d9f2      	bls.n	80046a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d11c      	bne.n	80046fc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046d0:	f043 0302 	orr.w	r3, r3, #2
 80046d4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	639a      	str	r2, [r3, #56]	; 0x38
 80046fa:	e00b      	b.n	8004714 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800471a:	461a      	mov	r2, r3
 800471c:	2300      	movs	r3, #0
 800471e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004720:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004724:	2b01      	cmp	r3, #1
 8004726:	d10d      	bne.n	8004744 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800472c:	2b00      	cmp	r3, #0
 800472e:	d104      	bne.n	800473a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004730:	2100      	movs	r1, #0
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f968 	bl	8004a08 <USB_SetDevSpeed>
 8004738:	e008      	b.n	800474c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800473a:	2101      	movs	r1, #1
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f963 	bl	8004a08 <USB_SetDevSpeed>
 8004742:	e003      	b.n	800474c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004744:	2103      	movs	r1, #3
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f95e 	bl	8004a08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800474c:	2110      	movs	r1, #16
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f8fa 	bl	8004948 <USB_FlushTxFifo>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f924 	bl	80049ac <USB_FlushRxFifo>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004774:	461a      	mov	r2, r3
 8004776:	2300      	movs	r3, #0
 8004778:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004780:	461a      	mov	r2, r3
 8004782:	2300      	movs	r3, #0
 8004784:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478c:	461a      	mov	r2, r3
 800478e:	2300      	movs	r3, #0
 8004790:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004792:	2300      	movs	r3, #0
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	e043      	b.n	8004820 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ae:	d118      	bne.n	80047e2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10a      	bne.n	80047cc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c2:	461a      	mov	r2, r3
 80047c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	e013      	b.n	80047f4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d8:	461a      	mov	r2, r3
 80047da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	e008      	b.n	80047f4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ee:	461a      	mov	r2, r3
 80047f0:	2300      	movs	r3, #0
 80047f2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004800:	461a      	mov	r2, r3
 8004802:	2300      	movs	r3, #0
 8004804:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004812:	461a      	mov	r2, r3
 8004814:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004818:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	3301      	adds	r3, #1
 800481e:	613b      	str	r3, [r7, #16]
 8004820:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004824:	461a      	mov	r2, r3
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	4293      	cmp	r3, r2
 800482a:	d3b5      	bcc.n	8004798 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800482c:	2300      	movs	r3, #0
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	e043      	b.n	80048ba <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004844:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004848:	d118      	bne.n	800487c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10a      	bne.n	8004866 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485c:	461a      	mov	r2, r3
 800485e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004862:	6013      	str	r3, [r2, #0]
 8004864:	e013      	b.n	800488e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4413      	add	r3, r2
 800486e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004872:	461a      	mov	r2, r3
 8004874:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	e008      	b.n	800488e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004888:	461a      	mov	r2, r3
 800488a:	2300      	movs	r3, #0
 800488c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489a:	461a      	mov	r2, r3
 800489c:	2300      	movs	r3, #0
 800489e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ac:	461a      	mov	r2, r3
 80048ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	3301      	adds	r3, #1
 80048b8:	613b      	str	r3, [r7, #16]
 80048ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80048be:	461a      	mov	r2, r3
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d3b5      	bcc.n	8004832 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048d8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80048e6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80048e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d105      	bne.n	80048fc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	f043 0210 	orr.w	r2, r3, #16
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	699a      	ldr	r2, [r3, #24]
 8004900:	4b10      	ldr	r3, [pc, #64]	; (8004944 <USB_DevInit+0x2c4>)
 8004902:	4313      	orrs	r3, r2
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004908:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	f043 0208 	orr.w	r2, r3, #8
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800491c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004920:	2b01      	cmp	r3, #1
 8004922:	d107      	bne.n	8004934 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800492c:	f043 0304 	orr.w	r3, r3, #4
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004934:	7dfb      	ldrb	r3, [r7, #23]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004940:	b004      	add	sp, #16
 8004942:	4770      	bx	lr
 8004944:	803c3800 	.word	0x803c3800

08004948 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3301      	adds	r3, #1
 800495a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004962:	d901      	bls.n	8004968 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e01b      	b.n	80049a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	daf2      	bge.n	8004956 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	019b      	lsls	r3, r3, #6
 8004978:	f043 0220 	orr.w	r2, r3, #32
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	3301      	adds	r3, #1
 8004984:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800498c:	d901      	bls.n	8004992 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e006      	b.n	80049a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b20      	cmp	r3, #32
 800499c:	d0f0      	beq.n	8004980 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	3301      	adds	r3, #1
 80049bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80049c4:	d901      	bls.n	80049ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e018      	b.n	80049fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	daf2      	bge.n	80049b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2210      	movs	r2, #16
 80049da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3301      	adds	r3, #1
 80049e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80049e8:	d901      	bls.n	80049ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e006      	b.n	80049fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	f003 0310 	and.w	r3, r3, #16
 80049f6:	2b10      	cmp	r3, #16
 80049f8:	d0f0      	beq.n	80049dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	68f9      	ldr	r1, [r7, #12]
 8004a24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b085      	sub	sp, #20
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a54:	f023 0303 	bic.w	r3, r3, #3
 8004a58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a68:	f043 0302 	orr.w	r3, r3, #2
 8004a6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	f003 0301 	and.w	r3, r3, #1
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004ab0:	d901      	bls.n	8004ab6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e01b      	b.n	8004aee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	daf2      	bge.n	8004aa4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f043 0201 	orr.w	r2, r3, #1
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004ada:	d901      	bls.n	8004ae0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e006      	b.n	8004aee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d0f0      	beq.n	8004ace <USB_CoreReset+0x36>

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004b02:	4b92      	ldr	r3, [pc, #584]	; (8004d4c <MX_LWIP_Init+0x250>)
 8004b04:	22c0      	movs	r2, #192	; 0xc0
 8004b06:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004b08:	4b90      	ldr	r3, [pc, #576]	; (8004d4c <MX_LWIP_Init+0x250>)
 8004b0a:	22a8      	movs	r2, #168	; 0xa8
 8004b0c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8004b0e:	4b8f      	ldr	r3, [pc, #572]	; (8004d4c <MX_LWIP_Init+0x250>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8004b14:	4b8d      	ldr	r3, [pc, #564]	; (8004d4c <MX_LWIP_Init+0x250>)
 8004b16:	2264      	movs	r2, #100	; 0x64
 8004b18:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004b1a:	4b8d      	ldr	r3, [pc, #564]	; (8004d50 <MX_LWIP_Init+0x254>)
 8004b1c:	22ff      	movs	r2, #255	; 0xff
 8004b1e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004b20:	4b8b      	ldr	r3, [pc, #556]	; (8004d50 <MX_LWIP_Init+0x254>)
 8004b22:	22ff      	movs	r2, #255	; 0xff
 8004b24:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004b26:	4b8a      	ldr	r3, [pc, #552]	; (8004d50 <MX_LWIP_Init+0x254>)
 8004b28:	22ff      	movs	r2, #255	; 0xff
 8004b2a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004b2c:	4b88      	ldr	r3, [pc, #544]	; (8004d50 <MX_LWIP_Init+0x254>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004b32:	4b88      	ldr	r3, [pc, #544]	; (8004d54 <MX_LWIP_Init+0x258>)
 8004b34:	22c0      	movs	r2, #192	; 0xc0
 8004b36:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004b38:	4b86      	ldr	r3, [pc, #536]	; (8004d54 <MX_LWIP_Init+0x258>)
 8004b3a:	22a8      	movs	r2, #168	; 0xa8
 8004b3c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004b3e:	4b85      	ldr	r3, [pc, #532]	; (8004d54 <MX_LWIP_Init+0x258>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004b44:	4b83      	ldr	r3, [pc, #524]	; (8004d54 <MX_LWIP_Init+0x258>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	f007 f939 	bl	800bdc4 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004b52:	4b7e      	ldr	r3, [pc, #504]	; (8004d4c <MX_LWIP_Init+0x250>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	061a      	lsls	r2, r3, #24
 8004b58:	4b7c      	ldr	r3, [pc, #496]	; (8004d4c <MX_LWIP_Init+0x250>)
 8004b5a:	785b      	ldrb	r3, [r3, #1]
 8004b5c:	041b      	lsls	r3, r3, #16
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	4b7a      	ldr	r3, [pc, #488]	; (8004d4c <MX_LWIP_Init+0x250>)
 8004b62:	789b      	ldrb	r3, [r3, #2]
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	4313      	orrs	r3, r2
 8004b68:	4a78      	ldr	r2, [pc, #480]	; (8004d4c <MX_LWIP_Init+0x250>)
 8004b6a:	78d2      	ldrb	r2, [r2, #3]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	061a      	lsls	r2, r3, #24
 8004b70:	4b76      	ldr	r3, [pc, #472]	; (8004d4c <MX_LWIP_Init+0x250>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	0619      	lsls	r1, r3, #24
 8004b76:	4b75      	ldr	r3, [pc, #468]	; (8004d4c <MX_LWIP_Init+0x250>)
 8004b78:	785b      	ldrb	r3, [r3, #1]
 8004b7a:	041b      	lsls	r3, r3, #16
 8004b7c:	4319      	orrs	r1, r3
 8004b7e:	4b73      	ldr	r3, [pc, #460]	; (8004d4c <MX_LWIP_Init+0x250>)
 8004b80:	789b      	ldrb	r3, [r3, #2]
 8004b82:	021b      	lsls	r3, r3, #8
 8004b84:	430b      	orrs	r3, r1
 8004b86:	4971      	ldr	r1, [pc, #452]	; (8004d4c <MX_LWIP_Init+0x250>)
 8004b88:	78c9      	ldrb	r1, [r1, #3]
 8004b8a:	430b      	orrs	r3, r1
 8004b8c:	021b      	lsls	r3, r3, #8
 8004b8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b92:	431a      	orrs	r2, r3
 8004b94:	4b6d      	ldr	r3, [pc, #436]	; (8004d4c <MX_LWIP_Init+0x250>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	0619      	lsls	r1, r3, #24
 8004b9a:	4b6c      	ldr	r3, [pc, #432]	; (8004d4c <MX_LWIP_Init+0x250>)
 8004b9c:	785b      	ldrb	r3, [r3, #1]
 8004b9e:	041b      	lsls	r3, r3, #16
 8004ba0:	4319      	orrs	r1, r3
 8004ba2:	4b6a      	ldr	r3, [pc, #424]	; (8004d4c <MX_LWIP_Init+0x250>)
 8004ba4:	789b      	ldrb	r3, [r3, #2]
 8004ba6:	021b      	lsls	r3, r3, #8
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	4968      	ldr	r1, [pc, #416]	; (8004d4c <MX_LWIP_Init+0x250>)
 8004bac:	78c9      	ldrb	r1, [r1, #3]
 8004bae:	430b      	orrs	r3, r1
 8004bb0:	0a1b      	lsrs	r3, r3, #8
 8004bb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	4b64      	ldr	r3, [pc, #400]	; (8004d4c <MX_LWIP_Init+0x250>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	0619      	lsls	r1, r3, #24
 8004bbe:	4b63      	ldr	r3, [pc, #396]	; (8004d4c <MX_LWIP_Init+0x250>)
 8004bc0:	785b      	ldrb	r3, [r3, #1]
 8004bc2:	041b      	lsls	r3, r3, #16
 8004bc4:	4319      	orrs	r1, r3
 8004bc6:	4b61      	ldr	r3, [pc, #388]	; (8004d4c <MX_LWIP_Init+0x250>)
 8004bc8:	789b      	ldrb	r3, [r3, #2]
 8004bca:	021b      	lsls	r3, r3, #8
 8004bcc:	430b      	orrs	r3, r1
 8004bce:	495f      	ldr	r1, [pc, #380]	; (8004d4c <MX_LWIP_Init+0x250>)
 8004bd0:	78c9      	ldrb	r1, [r1, #3]
 8004bd2:	430b      	orrs	r3, r1
 8004bd4:	0e1b      	lsrs	r3, r3, #24
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	4a5f      	ldr	r2, [pc, #380]	; (8004d58 <MX_LWIP_Init+0x25c>)
 8004bda:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004bdc:	4b5c      	ldr	r3, [pc, #368]	; (8004d50 <MX_LWIP_Init+0x254>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	061a      	lsls	r2, r3, #24
 8004be2:	4b5b      	ldr	r3, [pc, #364]	; (8004d50 <MX_LWIP_Init+0x254>)
 8004be4:	785b      	ldrb	r3, [r3, #1]
 8004be6:	041b      	lsls	r3, r3, #16
 8004be8:	431a      	orrs	r2, r3
 8004bea:	4b59      	ldr	r3, [pc, #356]	; (8004d50 <MX_LWIP_Init+0x254>)
 8004bec:	789b      	ldrb	r3, [r3, #2]
 8004bee:	021b      	lsls	r3, r3, #8
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	4a57      	ldr	r2, [pc, #348]	; (8004d50 <MX_LWIP_Init+0x254>)
 8004bf4:	78d2      	ldrb	r2, [r2, #3]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	061a      	lsls	r2, r3, #24
 8004bfa:	4b55      	ldr	r3, [pc, #340]	; (8004d50 <MX_LWIP_Init+0x254>)
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	0619      	lsls	r1, r3, #24
 8004c00:	4b53      	ldr	r3, [pc, #332]	; (8004d50 <MX_LWIP_Init+0x254>)
 8004c02:	785b      	ldrb	r3, [r3, #1]
 8004c04:	041b      	lsls	r3, r3, #16
 8004c06:	4319      	orrs	r1, r3
 8004c08:	4b51      	ldr	r3, [pc, #324]	; (8004d50 <MX_LWIP_Init+0x254>)
 8004c0a:	789b      	ldrb	r3, [r3, #2]
 8004c0c:	021b      	lsls	r3, r3, #8
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	494f      	ldr	r1, [pc, #316]	; (8004d50 <MX_LWIP_Init+0x254>)
 8004c12:	78c9      	ldrb	r1, [r1, #3]
 8004c14:	430b      	orrs	r3, r1
 8004c16:	021b      	lsls	r3, r3, #8
 8004c18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	4b4c      	ldr	r3, [pc, #304]	; (8004d50 <MX_LWIP_Init+0x254>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	0619      	lsls	r1, r3, #24
 8004c24:	4b4a      	ldr	r3, [pc, #296]	; (8004d50 <MX_LWIP_Init+0x254>)
 8004c26:	785b      	ldrb	r3, [r3, #1]
 8004c28:	041b      	lsls	r3, r3, #16
 8004c2a:	4319      	orrs	r1, r3
 8004c2c:	4b48      	ldr	r3, [pc, #288]	; (8004d50 <MX_LWIP_Init+0x254>)
 8004c2e:	789b      	ldrb	r3, [r3, #2]
 8004c30:	021b      	lsls	r3, r3, #8
 8004c32:	430b      	orrs	r3, r1
 8004c34:	4946      	ldr	r1, [pc, #280]	; (8004d50 <MX_LWIP_Init+0x254>)
 8004c36:	78c9      	ldrb	r1, [r1, #3]
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	0a1b      	lsrs	r3, r3, #8
 8004c3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004c40:	431a      	orrs	r2, r3
 8004c42:	4b43      	ldr	r3, [pc, #268]	; (8004d50 <MX_LWIP_Init+0x254>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	0619      	lsls	r1, r3, #24
 8004c48:	4b41      	ldr	r3, [pc, #260]	; (8004d50 <MX_LWIP_Init+0x254>)
 8004c4a:	785b      	ldrb	r3, [r3, #1]
 8004c4c:	041b      	lsls	r3, r3, #16
 8004c4e:	4319      	orrs	r1, r3
 8004c50:	4b3f      	ldr	r3, [pc, #252]	; (8004d50 <MX_LWIP_Init+0x254>)
 8004c52:	789b      	ldrb	r3, [r3, #2]
 8004c54:	021b      	lsls	r3, r3, #8
 8004c56:	430b      	orrs	r3, r1
 8004c58:	493d      	ldr	r1, [pc, #244]	; (8004d50 <MX_LWIP_Init+0x254>)
 8004c5a:	78c9      	ldrb	r1, [r1, #3]
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	0e1b      	lsrs	r3, r3, #24
 8004c60:	4313      	orrs	r3, r2
 8004c62:	4a3e      	ldr	r2, [pc, #248]	; (8004d5c <MX_LWIP_Init+0x260>)
 8004c64:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004c66:	4b3b      	ldr	r3, [pc, #236]	; (8004d54 <MX_LWIP_Init+0x258>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	061a      	lsls	r2, r3, #24
 8004c6c:	4b39      	ldr	r3, [pc, #228]	; (8004d54 <MX_LWIP_Init+0x258>)
 8004c6e:	785b      	ldrb	r3, [r3, #1]
 8004c70:	041b      	lsls	r3, r3, #16
 8004c72:	431a      	orrs	r2, r3
 8004c74:	4b37      	ldr	r3, [pc, #220]	; (8004d54 <MX_LWIP_Init+0x258>)
 8004c76:	789b      	ldrb	r3, [r3, #2]
 8004c78:	021b      	lsls	r3, r3, #8
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	4a35      	ldr	r2, [pc, #212]	; (8004d54 <MX_LWIP_Init+0x258>)
 8004c7e:	78d2      	ldrb	r2, [r2, #3]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	061a      	lsls	r2, r3, #24
 8004c84:	4b33      	ldr	r3, [pc, #204]	; (8004d54 <MX_LWIP_Init+0x258>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	0619      	lsls	r1, r3, #24
 8004c8a:	4b32      	ldr	r3, [pc, #200]	; (8004d54 <MX_LWIP_Init+0x258>)
 8004c8c:	785b      	ldrb	r3, [r3, #1]
 8004c8e:	041b      	lsls	r3, r3, #16
 8004c90:	4319      	orrs	r1, r3
 8004c92:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <MX_LWIP_Init+0x258>)
 8004c94:	789b      	ldrb	r3, [r3, #2]
 8004c96:	021b      	lsls	r3, r3, #8
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	492e      	ldr	r1, [pc, #184]	; (8004d54 <MX_LWIP_Init+0x258>)
 8004c9c:	78c9      	ldrb	r1, [r1, #3]
 8004c9e:	430b      	orrs	r3, r1
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	4b2a      	ldr	r3, [pc, #168]	; (8004d54 <MX_LWIP_Init+0x258>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	0619      	lsls	r1, r3, #24
 8004cae:	4b29      	ldr	r3, [pc, #164]	; (8004d54 <MX_LWIP_Init+0x258>)
 8004cb0:	785b      	ldrb	r3, [r3, #1]
 8004cb2:	041b      	lsls	r3, r3, #16
 8004cb4:	4319      	orrs	r1, r3
 8004cb6:	4b27      	ldr	r3, [pc, #156]	; (8004d54 <MX_LWIP_Init+0x258>)
 8004cb8:	789b      	ldrb	r3, [r3, #2]
 8004cba:	021b      	lsls	r3, r3, #8
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	4925      	ldr	r1, [pc, #148]	; (8004d54 <MX_LWIP_Init+0x258>)
 8004cc0:	78c9      	ldrb	r1, [r1, #3]
 8004cc2:	430b      	orrs	r3, r1
 8004cc4:	0a1b      	lsrs	r3, r3, #8
 8004cc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	4b21      	ldr	r3, [pc, #132]	; (8004d54 <MX_LWIP_Init+0x258>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	0619      	lsls	r1, r3, #24
 8004cd2:	4b20      	ldr	r3, [pc, #128]	; (8004d54 <MX_LWIP_Init+0x258>)
 8004cd4:	785b      	ldrb	r3, [r3, #1]
 8004cd6:	041b      	lsls	r3, r3, #16
 8004cd8:	4319      	orrs	r1, r3
 8004cda:	4b1e      	ldr	r3, [pc, #120]	; (8004d54 <MX_LWIP_Init+0x258>)
 8004cdc:	789b      	ldrb	r3, [r3, #2]
 8004cde:	021b      	lsls	r3, r3, #8
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	491c      	ldr	r1, [pc, #112]	; (8004d54 <MX_LWIP_Init+0x258>)
 8004ce4:	78c9      	ldrb	r1, [r1, #3]
 8004ce6:	430b      	orrs	r3, r1
 8004ce8:	0e1b      	lsrs	r3, r3, #24
 8004cea:	4313      	orrs	r3, r2
 8004cec:	4a1c      	ldr	r2, [pc, #112]	; (8004d60 <MX_LWIP_Init+0x264>)
 8004cee:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004cf0:	4b1c      	ldr	r3, [pc, #112]	; (8004d64 <MX_LWIP_Init+0x268>)
 8004cf2:	9302      	str	r3, [sp, #8]
 8004cf4:	4b1c      	ldr	r3, [pc, #112]	; (8004d68 <MX_LWIP_Init+0x26c>)
 8004cf6:	9301      	str	r3, [sp, #4]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	4b18      	ldr	r3, [pc, #96]	; (8004d60 <MX_LWIP_Init+0x264>)
 8004cfe:	4a17      	ldr	r2, [pc, #92]	; (8004d5c <MX_LWIP_Init+0x260>)
 8004d00:	4915      	ldr	r1, [pc, #84]	; (8004d58 <MX_LWIP_Init+0x25c>)
 8004d02:	481a      	ldr	r0, [pc, #104]	; (8004d6c <MX_LWIP_Init+0x270>)
 8004d04:	f007 fe28 	bl	800c958 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004d08:	4818      	ldr	r0, [pc, #96]	; (8004d6c <MX_LWIP_Init+0x270>)
 8004d0a:	f007 ffd7 	bl	800ccbc <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8004d0e:	4817      	ldr	r0, [pc, #92]	; (8004d6c <MX_LWIP_Init+0x270>)
 8004d10:	f007 ffe4 	bl	800ccdc <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004d14:	4916      	ldr	r1, [pc, #88]	; (8004d70 <MX_LWIP_Init+0x274>)
 8004d16:	4815      	ldr	r0, [pc, #84]	; (8004d6c <MX_LWIP_Init+0x270>)
 8004d18:	f008 f8e2 	bl	800cee0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004d1c:	2224      	movs	r2, #36	; 0x24
 8004d1e:	2100      	movs	r1, #0
 8004d20:	4814      	ldr	r0, [pc, #80]	; (8004d74 <MX_LWIP_Init+0x278>)
 8004d22:	f012 fe52 	bl	80179ca <memset>
  attributes.name = "EthLink";
 8004d26:	4b13      	ldr	r3, [pc, #76]	; (8004d74 <MX_LWIP_Init+0x278>)
 8004d28:	4a13      	ldr	r2, [pc, #76]	; (8004d78 <MX_LWIP_Init+0x27c>)
 8004d2a:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004d2c:	4b11      	ldr	r3, [pc, #68]	; (8004d74 <MX_LWIP_Init+0x278>)
 8004d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d32:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004d34:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <MX_LWIP_Init+0x278>)
 8004d36:	2210      	movs	r2, #16
 8004d38:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8004d3a:	4a0e      	ldr	r2, [pc, #56]	; (8004d74 <MX_LWIP_Init+0x278>)
 8004d3c:	490b      	ldr	r1, [pc, #44]	; (8004d6c <MX_LWIP_Init+0x270>)
 8004d3e:	480f      	ldr	r0, [pc, #60]	; (8004d7c <MX_LWIP_Init+0x280>)
 8004d40:	f000 fd95 	bl	800586e <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004d44:	bf00      	nop
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	200008e4 	.word	0x200008e4
 8004d50:	200008e8 	.word	0x200008e8
 8004d54:	200008ec 	.word	0x200008ec
 8004d58:	200008d8 	.word	0x200008d8
 8004d5c:	200008dc 	.word	0x200008dc
 8004d60:	200008e0 	.word	0x200008e0
 8004d64:	0800bcd5 	.word	0x0800bcd5
 8004d68:	08005231 	.word	0x08005231
 8004d6c:	200008a4 	.word	0x200008a4
 8004d70:	08004d81 	.word	0x08004d81
 8004d74:	200008f0 	.word	0x200008f0
 8004d78:	08018ba8 	.word	0x08018ba8
 8004d7c:	08005515 	.word	0x08005515

08004d80 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004d9c:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <HAL_ETH_RxCpltCallback+0x1c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 fffb 	bl	8005d9c <osSemaphoreRelease>
}
 8004da6:	bf00      	nop
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	200053e0 	.word	0x200053e0

08004db4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004dbc:	4b04      	ldr	r3, [pc, #16]	; (8004dd0 <HAL_ETH_TxCpltCallback+0x1c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 ffeb 	bl	8005d9c <osSemaphoreRelease>
}
 8004dc6:	bf00      	nop
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	200053e4 	.word	0x200053e4

08004dd4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7fd fa77 	bl	80022d0 <HAL_ETH_GetDMAError>
 8004de2:	4603      	mov	r3, r0
 8004de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de8:	2b80      	cmp	r3, #128	; 0x80
 8004dea:	d104      	bne.n	8004df6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004dec:	4b04      	ldr	r3, [pc, #16]	; (8004e00 <HAL_ETH_ErrorCallback+0x2c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 ffd3 	bl	8005d9c <osSemaphoreRelease>
  }
}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	200053e0 	.word	0x200053e0

08004e04 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b0aa      	sub	sp, #168	; 0xa8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8004e12:	2300      	movs	r3, #0
 8004e14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8004e1e:	f107 0310 	add.w	r3, r7, #16
 8004e22:	2264      	movs	r2, #100	; 0x64
 8004e24:	2100      	movs	r1, #0
 8004e26:	4618      	mov	r0, r3
 8004e28:	f012 fdcf 	bl	80179ca <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004e2c:	4b85      	ldr	r3, [pc, #532]	; (8005044 <low_level_init+0x240>)
 8004e2e:	4a86      	ldr	r2, [pc, #536]	; (8005048 <low_level_init+0x244>)
 8004e30:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004e32:	2300      	movs	r3, #0
 8004e34:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004e36:	2380      	movs	r3, #128	; 0x80
 8004e38:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004e3a:	23e1      	movs	r3, #225	; 0xe1
 8004e3c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004e42:	2300      	movs	r3, #0
 8004e44:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004e46:	2300      	movs	r3, #0
 8004e48:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004e4a:	4a7e      	ldr	r2, [pc, #504]	; (8005044 <low_level_init+0x240>)
 8004e4c:	f107 0308 	add.w	r3, r7, #8
 8004e50:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004e52:	4b7c      	ldr	r3, [pc, #496]	; (8005044 <low_level_init+0x240>)
 8004e54:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004e58:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004e5a:	4b7a      	ldr	r3, [pc, #488]	; (8005044 <low_level_init+0x240>)
 8004e5c:	4a7b      	ldr	r2, [pc, #492]	; (800504c <low_level_init+0x248>)
 8004e5e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004e60:	4b78      	ldr	r3, [pc, #480]	; (8005044 <low_level_init+0x240>)
 8004e62:	4a7b      	ldr	r2, [pc, #492]	; (8005050 <low_level_init+0x24c>)
 8004e64:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004e66:	4b77      	ldr	r3, [pc, #476]	; (8005044 <low_level_init+0x240>)
 8004e68:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004e6c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004e6e:	4875      	ldr	r0, [pc, #468]	; (8005044 <low_level_init+0x240>)
 8004e70:	f7fc fbe4 	bl	800163c <HAL_ETH_Init>
 8004e74:	4603      	mov	r3, r0
 8004e76:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004e7a:	2238      	movs	r2, #56	; 0x38
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	4875      	ldr	r0, [pc, #468]	; (8005054 <low_level_init+0x250>)
 8004e80:	f012 fda3 	bl	80179ca <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004e84:	4b73      	ldr	r3, [pc, #460]	; (8005054 <low_level_init+0x250>)
 8004e86:	2221      	movs	r2, #33	; 0x21
 8004e88:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004e8a:	4b72      	ldr	r3, [pc, #456]	; (8005054 <low_level_init+0x250>)
 8004e8c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8004e90:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004e92:	4b70      	ldr	r3, [pc, #448]	; (8005054 <low_level_init+0x250>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004e98:	486f      	ldr	r0, [pc, #444]	; (8005058 <low_level_init+0x254>)
 8004e9a:	f007 fc17 	bl	800c6cc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2206      	movs	r2, #6
 8004ea2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004ea6:	4b67      	ldr	r3, [pc, #412]	; (8005044 <low_level_init+0x240>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	781a      	ldrb	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004eb2:	4b64      	ldr	r3, [pc, #400]	; (8005044 <low_level_init+0x240>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	785a      	ldrb	r2, [r3, #1]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004ebe:	4b61      	ldr	r3, [pc, #388]	; (8005044 <low_level_init+0x240>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	789a      	ldrb	r2, [r3, #2]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004eca:	4b5e      	ldr	r3, [pc, #376]	; (8005044 <low_level_init+0x240>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	78da      	ldrb	r2, [r3, #3]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004ed6:	4b5b      	ldr	r3, [pc, #364]	; (8005044 <low_level_init+0x240>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	791a      	ldrb	r2, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004ee2:	4b58      	ldr	r3, [pc, #352]	; (8005044 <low_level_init+0x240>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	795a      	ldrb	r2, [r3, #5]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004ef4:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004efc:	f043 030a 	orr.w	r3, r3, #10
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8004f08:	2200      	movs	r2, #0
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	f000 fe69 	bl	8005be4 <osSemaphoreNew>
 8004f12:	4603      	mov	r3, r0
 8004f14:	4a51      	ldr	r2, [pc, #324]	; (800505c <low_level_init+0x258>)
 8004f16:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8004f18:	2200      	movs	r2, #0
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	2001      	movs	r0, #1
 8004f1e:	f000 fe61 	bl	8005be4 <osSemaphoreNew>
 8004f22:	4603      	mov	r3, r0
 8004f24:	4a4e      	ldr	r2, [pc, #312]	; (8005060 <low_level_init+0x25c>)
 8004f26:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004f28:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004f2c:	2224      	movs	r2, #36	; 0x24
 8004f2e:	2100      	movs	r1, #0
 8004f30:	4618      	mov	r0, r3
 8004f32:	f012 fd4a 	bl	80179ca <memset>
  attributes.name = "EthIf";
 8004f36:	4b4b      	ldr	r3, [pc, #300]	; (8005064 <low_level_init+0x260>)
 8004f38:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004f3a:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8004f3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8004f42:	2330      	movs	r3, #48	; 0x30
 8004f44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004f48:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	6879      	ldr	r1, [r7, #4]
 8004f50:	4845      	ldr	r0, [pc, #276]	; (8005068 <low_level_init+0x264>)
 8004f52:	f000 fc8c 	bl	800586e <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004f56:	4945      	ldr	r1, [pc, #276]	; (800506c <low_level_init+0x268>)
 8004f58:	4845      	ldr	r0, [pc, #276]	; (8005070 <low_level_init+0x26c>)
 8004f5a:	f7fc f8c6 	bl	80010ea <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004f5e:	4844      	ldr	r0, [pc, #272]	; (8005070 <low_level_init+0x26c>)
 8004f60:	f7fc f8f5 	bl	800114e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004f64:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d164      	bne.n	8005036 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004f6c:	4840      	ldr	r0, [pc, #256]	; (8005070 <low_level_init+0x26c>)
 8004f6e:	f7fc f996 	bl	800129e <LAN8742_GetLinkState>
 8004f72:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004f76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	dc06      	bgt.n	8004f8c <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f007 ff7e 	bl	800ce80 <netif_set_link_down>
      netif_set_down(netif);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f007 ff15 	bl	800cdb4 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004f8a:	e056      	b.n	800503a <low_level_init+0x236>
      switch (PHYLinkState)
 8004f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f90:	3b02      	subs	r3, #2
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d82a      	bhi.n	8004fec <low_level_init+0x1e8>
 8004f96:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <low_level_init+0x198>)
 8004f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9c:	08004fad 	.word	0x08004fad
 8004fa0:	08004fbf 	.word	0x08004fbf
 8004fa4:	08004fcf 	.word	0x08004fcf
 8004fa8:	08004fdf 	.word	0x08004fdf
        duplex = ETH_FULLDUPLEX_MODE;
 8004fac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8004fb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004fb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004fbc:	e01f      	b.n	8004ffe <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8004fc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004fc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004fcc:	e017      	b.n	8004ffe <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004fce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004fd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004fdc:	e00f      	b.n	8004ffe <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004fea:	e008      	b.n	8004ffe <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004fec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ff0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8004ff4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ff8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004ffc:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004ffe:	f107 0310 	add.w	r3, r7, #16
 8005002:	4619      	mov	r1, r3
 8005004:	480f      	ldr	r0, [pc, #60]	; (8005044 <low_level_init+0x240>)
 8005006:	f7fd f809 	bl	800201c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800500a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800500e:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8005010:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005016:	f107 0310 	add.w	r3, r7, #16
 800501a:	4619      	mov	r1, r3
 800501c:	4809      	ldr	r0, [pc, #36]	; (8005044 <low_level_init+0x240>)
 800501e:	f7fd f8e7 	bl	80021f0 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8005022:	4808      	ldr	r0, [pc, #32]	; (8005044 <low_level_init+0x240>)
 8005024:	f7fc fb88 	bl	8001738 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f007 fe57 	bl	800ccdc <netif_set_up>
    netif_set_link_up(netif);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f007 fef2 	bl	800ce18 <netif_set_link_up>
}
 8005034:	e001      	b.n	800503a <low_level_init+0x236>
    Error_Handler();
 8005036:	f7fb fde1 	bl	8000bfc <Error_Handler>
}
 800503a:	bf00      	nop
 800503c:	37a8      	adds	r7, #168	; 0xa8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	200053e8 	.word	0x200053e8
 8005048:	40028000 	.word	0x40028000
 800504c:	20005340 	.word	0x20005340
 8005050:	200052a0 	.word	0x200052a0
 8005054:	20005498 	.word	0x20005498
 8005058:	0801c178 	.word	0x0801c178
 800505c:	200053e0 	.word	0x200053e0
 8005060:	200053e4 	.word	0x200053e4
 8005064:	08018bb0 	.word	0x08018bb0
 8005068:	080051dd 	.word	0x080051dd
 800506c:	2000000c 	.word	0x2000000c
 8005070:	200054d0 	.word	0x200054d0

08005074 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b092      	sub	sp, #72	; 0x48
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005082:	2300      	movs	r3, #0
 8005084:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800508c:	f107 030c 	add.w	r3, r7, #12
 8005090:	2230      	movs	r2, #48	; 0x30
 8005092:	2100      	movs	r1, #0
 8005094:	4618      	mov	r0, r3
 8005096:	f012 fc98 	bl	80179ca <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800509a:	f107 030c 	add.w	r3, r7, #12
 800509e:	2230      	movs	r2, #48	; 0x30
 80050a0:	2100      	movs	r1, #0
 80050a2:	4618      	mov	r0, r3
 80050a4:	f012 fc91 	bl	80179ca <memset>

  for(q = p; q != NULL; q = q->next)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	643b      	str	r3, [r7, #64]	; 0x40
 80050ac:	e045      	b.n	800513a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80050ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d902      	bls.n	80050ba <low_level_output+0x46>
      return ERR_IF;
 80050b4:	f06f 030b 	mvn.w	r3, #11
 80050b8:	e06c      	b.n	8005194 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 80050ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050bc:	6859      	ldr	r1, [r3, #4]
 80050be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050c0:	4613      	mov	r3, r2
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	3348      	adds	r3, #72	; 0x48
 80050ca:	443b      	add	r3, r7
 80050cc:	3b3c      	subs	r3, #60	; 0x3c
 80050ce:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80050d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050d2:	895b      	ldrh	r3, [r3, #10]
 80050d4:	4619      	mov	r1, r3
 80050d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050d8:	4613      	mov	r3, r2
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	4413      	add	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	3348      	adds	r3, #72	; 0x48
 80050e2:	443b      	add	r3, r7
 80050e4:	3b38      	subs	r3, #56	; 0x38
 80050e6:	6019      	str	r1, [r3, #0]

    if(i>0)
 80050e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d011      	beq.n	8005112 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80050ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050f0:	1e5a      	subs	r2, r3, #1
 80050f2:	f107 000c 	add.w	r0, r7, #12
 80050f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050f8:	460b      	mov	r3, r1
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	440b      	add	r3, r1
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	18c1      	adds	r1, r0, r3
 8005102:	4613      	mov	r3, r2
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	4413      	add	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	3348      	adds	r3, #72	; 0x48
 800510c:	443b      	add	r3, r7
 800510e:	3b34      	subs	r3, #52	; 0x34
 8005110:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d109      	bne.n	800512e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800511a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800511c:	4613      	mov	r3, r2
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	4413      	add	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	3348      	adds	r3, #72	; 0x48
 8005126:	443b      	add	r3, r7
 8005128:	3b34      	subs	r3, #52	; 0x34
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800512e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005130:	3301      	adds	r3, #1
 8005132:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	643b      	str	r3, [r7, #64]	; 0x40
 800513a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1b6      	bne.n	80050ae <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	891b      	ldrh	r3, [r3, #8]
 8005144:	461a      	mov	r2, r3
 8005146:	4b15      	ldr	r3, [pc, #84]	; (800519c <low_level_output+0x128>)
 8005148:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800514a:	4a14      	ldr	r2, [pc, #80]	; (800519c <low_level_output+0x128>)
 800514c:	f107 030c 	add.w	r3, r7, #12
 8005150:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005152:	4a12      	ldr	r2, [pc, #72]	; (800519c <low_level_output+0x128>)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005158:	6838      	ldr	r0, [r7, #0]
 800515a:	f008 fb15 	bl	800d788 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 800515e:	490f      	ldr	r1, [pc, #60]	; (800519c <low_level_output+0x128>)
 8005160:	480f      	ldr	r0, [pc, #60]	; (80051a0 <low_level_output+0x12c>)
 8005162:	f7fc fbf6 	bl	8001952 <HAL_ETH_Transmit_IT>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10e      	bne.n	800518a <low_level_output+0x116>
    while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800516c:	bf00      	nop
 800516e:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <low_level_output+0x130>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f04f 31ff 	mov.w	r1, #4294967295
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fdbe 	bl	8005cf8 <osSemaphoreAcquire>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1f5      	bne.n	800516e <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8005182:	4807      	ldr	r0, [pc, #28]	; (80051a0 <low_level_output+0x12c>)
 8005184:	f7fc fd84 	bl	8001c90 <HAL_ETH_ReleaseTxPacket>
 8005188:	e002      	b.n	8005190 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 800518a:	6838      	ldr	r0, [r7, #0]
 800518c:	f008 fa56 	bl	800d63c <pbuf_free>
  }

  return errval;
 8005190:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005194:	4618      	mov	r0, r3
 8005196:	3748      	adds	r7, #72	; 0x48
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	20005498 	.word	0x20005498
 80051a0:	200053e8 	.word	0x200053e8
 80051a4:	200053e4 	.word	0x200053e4

080051a8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80051b4:	4b07      	ldr	r3, [pc, #28]	; (80051d4 <low_level_input+0x2c>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d105      	bne.n	80051c8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80051bc:	f107 030c 	add.w	r3, r7, #12
 80051c0:	4619      	mov	r1, r3
 80051c2:	4805      	ldr	r0, [pc, #20]	; (80051d8 <low_level_input+0x30>)
 80051c4:	f7fc fc21 	bl	8001a0a <HAL_ETH_ReadData>
  }

  return p;
 80051c8:	68fb      	ldr	r3, [r7, #12]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	2000529c 	.word	0x2000529c
 80051d8:	200053e8 	.word	0x200053e8

080051dc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80051ec:	4b0f      	ldr	r3, [pc, #60]	; (800522c <ethernetif_input+0x50>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f04f 31ff 	mov.w	r1, #4294967295
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 fd7f 	bl	8005cf8 <osSemaphoreAcquire>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1f5      	bne.n	80051ec <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005200:	68b8      	ldr	r0, [r7, #8]
 8005202:	f7ff ffd1 	bl	80051a8 <low_level_input>
 8005206:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	68b9      	ldr	r1, [r7, #8]
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	4798      	blx	r3
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f008 fa0c 	bl	800d63c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1ea      	bne.n	8005200 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800522a:	e7df      	b.n	80051ec <ethernetif_input+0x10>
 800522c:	200053e0 	.word	0x200053e0

08005230 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <ethernetif_init+0x1c>
 800523e:	4b0e      	ldr	r3, [pc, #56]	; (8005278 <ethernetif_init+0x48>)
 8005240:	f240 12e7 	movw	r2, #487	; 0x1e7
 8005244:	490d      	ldr	r1, [pc, #52]	; (800527c <ethernetif_init+0x4c>)
 8005246:	480e      	ldr	r0, [pc, #56]	; (8005280 <ethernetif_init+0x50>)
 8005248:	f012 fb20 	bl	801788c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2273      	movs	r2, #115	; 0x73
 8005250:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2274      	movs	r2, #116	; 0x74
 8005258:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a09      	ldr	r2, [pc, #36]	; (8005284 <ethernetif_init+0x54>)
 8005260:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a08      	ldr	r2, [pc, #32]	; (8005288 <ethernetif_init+0x58>)
 8005266:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7ff fdcb 	bl	8004e04 <low_level_init>

  return ERR_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	08018bb8 	.word	0x08018bb8
 800527c:	08018bd4 	.word	0x08018bd4
 8005280:	08018be4 	.word	0x08018be4
 8005284:	0801562d 	.word	0x0801562d
 8005288:	08005075 	.word	0x08005075

0800528c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005298:	68f9      	ldr	r1, [r7, #12]
 800529a:	4809      	ldr	r0, [pc, #36]	; (80052c0 <pbuf_free_custom+0x34>)
 800529c:	f007 fb06 	bl	800c8ac <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80052a0:	4b08      	ldr	r3, [pc, #32]	; (80052c4 <pbuf_free_custom+0x38>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d107      	bne.n	80052b8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80052a8:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <pbuf_free_custom+0x38>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80052ae:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <pbuf_free_custom+0x3c>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fd72 	bl	8005d9c <osSemaphoreRelease>
  }
}
 80052b8:	bf00      	nop
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	0801c178 	.word	0x0801c178
 80052c4:	2000529c 	.word	0x2000529c
 80052c8:	200053e0 	.word	0x200053e0

080052cc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80052d0:	f7fc f8a2 	bl	8001418 <HAL_GetTick>
 80052d4:	4603      	mov	r3, r0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08e      	sub	sp, #56	; 0x38
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	605a      	str	r2, [r3, #4]
 80052ee:	609a      	str	r2, [r3, #8]
 80052f0:	60da      	str	r2, [r3, #12]
 80052f2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a59      	ldr	r2, [pc, #356]	; (8005460 <HAL_ETH_MspInit+0x184>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	f040 80ac 	bne.w	8005458 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005300:	2300      	movs	r3, #0
 8005302:	623b      	str	r3, [r7, #32]
 8005304:	4b57      	ldr	r3, [pc, #348]	; (8005464 <HAL_ETH_MspInit+0x188>)
 8005306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005308:	4a56      	ldr	r2, [pc, #344]	; (8005464 <HAL_ETH_MspInit+0x188>)
 800530a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800530e:	6313      	str	r3, [r2, #48]	; 0x30
 8005310:	4b54      	ldr	r3, [pc, #336]	; (8005464 <HAL_ETH_MspInit+0x188>)
 8005312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005318:	623b      	str	r3, [r7, #32]
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	2300      	movs	r3, #0
 800531e:	61fb      	str	r3, [r7, #28]
 8005320:	4b50      	ldr	r3, [pc, #320]	; (8005464 <HAL_ETH_MspInit+0x188>)
 8005322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005324:	4a4f      	ldr	r2, [pc, #316]	; (8005464 <HAL_ETH_MspInit+0x188>)
 8005326:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800532a:	6313      	str	r3, [r2, #48]	; 0x30
 800532c:	4b4d      	ldr	r3, [pc, #308]	; (8005464 <HAL_ETH_MspInit+0x188>)
 800532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005330:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005334:	61fb      	str	r3, [r7, #28]
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	2300      	movs	r3, #0
 800533a:	61bb      	str	r3, [r7, #24]
 800533c:	4b49      	ldr	r3, [pc, #292]	; (8005464 <HAL_ETH_MspInit+0x188>)
 800533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005340:	4a48      	ldr	r2, [pc, #288]	; (8005464 <HAL_ETH_MspInit+0x188>)
 8005342:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005346:	6313      	str	r3, [r2, #48]	; 0x30
 8005348:	4b46      	ldr	r3, [pc, #280]	; (8005464 <HAL_ETH_MspInit+0x188>)
 800534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005350:	61bb      	str	r3, [r7, #24]
 8005352:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005354:	2300      	movs	r3, #0
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	4b42      	ldr	r3, [pc, #264]	; (8005464 <HAL_ETH_MspInit+0x188>)
 800535a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535c:	4a41      	ldr	r2, [pc, #260]	; (8005464 <HAL_ETH_MspInit+0x188>)
 800535e:	f043 0304 	orr.w	r3, r3, #4
 8005362:	6313      	str	r3, [r2, #48]	; 0x30
 8005364:	4b3f      	ldr	r3, [pc, #252]	; (8005464 <HAL_ETH_MspInit+0x188>)
 8005366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005370:	2300      	movs	r3, #0
 8005372:	613b      	str	r3, [r7, #16]
 8005374:	4b3b      	ldr	r3, [pc, #236]	; (8005464 <HAL_ETH_MspInit+0x188>)
 8005376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005378:	4a3a      	ldr	r2, [pc, #232]	; (8005464 <HAL_ETH_MspInit+0x188>)
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	6313      	str	r3, [r2, #48]	; 0x30
 8005380:	4b38      	ldr	r3, [pc, #224]	; (8005464 <HAL_ETH_MspInit+0x188>)
 8005382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	4b34      	ldr	r3, [pc, #208]	; (8005464 <HAL_ETH_MspInit+0x188>)
 8005392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005394:	4a33      	ldr	r2, [pc, #204]	; (8005464 <HAL_ETH_MspInit+0x188>)
 8005396:	f043 0302 	orr.w	r3, r3, #2
 800539a:	6313      	str	r3, [r2, #48]	; 0x30
 800539c:	4b31      	ldr	r3, [pc, #196]	; (8005464 <HAL_ETH_MspInit+0x188>)
 800539e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	60fb      	str	r3, [r7, #12]
 80053a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80053a8:	2300      	movs	r3, #0
 80053aa:	60bb      	str	r3, [r7, #8]
 80053ac:	4b2d      	ldr	r3, [pc, #180]	; (8005464 <HAL_ETH_MspInit+0x188>)
 80053ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b0:	4a2c      	ldr	r2, [pc, #176]	; (8005464 <HAL_ETH_MspInit+0x188>)
 80053b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053b6:	6313      	str	r3, [r2, #48]	; 0x30
 80053b8:	4b2a      	ldr	r3, [pc, #168]	; (8005464 <HAL_ETH_MspInit+0x188>)
 80053ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c0:	60bb      	str	r3, [r7, #8]
 80053c2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80053c4:	2332      	movs	r3, #50	; 0x32
 80053c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053c8:	2302      	movs	r3, #2
 80053ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053cc:	2300      	movs	r3, #0
 80053ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053d0:	2303      	movs	r3, #3
 80053d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053d4:	230b      	movs	r3, #11
 80053d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053dc:	4619      	mov	r1, r3
 80053de:	4822      	ldr	r0, [pc, #136]	; (8005468 <HAL_ETH_MspInit+0x18c>)
 80053e0:	f7fd fb88 	bl	8002af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80053e4:	2386      	movs	r3, #134	; 0x86
 80053e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053e8:	2302      	movs	r3, #2
 80053ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ec:	2300      	movs	r3, #0
 80053ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053f0:	2303      	movs	r3, #3
 80053f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053f4:	230b      	movs	r3, #11
 80053f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053fc:	4619      	mov	r1, r3
 80053fe:	481b      	ldr	r0, [pc, #108]	; (800546c <HAL_ETH_MspInit+0x190>)
 8005400:	f7fd fb78 	bl	8002af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800540a:	2302      	movs	r3, #2
 800540c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800540e:	2300      	movs	r3, #0
 8005410:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005412:	2303      	movs	r3, #3
 8005414:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005416:	230b      	movs	r3, #11
 8005418:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800541a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800541e:	4619      	mov	r1, r3
 8005420:	4813      	ldr	r0, [pc, #76]	; (8005470 <HAL_ETH_MspInit+0x194>)
 8005422:	f7fd fb67 	bl	8002af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005426:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800542a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800542c:	2302      	movs	r3, #2
 800542e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005430:	2300      	movs	r3, #0
 8005432:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005434:	2303      	movs	r3, #3
 8005436:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005438:	230b      	movs	r3, #11
 800543a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800543c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005440:	4619      	mov	r1, r3
 8005442:	480c      	ldr	r0, [pc, #48]	; (8005474 <HAL_ETH_MspInit+0x198>)
 8005444:	f7fd fb56 	bl	8002af4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005448:	2200      	movs	r2, #0
 800544a:	2105      	movs	r1, #5
 800544c:	203d      	movs	r0, #61	; 0x3d
 800544e:	f7fc f8cb 	bl	80015e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005452:	203d      	movs	r0, #61	; 0x3d
 8005454:	f7fc f8e4 	bl	8001620 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005458:	bf00      	nop
 800545a:	3738      	adds	r7, #56	; 0x38
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40028000 	.word	0x40028000
 8005464:	40023800 	.word	0x40023800
 8005468:	40020800 	.word	0x40020800
 800546c:	40020000 	.word	0x40020000
 8005470:	40020400 	.word	0x40020400
 8005474:	40021800 	.word	0x40021800

08005478 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800547c:	4802      	ldr	r0, [pc, #8]	; (8005488 <ETH_PHY_IO_Init+0x10>)
 800547e:	f7fc fed1 	bl	8002224 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	bd80      	pop	{r7, pc}
 8005488:	200053e8 	.word	0x200053e8

0800548c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  return 0;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	68f9      	ldr	r1, [r7, #12]
 80054ae:	4807      	ldr	r0, [pc, #28]	; (80054cc <ETH_PHY_IO_ReadReg+0x30>)
 80054b0:	f7fc fd20 	bl	8001ef4 <HAL_ETH_ReadPHYRegister>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80054ba:	f04f 33ff 	mov.w	r3, #4294967295
 80054be:	e000      	b.n	80054c2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	200053e8 	.word	0x200053e8

080054d0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	68f9      	ldr	r1, [r7, #12]
 80054e2:	4807      	ldr	r0, [pc, #28]	; (8005500 <ETH_PHY_IO_WriteReg+0x30>)
 80054e4:	f7fc fd51 	bl	8001f8a <HAL_ETH_WritePHYRegister>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80054ee:	f04f 33ff 	mov.w	r3, #4294967295
 80054f2:	e000      	b.n	80054f6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	200053e8 	.word	0x200053e8

08005504 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005508:	f7fb ff86 	bl	8001418 <HAL_GetTick>
 800550c:	4603      	mov	r3, r0
}
 800550e:	4618      	mov	r0, r3
 8005510:	bd80      	pop	{r7, pc}
	...

08005514 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b0a0      	sub	sp, #128	; 0x80
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800551c:	f107 0308 	add.w	r3, r7, #8
 8005520:	2264      	movs	r2, #100	; 0x64
 8005522:	2100      	movs	r1, #0
 8005524:	4618      	mov	r0, r3
 8005526:	f012 fa50 	bl	80179ca <memset>
  int32_t PHYLinkState = 0;
 800552a:	2300      	movs	r3, #0
 800552c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005532:	2300      	movs	r3, #0
 8005534:	67bb      	str	r3, [r7, #120]	; 0x78
 8005536:	2300      	movs	r3, #0
 8005538:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800553e:	483a      	ldr	r0, [pc, #232]	; (8005628 <ethernet_link_thread+0x114>)
 8005540:	f7fb fead 	bl	800129e <LAN8742_GetLinkState>
 8005544:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005548:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800554c:	089b      	lsrs	r3, r3, #2
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00c      	beq.n	8005572 <ethernet_link_thread+0x5e>
 8005558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800555a:	2b01      	cmp	r3, #1
 800555c:	dc09      	bgt.n	8005572 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800555e:	4833      	ldr	r0, [pc, #204]	; (800562c <ethernet_link_thread+0x118>)
 8005560:	f7fc f978 	bl	8001854 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005564:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005566:	f007 fc25 	bl	800cdb4 <netif_set_down>
    netif_set_link_down(netif);
 800556a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800556c:	f007 fc88 	bl	800ce80 <netif_set_link_down>
 8005570:	e055      	b.n	800561e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005574:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d14e      	bne.n	800561e <ethernet_link_thread+0x10a>
 8005580:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005582:	2b01      	cmp	r3, #1
 8005584:	dd4b      	ble.n	800561e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8005586:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005588:	3b02      	subs	r3, #2
 800558a:	2b03      	cmp	r3, #3
 800558c:	d82a      	bhi.n	80055e4 <ethernet_link_thread+0xd0>
 800558e:	a201      	add	r2, pc, #4	; (adr r2, 8005594 <ethernet_link_thread+0x80>)
 8005590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005594:	080055a5 	.word	0x080055a5
 8005598:	080055b7 	.word	0x080055b7
 800559c:	080055c7 	.word	0x080055c7
 80055a0:	080055d7 	.word	0x080055d7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80055a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055a8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80055aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055ae:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80055b0:	2301      	movs	r3, #1
 80055b2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80055b4:	e017      	b.n	80055e6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80055b6:	2300      	movs	r3, #0
 80055b8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80055ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055be:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80055c0:	2301      	movs	r3, #1
 80055c2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80055c4:	e00f      	b.n	80055e6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80055c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055ca:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80055cc:	2300      	movs	r3, #0
 80055ce:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80055d0:	2301      	movs	r3, #1
 80055d2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80055d4:	e007      	b.n	80055e6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80055d6:	2300      	movs	r3, #0
 80055d8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80055da:	2300      	movs	r3, #0
 80055dc:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80055de:	2301      	movs	r3, #1
 80055e0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80055e2:	e000      	b.n	80055e6 <ethernet_link_thread+0xd2>
    default:
      break;
 80055e4:	bf00      	nop
    }

    if(linkchanged)
 80055e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d018      	beq.n	800561e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80055ec:	f107 0308 	add.w	r3, r7, #8
 80055f0:	4619      	mov	r1, r3
 80055f2:	480e      	ldr	r0, [pc, #56]	; (800562c <ethernet_link_thread+0x118>)
 80055f4:	f7fc fd12 	bl	800201c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80055f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055fa:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80055fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055fe:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005600:	f107 0308 	add.w	r3, r7, #8
 8005604:	4619      	mov	r1, r3
 8005606:	4809      	ldr	r0, [pc, #36]	; (800562c <ethernet_link_thread+0x118>)
 8005608:	f7fc fdf2 	bl	80021f0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800560c:	4807      	ldr	r0, [pc, #28]	; (800562c <ethernet_link_thread+0x118>)
 800560e:	f7fc f893 	bl	8001738 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005612:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005614:	f007 fb62 	bl	800ccdc <netif_set_up>
      netif_set_link_up(netif);
 8005618:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800561a:	f007 fbfd 	bl	800ce18 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800561e:	2064      	movs	r0, #100	; 0x64
 8005620:	f000 f9b7 	bl	8005992 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005624:	e78b      	b.n	800553e <ethernet_link_thread+0x2a>
 8005626:	bf00      	nop
 8005628:	200054d0 	.word	0x200054d0
 800562c:	200053e8 	.word	0x200053e8

08005630 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af02      	add	r7, sp, #8
 8005636:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005638:	4812      	ldr	r0, [pc, #72]	; (8005684 <HAL_ETH_RxAllocateCallback+0x54>)
 800563a:	f007 f8c3 	bl	800c7c4 <memp_malloc_pool>
 800563e:	60f8      	str	r0, [r7, #12]
  if (p)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d014      	beq.n	8005670 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f103 0220 	add.w	r2, r3, #32
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4a0d      	ldr	r2, [pc, #52]	; (8005688 <HAL_ETH_RxAllocateCallback+0x58>)
 8005654:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800565e:	9201      	str	r2, [sp, #4]
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2241      	movs	r2, #65	; 0x41
 8005666:	2100      	movs	r1, #0
 8005668:	2000      	movs	r0, #0
 800566a:	f007 fe2d 	bl	800d2c8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800566e:	e005      	b.n	800567c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005670:	4b06      	ldr	r3, [pc, #24]	; (800568c <HAL_ETH_RxAllocateCallback+0x5c>)
 8005672:	2201      	movs	r2, #1
 8005674:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	0801c178 	.word	0x0801c178
 8005688:	0800528d 	.word	0x0800528d
 800568c:	2000529c 	.word	0x2000529c

08005690 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005690:	b480      	push	{r7}
 8005692:	b089      	sub	sp, #36	; 0x24
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	3b20      	subs	r3, #32
 80056ae:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	2200      	movs	r2, #0
 80056ba:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	887a      	ldrh	r2, [r7, #2]
 80056c0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d103      	bne.n	80056d2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	69fa      	ldr	r2, [r7, #28]
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	e003      	b.n	80056da <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69fa      	ldr	r2, [r7, #28]
 80056d8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	69fa      	ldr	r2, [r7, #28]
 80056de:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	61fb      	str	r3, [r7, #28]
 80056e6:	e009      	b.n	80056fc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	891a      	ldrh	r2, [r3, #8]
 80056ec:	887b      	ldrh	r3, [r7, #2]
 80056ee:	4413      	add	r3, r2
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	61fb      	str	r3, [r7, #28]
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1f2      	bne.n	80056e8 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005702:	bf00      	nop
 8005704:	bf00      	nop
 8005706:	3724      	adds	r7, #36	; 0x24
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f007 ff8f 	bl	800d63c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800571e:	bf00      	nop
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <__NVIC_SetPriority>:
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	4603      	mov	r3, r0
 8005730:	6039      	str	r1, [r7, #0]
 8005732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005738:	2b00      	cmp	r3, #0
 800573a:	db0a      	blt.n	8005752 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	b2da      	uxtb	r2, r3
 8005740:	490c      	ldr	r1, [pc, #48]	; (8005774 <__NVIC_SetPriority+0x4c>)
 8005742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005746:	0112      	lsls	r2, r2, #4
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	440b      	add	r3, r1
 800574c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005750:	e00a      	b.n	8005768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	b2da      	uxtb	r2, r3
 8005756:	4908      	ldr	r1, [pc, #32]	; (8005778 <__NVIC_SetPriority+0x50>)
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	f003 030f 	and.w	r3, r3, #15
 800575e:	3b04      	subs	r3, #4
 8005760:	0112      	lsls	r2, r2, #4
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	440b      	add	r3, r1
 8005766:	761a      	strb	r2, [r3, #24]
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	e000e100 	.word	0xe000e100
 8005778:	e000ed00 	.word	0xe000ed00

0800577c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800577c:	b580      	push	{r7, lr}
 800577e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005780:	4b05      	ldr	r3, [pc, #20]	; (8005798 <SysTick_Handler+0x1c>)
 8005782:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005784:	f002 fd3a 	bl	80081fc <xTaskGetSchedulerState>
 8005788:	4603      	mov	r3, r0
 800578a:	2b01      	cmp	r3, #1
 800578c:	d001      	beq.n	8005792 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800578e:	f003 fc23 	bl	8008fd8 <xPortSysTickHandler>
  }
}
 8005792:	bf00      	nop
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	e000e010 	.word	0xe000e010

0800579c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80057a0:	2100      	movs	r1, #0
 80057a2:	f06f 0004 	mvn.w	r0, #4
 80057a6:	f7ff ffbf 	bl	8005728 <__NVIC_SetPriority>
#endif
}
 80057aa:	bf00      	nop
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057b6:	f3ef 8305 	mrs	r3, IPSR
 80057ba:	603b      	str	r3, [r7, #0]
  return(result);
 80057bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80057c2:	f06f 0305 	mvn.w	r3, #5
 80057c6:	607b      	str	r3, [r7, #4]
 80057c8:	e00c      	b.n	80057e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80057ca:	4b0a      	ldr	r3, [pc, #40]	; (80057f4 <osKernelInitialize+0x44>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d105      	bne.n	80057de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80057d2:	4b08      	ldr	r3, [pc, #32]	; (80057f4 <osKernelInitialize+0x44>)
 80057d4:	2201      	movs	r2, #1
 80057d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80057d8:	2300      	movs	r3, #0
 80057da:	607b      	str	r3, [r7, #4]
 80057dc:	e002      	b.n	80057e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80057de:	f04f 33ff 	mov.w	r3, #4294967295
 80057e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80057e4:	687b      	ldr	r3, [r7, #4]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	200054f0 	.word	0x200054f0

080057f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057fe:	f3ef 8305 	mrs	r3, IPSR
 8005802:	603b      	str	r3, [r7, #0]
  return(result);
 8005804:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <osKernelStart+0x1a>
    stat = osErrorISR;
 800580a:	f06f 0305 	mvn.w	r3, #5
 800580e:	607b      	str	r3, [r7, #4]
 8005810:	e010      	b.n	8005834 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005812:	4b0b      	ldr	r3, [pc, #44]	; (8005840 <osKernelStart+0x48>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d109      	bne.n	800582e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800581a:	f7ff ffbf 	bl	800579c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800581e:	4b08      	ldr	r3, [pc, #32]	; (8005840 <osKernelStart+0x48>)
 8005820:	2202      	movs	r2, #2
 8005822:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005824:	f002 f86c 	bl	8007900 <vTaskStartScheduler>
      stat = osOK;
 8005828:	2300      	movs	r3, #0
 800582a:	607b      	str	r3, [r7, #4]
 800582c:	e002      	b.n	8005834 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800582e:	f04f 33ff 	mov.w	r3, #4294967295
 8005832:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005834:	687b      	ldr	r3, [r7, #4]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	200054f0 	.word	0x200054f0

08005844 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800584a:	f3ef 8305 	mrs	r3, IPSR
 800584e:	603b      	str	r3, [r7, #0]
  return(result);
 8005850:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005856:	f002 f97f 	bl	8007b58 <xTaskGetTickCountFromISR>
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	e002      	b.n	8005864 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800585e:	f002 f96b 	bl	8007b38 <xTaskGetTickCount>
 8005862:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005864:	687b      	ldr	r3, [r7, #4]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800586e:	b580      	push	{r7, lr}
 8005870:	b08e      	sub	sp, #56	; 0x38
 8005872:	af04      	add	r7, sp, #16
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800587a:	2300      	movs	r3, #0
 800587c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800587e:	f3ef 8305 	mrs	r3, IPSR
 8005882:	617b      	str	r3, [r7, #20]
  return(result);
 8005884:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005886:	2b00      	cmp	r3, #0
 8005888:	d17e      	bne.n	8005988 <osThreadNew+0x11a>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d07b      	beq.n	8005988 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005890:	2380      	movs	r3, #128	; 0x80
 8005892:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005894:	2318      	movs	r3, #24
 8005896:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005898:	2300      	movs	r3, #0
 800589a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800589c:	f04f 33ff 	mov.w	r3, #4294967295
 80058a0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d045      	beq.n	8005934 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <osThreadNew+0x48>
        name = attr->name;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d008      	beq.n	80058dc <osThreadNew+0x6e>
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	2b38      	cmp	r3, #56	; 0x38
 80058ce:	d805      	bhi.n	80058dc <osThreadNew+0x6e>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <osThreadNew+0x72>
        return (NULL);
 80058dc:	2300      	movs	r3, #0
 80058de:	e054      	b.n	800598a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	089b      	lsrs	r3, r3, #2
 80058ee:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00e      	beq.n	8005916 <osThreadNew+0xa8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	2ba7      	cmp	r3, #167	; 0xa7
 80058fe:	d90a      	bls.n	8005916 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005904:	2b00      	cmp	r3, #0
 8005906:	d006      	beq.n	8005916 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <osThreadNew+0xa8>
        mem = 1;
 8005910:	2301      	movs	r3, #1
 8005912:	61bb      	str	r3, [r7, #24]
 8005914:	e010      	b.n	8005938 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10c      	bne.n	8005938 <osThreadNew+0xca>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d108      	bne.n	8005938 <osThreadNew+0xca>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <osThreadNew+0xca>
          mem = 0;
 800592e:	2300      	movs	r3, #0
 8005930:	61bb      	str	r3, [r7, #24]
 8005932:	e001      	b.n	8005938 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d110      	bne.n	8005960 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005946:	9202      	str	r2, [sp, #8]
 8005948:	9301      	str	r3, [sp, #4]
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	6a3a      	ldr	r2, [r7, #32]
 8005952:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f001 fde7 	bl	8007528 <xTaskCreateStatic>
 800595a:	4603      	mov	r3, r0
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	e013      	b.n	8005988 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d110      	bne.n	8005988 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	b29a      	uxth	r2, r3
 800596a:	f107 0310 	add.w	r3, r7, #16
 800596e:	9301      	str	r3, [sp, #4]
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f001 fe32 	bl	80075e2 <xTaskCreate>
 800597e:	4603      	mov	r3, r0
 8005980:	2b01      	cmp	r3, #1
 8005982:	d001      	beq.n	8005988 <osThreadNew+0x11a>
            hTask = NULL;
 8005984:	2300      	movs	r3, #0
 8005986:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005988:	693b      	ldr	r3, [r7, #16]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3728      	adds	r7, #40	; 0x28
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800599a:	f3ef 8305 	mrs	r3, IPSR
 800599e:	60bb      	str	r3, [r7, #8]
  return(result);
 80059a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <osDelay+0x1c>
    stat = osErrorISR;
 80059a6:	f06f 0305 	mvn.w	r3, #5
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	e007      	b.n	80059be <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <osDelay+0x2c>
      vTaskDelay(ticks);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f001 ff6d 	bl	8007898 <vTaskDelay>
    }
  }

  return (stat);
 80059be:	68fb      	ldr	r3, [r7, #12]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80059d0:	2300      	movs	r3, #0
 80059d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059d4:	f3ef 8305 	mrs	r3, IPSR
 80059d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80059da:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d174      	bne.n	8005aca <osMutexNew+0x102>
    if (attr != NULL) {
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <osMutexNew+0x26>
      type = attr->attr_bits;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	61bb      	str	r3, [r7, #24]
 80059ec:	e001      	b.n	80059f2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <osMutexNew+0x3a>
      rmtx = 1U;
 80059fc:	2301      	movs	r3, #1
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	e001      	b.n	8005a06 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	f003 0308 	and.w	r3, r3, #8
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d15c      	bne.n	8005aca <osMutexNew+0x102>
      mem = -1;
 8005a10:	f04f 33ff 	mov.w	r3, #4294967295
 8005a14:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d015      	beq.n	8005a48 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d006      	beq.n	8005a32 <osMutexNew+0x6a>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	2b4f      	cmp	r3, #79	; 0x4f
 8005a2a:	d902      	bls.n	8005a32 <osMutexNew+0x6a>
          mem = 1;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	613b      	str	r3, [r7, #16]
 8005a30:	e00c      	b.n	8005a4c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d108      	bne.n	8005a4c <osMutexNew+0x84>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d104      	bne.n	8005a4c <osMutexNew+0x84>
            mem = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	613b      	str	r3, [r7, #16]
 8005a46:	e001      	b.n	8005a4c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d112      	bne.n	8005a78 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d007      	beq.n	8005a68 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	2004      	movs	r0, #4
 8005a60:	f000 fdd1 	bl	8006606 <xQueueCreateMutexStatic>
 8005a64:	61f8      	str	r0, [r7, #28]
 8005a66:	e016      	b.n	8005a96 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	2001      	movs	r0, #1
 8005a70:	f000 fdc9 	bl	8006606 <xQueueCreateMutexStatic>
 8005a74:	61f8      	str	r0, [r7, #28]
 8005a76:	e00e      	b.n	8005a96 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10b      	bne.n	8005a96 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d004      	beq.n	8005a8e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005a84:	2004      	movs	r0, #4
 8005a86:	f000 fda6 	bl	80065d6 <xQueueCreateMutex>
 8005a8a:	61f8      	str	r0, [r7, #28]
 8005a8c:	e003      	b.n	8005a96 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005a8e:	2001      	movs	r0, #1
 8005a90:	f000 fda1 	bl	80065d6 <xQueueCreateMutex>
 8005a94:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00c      	beq.n	8005ab6 <osMutexNew+0xee>
        if (attr != NULL) {
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <osMutexNew+0xe2>
          name = attr->name;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	e001      	b.n	8005aae <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005aae:	68f9      	ldr	r1, [r7, #12]
 8005ab0:	69f8      	ldr	r0, [r7, #28]
 8005ab2:	f001 fcb1 	bl	8007418 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d006      	beq.n	8005aca <osMutexNew+0x102>
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	f043 0301 	orr.w	r3, r3, #1
 8005ac8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005aca:	69fb      	ldr	r3, [r7, #28]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3720      	adds	r7, #32
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f023 0301 	bic.w	r3, r3, #1
 8005ae4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005aee:	2300      	movs	r3, #0
 8005af0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005af2:	f3ef 8305 	mrs	r3, IPSR
 8005af6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005af8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005afe:	f06f 0305 	mvn.w	r3, #5
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	e02c      	b.n	8005b60 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d103      	bne.n	8005b14 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005b0c:	f06f 0303 	mvn.w	r3, #3
 8005b10:	617b      	str	r3, [r7, #20]
 8005b12:	e025      	b.n	8005b60 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d011      	beq.n	8005b3e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005b1a:	6839      	ldr	r1, [r7, #0]
 8005b1c:	6938      	ldr	r0, [r7, #16]
 8005b1e:	f000 fdc1 	bl	80066a4 <xQueueTakeMutexRecursive>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d01b      	beq.n	8005b60 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005b2e:	f06f 0301 	mvn.w	r3, #1
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	e014      	b.n	8005b60 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005b36:	f06f 0302 	mvn.w	r3, #2
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	e010      	b.n	8005b60 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005b3e:	6839      	ldr	r1, [r7, #0]
 8005b40:	6938      	ldr	r0, [r7, #16]
 8005b42:	f001 f955 	bl	8006df0 <xQueueSemaphoreTake>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d009      	beq.n	8005b60 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005b52:	f06f 0301 	mvn.w	r3, #1
 8005b56:	617b      	str	r3, [r7, #20]
 8005b58:	e002      	b.n	8005b60 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005b5a:	f06f 0302 	mvn.w	r3, #2
 8005b5e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005b60:	697b      	ldr	r3, [r7, #20]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b086      	sub	sp, #24
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f023 0301 	bic.w	r3, r3, #1
 8005b78:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b86:	f3ef 8305 	mrs	r3, IPSR
 8005b8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b8c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <osMutexRelease+0x30>
    stat = osErrorISR;
 8005b92:	f06f 0305 	mvn.w	r3, #5
 8005b96:	617b      	str	r3, [r7, #20]
 8005b98:	e01f      	b.n	8005bda <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d103      	bne.n	8005ba8 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005ba0:	f06f 0303 	mvn.w	r3, #3
 8005ba4:	617b      	str	r3, [r7, #20]
 8005ba6:	e018      	b.n	8005bda <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d009      	beq.n	8005bc2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005bae:	6938      	ldr	r0, [r7, #16]
 8005bb0:	f000 fd44 	bl	800663c <xQueueGiveMutexRecursive>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d00f      	beq.n	8005bda <osMutexRelease+0x70>
        stat = osErrorResource;
 8005bba:	f06f 0302 	mvn.w	r3, #2
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	e00b      	b.n	8005bda <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	6938      	ldr	r0, [r7, #16]
 8005bca:	f000 fe0b 	bl	80067e4 <xQueueGenericSend>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d002      	beq.n	8005bda <osMutexRelease+0x70>
        stat = osErrorResource;
 8005bd4:	f06f 0302 	mvn.w	r3, #2
 8005bd8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005bda:	697b      	ldr	r3, [r7, #20]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3718      	adds	r7, #24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08a      	sub	sp, #40	; 0x28
 8005be8:	af02      	add	r7, sp, #8
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bf4:	f3ef 8305 	mrs	r3, IPSR
 8005bf8:	613b      	str	r3, [r7, #16]
  return(result);
 8005bfa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d175      	bne.n	8005cec <osSemaphoreNew+0x108>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d072      	beq.n	8005cec <osSemaphoreNew+0x108>
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d86e      	bhi.n	8005cec <osSemaphoreNew+0x108>
    mem = -1;
 8005c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d015      	beq.n	8005c46 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d006      	beq.n	8005c30 <osSemaphoreNew+0x4c>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	2b4f      	cmp	r3, #79	; 0x4f
 8005c28:	d902      	bls.n	8005c30 <osSemaphoreNew+0x4c>
        mem = 1;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	61bb      	str	r3, [r7, #24]
 8005c2e:	e00c      	b.n	8005c4a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d108      	bne.n	8005c4a <osSemaphoreNew+0x66>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d104      	bne.n	8005c4a <osSemaphoreNew+0x66>
          mem = 0;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61bb      	str	r3, [r7, #24]
 8005c44:	e001      	b.n	8005c4a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c50:	d04c      	beq.n	8005cec <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d128      	bne.n	8005caa <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d10a      	bne.n	8005c74 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	2203      	movs	r2, #3
 8005c64:	9200      	str	r2, [sp, #0]
 8005c66:	2200      	movs	r2, #0
 8005c68:	2100      	movs	r1, #0
 8005c6a:	2001      	movs	r0, #1
 8005c6c:	f000 fbc4 	bl	80063f8 <xQueueGenericCreateStatic>
 8005c70:	61f8      	str	r0, [r7, #28]
 8005c72:	e005      	b.n	8005c80 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005c74:	2203      	movs	r2, #3
 8005c76:	2100      	movs	r1, #0
 8005c78:	2001      	movs	r0, #1
 8005c7a:	f000 fc35 	bl	80064e8 <xQueueGenericCreate>
 8005c7e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d022      	beq.n	8005ccc <osSemaphoreNew+0xe8>
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01f      	beq.n	8005ccc <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	2200      	movs	r2, #0
 8005c90:	2100      	movs	r1, #0
 8005c92:	69f8      	ldr	r0, [r7, #28]
 8005c94:	f000 fda6 	bl	80067e4 <xQueueGenericSend>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d016      	beq.n	8005ccc <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005c9e:	69f8      	ldr	r0, [r7, #28]
 8005ca0:	f001 fa6e 	bl	8007180 <vQueueDelete>
            hSemaphore = NULL;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	61fb      	str	r3, [r7, #28]
 8005ca8:	e010      	b.n	8005ccc <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d108      	bne.n	8005cc2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	68b9      	ldr	r1, [r7, #8]
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 fd29 	bl	8006710 <xQueueCreateCountingSemaphoreStatic>
 8005cbe:	61f8      	str	r0, [r7, #28]
 8005cc0:	e004      	b.n	8005ccc <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005cc2:	68b9      	ldr	r1, [r7, #8]
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 fd5a 	bl	800677e <xQueueCreateCountingSemaphore>
 8005cca:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00c      	beq.n	8005cec <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	617b      	str	r3, [r7, #20]
 8005cde:	e001      	b.n	8005ce4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005ce4:	6979      	ldr	r1, [r7, #20]
 8005ce6:	69f8      	ldr	r0, [r7, #28]
 8005ce8:	f001 fb96 	bl	8007418 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005cec:	69fb      	ldr	r3, [r7, #28]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3720      	adds	r7, #32
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
	...

08005cf8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d103      	bne.n	8005d18 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005d10:	f06f 0303 	mvn.w	r3, #3
 8005d14:	617b      	str	r3, [r7, #20]
 8005d16:	e039      	b.n	8005d8c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d18:	f3ef 8305 	mrs	r3, IPSR
 8005d1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d022      	beq.n	8005d6a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005d2a:	f06f 0303 	mvn.w	r3, #3
 8005d2e:	617b      	str	r3, [r7, #20]
 8005d30:	e02c      	b.n	8005d8c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005d32:	2300      	movs	r3, #0
 8005d34:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005d36:	f107 0308 	add.w	r3, r7, #8
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	6938      	ldr	r0, [r7, #16]
 8005d40:	f001 f962 	bl	8007008 <xQueueReceiveFromISR>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d003      	beq.n	8005d52 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005d4a:	f06f 0302 	mvn.w	r3, #2
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	e01c      	b.n	8005d8c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d019      	beq.n	8005d8c <osSemaphoreAcquire+0x94>
 8005d58:	4b0f      	ldr	r3, [pc, #60]	; (8005d98 <osSemaphoreAcquire+0xa0>)
 8005d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	e010      	b.n	8005d8c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005d6a:	6839      	ldr	r1, [r7, #0]
 8005d6c:	6938      	ldr	r0, [r7, #16]
 8005d6e:	f001 f83f 	bl	8006df0 <xQueueSemaphoreTake>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d009      	beq.n	8005d8c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005d7e:	f06f 0301 	mvn.w	r3, #1
 8005d82:	617b      	str	r3, [r7, #20]
 8005d84:	e002      	b.n	8005d8c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005d86:	f06f 0302 	mvn.w	r3, #2
 8005d8a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005d8c:	697b      	ldr	r3, [r7, #20]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3718      	adds	r7, #24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	e000ed04 	.word	0xe000ed04

08005d9c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005da8:	2300      	movs	r3, #0
 8005daa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d103      	bne.n	8005dba <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005db2:	f06f 0303 	mvn.w	r3, #3
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	e02c      	b.n	8005e14 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dba:	f3ef 8305 	mrs	r3, IPSR
 8005dbe:	60fb      	str	r3, [r7, #12]
  return(result);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d01a      	beq.n	8005dfc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005dca:	f107 0308 	add.w	r3, r7, #8
 8005dce:	4619      	mov	r1, r3
 8005dd0:	6938      	ldr	r0, [r7, #16]
 8005dd2:	f000 fea0 	bl	8006b16 <xQueueGiveFromISR>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d003      	beq.n	8005de4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005ddc:	f06f 0302 	mvn.w	r3, #2
 8005de0:	617b      	str	r3, [r7, #20]
 8005de2:	e017      	b.n	8005e14 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d014      	beq.n	8005e14 <osSemaphoreRelease+0x78>
 8005dea:	4b0d      	ldr	r3, [pc, #52]	; (8005e20 <osSemaphoreRelease+0x84>)
 8005dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	e00b      	b.n	8005e14 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2100      	movs	r1, #0
 8005e02:	6938      	ldr	r0, [r7, #16]
 8005e04:	f000 fcee 	bl	80067e4 <xQueueGenericSend>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d002      	beq.n	8005e14 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005e0e:	f06f 0302 	mvn.w	r3, #2
 8005e12:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005e14:	697b      	ldr	r3, [r7, #20]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	e000ed04 	.word	0xe000ed04

08005e24 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e30:	f3ef 8305 	mrs	r3, IPSR
 8005e34:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e36:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8005e3c:	f06f 0305 	mvn.w	r3, #5
 8005e40:	617b      	str	r3, [r7, #20]
 8005e42:	e00e      	b.n	8005e62 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d103      	bne.n	8005e52 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8005e4a:	f06f 0303 	mvn.w	r3, #3
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	e007      	b.n	8005e62 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8005e52:	6938      	ldr	r0, [r7, #16]
 8005e54:	f001 fb0a 	bl	800746c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8005e5c:	6938      	ldr	r0, [r7, #16]
 8005e5e:	f001 f98f 	bl	8007180 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005e62:	697b      	ldr	r3, [r7, #20]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08a      	sub	sp, #40	; 0x28
 8005e70:	af02      	add	r7, sp, #8
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e7c:	f3ef 8305 	mrs	r3, IPSR
 8005e80:	613b      	str	r3, [r7, #16]
  return(result);
 8005e82:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d15f      	bne.n	8005f48 <osMessageQueueNew+0xdc>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d05c      	beq.n	8005f48 <osMessageQueueNew+0xdc>
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d059      	beq.n	8005f48 <osMessageQueueNew+0xdc>
    mem = -1;
 8005e94:	f04f 33ff 	mov.w	r3, #4294967295
 8005e98:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d029      	beq.n	8005ef4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d012      	beq.n	8005ece <osMessageQueueNew+0x62>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	2b4f      	cmp	r3, #79	; 0x4f
 8005eae:	d90e      	bls.n	8005ece <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00a      	beq.n	8005ece <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	695a      	ldr	r2, [r3, #20]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	68b9      	ldr	r1, [r7, #8]
 8005ec0:	fb01 f303 	mul.w	r3, r1, r3
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d302      	bcc.n	8005ece <osMessageQueueNew+0x62>
        mem = 1;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	61bb      	str	r3, [r7, #24]
 8005ecc:	e014      	b.n	8005ef8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d110      	bne.n	8005ef8 <osMessageQueueNew+0x8c>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10c      	bne.n	8005ef8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d108      	bne.n	8005ef8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d104      	bne.n	8005ef8 <osMessageQueueNew+0x8c>
          mem = 0;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61bb      	str	r3, [r7, #24]
 8005ef2:	e001      	b.n	8005ef8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d10b      	bne.n	8005f16 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691a      	ldr	r2, [r3, #16]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	2100      	movs	r1, #0
 8005f08:	9100      	str	r1, [sp, #0]
 8005f0a:	68b9      	ldr	r1, [r7, #8]
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f000 fa73 	bl	80063f8 <xQueueGenericCreateStatic>
 8005f12:	61f8      	str	r0, [r7, #28]
 8005f14:	e008      	b.n	8005f28 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d105      	bne.n	8005f28 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	68b9      	ldr	r1, [r7, #8]
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 fae1 	bl	80064e8 <xQueueGenericCreate>
 8005f26:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00c      	beq.n	8005f48 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d003      	beq.n	8005f3c <osMessageQueueNew+0xd0>
        name = attr->name;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	617b      	str	r3, [r7, #20]
 8005f3a:	e001      	b.n	8005f40 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005f40:	6979      	ldr	r1, [r7, #20]
 8005f42:	69f8      	ldr	r0, [r7, #28]
 8005f44:	f001 fa68 	bl	8007418 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005f48:	69fb      	ldr	r3, [r7, #28]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3720      	adds	r7, #32
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	603b      	str	r3, [r7, #0]
 8005f60:	4613      	mov	r3, r2
 8005f62:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f6c:	f3ef 8305 	mrs	r3, IPSR
 8005f70:	617b      	str	r3, [r7, #20]
  return(result);
 8005f72:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d028      	beq.n	8005fca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d005      	beq.n	8005f8a <osMessageQueuePut+0x36>
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <osMessageQueuePut+0x36>
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005f8a:	f06f 0303 	mvn.w	r3, #3
 8005f8e:	61fb      	str	r3, [r7, #28]
 8005f90:	e038      	b.n	8006004 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005f96:	f107 0210 	add.w	r2, r7, #16
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	68b9      	ldr	r1, [r7, #8]
 8005f9e:	69b8      	ldr	r0, [r7, #24]
 8005fa0:	f000 fd1e 	bl	80069e0 <xQueueGenericSendFromISR>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d003      	beq.n	8005fb2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005faa:	f06f 0302 	mvn.w	r3, #2
 8005fae:	61fb      	str	r3, [r7, #28]
 8005fb0:	e028      	b.n	8006004 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d025      	beq.n	8006004 <osMessageQueuePut+0xb0>
 8005fb8:	4b15      	ldr	r3, [pc, #84]	; (8006010 <osMessageQueuePut+0xbc>)
 8005fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	e01c      	b.n	8006004 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <osMessageQueuePut+0x82>
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d103      	bne.n	8005fde <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005fd6:	f06f 0303 	mvn.w	r3, #3
 8005fda:	61fb      	str	r3, [r7, #28]
 8005fdc:	e012      	b.n	8006004 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005fde:	2300      	movs	r3, #0
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	68b9      	ldr	r1, [r7, #8]
 8005fe4:	69b8      	ldr	r0, [r7, #24]
 8005fe6:	f000 fbfd 	bl	80067e4 <xQueueGenericSend>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d009      	beq.n	8006004 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005ff6:	f06f 0301 	mvn.w	r3, #1
 8005ffa:	61fb      	str	r3, [r7, #28]
 8005ffc:	e002      	b.n	8006004 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005ffe:	f06f 0302 	mvn.w	r3, #2
 8006002:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006004:	69fb      	ldr	r3, [r7, #28]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3720      	adds	r7, #32
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	e000ed04 	.word	0xe000ed04

08006014 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006014:	b580      	push	{r7, lr}
 8006016:	b088      	sub	sp, #32
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
 8006020:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006026:	2300      	movs	r3, #0
 8006028:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800602a:	f3ef 8305 	mrs	r3, IPSR
 800602e:	617b      	str	r3, [r7, #20]
  return(result);
 8006030:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006032:	2b00      	cmp	r3, #0
 8006034:	d028      	beq.n	8006088 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d005      	beq.n	8006048 <osMessageQueueGet+0x34>
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <osMessageQueueGet+0x34>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006048:	f06f 0303 	mvn.w	r3, #3
 800604c:	61fb      	str	r3, [r7, #28]
 800604e:	e037      	b.n	80060c0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006050:	2300      	movs	r3, #0
 8006052:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006054:	f107 0310 	add.w	r3, r7, #16
 8006058:	461a      	mov	r2, r3
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	69b8      	ldr	r0, [r7, #24]
 800605e:	f000 ffd3 	bl	8007008 <xQueueReceiveFromISR>
 8006062:	4603      	mov	r3, r0
 8006064:	2b01      	cmp	r3, #1
 8006066:	d003      	beq.n	8006070 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006068:	f06f 0302 	mvn.w	r3, #2
 800606c:	61fb      	str	r3, [r7, #28]
 800606e:	e027      	b.n	80060c0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d024      	beq.n	80060c0 <osMessageQueueGet+0xac>
 8006076:	4b15      	ldr	r3, [pc, #84]	; (80060cc <osMessageQueueGet+0xb8>)
 8006078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	e01b      	b.n	80060c0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <osMessageQueueGet+0x80>
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d103      	bne.n	800609c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006094:	f06f 0303 	mvn.w	r3, #3
 8006098:	61fb      	str	r3, [r7, #28]
 800609a:	e011      	b.n	80060c0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	68b9      	ldr	r1, [r7, #8]
 80060a0:	69b8      	ldr	r0, [r7, #24]
 80060a2:	f000 fdc5 	bl	8006c30 <xQueueReceive>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d009      	beq.n	80060c0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80060b2:	f06f 0301 	mvn.w	r3, #1
 80060b6:	61fb      	str	r3, [r7, #28]
 80060b8:	e002      	b.n	80060c0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80060ba:	f06f 0302 	mvn.w	r3, #2
 80060be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80060c0:	69fb      	ldr	r3, [r7, #28]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3720      	adds	r7, #32
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	e000ed04 	.word	0xe000ed04

080060d0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d102      	bne.n	80060e8 <osMessageQueueGetCount+0x18>
    count = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	617b      	str	r3, [r7, #20]
 80060e6:	e00e      	b.n	8006106 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060e8:	f3ef 8305 	mrs	r3, IPSR
 80060ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80060ee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d004      	beq.n	80060fe <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80060f4:	6938      	ldr	r0, [r7, #16]
 80060f6:	f001 f825 	bl	8007144 <uxQueueMessagesWaitingFromISR>
 80060fa:	6178      	str	r0, [r7, #20]
 80060fc:	e003      	b.n	8006106 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80060fe:	6938      	ldr	r0, [r7, #16]
 8006100:	f001 f802 	bl	8007108 <uxQueueMessagesWaiting>
 8006104:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8006106:	697b      	ldr	r3, [r7, #20]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3718      	adds	r7, #24
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800611c:	f3ef 8305 	mrs	r3, IPSR
 8006120:	60fb      	str	r3, [r7, #12]
  return(result);
 8006122:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8006128:	f06f 0305 	mvn.w	r3, #5
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	e00e      	b.n	800614e <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d103      	bne.n	800613e <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 8006136:	f06f 0303 	mvn.w	r3, #3
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	e007      	b.n	800614e <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800613e:	6938      	ldr	r0, [r7, #16]
 8006140:	f001 f994 	bl	800746c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006144:	2300      	movs	r3, #0
 8006146:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8006148:	6938      	ldr	r0, [r7, #16]
 800614a:	f001 f819 	bl	8007180 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800614e:	697b      	ldr	r3, [r7, #20]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3718      	adds	r7, #24
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4a07      	ldr	r2, [pc, #28]	; (8006184 <vApplicationGetIdleTaskMemory+0x2c>)
 8006168:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	4a06      	ldr	r2, [pc, #24]	; (8006188 <vApplicationGetIdleTaskMemory+0x30>)
 800616e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2280      	movs	r2, #128	; 0x80
 8006174:	601a      	str	r2, [r3, #0]
}
 8006176:	bf00      	nop
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	200054f4 	.word	0x200054f4
 8006188:	2000559c 	.word	0x2000559c

0800618c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4a07      	ldr	r2, [pc, #28]	; (80061b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800619c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	4a06      	ldr	r2, [pc, #24]	; (80061bc <vApplicationGetTimerTaskMemory+0x30>)
 80061a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061aa:	601a      	str	r2, [r3, #0]
}
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	2000579c 	.word	0x2000579c
 80061bc:	20005844 	.word	0x20005844

080061c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f103 0208 	add.w	r2, r3, #8
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f04f 32ff 	mov.w	r2, #4294967295
 80061d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f103 0208 	add.w	r2, r3, #8
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f103 0208 	add.w	r2, r3, #8
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800621a:	b480      	push	{r7}
 800621c:	b085      	sub	sp, #20
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	1c5a      	adds	r2, r3, #1
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	601a      	str	r2, [r3, #0]
}
 8006256:	bf00      	nop
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006262:	b480      	push	{r7}
 8006264:	b085      	sub	sp, #20
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006278:	d103      	bne.n	8006282 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	60fb      	str	r3, [r7, #12]
 8006280:	e00c      	b.n	800629c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3308      	adds	r3, #8
 8006286:	60fb      	str	r3, [r7, #12]
 8006288:	e002      	b.n	8006290 <vListInsert+0x2e>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	429a      	cmp	r2, r3
 800629a:	d2f6      	bcs.n	800628a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	601a      	str	r2, [r3, #0]
}
 80062c8:	bf00      	nop
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6892      	ldr	r2, [r2, #8]
 80062ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	6852      	ldr	r2, [r2, #4]
 80062f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d103      	bne.n	8006308 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	1e5a      	subs	r2, r3, #1
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3714      	adds	r7, #20
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10a      	bne.n	8006352 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800633c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800634e:	bf00      	nop
 8006350:	e7fe      	b.n	8006350 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006352:	f002 fdaf 	bl	8008eb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635e:	68f9      	ldr	r1, [r7, #12]
 8006360:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006362:	fb01 f303 	mul.w	r3, r1, r3
 8006366:	441a      	add	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006382:	3b01      	subs	r3, #1
 8006384:	68f9      	ldr	r1, [r7, #12]
 8006386:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006388:	fb01 f303 	mul.w	r3, r1, r3
 800638c:	441a      	add	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	22ff      	movs	r2, #255	; 0xff
 8006396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	22ff      	movs	r2, #255	; 0xff
 800639e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d114      	bne.n	80063d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d01a      	beq.n	80063e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3310      	adds	r3, #16
 80063b4:	4618      	mov	r0, r3
 80063b6:	f001 fd4f 	bl	8007e58 <xTaskRemoveFromEventList>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d012      	beq.n	80063e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80063c0:	4b0c      	ldr	r3, [pc, #48]	; (80063f4 <xQueueGenericReset+0xcc>)
 80063c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	e009      	b.n	80063e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3310      	adds	r3, #16
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7ff fef2 	bl	80061c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	3324      	adds	r3, #36	; 0x24
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff feed 	bl	80061c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80063e6:	f002 fd95 	bl	8008f14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80063ea:	2301      	movs	r3, #1
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	e000ed04 	.word	0xe000ed04

080063f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08e      	sub	sp, #56	; 0x38
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800641e:	bf00      	nop
 8006420:	e7fe      	b.n	8006420 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
}
 800643a:	bf00      	nop
 800643c:	e7fe      	b.n	800643c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d002      	beq.n	800644a <xQueueGenericCreateStatic+0x52>
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <xQueueGenericCreateStatic+0x56>
 800644a:	2301      	movs	r3, #1
 800644c:	e000      	b.n	8006450 <xQueueGenericCreateStatic+0x58>
 800644e:	2300      	movs	r3, #0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10a      	bne.n	800646a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	623b      	str	r3, [r7, #32]
}
 8006466:	bf00      	nop
 8006468:	e7fe      	b.n	8006468 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <xQueueGenericCreateStatic+0x7e>
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <xQueueGenericCreateStatic+0x82>
 8006476:	2301      	movs	r3, #1
 8006478:	e000      	b.n	800647c <xQueueGenericCreateStatic+0x84>
 800647a:	2300      	movs	r3, #0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10a      	bne.n	8006496 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	61fb      	str	r3, [r7, #28]
}
 8006492:	bf00      	nop
 8006494:	e7fe      	b.n	8006494 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006496:	2350      	movs	r3, #80	; 0x50
 8006498:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2b50      	cmp	r3, #80	; 0x50
 800649e:	d00a      	beq.n	80064b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	61bb      	str	r3, [r7, #24]
}
 80064b2:	bf00      	nop
 80064b4:	e7fe      	b.n	80064b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80064b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80064bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00d      	beq.n	80064de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80064c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80064ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	4613      	mov	r3, r2
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	68b9      	ldr	r1, [r7, #8]
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 f83f 	bl	800655c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80064de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3730      	adds	r7, #48	; 0x30
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08a      	sub	sp, #40	; 0x28
 80064ec:	af02      	add	r7, sp, #8
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	4613      	mov	r3, r2
 80064f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10a      	bne.n	8006512 <xQueueGenericCreate+0x2a>
	__asm volatile
 80064fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006500:	f383 8811 	msr	BASEPRI, r3
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	f3bf 8f4f 	dsb	sy
 800650c:	613b      	str	r3, [r7, #16]
}
 800650e:	bf00      	nop
 8006510:	e7fe      	b.n	8006510 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	fb02 f303 	mul.w	r3, r2, r3
 800651a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	3350      	adds	r3, #80	; 0x50
 8006520:	4618      	mov	r0, r3
 8006522:	f002 fde9 	bl	80090f8 <pvPortMalloc>
 8006526:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d011      	beq.n	8006552 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	3350      	adds	r3, #80	; 0x50
 8006536:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006540:	79fa      	ldrb	r2, [r7, #7]
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	4613      	mov	r3, r2
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	68b9      	ldr	r1, [r7, #8]
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 f805 	bl	800655c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006552:	69bb      	ldr	r3, [r7, #24]
	}
 8006554:	4618      	mov	r0, r3
 8006556:	3720      	adds	r7, #32
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d103      	bne.n	8006578 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	e002      	b.n	800657e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800658a:	2101      	movs	r1, #1
 800658c:	69b8      	ldr	r0, [r7, #24]
 800658e:	f7ff fecb 	bl	8006328 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	78fa      	ldrb	r2, [r7, #3]
 8006596:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800659a:	bf00      	nop
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b082      	sub	sp, #8
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00e      	beq.n	80065ce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80065c2:	2300      	movs	r3, #0
 80065c4:	2200      	movs	r2, #0
 80065c6:	2100      	movs	r1, #0
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f90b 	bl	80067e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80065ce:	bf00      	nop
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b086      	sub	sp, #24
 80065da:	af00      	add	r7, sp, #0
 80065dc:	4603      	mov	r3, r0
 80065de:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80065e0:	2301      	movs	r3, #1
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	2300      	movs	r3, #0
 80065e6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80065e8:	79fb      	ldrb	r3, [r7, #7]
 80065ea:	461a      	mov	r2, r3
 80065ec:	6939      	ldr	r1, [r7, #16]
 80065ee:	6978      	ldr	r0, [r7, #20]
 80065f0:	f7ff ff7a 	bl	80064e8 <xQueueGenericCreate>
 80065f4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f7ff ffd3 	bl	80065a2 <prvInitialiseMutex>

		return xNewQueue;
 80065fc:	68fb      	ldr	r3, [r7, #12]
	}
 80065fe:	4618      	mov	r0, r3
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006606:	b580      	push	{r7, lr}
 8006608:	b088      	sub	sp, #32
 800660a:	af02      	add	r7, sp, #8
 800660c:	4603      	mov	r3, r0
 800660e:	6039      	str	r1, [r7, #0]
 8006610:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006612:	2301      	movs	r3, #1
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	2300      	movs	r3, #0
 8006618:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800661a:	79fb      	ldrb	r3, [r7, #7]
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2200      	movs	r2, #0
 8006622:	6939      	ldr	r1, [r7, #16]
 8006624:	6978      	ldr	r0, [r7, #20]
 8006626:	f7ff fee7 	bl	80063f8 <xQueueGenericCreateStatic>
 800662a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f7ff ffb8 	bl	80065a2 <prvInitialiseMutex>

		return xNewQueue;
 8006632:	68fb      	ldr	r3, [r7, #12]
	}
 8006634:	4618      	mov	r0, r3
 8006636:	3718      	adds	r7, #24
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800663c:	b590      	push	{r4, r7, lr}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10a      	bne.n	8006664 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	60fb      	str	r3, [r7, #12]
}
 8006660:	bf00      	nop
 8006662:	e7fe      	b.n	8006662 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	689c      	ldr	r4, [r3, #8]
 8006668:	f001 fdb8 	bl	80081dc <xTaskGetCurrentTaskHandle>
 800666c:	4603      	mov	r3, r0
 800666e:	429c      	cmp	r4, r3
 8006670:	d111      	bne.n	8006696 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	1e5a      	subs	r2, r3, #1
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d105      	bne.n	8006690 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006684:	2300      	movs	r3, #0
 8006686:	2200      	movs	r2, #0
 8006688:	2100      	movs	r1, #0
 800668a:	6938      	ldr	r0, [r7, #16]
 800668c:	f000 f8aa 	bl	80067e4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006690:	2301      	movs	r3, #1
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	e001      	b.n	800669a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006696:	2300      	movs	r3, #0
 8006698:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800669a:	697b      	ldr	r3, [r7, #20]
	}
 800669c:	4618      	mov	r0, r3
 800669e:	371c      	adds	r7, #28
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd90      	pop	{r4, r7, pc}

080066a4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80066a4:	b590      	push	{r4, r7, lr}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10a      	bne.n	80066ce <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	60fb      	str	r3, [r7, #12]
}
 80066ca:	bf00      	nop
 80066cc:	e7fe      	b.n	80066cc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	689c      	ldr	r4, [r3, #8]
 80066d2:	f001 fd83 	bl	80081dc <xTaskGetCurrentTaskHandle>
 80066d6:	4603      	mov	r3, r0
 80066d8:	429c      	cmp	r4, r3
 80066da:	d107      	bne.n	80066ec <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80066e6:	2301      	movs	r3, #1
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	e00c      	b.n	8006706 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	6938      	ldr	r0, [r7, #16]
 80066f0:	f000 fb7e 	bl	8006df0 <xQueueSemaphoreTake>
 80066f4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d004      	beq.n	8006706 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	1c5a      	adds	r2, r3, #1
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006706:	697b      	ldr	r3, [r7, #20]
	}
 8006708:	4618      	mov	r0, r3
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	bd90      	pop	{r4, r7, pc}

08006710 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006710:	b580      	push	{r7, lr}
 8006712:	b08a      	sub	sp, #40	; 0x28
 8006714:	af02      	add	r7, sp, #8
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10a      	bne.n	8006738 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	61bb      	str	r3, [r7, #24]
}
 8006734:	bf00      	nop
 8006736:	e7fe      	b.n	8006736 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	429a      	cmp	r2, r3
 800673e:	d90a      	bls.n	8006756 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	617b      	str	r3, [r7, #20]
}
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006756:	2302      	movs	r3, #2
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	2100      	movs	r1, #0
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f7ff fe49 	bl	80063f8 <xQueueGenericCreateStatic>
 8006766:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006774:	69fb      	ldr	r3, [r7, #28]
	}
 8006776:	4618      	mov	r0, r3
 8006778:	3720      	adds	r7, #32
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800677e:	b580      	push	{r7, lr}
 8006780:	b086      	sub	sp, #24
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
 8006786:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10a      	bne.n	80067a4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	613b      	str	r3, [r7, #16]
}
 80067a0:	bf00      	nop
 80067a2:	e7fe      	b.n	80067a2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d90a      	bls.n	80067c2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b0:	f383 8811 	msr	BASEPRI, r3
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	60fb      	str	r3, [r7, #12]
}
 80067be:	bf00      	nop
 80067c0:	e7fe      	b.n	80067c0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80067c2:	2202      	movs	r2, #2
 80067c4:	2100      	movs	r1, #0
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7ff fe8e 	bl	80064e8 <xQueueGenericCreate>
 80067cc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80067da:	697b      	ldr	r3, [r7, #20]
	}
 80067dc:	4618      	mov	r0, r3
 80067de:	3718      	adds	r7, #24
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08e      	sub	sp, #56	; 0x38
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80067f2:	2300      	movs	r3, #0
 80067f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10a      	bne.n	8006816 <xQueueGenericSend+0x32>
	__asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006812:	bf00      	nop
 8006814:	e7fe      	b.n	8006814 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d103      	bne.n	8006824 <xQueueGenericSend+0x40>
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <xQueueGenericSend+0x44>
 8006824:	2301      	movs	r3, #1
 8006826:	e000      	b.n	800682a <xQueueGenericSend+0x46>
 8006828:	2300      	movs	r3, #0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10a      	bne.n	8006844 <xQueueGenericSend+0x60>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006840:	bf00      	nop
 8006842:	e7fe      	b.n	8006842 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b02      	cmp	r3, #2
 8006848:	d103      	bne.n	8006852 <xQueueGenericSend+0x6e>
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684e:	2b01      	cmp	r3, #1
 8006850:	d101      	bne.n	8006856 <xQueueGenericSend+0x72>
 8006852:	2301      	movs	r3, #1
 8006854:	e000      	b.n	8006858 <xQueueGenericSend+0x74>
 8006856:	2300      	movs	r3, #0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10a      	bne.n	8006872 <xQueueGenericSend+0x8e>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	623b      	str	r3, [r7, #32]
}
 800686e:	bf00      	nop
 8006870:	e7fe      	b.n	8006870 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006872:	f001 fcc3 	bl	80081fc <xTaskGetSchedulerState>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d102      	bne.n	8006882 <xQueueGenericSend+0x9e>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <xQueueGenericSend+0xa2>
 8006882:	2301      	movs	r3, #1
 8006884:	e000      	b.n	8006888 <xQueueGenericSend+0xa4>
 8006886:	2300      	movs	r3, #0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10a      	bne.n	80068a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	61fb      	str	r3, [r7, #28]
}
 800689e:	bf00      	nop
 80068a0:	e7fe      	b.n	80068a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068a2:	f002 fb07 	bl	8008eb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d302      	bcc.n	80068b8 <xQueueGenericSend+0xd4>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d129      	bne.n	800690c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	68b9      	ldr	r1, [r7, #8]
 80068bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068be:	f000 fc9a 	bl	80071f6 <prvCopyDataToQueue>
 80068c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d010      	beq.n	80068ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	3324      	adds	r3, #36	; 0x24
 80068d0:	4618      	mov	r0, r3
 80068d2:	f001 fac1 	bl	8007e58 <xTaskRemoveFromEventList>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d013      	beq.n	8006904 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80068dc:	4b3f      	ldr	r3, [pc, #252]	; (80069dc <xQueueGenericSend+0x1f8>)
 80068de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	e00a      	b.n	8006904 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80068ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d007      	beq.n	8006904 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80068f4:	4b39      	ldr	r3, [pc, #228]	; (80069dc <xQueueGenericSend+0x1f8>)
 80068f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006904:	f002 fb06 	bl	8008f14 <vPortExitCritical>
				return pdPASS;
 8006908:	2301      	movs	r3, #1
 800690a:	e063      	b.n	80069d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d103      	bne.n	800691a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006912:	f002 faff 	bl	8008f14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006916:	2300      	movs	r3, #0
 8006918:	e05c      	b.n	80069d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800691a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691c:	2b00      	cmp	r3, #0
 800691e:	d106      	bne.n	800692e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006920:	f107 0314 	add.w	r3, r7, #20
 8006924:	4618      	mov	r0, r3
 8006926:	f001 fafb 	bl	8007f20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800692a:	2301      	movs	r3, #1
 800692c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800692e:	f002 faf1 	bl	8008f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006932:	f001 f855 	bl	80079e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006936:	f002 fabd 	bl	8008eb4 <vPortEnterCritical>
 800693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006940:	b25b      	sxtb	r3, r3
 8006942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006946:	d103      	bne.n	8006950 <xQueueGenericSend+0x16c>
 8006948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006952:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006956:	b25b      	sxtb	r3, r3
 8006958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695c:	d103      	bne.n	8006966 <xQueueGenericSend+0x182>
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006966:	f002 fad5 	bl	8008f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800696a:	1d3a      	adds	r2, r7, #4
 800696c:	f107 0314 	add.w	r3, r7, #20
 8006970:	4611      	mov	r1, r2
 8006972:	4618      	mov	r0, r3
 8006974:	f001 faea 	bl	8007f4c <xTaskCheckForTimeOut>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d124      	bne.n	80069c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800697e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006980:	f000 fd31 	bl	80073e6 <prvIsQueueFull>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d018      	beq.n	80069bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800698a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698c:	3310      	adds	r3, #16
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	4611      	mov	r1, r2
 8006992:	4618      	mov	r0, r3
 8006994:	f001 fa10 	bl	8007db8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800699a:	f000 fcbc 	bl	8007316 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800699e:	f001 f82d 	bl	80079fc <xTaskResumeAll>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f47f af7c 	bne.w	80068a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80069aa:	4b0c      	ldr	r3, [pc, #48]	; (80069dc <xQueueGenericSend+0x1f8>)
 80069ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069b0:	601a      	str	r2, [r3, #0]
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	e772      	b.n	80068a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80069bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069be:	f000 fcaa 	bl	8007316 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069c2:	f001 f81b 	bl	80079fc <xTaskResumeAll>
 80069c6:	e76c      	b.n	80068a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80069c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069ca:	f000 fca4 	bl	8007316 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069ce:	f001 f815 	bl	80079fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80069d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3738      	adds	r7, #56	; 0x38
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	e000ed04 	.word	0xe000ed04

080069e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b090      	sub	sp, #64	; 0x40
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80069f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10a      	bne.n	8006a0e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a0a:	bf00      	nop
 8006a0c:	e7fe      	b.n	8006a0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d103      	bne.n	8006a1c <xQueueGenericSendFromISR+0x3c>
 8006a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <xQueueGenericSendFromISR+0x40>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e000      	b.n	8006a22 <xQueueGenericSendFromISR+0x42>
 8006a20:	2300      	movs	r3, #0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10a      	bne.n	8006a3c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a38:	bf00      	nop
 8006a3a:	e7fe      	b.n	8006a3a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d103      	bne.n	8006a4a <xQueueGenericSendFromISR+0x6a>
 8006a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d101      	bne.n	8006a4e <xQueueGenericSendFromISR+0x6e>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e000      	b.n	8006a50 <xQueueGenericSendFromISR+0x70>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10a      	bne.n	8006a6a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	623b      	str	r3, [r7, #32]
}
 8006a66:	bf00      	nop
 8006a68:	e7fe      	b.n	8006a68 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a6a:	f002 fb05 	bl	8009078 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a6e:	f3ef 8211 	mrs	r2, BASEPRI
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	61fa      	str	r2, [r7, #28]
 8006a84:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a86:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a88:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d302      	bcc.n	8006a9c <xQueueGenericSendFromISR+0xbc>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d12f      	bne.n	8006afc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	68b9      	ldr	r1, [r7, #8]
 8006ab0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ab2:	f000 fba0 	bl	80071f6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ab6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abe:	d112      	bne.n	8006ae6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d016      	beq.n	8006af6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aca:	3324      	adds	r3, #36	; 0x24
 8006acc:	4618      	mov	r0, r3
 8006ace:	f001 f9c3 	bl	8007e58 <xTaskRemoveFromEventList>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00e      	beq.n	8006af6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00b      	beq.n	8006af6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	e007      	b.n	8006af6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ae6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006aea:	3301      	adds	r3, #1
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	b25a      	sxtb	r2, r3
 8006af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006af6:	2301      	movs	r3, #1
 8006af8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006afa:	e001      	b.n	8006b00 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006afc:	2300      	movs	r3, #0
 8006afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b02:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b0a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3740      	adds	r7, #64	; 0x40
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b08e      	sub	sp, #56	; 0x38
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10a      	bne.n	8006b40 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	623b      	str	r3, [r7, #32]
}
 8006b3c:	bf00      	nop
 8006b3e:	e7fe      	b.n	8006b3e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00a      	beq.n	8006b5e <xQueueGiveFromISR+0x48>
	__asm volatile
 8006b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	61fb      	str	r3, [r7, #28]
}
 8006b5a:	bf00      	nop
 8006b5c:	e7fe      	b.n	8006b5c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d103      	bne.n	8006b6e <xQueueGiveFromISR+0x58>
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <xQueueGiveFromISR+0x5c>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e000      	b.n	8006b74 <xQueueGiveFromISR+0x5e>
 8006b72:	2300      	movs	r3, #0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10a      	bne.n	8006b8e <xQueueGiveFromISR+0x78>
	__asm volatile
 8006b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7c:	f383 8811 	msr	BASEPRI, r3
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	61bb      	str	r3, [r7, #24]
}
 8006b8a:	bf00      	nop
 8006b8c:	e7fe      	b.n	8006b8c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b8e:	f002 fa73 	bl	8009078 <vPortValidateInterruptPriority>
	__asm volatile
 8006b92:	f3ef 8211 	mrs	r2, BASEPRI
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	617a      	str	r2, [r7, #20]
 8006ba8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006baa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006bac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d22b      	bcs.n	8006c16 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bce:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006bd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd8:	d112      	bne.n	8006c00 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d016      	beq.n	8006c10 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be4:	3324      	adds	r3, #36	; 0x24
 8006be6:	4618      	mov	r0, r3
 8006be8:	f001 f936 	bl	8007e58 <xTaskRemoveFromEventList>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00e      	beq.n	8006c10 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00b      	beq.n	8006c10 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	e007      	b.n	8006c10 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c04:	3301      	adds	r3, #1
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	b25a      	sxtb	r2, r3
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006c10:	2301      	movs	r3, #1
 8006c12:	637b      	str	r3, [r7, #52]	; 0x34
 8006c14:	e001      	b.n	8006c1a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	637b      	str	r3, [r7, #52]	; 0x34
 8006c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f383 8811 	msr	BASEPRI, r3
}
 8006c24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3738      	adds	r7, #56	; 0x38
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b08c      	sub	sp, #48	; 0x30
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10a      	bne.n	8006c60 <xQueueReceive+0x30>
	__asm volatile
 8006c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	623b      	str	r3, [r7, #32]
}
 8006c5c:	bf00      	nop
 8006c5e:	e7fe      	b.n	8006c5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d103      	bne.n	8006c6e <xQueueReceive+0x3e>
 8006c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <xQueueReceive+0x42>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e000      	b.n	8006c74 <xQueueReceive+0x44>
 8006c72:	2300      	movs	r3, #0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10a      	bne.n	8006c8e <xQueueReceive+0x5e>
	__asm volatile
 8006c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7c:	f383 8811 	msr	BASEPRI, r3
 8006c80:	f3bf 8f6f 	isb	sy
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	61fb      	str	r3, [r7, #28]
}
 8006c8a:	bf00      	nop
 8006c8c:	e7fe      	b.n	8006c8c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c8e:	f001 fab5 	bl	80081fc <xTaskGetSchedulerState>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d102      	bne.n	8006c9e <xQueueReceive+0x6e>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d101      	bne.n	8006ca2 <xQueueReceive+0x72>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e000      	b.n	8006ca4 <xQueueReceive+0x74>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <xQueueReceive+0x8e>
	__asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	61bb      	str	r3, [r7, #24]
}
 8006cba:	bf00      	nop
 8006cbc:	e7fe      	b.n	8006cbc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cbe:	f002 f8f9 	bl	8008eb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d01f      	beq.n	8006d0e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cce:	68b9      	ldr	r1, [r7, #8]
 8006cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cd2:	f000 fafa 	bl	80072ca <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	1e5a      	subs	r2, r3, #1
 8006cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cdc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00f      	beq.n	8006d06 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce8:	3310      	adds	r3, #16
 8006cea:	4618      	mov	r0, r3
 8006cec:	f001 f8b4 	bl	8007e58 <xTaskRemoveFromEventList>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d007      	beq.n	8006d06 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006cf6:	4b3d      	ldr	r3, [pc, #244]	; (8006dec <xQueueReceive+0x1bc>)
 8006cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d06:	f002 f905 	bl	8008f14 <vPortExitCritical>
				return pdPASS;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e069      	b.n	8006de2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d103      	bne.n	8006d1c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d14:	f002 f8fe 	bl	8008f14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e062      	b.n	8006de2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d106      	bne.n	8006d30 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d22:	f107 0310 	add.w	r3, r7, #16
 8006d26:	4618      	mov	r0, r3
 8006d28:	f001 f8fa 	bl	8007f20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d30:	f002 f8f0 	bl	8008f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d34:	f000 fe54 	bl	80079e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d38:	f002 f8bc 	bl	8008eb4 <vPortEnterCritical>
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d42:	b25b      	sxtb	r3, r3
 8006d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d48:	d103      	bne.n	8006d52 <xQueueReceive+0x122>
 8006d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d58:	b25b      	sxtb	r3, r3
 8006d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5e:	d103      	bne.n	8006d68 <xQueueReceive+0x138>
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d68:	f002 f8d4 	bl	8008f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d6c:	1d3a      	adds	r2, r7, #4
 8006d6e:	f107 0310 	add.w	r3, r7, #16
 8006d72:	4611      	mov	r1, r2
 8006d74:	4618      	mov	r0, r3
 8006d76:	f001 f8e9 	bl	8007f4c <xTaskCheckForTimeOut>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d123      	bne.n	8006dc8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d82:	f000 fb1a 	bl	80073ba <prvIsQueueEmpty>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d017      	beq.n	8006dbc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8e:	3324      	adds	r3, #36	; 0x24
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	4611      	mov	r1, r2
 8006d94:	4618      	mov	r0, r3
 8006d96:	f001 f80f 	bl	8007db8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d9c:	f000 fabb 	bl	8007316 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006da0:	f000 fe2c 	bl	80079fc <xTaskResumeAll>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d189      	bne.n	8006cbe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006daa:	4b10      	ldr	r3, [pc, #64]	; (8006dec <xQueueReceive+0x1bc>)
 8006dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006db0:	601a      	str	r2, [r3, #0]
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	e780      	b.n	8006cbe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dbe:	f000 faaa 	bl	8007316 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dc2:	f000 fe1b 	bl	80079fc <xTaskResumeAll>
 8006dc6:	e77a      	b.n	8006cbe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dca:	f000 faa4 	bl	8007316 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dce:	f000 fe15 	bl	80079fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006dd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dd4:	f000 faf1 	bl	80073ba <prvIsQueueEmpty>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f43f af6f 	beq.w	8006cbe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006de0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3730      	adds	r7, #48	; 0x30
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	e000ed04 	.word	0xe000ed04

08006df0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b08e      	sub	sp, #56	; 0x38
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006e02:	2300      	movs	r3, #0
 8006e04:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10a      	bne.n	8006e22 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e10:	f383 8811 	msr	BASEPRI, r3
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	623b      	str	r3, [r7, #32]
}
 8006e1e:	bf00      	nop
 8006e20:	e7fe      	b.n	8006e20 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	61fb      	str	r3, [r7, #28]
}
 8006e3c:	bf00      	nop
 8006e3e:	e7fe      	b.n	8006e3e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e40:	f001 f9dc 	bl	80081fc <xTaskGetSchedulerState>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d102      	bne.n	8006e50 <xQueueSemaphoreTake+0x60>
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <xQueueSemaphoreTake+0x64>
 8006e50:	2301      	movs	r3, #1
 8006e52:	e000      	b.n	8006e56 <xQueueSemaphoreTake+0x66>
 8006e54:	2300      	movs	r3, #0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10a      	bne.n	8006e70 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	61bb      	str	r3, [r7, #24]
}
 8006e6c:	bf00      	nop
 8006e6e:	e7fe      	b.n	8006e6e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e70:	f002 f820 	bl	8008eb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e78:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d024      	beq.n	8006eca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e82:	1e5a      	subs	r2, r3, #1
 8006e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e86:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d104      	bne.n	8006e9a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006e90:	f001 fb2a 	bl	80084e8 <pvTaskIncrementMutexHeldCount>
 8006e94:	4602      	mov	r2, r0
 8006e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e98:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00f      	beq.n	8006ec2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea4:	3310      	adds	r3, #16
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 ffd6 	bl	8007e58 <xTaskRemoveFromEventList>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d007      	beq.n	8006ec2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006eb2:	4b54      	ldr	r3, [pc, #336]	; (8007004 <xQueueSemaphoreTake+0x214>)
 8006eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ec2:	f002 f827 	bl	8008f14 <vPortExitCritical>
				return pdPASS;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e097      	b.n	8006ffa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d111      	bne.n	8006ef4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00a      	beq.n	8006eec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	617b      	str	r3, [r7, #20]
}
 8006ee8:	bf00      	nop
 8006eea:	e7fe      	b.n	8006eea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006eec:	f002 f812 	bl	8008f14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	e082      	b.n	8006ffa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d106      	bne.n	8006f08 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006efa:	f107 030c 	add.w	r3, r7, #12
 8006efe:	4618      	mov	r0, r3
 8006f00:	f001 f80e 	bl	8007f20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f04:	2301      	movs	r3, #1
 8006f06:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f08:	f002 f804 	bl	8008f14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f0c:	f000 fd68 	bl	80079e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f10:	f001 ffd0 	bl	8008eb4 <vPortEnterCritical>
 8006f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f1a:	b25b      	sxtb	r3, r3
 8006f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f20:	d103      	bne.n	8006f2a <xQueueSemaphoreTake+0x13a>
 8006f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f30:	b25b      	sxtb	r3, r3
 8006f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f36:	d103      	bne.n	8006f40 <xQueueSemaphoreTake+0x150>
 8006f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f40:	f001 ffe8 	bl	8008f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f44:	463a      	mov	r2, r7
 8006f46:	f107 030c 	add.w	r3, r7, #12
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 fffd 	bl	8007f4c <xTaskCheckForTimeOut>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d132      	bne.n	8006fbe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f5a:	f000 fa2e 	bl	80073ba <prvIsQueueEmpty>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d026      	beq.n	8006fb2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d109      	bne.n	8006f80 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006f6c:	f001 ffa2 	bl	8008eb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f001 f95f 	bl	8008238 <xTaskPriorityInherit>
 8006f7a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006f7c:	f001 ffca 	bl	8008f14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f82:	3324      	adds	r3, #36	; 0x24
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	4611      	mov	r1, r2
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f000 ff15 	bl	8007db8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f90:	f000 f9c1 	bl	8007316 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f94:	f000 fd32 	bl	80079fc <xTaskResumeAll>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f47f af68 	bne.w	8006e70 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006fa0:	4b18      	ldr	r3, [pc, #96]	; (8007004 <xQueueSemaphoreTake+0x214>)
 8006fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	e75e      	b.n	8006e70 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006fb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fb4:	f000 f9af 	bl	8007316 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fb8:	f000 fd20 	bl	80079fc <xTaskResumeAll>
 8006fbc:	e758      	b.n	8006e70 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006fbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fc0:	f000 f9a9 	bl	8007316 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fc4:	f000 fd1a 	bl	80079fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fca:	f000 f9f6 	bl	80073ba <prvIsQueueEmpty>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f43f af4d 	beq.w	8006e70 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00d      	beq.n	8006ff8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006fdc:	f001 ff6a 	bl	8008eb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006fe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fe2:	f000 f8f0 	bl	80071c6 <prvGetDisinheritPriorityAfterTimeout>
 8006fe6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f001 f9f8 	bl	80083e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006ff4:	f001 ff8e 	bl	8008f14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ff8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3738      	adds	r7, #56	; 0x38
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	e000ed04 	.word	0xe000ed04

08007008 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b08e      	sub	sp, #56	; 0x38
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10a      	bne.n	8007034 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	623b      	str	r3, [r7, #32]
}
 8007030:	bf00      	nop
 8007032:	e7fe      	b.n	8007032 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d103      	bne.n	8007042 <xQueueReceiveFromISR+0x3a>
 800703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	d101      	bne.n	8007046 <xQueueReceiveFromISR+0x3e>
 8007042:	2301      	movs	r3, #1
 8007044:	e000      	b.n	8007048 <xQueueReceiveFromISR+0x40>
 8007046:	2300      	movs	r3, #0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10a      	bne.n	8007062 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	61fb      	str	r3, [r7, #28]
}
 800705e:	bf00      	nop
 8007060:	e7fe      	b.n	8007060 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007062:	f002 f809 	bl	8009078 <vPortValidateInterruptPriority>
	__asm volatile
 8007066:	f3ef 8211 	mrs	r2, BASEPRI
 800706a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	61ba      	str	r2, [r7, #24]
 800707c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800707e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007080:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007086:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	2b00      	cmp	r3, #0
 800708c:	d02f      	beq.n	80070ee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007098:	68b9      	ldr	r1, [r7, #8]
 800709a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800709c:	f000 f915 	bl	80072ca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	1e5a      	subs	r2, r3, #1
 80070a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80070a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b0:	d112      	bne.n	80070d8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d016      	beq.n	80070e8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070bc:	3310      	adds	r3, #16
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 feca 	bl	8007e58 <xTaskRemoveFromEventList>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00e      	beq.n	80070e8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00b      	beq.n	80070e8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	601a      	str	r2, [r3, #0]
 80070d6:	e007      	b.n	80070e8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80070d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070dc:	3301      	adds	r3, #1
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	b25a      	sxtb	r2, r3
 80070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80070e8:	2301      	movs	r3, #1
 80070ea:	637b      	str	r3, [r7, #52]	; 0x34
 80070ec:	e001      	b.n	80070f2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80070ee:	2300      	movs	r3, #0
 80070f0:	637b      	str	r3, [r7, #52]	; 0x34
 80070f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	f383 8811 	msr	BASEPRI, r3
}
 80070fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007100:	4618      	mov	r0, r3
 8007102:	3738      	adds	r7, #56	; 0x38
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10a      	bne.n	800712c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	60bb      	str	r3, [r7, #8]
}
 8007128:	bf00      	nop
 800712a:	e7fe      	b.n	800712a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800712c:	f001 fec2 	bl	8008eb4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007134:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007136:	f001 feed 	bl	8008f14 <vPortExitCritical>

	return uxReturn;
 800713a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10a      	bne.n	800716c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	60fb      	str	r3, [r7, #12]
}
 8007168:	bf00      	nop
 800716a:	e7fe      	b.n	800716a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007170:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007172:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007174:	4618      	mov	r0, r3
 8007176:	371c      	adds	r7, #28
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10a      	bne.n	80071a8 <vQueueDelete+0x28>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	60bb      	str	r3, [r7, #8]
}
 80071a4:	bf00      	nop
 80071a6:	e7fe      	b.n	80071a6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f000 f95f 	bl	800746c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d102      	bne.n	80071be <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f002 f869 	bl	8009290 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80071be:	bf00      	nop
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80071c6:	b480      	push	{r7}
 80071c8:	b085      	sub	sp, #20
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d006      	beq.n	80071e4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80071e0:	60fb      	str	r3, [r7, #12]
 80071e2:	e001      	b.n	80071e8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80071e4:	2300      	movs	r3, #0
 80071e6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80071e8:	68fb      	ldr	r3, [r7, #12]
	}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b086      	sub	sp, #24
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	60f8      	str	r0, [r7, #12]
 80071fe:	60b9      	str	r1, [r7, #8]
 8007200:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007202:	2300      	movs	r3, #0
 8007204:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10d      	bne.n	8007230 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d14d      	bne.n	80072b8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	4618      	mov	r0, r3
 8007222:	f001 f871 	bl	8008308 <xTaskPriorityDisinherit>
 8007226:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	609a      	str	r2, [r3, #8]
 800722e:	e043      	b.n	80072b8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d119      	bne.n	800726a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6858      	ldr	r0, [r3, #4]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	461a      	mov	r2, r3
 8007240:	68b9      	ldr	r1, [r7, #8]
 8007242:	f010 fca8 	bl	8017b96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724e:	441a      	add	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	429a      	cmp	r2, r3
 800725e:	d32b      	bcc.n	80072b8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	605a      	str	r2, [r3, #4]
 8007268:	e026      	b.n	80072b8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	68d8      	ldr	r0, [r3, #12]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	461a      	mov	r2, r3
 8007274:	68b9      	ldr	r1, [r7, #8]
 8007276:	f010 fc8e 	bl	8017b96 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	425b      	negs	r3, r3
 8007284:	441a      	add	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	429a      	cmp	r2, r3
 8007294:	d207      	bcs.n	80072a6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	689a      	ldr	r2, [r3, #8]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729e:	425b      	negs	r3, r3
 80072a0:	441a      	add	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d105      	bne.n	80072b8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d002      	beq.n	80072b8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	3b01      	subs	r3, #1
 80072b6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	1c5a      	adds	r2, r3, #1
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80072c0:	697b      	ldr	r3, [r7, #20]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3718      	adds	r7, #24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b082      	sub	sp, #8
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d018      	beq.n	800730e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68da      	ldr	r2, [r3, #12]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e4:	441a      	add	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d303      	bcc.n	80072fe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68d9      	ldr	r1, [r3, #12]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007306:	461a      	mov	r2, r3
 8007308:	6838      	ldr	r0, [r7, #0]
 800730a:	f010 fc44 	bl	8017b96 <memcpy>
	}
}
 800730e:	bf00      	nop
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b084      	sub	sp, #16
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800731e:	f001 fdc9 	bl	8008eb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007328:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800732a:	e011      	b.n	8007350 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	2b00      	cmp	r3, #0
 8007332:	d012      	beq.n	800735a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	3324      	adds	r3, #36	; 0x24
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fd8d 	bl	8007e58 <xTaskRemoveFromEventList>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d001      	beq.n	8007348 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007344:	f000 fe64 	bl	8008010 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	3b01      	subs	r3, #1
 800734c:	b2db      	uxtb	r3, r3
 800734e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007354:	2b00      	cmp	r3, #0
 8007356:	dce9      	bgt.n	800732c <prvUnlockQueue+0x16>
 8007358:	e000      	b.n	800735c <prvUnlockQueue+0x46>
					break;
 800735a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	22ff      	movs	r2, #255	; 0xff
 8007360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007364:	f001 fdd6 	bl	8008f14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007368:	f001 fda4 	bl	8008eb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007372:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007374:	e011      	b.n	800739a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d012      	beq.n	80073a4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	3310      	adds	r3, #16
 8007382:	4618      	mov	r0, r3
 8007384:	f000 fd68 	bl	8007e58 <xTaskRemoveFromEventList>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d001      	beq.n	8007392 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800738e:	f000 fe3f 	bl	8008010 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	3b01      	subs	r3, #1
 8007396:	b2db      	uxtb	r3, r3
 8007398:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800739a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	dce9      	bgt.n	8007376 <prvUnlockQueue+0x60>
 80073a2:	e000      	b.n	80073a6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80073a4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	22ff      	movs	r2, #255	; 0xff
 80073aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80073ae:	f001 fdb1 	bl	8008f14 <vPortExitCritical>
}
 80073b2:	bf00      	nop
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b084      	sub	sp, #16
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073c2:	f001 fd77 	bl	8008eb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d102      	bne.n	80073d4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073ce:	2301      	movs	r3, #1
 80073d0:	60fb      	str	r3, [r7, #12]
 80073d2:	e001      	b.n	80073d8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073d4:	2300      	movs	r3, #0
 80073d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073d8:	f001 fd9c 	bl	8008f14 <vPortExitCritical>

	return xReturn;
 80073dc:	68fb      	ldr	r3, [r7, #12]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073ee:	f001 fd61 	bl	8008eb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d102      	bne.n	8007404 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80073fe:	2301      	movs	r3, #1
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	e001      	b.n	8007408 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007408:	f001 fd84 	bl	8008f14 <vPortExitCritical>

	return xReturn;
 800740c:	68fb      	ldr	r3, [r7, #12]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
	...

08007418 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007422:	2300      	movs	r3, #0
 8007424:	60fb      	str	r3, [r7, #12]
 8007426:	e014      	b.n	8007452 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007428:	4a0f      	ldr	r2, [pc, #60]	; (8007468 <vQueueAddToRegistry+0x50>)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10b      	bne.n	800744c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007434:	490c      	ldr	r1, [pc, #48]	; (8007468 <vQueueAddToRegistry+0x50>)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800743e:	4a0a      	ldr	r2, [pc, #40]	; (8007468 <vQueueAddToRegistry+0x50>)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	00db      	lsls	r3, r3, #3
 8007444:	4413      	add	r3, r2
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800744a:	e006      	b.n	800745a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	3301      	adds	r3, #1
 8007450:	60fb      	str	r3, [r7, #12]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2b07      	cmp	r3, #7
 8007456:	d9e7      	bls.n	8007428 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007458:	bf00      	nop
 800745a:	bf00      	nop
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	20005c44 	.word	0x20005c44

0800746c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007474:	2300      	movs	r3, #0
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	e016      	b.n	80074a8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800747a:	4a10      	ldr	r2, [pc, #64]	; (80074bc <vQueueUnregisterQueue+0x50>)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	00db      	lsls	r3, r3, #3
 8007480:	4413      	add	r3, r2
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	429a      	cmp	r2, r3
 8007488:	d10b      	bne.n	80074a2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800748a:	4a0c      	ldr	r2, [pc, #48]	; (80074bc <vQueueUnregisterQueue+0x50>)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2100      	movs	r1, #0
 8007490:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007494:	4a09      	ldr	r2, [pc, #36]	; (80074bc <vQueueUnregisterQueue+0x50>)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	00db      	lsls	r3, r3, #3
 800749a:	4413      	add	r3, r2
 800749c:	2200      	movs	r2, #0
 800749e:	605a      	str	r2, [r3, #4]
				break;
 80074a0:	e006      	b.n	80074b0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	3301      	adds	r3, #1
 80074a6:	60fb      	str	r3, [r7, #12]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2b07      	cmp	r3, #7
 80074ac:	d9e5      	bls.n	800747a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80074ae:	bf00      	nop
 80074b0:	bf00      	nop
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	20005c44 	.word	0x20005c44

080074c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80074d0:	f001 fcf0 	bl	8008eb4 <vPortEnterCritical>
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074da:	b25b      	sxtb	r3, r3
 80074dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e0:	d103      	bne.n	80074ea <vQueueWaitForMessageRestricted+0x2a>
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074f0:	b25b      	sxtb	r3, r3
 80074f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f6:	d103      	bne.n	8007500 <vQueueWaitForMessageRestricted+0x40>
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007500:	f001 fd08 	bl	8008f14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007508:	2b00      	cmp	r3, #0
 800750a:	d106      	bne.n	800751a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	3324      	adds	r3, #36	; 0x24
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	68b9      	ldr	r1, [r7, #8]
 8007514:	4618      	mov	r0, r3
 8007516:	f000 fc73 	bl	8007e00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800751a:	6978      	ldr	r0, [r7, #20]
 800751c:	f7ff fefb 	bl	8007316 <prvUnlockQueue>
	}
 8007520:	bf00      	nop
 8007522:	3718      	adds	r7, #24
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007528:	b580      	push	{r7, lr}
 800752a:	b08e      	sub	sp, #56	; 0x38
 800752c:	af04      	add	r7, sp, #16
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
 8007534:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10a      	bne.n	8007552 <xTaskCreateStatic+0x2a>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	623b      	str	r3, [r7, #32]
}
 800754e:	bf00      	nop
 8007550:	e7fe      	b.n	8007550 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10a      	bne.n	800756e <xTaskCreateStatic+0x46>
	__asm volatile
 8007558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	61fb      	str	r3, [r7, #28]
}
 800756a:	bf00      	nop
 800756c:	e7fe      	b.n	800756c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800756e:	23a8      	movs	r3, #168	; 0xa8
 8007570:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	2ba8      	cmp	r3, #168	; 0xa8
 8007576:	d00a      	beq.n	800758e <xTaskCreateStatic+0x66>
	__asm volatile
 8007578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	61bb      	str	r3, [r7, #24]
}
 800758a:	bf00      	nop
 800758c:	e7fe      	b.n	800758c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800758e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007592:	2b00      	cmp	r3, #0
 8007594:	d01e      	beq.n	80075d4 <xTaskCreateStatic+0xac>
 8007596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007598:	2b00      	cmp	r3, #0
 800759a:	d01b      	beq.n	80075d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800759c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	2202      	movs	r2, #2
 80075aa:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80075ae:	2300      	movs	r3, #0
 80075b0:	9303      	str	r3, [sp, #12]
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	9302      	str	r3, [sp, #8]
 80075b6:	f107 0314 	add.w	r3, r7, #20
 80075ba:	9301      	str	r3, [sp, #4]
 80075bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	68b9      	ldr	r1, [r7, #8]
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 f850 	bl	800766c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075ce:	f000 f8f3 	bl	80077b8 <prvAddNewTaskToReadyList>
 80075d2:	e001      	b.n	80075d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80075d4:	2300      	movs	r3, #0
 80075d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075d8:	697b      	ldr	r3, [r7, #20]
	}
 80075da:	4618      	mov	r0, r3
 80075dc:	3728      	adds	r7, #40	; 0x28
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b08c      	sub	sp, #48	; 0x30
 80075e6:	af04      	add	r7, sp, #16
 80075e8:	60f8      	str	r0, [r7, #12]
 80075ea:	60b9      	str	r1, [r7, #8]
 80075ec:	603b      	str	r3, [r7, #0]
 80075ee:	4613      	mov	r3, r2
 80075f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80075f2:	88fb      	ldrh	r3, [r7, #6]
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4618      	mov	r0, r3
 80075f8:	f001 fd7e 	bl	80090f8 <pvPortMalloc>
 80075fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00e      	beq.n	8007622 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007604:	20a8      	movs	r0, #168	; 0xa8
 8007606:	f001 fd77 	bl	80090f8 <pvPortMalloc>
 800760a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	631a      	str	r2, [r3, #48]	; 0x30
 8007618:	e005      	b.n	8007626 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800761a:	6978      	ldr	r0, [r7, #20]
 800761c:	f001 fe38 	bl	8009290 <vPortFree>
 8007620:	e001      	b.n	8007626 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007622:	2300      	movs	r3, #0
 8007624:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d017      	beq.n	800765c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007634:	88fa      	ldrh	r2, [r7, #6]
 8007636:	2300      	movs	r3, #0
 8007638:	9303      	str	r3, [sp, #12]
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	9302      	str	r3, [sp, #8]
 800763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007640:	9301      	str	r3, [sp, #4]
 8007642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	68b9      	ldr	r1, [r7, #8]
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 f80e 	bl	800766c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007650:	69f8      	ldr	r0, [r7, #28]
 8007652:	f000 f8b1 	bl	80077b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007656:	2301      	movs	r3, #1
 8007658:	61bb      	str	r3, [r7, #24]
 800765a:	e002      	b.n	8007662 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800765c:	f04f 33ff 	mov.w	r3, #4294967295
 8007660:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007662:	69bb      	ldr	r3, [r7, #24]
	}
 8007664:	4618      	mov	r0, r3
 8007666:	3720      	adds	r7, #32
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
 8007678:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	461a      	mov	r2, r3
 8007684:	21a5      	movs	r1, #165	; 0xa5
 8007686:	f010 f9a0 	bl	80179ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007694:	3b01      	subs	r3, #1
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	f023 0307 	bic.w	r3, r3, #7
 80076a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	f003 0307 	and.w	r3, r3, #7
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80076ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	617b      	str	r3, [r7, #20]
}
 80076c0:	bf00      	nop
 80076c2:	e7fe      	b.n	80076c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d01f      	beq.n	800770a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076ca:	2300      	movs	r3, #0
 80076cc:	61fb      	str	r3, [r7, #28]
 80076ce:	e012      	b.n	80076f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	4413      	add	r3, r2
 80076d6:	7819      	ldrb	r1, [r3, #0]
 80076d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	4413      	add	r3, r2
 80076de:	3334      	adds	r3, #52	; 0x34
 80076e0:	460a      	mov	r2, r1
 80076e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	4413      	add	r3, r2
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d006      	beq.n	80076fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	3301      	adds	r3, #1
 80076f4:	61fb      	str	r3, [r7, #28]
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	2b0f      	cmp	r3, #15
 80076fa:	d9e9      	bls.n	80076d0 <prvInitialiseNewTask+0x64>
 80076fc:	e000      	b.n	8007700 <prvInitialiseNewTask+0x94>
			{
				break;
 80076fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007702:	2200      	movs	r2, #0
 8007704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007708:	e003      	b.n	8007712 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007714:	2b37      	cmp	r3, #55	; 0x37
 8007716:	d901      	bls.n	800771c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007718:	2337      	movs	r3, #55	; 0x37
 800771a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007720:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007726:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772a:	2200      	movs	r2, #0
 800772c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007730:	3304      	adds	r3, #4
 8007732:	4618      	mov	r0, r3
 8007734:	f7fe fd64 	bl	8006200 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773a:	3318      	adds	r3, #24
 800773c:	4618      	mov	r0, r3
 800773e:	f7fe fd5f 	bl	8006200 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007746:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007750:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007756:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775a:	2200      	movs	r2, #0
 800775c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007762:	2200      	movs	r2, #0
 8007764:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776a:	3354      	adds	r3, #84	; 0x54
 800776c:	224c      	movs	r2, #76	; 0x4c
 800776e:	2100      	movs	r1, #0
 8007770:	4618      	mov	r0, r3
 8007772:	f010 f92a 	bl	80179ca <memset>
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	4a0c      	ldr	r2, [pc, #48]	; (80077ac <prvInitialiseNewTask+0x140>)
 800777a:	659a      	str	r2, [r3, #88]	; 0x58
 800777c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777e:	4a0c      	ldr	r2, [pc, #48]	; (80077b0 <prvInitialiseNewTask+0x144>)
 8007780:	65da      	str	r2, [r3, #92]	; 0x5c
 8007782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007784:	4a0b      	ldr	r2, [pc, #44]	; (80077b4 <prvInitialiseNewTask+0x148>)
 8007786:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	68f9      	ldr	r1, [r7, #12]
 800778c:	69b8      	ldr	r0, [r7, #24]
 800778e:	f001 fa61 	bl	8008c54 <pxPortInitialiseStack>
 8007792:	4602      	mov	r2, r0
 8007794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007796:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779a:	2b00      	cmp	r3, #0
 800779c:	d002      	beq.n	80077a4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077a4:	bf00      	nop
 80077a6:	3720      	adds	r7, #32
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	2000d79c 	.word	0x2000d79c
 80077b0:	2000d804 	.word	0x2000d804
 80077b4:	2000d86c 	.word	0x2000d86c

080077b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80077c0:	f001 fb78 	bl	8008eb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80077c4:	4b2d      	ldr	r3, [pc, #180]	; (800787c <prvAddNewTaskToReadyList+0xc4>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3301      	adds	r3, #1
 80077ca:	4a2c      	ldr	r2, [pc, #176]	; (800787c <prvAddNewTaskToReadyList+0xc4>)
 80077cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80077ce:	4b2c      	ldr	r3, [pc, #176]	; (8007880 <prvAddNewTaskToReadyList+0xc8>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d109      	bne.n	80077ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80077d6:	4a2a      	ldr	r2, [pc, #168]	; (8007880 <prvAddNewTaskToReadyList+0xc8>)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077dc:	4b27      	ldr	r3, [pc, #156]	; (800787c <prvAddNewTaskToReadyList+0xc4>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d110      	bne.n	8007806 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077e4:	f000 fc38 	bl	8008058 <prvInitialiseTaskLists>
 80077e8:	e00d      	b.n	8007806 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077ea:	4b26      	ldr	r3, [pc, #152]	; (8007884 <prvAddNewTaskToReadyList+0xcc>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d109      	bne.n	8007806 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077f2:	4b23      	ldr	r3, [pc, #140]	; (8007880 <prvAddNewTaskToReadyList+0xc8>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d802      	bhi.n	8007806 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007800:	4a1f      	ldr	r2, [pc, #124]	; (8007880 <prvAddNewTaskToReadyList+0xc8>)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007806:	4b20      	ldr	r3, [pc, #128]	; (8007888 <prvAddNewTaskToReadyList+0xd0>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3301      	adds	r3, #1
 800780c:	4a1e      	ldr	r2, [pc, #120]	; (8007888 <prvAddNewTaskToReadyList+0xd0>)
 800780e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007810:	4b1d      	ldr	r3, [pc, #116]	; (8007888 <prvAddNewTaskToReadyList+0xd0>)
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800781c:	4b1b      	ldr	r3, [pc, #108]	; (800788c <prvAddNewTaskToReadyList+0xd4>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	429a      	cmp	r2, r3
 8007822:	d903      	bls.n	800782c <prvAddNewTaskToReadyList+0x74>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007828:	4a18      	ldr	r2, [pc, #96]	; (800788c <prvAddNewTaskToReadyList+0xd4>)
 800782a:	6013      	str	r3, [r2, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007830:	4613      	mov	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4413      	add	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4a15      	ldr	r2, [pc, #84]	; (8007890 <prvAddNewTaskToReadyList+0xd8>)
 800783a:	441a      	add	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	3304      	adds	r3, #4
 8007840:	4619      	mov	r1, r3
 8007842:	4610      	mov	r0, r2
 8007844:	f7fe fce9 	bl	800621a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007848:	f001 fb64 	bl	8008f14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800784c:	4b0d      	ldr	r3, [pc, #52]	; (8007884 <prvAddNewTaskToReadyList+0xcc>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00e      	beq.n	8007872 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007854:	4b0a      	ldr	r3, [pc, #40]	; (8007880 <prvAddNewTaskToReadyList+0xc8>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785e:	429a      	cmp	r2, r3
 8007860:	d207      	bcs.n	8007872 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007862:	4b0c      	ldr	r3, [pc, #48]	; (8007894 <prvAddNewTaskToReadyList+0xdc>)
 8007864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007872:	bf00      	nop
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	20006158 	.word	0x20006158
 8007880:	20005c84 	.word	0x20005c84
 8007884:	20006164 	.word	0x20006164
 8007888:	20006174 	.word	0x20006174
 800788c:	20006160 	.word	0x20006160
 8007890:	20005c88 	.word	0x20005c88
 8007894:	e000ed04 	.word	0xe000ed04

08007898 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80078a0:	2300      	movs	r3, #0
 80078a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d017      	beq.n	80078da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80078aa:	4b13      	ldr	r3, [pc, #76]	; (80078f8 <vTaskDelay+0x60>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <vTaskDelay+0x30>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	60bb      	str	r3, [r7, #8]
}
 80078c4:	bf00      	nop
 80078c6:	e7fe      	b.n	80078c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80078c8:	f000 f88a 	bl	80079e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80078cc:	2100      	movs	r1, #0
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fe1e 	bl	8008510 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80078d4:	f000 f892 	bl	80079fc <xTaskResumeAll>
 80078d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d107      	bne.n	80078f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80078e0:	4b06      	ldr	r3, [pc, #24]	; (80078fc <vTaskDelay+0x64>)
 80078e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078f0:	bf00      	nop
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	20006180 	.word	0x20006180
 80078fc:	e000ed04 	.word	0xe000ed04

08007900 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b08a      	sub	sp, #40	; 0x28
 8007904:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007906:	2300      	movs	r3, #0
 8007908:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800790a:	2300      	movs	r3, #0
 800790c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800790e:	463a      	mov	r2, r7
 8007910:	1d39      	adds	r1, r7, #4
 8007912:	f107 0308 	add.w	r3, r7, #8
 8007916:	4618      	mov	r0, r3
 8007918:	f7fe fc1e 	bl	8006158 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	9202      	str	r2, [sp, #8]
 8007924:	9301      	str	r3, [sp, #4]
 8007926:	2300      	movs	r3, #0
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	2300      	movs	r3, #0
 800792c:	460a      	mov	r2, r1
 800792e:	4924      	ldr	r1, [pc, #144]	; (80079c0 <vTaskStartScheduler+0xc0>)
 8007930:	4824      	ldr	r0, [pc, #144]	; (80079c4 <vTaskStartScheduler+0xc4>)
 8007932:	f7ff fdf9 	bl	8007528 <xTaskCreateStatic>
 8007936:	4603      	mov	r3, r0
 8007938:	4a23      	ldr	r2, [pc, #140]	; (80079c8 <vTaskStartScheduler+0xc8>)
 800793a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800793c:	4b22      	ldr	r3, [pc, #136]	; (80079c8 <vTaskStartScheduler+0xc8>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007944:	2301      	movs	r3, #1
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	e001      	b.n	800794e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800794a:	2300      	movs	r3, #0
 800794c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d102      	bne.n	800795a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007954:	f000 fe30 	bl	80085b8 <xTimerCreateTimerTask>
 8007958:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d11b      	bne.n	8007998 <vTaskStartScheduler+0x98>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	613b      	str	r3, [r7, #16]
}
 8007972:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007974:	4b15      	ldr	r3, [pc, #84]	; (80079cc <vTaskStartScheduler+0xcc>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	3354      	adds	r3, #84	; 0x54
 800797a:	4a15      	ldr	r2, [pc, #84]	; (80079d0 <vTaskStartScheduler+0xd0>)
 800797c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800797e:	4b15      	ldr	r3, [pc, #84]	; (80079d4 <vTaskStartScheduler+0xd4>)
 8007980:	f04f 32ff 	mov.w	r2, #4294967295
 8007984:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007986:	4b14      	ldr	r3, [pc, #80]	; (80079d8 <vTaskStartScheduler+0xd8>)
 8007988:	2201      	movs	r2, #1
 800798a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800798c:	4b13      	ldr	r3, [pc, #76]	; (80079dc <vTaskStartScheduler+0xdc>)
 800798e:	2200      	movs	r2, #0
 8007990:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007992:	f001 f9ed 	bl	8008d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007996:	e00e      	b.n	80079b6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799e:	d10a      	bne.n	80079b6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	60fb      	str	r3, [r7, #12]
}
 80079b2:	bf00      	nop
 80079b4:	e7fe      	b.n	80079b4 <vTaskStartScheduler+0xb4>
}
 80079b6:	bf00      	nop
 80079b8:	3718      	adds	r7, #24
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	08018c0c 	.word	0x08018c0c
 80079c4:	08008029 	.word	0x08008029
 80079c8:	2000617c 	.word	0x2000617c
 80079cc:	20005c84 	.word	0x20005c84
 80079d0:	20000088 	.word	0x20000088
 80079d4:	20006178 	.word	0x20006178
 80079d8:	20006164 	.word	0x20006164
 80079dc:	2000615c 	.word	0x2000615c

080079e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80079e0:	b480      	push	{r7}
 80079e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80079e4:	4b04      	ldr	r3, [pc, #16]	; (80079f8 <vTaskSuspendAll+0x18>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3301      	adds	r3, #1
 80079ea:	4a03      	ldr	r2, [pc, #12]	; (80079f8 <vTaskSuspendAll+0x18>)
 80079ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80079ee:	bf00      	nop
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr
 80079f8:	20006180 	.word	0x20006180

080079fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007a02:	2300      	movs	r3, #0
 8007a04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007a06:	2300      	movs	r3, #0
 8007a08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007a0a:	4b42      	ldr	r3, [pc, #264]	; (8007b14 <xTaskResumeAll+0x118>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10a      	bne.n	8007a28 <xTaskResumeAll+0x2c>
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	603b      	str	r3, [r7, #0]
}
 8007a24:	bf00      	nop
 8007a26:	e7fe      	b.n	8007a26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a28:	f001 fa44 	bl	8008eb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a2c:	4b39      	ldr	r3, [pc, #228]	; (8007b14 <xTaskResumeAll+0x118>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	4a38      	ldr	r2, [pc, #224]	; (8007b14 <xTaskResumeAll+0x118>)
 8007a34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a36:	4b37      	ldr	r3, [pc, #220]	; (8007b14 <xTaskResumeAll+0x118>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d162      	bne.n	8007b04 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a3e:	4b36      	ldr	r3, [pc, #216]	; (8007b18 <xTaskResumeAll+0x11c>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d05e      	beq.n	8007b04 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a46:	e02f      	b.n	8007aa8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a48:	4b34      	ldr	r3, [pc, #208]	; (8007b1c <xTaskResumeAll+0x120>)
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	3318      	adds	r3, #24
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fe fc3d 	bl	80062d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fe fc38 	bl	80062d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a68:	4b2d      	ldr	r3, [pc, #180]	; (8007b20 <xTaskResumeAll+0x124>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d903      	bls.n	8007a78 <xTaskResumeAll+0x7c>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a74:	4a2a      	ldr	r2, [pc, #168]	; (8007b20 <xTaskResumeAll+0x124>)
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4a27      	ldr	r2, [pc, #156]	; (8007b24 <xTaskResumeAll+0x128>)
 8007a86:	441a      	add	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	4610      	mov	r0, r2
 8007a90:	f7fe fbc3 	bl	800621a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a98:	4b23      	ldr	r3, [pc, #140]	; (8007b28 <xTaskResumeAll+0x12c>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d302      	bcc.n	8007aa8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007aa2:	4b22      	ldr	r3, [pc, #136]	; (8007b2c <xTaskResumeAll+0x130>)
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007aa8:	4b1c      	ldr	r3, [pc, #112]	; (8007b1c <xTaskResumeAll+0x120>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1cb      	bne.n	8007a48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d001      	beq.n	8007aba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ab6:	f000 fb71 	bl	800819c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007aba:	4b1d      	ldr	r3, [pc, #116]	; (8007b30 <xTaskResumeAll+0x134>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d010      	beq.n	8007ae8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ac6:	f000 f859 	bl	8007b7c <xTaskIncrementTick>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007ad0:	4b16      	ldr	r3, [pc, #88]	; (8007b2c <xTaskResumeAll+0x130>)
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1f1      	bne.n	8007ac6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007ae2:	4b13      	ldr	r3, [pc, #76]	; (8007b30 <xTaskResumeAll+0x134>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ae8:	4b10      	ldr	r3, [pc, #64]	; (8007b2c <xTaskResumeAll+0x130>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d009      	beq.n	8007b04 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007af0:	2301      	movs	r3, #1
 8007af2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007af4:	4b0f      	ldr	r3, [pc, #60]	; (8007b34 <xTaskResumeAll+0x138>)
 8007af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007afa:	601a      	str	r2, [r3, #0]
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b04:	f001 fa06 	bl	8008f14 <vPortExitCritical>

	return xAlreadyYielded;
 8007b08:	68bb      	ldr	r3, [r7, #8]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20006180 	.word	0x20006180
 8007b18:	20006158 	.word	0x20006158
 8007b1c:	20006118 	.word	0x20006118
 8007b20:	20006160 	.word	0x20006160
 8007b24:	20005c88 	.word	0x20005c88
 8007b28:	20005c84 	.word	0x20005c84
 8007b2c:	2000616c 	.word	0x2000616c
 8007b30:	20006168 	.word	0x20006168
 8007b34:	e000ed04 	.word	0xe000ed04

08007b38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007b3e:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <xTaskGetTickCount+0x1c>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007b44:	687b      	ldr	r3, [r7, #4]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	2000615c 	.word	0x2000615c

08007b58 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b5e:	f001 fa8b 	bl	8009078 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007b62:	2300      	movs	r3, #0
 8007b64:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007b66:	4b04      	ldr	r3, [pc, #16]	; (8007b78 <xTaskGetTickCountFromISR+0x20>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b6c:	683b      	ldr	r3, [r7, #0]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	2000615c 	.word	0x2000615c

08007b7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b82:	2300      	movs	r3, #0
 8007b84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b86:	4b4f      	ldr	r3, [pc, #316]	; (8007cc4 <xTaskIncrementTick+0x148>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f040 808f 	bne.w	8007cae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b90:	4b4d      	ldr	r3, [pc, #308]	; (8007cc8 <xTaskIncrementTick+0x14c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3301      	adds	r3, #1
 8007b96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b98:	4a4b      	ldr	r2, [pc, #300]	; (8007cc8 <xTaskIncrementTick+0x14c>)
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d120      	bne.n	8007be6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ba4:	4b49      	ldr	r3, [pc, #292]	; (8007ccc <xTaskIncrementTick+0x150>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00a      	beq.n	8007bc4 <xTaskIncrementTick+0x48>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	603b      	str	r3, [r7, #0]
}
 8007bc0:	bf00      	nop
 8007bc2:	e7fe      	b.n	8007bc2 <xTaskIncrementTick+0x46>
 8007bc4:	4b41      	ldr	r3, [pc, #260]	; (8007ccc <xTaskIncrementTick+0x150>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	4b41      	ldr	r3, [pc, #260]	; (8007cd0 <xTaskIncrementTick+0x154>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a3f      	ldr	r2, [pc, #252]	; (8007ccc <xTaskIncrementTick+0x150>)
 8007bd0:	6013      	str	r3, [r2, #0]
 8007bd2:	4a3f      	ldr	r2, [pc, #252]	; (8007cd0 <xTaskIncrementTick+0x154>)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6013      	str	r3, [r2, #0]
 8007bd8:	4b3e      	ldr	r3, [pc, #248]	; (8007cd4 <xTaskIncrementTick+0x158>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	4a3d      	ldr	r2, [pc, #244]	; (8007cd4 <xTaskIncrementTick+0x158>)
 8007be0:	6013      	str	r3, [r2, #0]
 8007be2:	f000 fadb 	bl	800819c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007be6:	4b3c      	ldr	r3, [pc, #240]	; (8007cd8 <xTaskIncrementTick+0x15c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d349      	bcc.n	8007c84 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bf0:	4b36      	ldr	r3, [pc, #216]	; (8007ccc <xTaskIncrementTick+0x150>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d104      	bne.n	8007c04 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bfa:	4b37      	ldr	r3, [pc, #220]	; (8007cd8 <xTaskIncrementTick+0x15c>)
 8007bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8007c00:	601a      	str	r2, [r3, #0]
					break;
 8007c02:	e03f      	b.n	8007c84 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c04:	4b31      	ldr	r3, [pc, #196]	; (8007ccc <xTaskIncrementTick+0x150>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d203      	bcs.n	8007c24 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c1c:	4a2e      	ldr	r2, [pc, #184]	; (8007cd8 <xTaskIncrementTick+0x15c>)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c22:	e02f      	b.n	8007c84 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	3304      	adds	r3, #4
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7fe fb53 	bl	80062d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d004      	beq.n	8007c40 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	3318      	adds	r3, #24
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fe fb4a 	bl	80062d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c44:	4b25      	ldr	r3, [pc, #148]	; (8007cdc <xTaskIncrementTick+0x160>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d903      	bls.n	8007c54 <xTaskIncrementTick+0xd8>
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c50:	4a22      	ldr	r2, [pc, #136]	; (8007cdc <xTaskIncrementTick+0x160>)
 8007c52:	6013      	str	r3, [r2, #0]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c58:	4613      	mov	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4413      	add	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4a1f      	ldr	r2, [pc, #124]	; (8007ce0 <xTaskIncrementTick+0x164>)
 8007c62:	441a      	add	r2, r3
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	3304      	adds	r3, #4
 8007c68:	4619      	mov	r1, r3
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	f7fe fad5 	bl	800621a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c74:	4b1b      	ldr	r3, [pc, #108]	; (8007ce4 <xTaskIncrementTick+0x168>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d3b8      	bcc.n	8007bf0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c82:	e7b5      	b.n	8007bf0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c84:	4b17      	ldr	r3, [pc, #92]	; (8007ce4 <xTaskIncrementTick+0x168>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c8a:	4915      	ldr	r1, [pc, #84]	; (8007ce0 <xTaskIncrementTick+0x164>)
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	440b      	add	r3, r1
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d901      	bls.n	8007ca0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007ca0:	4b11      	ldr	r3, [pc, #68]	; (8007ce8 <xTaskIncrementTick+0x16c>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d007      	beq.n	8007cb8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	617b      	str	r3, [r7, #20]
 8007cac:	e004      	b.n	8007cb8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007cae:	4b0f      	ldr	r3, [pc, #60]	; (8007cec <xTaskIncrementTick+0x170>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	4a0d      	ldr	r2, [pc, #52]	; (8007cec <xTaskIncrementTick+0x170>)
 8007cb6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007cb8:	697b      	ldr	r3, [r7, #20]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3718      	adds	r7, #24
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20006180 	.word	0x20006180
 8007cc8:	2000615c 	.word	0x2000615c
 8007ccc:	20006110 	.word	0x20006110
 8007cd0:	20006114 	.word	0x20006114
 8007cd4:	20006170 	.word	0x20006170
 8007cd8:	20006178 	.word	0x20006178
 8007cdc:	20006160 	.word	0x20006160
 8007ce0:	20005c88 	.word	0x20005c88
 8007ce4:	20005c84 	.word	0x20005c84
 8007ce8:	2000616c 	.word	0x2000616c
 8007cec:	20006168 	.word	0x20006168

08007cf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007cf6:	4b2a      	ldr	r3, [pc, #168]	; (8007da0 <vTaskSwitchContext+0xb0>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007cfe:	4b29      	ldr	r3, [pc, #164]	; (8007da4 <vTaskSwitchContext+0xb4>)
 8007d00:	2201      	movs	r2, #1
 8007d02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d04:	e046      	b.n	8007d94 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007d06:	4b27      	ldr	r3, [pc, #156]	; (8007da4 <vTaskSwitchContext+0xb4>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d0c:	4b26      	ldr	r3, [pc, #152]	; (8007da8 <vTaskSwitchContext+0xb8>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	60fb      	str	r3, [r7, #12]
 8007d12:	e010      	b.n	8007d36 <vTaskSwitchContext+0x46>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10a      	bne.n	8007d30 <vTaskSwitchContext+0x40>
	__asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1e:	f383 8811 	msr	BASEPRI, r3
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	607b      	str	r3, [r7, #4]
}
 8007d2c:	bf00      	nop
 8007d2e:	e7fe      	b.n	8007d2e <vTaskSwitchContext+0x3e>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3b01      	subs	r3, #1
 8007d34:	60fb      	str	r3, [r7, #12]
 8007d36:	491d      	ldr	r1, [pc, #116]	; (8007dac <vTaskSwitchContext+0xbc>)
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	4413      	add	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	440b      	add	r3, r1
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d0e4      	beq.n	8007d14 <vTaskSwitchContext+0x24>
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	4413      	add	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4a15      	ldr	r2, [pc, #84]	; (8007dac <vTaskSwitchContext+0xbc>)
 8007d56:	4413      	add	r3, r2
 8007d58:	60bb      	str	r3, [r7, #8]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	605a      	str	r2, [r3, #4]
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	3308      	adds	r3, #8
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d104      	bne.n	8007d7a <vTaskSwitchContext+0x8a>
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	685a      	ldr	r2, [r3, #4]
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	605a      	str	r2, [r3, #4]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	4a0b      	ldr	r2, [pc, #44]	; (8007db0 <vTaskSwitchContext+0xc0>)
 8007d82:	6013      	str	r3, [r2, #0]
 8007d84:	4a08      	ldr	r2, [pc, #32]	; (8007da8 <vTaskSwitchContext+0xb8>)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d8a:	4b09      	ldr	r3, [pc, #36]	; (8007db0 <vTaskSwitchContext+0xc0>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3354      	adds	r3, #84	; 0x54
 8007d90:	4a08      	ldr	r2, [pc, #32]	; (8007db4 <vTaskSwitchContext+0xc4>)
 8007d92:	6013      	str	r3, [r2, #0]
}
 8007d94:	bf00      	nop
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	20006180 	.word	0x20006180
 8007da4:	2000616c 	.word	0x2000616c
 8007da8:	20006160 	.word	0x20006160
 8007dac:	20005c88 	.word	0x20005c88
 8007db0:	20005c84 	.word	0x20005c84
 8007db4:	20000088 	.word	0x20000088

08007db8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10a      	bne.n	8007dde <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	60fb      	str	r3, [r7, #12]
}
 8007dda:	bf00      	nop
 8007ddc:	e7fe      	b.n	8007ddc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dde:	4b07      	ldr	r3, [pc, #28]	; (8007dfc <vTaskPlaceOnEventList+0x44>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3318      	adds	r3, #24
 8007de4:	4619      	mov	r1, r3
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7fe fa3b 	bl	8006262 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007dec:	2101      	movs	r1, #1
 8007dee:	6838      	ldr	r0, [r7, #0]
 8007df0:	f000 fb8e 	bl	8008510 <prvAddCurrentTaskToDelayedList>
}
 8007df4:	bf00      	nop
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	20005c84 	.word	0x20005c84

08007e00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10a      	bne.n	8007e28 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	617b      	str	r3, [r7, #20]
}
 8007e24:	bf00      	nop
 8007e26:	e7fe      	b.n	8007e26 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e28:	4b0a      	ldr	r3, [pc, #40]	; (8007e54 <vTaskPlaceOnEventListRestricted+0x54>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3318      	adds	r3, #24
 8007e2e:	4619      	mov	r1, r3
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f7fe f9f2 	bl	800621a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d002      	beq.n	8007e42 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e40:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007e42:	6879      	ldr	r1, [r7, #4]
 8007e44:	68b8      	ldr	r0, [r7, #8]
 8007e46:	f000 fb63 	bl	8008510 <prvAddCurrentTaskToDelayedList>
	}
 8007e4a:	bf00      	nop
 8007e4c:	3718      	adds	r7, #24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20005c84 	.word	0x20005c84

08007e58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b086      	sub	sp, #24
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10a      	bne.n	8007e84 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	60fb      	str	r3, [r7, #12]
}
 8007e80:	bf00      	nop
 8007e82:	e7fe      	b.n	8007e82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	3318      	adds	r3, #24
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7fe fa23 	bl	80062d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e8e:	4b1e      	ldr	r3, [pc, #120]	; (8007f08 <xTaskRemoveFromEventList+0xb0>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d11d      	bne.n	8007ed2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	3304      	adds	r3, #4
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fe fa1a 	bl	80062d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ea4:	4b19      	ldr	r3, [pc, #100]	; (8007f0c <xTaskRemoveFromEventList+0xb4>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d903      	bls.n	8007eb4 <xTaskRemoveFromEventList+0x5c>
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb0:	4a16      	ldr	r2, [pc, #88]	; (8007f0c <xTaskRemoveFromEventList+0xb4>)
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb8:	4613      	mov	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4a13      	ldr	r2, [pc, #76]	; (8007f10 <xTaskRemoveFromEventList+0xb8>)
 8007ec2:	441a      	add	r2, r3
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	3304      	adds	r3, #4
 8007ec8:	4619      	mov	r1, r3
 8007eca:	4610      	mov	r0, r2
 8007ecc:	f7fe f9a5 	bl	800621a <vListInsertEnd>
 8007ed0:	e005      	b.n	8007ede <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	3318      	adds	r3, #24
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	480e      	ldr	r0, [pc, #56]	; (8007f14 <xTaskRemoveFromEventList+0xbc>)
 8007eda:	f7fe f99e 	bl	800621a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee2:	4b0d      	ldr	r3, [pc, #52]	; (8007f18 <xTaskRemoveFromEventList+0xc0>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d905      	bls.n	8007ef8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007eec:	2301      	movs	r3, #1
 8007eee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ef0:	4b0a      	ldr	r3, [pc, #40]	; (8007f1c <xTaskRemoveFromEventList+0xc4>)
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	601a      	str	r2, [r3, #0]
 8007ef6:	e001      	b.n	8007efc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007efc:	697b      	ldr	r3, [r7, #20]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3718      	adds	r7, #24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	20006180 	.word	0x20006180
 8007f0c:	20006160 	.word	0x20006160
 8007f10:	20005c88 	.word	0x20005c88
 8007f14:	20006118 	.word	0x20006118
 8007f18:	20005c84 	.word	0x20005c84
 8007f1c:	2000616c 	.word	0x2000616c

08007f20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f28:	4b06      	ldr	r3, [pc, #24]	; (8007f44 <vTaskInternalSetTimeOutState+0x24>)
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f30:	4b05      	ldr	r3, [pc, #20]	; (8007f48 <vTaskInternalSetTimeOutState+0x28>)
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	605a      	str	r2, [r3, #4]
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr
 8007f44:	20006170 	.word	0x20006170
 8007f48:	2000615c 	.word	0x2000615c

08007f4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b088      	sub	sp, #32
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10a      	bne.n	8007f72 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f60:	f383 8811 	msr	BASEPRI, r3
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	613b      	str	r3, [r7, #16]
}
 8007f6e:	bf00      	nop
 8007f70:	e7fe      	b.n	8007f70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10a      	bne.n	8007f8e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7c:	f383 8811 	msr	BASEPRI, r3
 8007f80:	f3bf 8f6f 	isb	sy
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	60fb      	str	r3, [r7, #12]
}
 8007f8a:	bf00      	nop
 8007f8c:	e7fe      	b.n	8007f8c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007f8e:	f000 ff91 	bl	8008eb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f92:	4b1d      	ldr	r3, [pc, #116]	; (8008008 <xTaskCheckForTimeOut+0xbc>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007faa:	d102      	bne.n	8007fb2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007fac:	2300      	movs	r3, #0
 8007fae:	61fb      	str	r3, [r7, #28]
 8007fb0:	e023      	b.n	8007ffa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	4b15      	ldr	r3, [pc, #84]	; (800800c <xTaskCheckForTimeOut+0xc0>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d007      	beq.n	8007fce <xTaskCheckForTimeOut+0x82>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	69ba      	ldr	r2, [r7, #24]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d302      	bcc.n	8007fce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	61fb      	str	r3, [r7, #28]
 8007fcc:	e015      	b.n	8007ffa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d20b      	bcs.n	8007ff0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	1ad2      	subs	r2, r2, r3
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7ff ff9b 	bl	8007f20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007fea:	2300      	movs	r3, #0
 8007fec:	61fb      	str	r3, [r7, #28]
 8007fee:	e004      	b.n	8007ffa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ffa:	f000 ff8b 	bl	8008f14 <vPortExitCritical>

	return xReturn;
 8007ffe:	69fb      	ldr	r3, [r7, #28]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3720      	adds	r7, #32
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	2000615c 	.word	0x2000615c
 800800c:	20006170 	.word	0x20006170

08008010 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008010:	b480      	push	{r7}
 8008012:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008014:	4b03      	ldr	r3, [pc, #12]	; (8008024 <vTaskMissedYield+0x14>)
 8008016:	2201      	movs	r2, #1
 8008018:	601a      	str	r2, [r3, #0]
}
 800801a:	bf00      	nop
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr
 8008024:	2000616c 	.word	0x2000616c

08008028 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008030:	f000 f852 	bl	80080d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008034:	4b06      	ldr	r3, [pc, #24]	; (8008050 <prvIdleTask+0x28>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d9f9      	bls.n	8008030 <prvIdleTask+0x8>
			{
				taskYIELD();
 800803c:	4b05      	ldr	r3, [pc, #20]	; (8008054 <prvIdleTask+0x2c>)
 800803e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800804c:	e7f0      	b.n	8008030 <prvIdleTask+0x8>
 800804e:	bf00      	nop
 8008050:	20005c88 	.word	0x20005c88
 8008054:	e000ed04 	.word	0xe000ed04

08008058 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800805e:	2300      	movs	r3, #0
 8008060:	607b      	str	r3, [r7, #4]
 8008062:	e00c      	b.n	800807e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	4613      	mov	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4a12      	ldr	r2, [pc, #72]	; (80080b8 <prvInitialiseTaskLists+0x60>)
 8008070:	4413      	add	r3, r2
 8008072:	4618      	mov	r0, r3
 8008074:	f7fe f8a4 	bl	80061c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	3301      	adds	r3, #1
 800807c:	607b      	str	r3, [r7, #4]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2b37      	cmp	r3, #55	; 0x37
 8008082:	d9ef      	bls.n	8008064 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008084:	480d      	ldr	r0, [pc, #52]	; (80080bc <prvInitialiseTaskLists+0x64>)
 8008086:	f7fe f89b 	bl	80061c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800808a:	480d      	ldr	r0, [pc, #52]	; (80080c0 <prvInitialiseTaskLists+0x68>)
 800808c:	f7fe f898 	bl	80061c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008090:	480c      	ldr	r0, [pc, #48]	; (80080c4 <prvInitialiseTaskLists+0x6c>)
 8008092:	f7fe f895 	bl	80061c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008096:	480c      	ldr	r0, [pc, #48]	; (80080c8 <prvInitialiseTaskLists+0x70>)
 8008098:	f7fe f892 	bl	80061c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800809c:	480b      	ldr	r0, [pc, #44]	; (80080cc <prvInitialiseTaskLists+0x74>)
 800809e:	f7fe f88f 	bl	80061c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80080a2:	4b0b      	ldr	r3, [pc, #44]	; (80080d0 <prvInitialiseTaskLists+0x78>)
 80080a4:	4a05      	ldr	r2, [pc, #20]	; (80080bc <prvInitialiseTaskLists+0x64>)
 80080a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80080a8:	4b0a      	ldr	r3, [pc, #40]	; (80080d4 <prvInitialiseTaskLists+0x7c>)
 80080aa:	4a05      	ldr	r2, [pc, #20]	; (80080c0 <prvInitialiseTaskLists+0x68>)
 80080ac:	601a      	str	r2, [r3, #0]
}
 80080ae:	bf00      	nop
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	20005c88 	.word	0x20005c88
 80080bc:	200060e8 	.word	0x200060e8
 80080c0:	200060fc 	.word	0x200060fc
 80080c4:	20006118 	.word	0x20006118
 80080c8:	2000612c 	.word	0x2000612c
 80080cc:	20006144 	.word	0x20006144
 80080d0:	20006110 	.word	0x20006110
 80080d4:	20006114 	.word	0x20006114

080080d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080de:	e019      	b.n	8008114 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80080e0:	f000 fee8 	bl	8008eb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080e4:	4b10      	ldr	r3, [pc, #64]	; (8008128 <prvCheckTasksWaitingTermination+0x50>)
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	3304      	adds	r3, #4
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7fe f8ef 	bl	80062d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080f6:	4b0d      	ldr	r3, [pc, #52]	; (800812c <prvCheckTasksWaitingTermination+0x54>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3b01      	subs	r3, #1
 80080fc:	4a0b      	ldr	r2, [pc, #44]	; (800812c <prvCheckTasksWaitingTermination+0x54>)
 80080fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008100:	4b0b      	ldr	r3, [pc, #44]	; (8008130 <prvCheckTasksWaitingTermination+0x58>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	3b01      	subs	r3, #1
 8008106:	4a0a      	ldr	r2, [pc, #40]	; (8008130 <prvCheckTasksWaitingTermination+0x58>)
 8008108:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800810a:	f000 ff03 	bl	8008f14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f810 	bl	8008134 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008114:	4b06      	ldr	r3, [pc, #24]	; (8008130 <prvCheckTasksWaitingTermination+0x58>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1e1      	bne.n	80080e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800811c:	bf00      	nop
 800811e:	bf00      	nop
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	2000612c 	.word	0x2000612c
 800812c:	20006158 	.word	0x20006158
 8008130:	20006140 	.word	0x20006140

08008134 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	3354      	adds	r3, #84	; 0x54
 8008140:	4618      	mov	r0, r3
 8008142:	f00f fc6d 	bl	8017a20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800814c:	2b00      	cmp	r3, #0
 800814e:	d108      	bne.n	8008162 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008154:	4618      	mov	r0, r3
 8008156:	f001 f89b 	bl	8009290 <vPortFree>
				vPortFree( pxTCB );
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f001 f898 	bl	8009290 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008160:	e018      	b.n	8008194 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008168:	2b01      	cmp	r3, #1
 800816a:	d103      	bne.n	8008174 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f001 f88f 	bl	8009290 <vPortFree>
	}
 8008172:	e00f      	b.n	8008194 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800817a:	2b02      	cmp	r3, #2
 800817c:	d00a      	beq.n	8008194 <prvDeleteTCB+0x60>
	__asm volatile
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	60fb      	str	r3, [r7, #12]
}
 8008190:	bf00      	nop
 8008192:	e7fe      	b.n	8008192 <prvDeleteTCB+0x5e>
	}
 8008194:	bf00      	nop
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081a2:	4b0c      	ldr	r3, [pc, #48]	; (80081d4 <prvResetNextTaskUnblockTime+0x38>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d104      	bne.n	80081b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80081ac:	4b0a      	ldr	r3, [pc, #40]	; (80081d8 <prvResetNextTaskUnblockTime+0x3c>)
 80081ae:	f04f 32ff 	mov.w	r2, #4294967295
 80081b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80081b4:	e008      	b.n	80081c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081b6:	4b07      	ldr	r3, [pc, #28]	; (80081d4 <prvResetNextTaskUnblockTime+0x38>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	4a04      	ldr	r2, [pc, #16]	; (80081d8 <prvResetNextTaskUnblockTime+0x3c>)
 80081c6:	6013      	str	r3, [r2, #0]
}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	20006110 	.word	0x20006110
 80081d8:	20006178 	.word	0x20006178

080081dc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80081e2:	4b05      	ldr	r3, [pc, #20]	; (80081f8 <xTaskGetCurrentTaskHandle+0x1c>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80081e8:	687b      	ldr	r3, [r7, #4]
	}
 80081ea:	4618      	mov	r0, r3
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	20005c84 	.word	0x20005c84

080081fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008202:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <xTaskGetSchedulerState+0x34>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d102      	bne.n	8008210 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800820a:	2301      	movs	r3, #1
 800820c:	607b      	str	r3, [r7, #4]
 800820e:	e008      	b.n	8008222 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008210:	4b08      	ldr	r3, [pc, #32]	; (8008234 <xTaskGetSchedulerState+0x38>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d102      	bne.n	800821e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008218:	2302      	movs	r3, #2
 800821a:	607b      	str	r3, [r7, #4]
 800821c:	e001      	b.n	8008222 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800821e:	2300      	movs	r3, #0
 8008220:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008222:	687b      	ldr	r3, [r7, #4]
	}
 8008224:	4618      	mov	r0, r3
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	20006164 	.word	0x20006164
 8008234:	20006180 	.word	0x20006180

08008238 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008244:	2300      	movs	r3, #0
 8008246:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d051      	beq.n	80082f2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008252:	4b2a      	ldr	r3, [pc, #168]	; (80082fc <xTaskPriorityInherit+0xc4>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	429a      	cmp	r2, r3
 800825a:	d241      	bcs.n	80082e0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	2b00      	cmp	r3, #0
 8008262:	db06      	blt.n	8008272 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008264:	4b25      	ldr	r3, [pc, #148]	; (80082fc <xTaskPriorityInherit+0xc4>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	6959      	ldr	r1, [r3, #20]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800827a:	4613      	mov	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4a1f      	ldr	r2, [pc, #124]	; (8008300 <xTaskPriorityInherit+0xc8>)
 8008284:	4413      	add	r3, r2
 8008286:	4299      	cmp	r1, r3
 8008288:	d122      	bne.n	80082d0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	3304      	adds	r3, #4
 800828e:	4618      	mov	r0, r3
 8008290:	f7fe f820 	bl	80062d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008294:	4b19      	ldr	r3, [pc, #100]	; (80082fc <xTaskPriorityInherit+0xc4>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a2:	4b18      	ldr	r3, [pc, #96]	; (8008304 <xTaskPriorityInherit+0xcc>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d903      	bls.n	80082b2 <xTaskPriorityInherit+0x7a>
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ae:	4a15      	ldr	r2, [pc, #84]	; (8008304 <xTaskPriorityInherit+0xcc>)
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b6:	4613      	mov	r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	4413      	add	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4a10      	ldr	r2, [pc, #64]	; (8008300 <xTaskPriorityInherit+0xc8>)
 80082c0:	441a      	add	r2, r3
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	3304      	adds	r3, #4
 80082c6:	4619      	mov	r1, r3
 80082c8:	4610      	mov	r0, r2
 80082ca:	f7fd ffa6 	bl	800621a <vListInsertEnd>
 80082ce:	e004      	b.n	80082da <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80082d0:	4b0a      	ldr	r3, [pc, #40]	; (80082fc <xTaskPriorityInherit+0xc4>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80082da:	2301      	movs	r3, #1
 80082dc:	60fb      	str	r3, [r7, #12]
 80082de:	e008      	b.n	80082f2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082e4:	4b05      	ldr	r3, [pc, #20]	; (80082fc <xTaskPriorityInherit+0xc4>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d201      	bcs.n	80082f2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80082ee:	2301      	movs	r3, #1
 80082f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082f2:	68fb      	ldr	r3, [r7, #12]
	}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	20005c84 	.word	0x20005c84
 8008300:	20005c88 	.word	0x20005c88
 8008304:	20006160 	.word	0x20006160

08008308 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008314:	2300      	movs	r3, #0
 8008316:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d056      	beq.n	80083cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800831e:	4b2e      	ldr	r3, [pc, #184]	; (80083d8 <xTaskPriorityDisinherit+0xd0>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	429a      	cmp	r2, r3
 8008326:	d00a      	beq.n	800833e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	60fb      	str	r3, [r7, #12]
}
 800833a:	bf00      	nop
 800833c:	e7fe      	b.n	800833c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10a      	bne.n	800835c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834a:	f383 8811 	msr	BASEPRI, r3
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f3bf 8f4f 	dsb	sy
 8008356:	60bb      	str	r3, [r7, #8]
}
 8008358:	bf00      	nop
 800835a:	e7fe      	b.n	800835a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008360:	1e5a      	subs	r2, r3, #1
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800836e:	429a      	cmp	r2, r3
 8008370:	d02c      	beq.n	80083cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008376:	2b00      	cmp	r3, #0
 8008378:	d128      	bne.n	80083cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	3304      	adds	r3, #4
 800837e:	4618      	mov	r0, r3
 8008380:	f7fd ffa8 	bl	80062d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008390:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800839c:	4b0f      	ldr	r3, [pc, #60]	; (80083dc <xTaskPriorityDisinherit+0xd4>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d903      	bls.n	80083ac <xTaskPriorityDisinherit+0xa4>
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a8:	4a0c      	ldr	r2, [pc, #48]	; (80083dc <xTaskPriorityDisinherit+0xd4>)
 80083aa:	6013      	str	r3, [r2, #0]
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b0:	4613      	mov	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4413      	add	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4a09      	ldr	r2, [pc, #36]	; (80083e0 <xTaskPriorityDisinherit+0xd8>)
 80083ba:	441a      	add	r2, r3
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	3304      	adds	r3, #4
 80083c0:	4619      	mov	r1, r3
 80083c2:	4610      	mov	r0, r2
 80083c4:	f7fd ff29 	bl	800621a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80083c8:	2301      	movs	r3, #1
 80083ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083cc:	697b      	ldr	r3, [r7, #20]
	}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3718      	adds	r7, #24
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	20005c84 	.word	0x20005c84
 80083dc:	20006160 	.word	0x20006160
 80083e0:	20005c88 	.word	0x20005c88

080083e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b088      	sub	sp, #32
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80083f2:	2301      	movs	r3, #1
 80083f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d06a      	beq.n	80084d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10a      	bne.n	800841a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008408:	f383 8811 	msr	BASEPRI, r3
 800840c:	f3bf 8f6f 	isb	sy
 8008410:	f3bf 8f4f 	dsb	sy
 8008414:	60fb      	str	r3, [r7, #12]
}
 8008416:	bf00      	nop
 8008418:	e7fe      	b.n	8008418 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800841e:	683a      	ldr	r2, [r7, #0]
 8008420:	429a      	cmp	r2, r3
 8008422:	d902      	bls.n	800842a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	61fb      	str	r3, [r7, #28]
 8008428:	e002      	b.n	8008430 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800842e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008434:	69fa      	ldr	r2, [r7, #28]
 8008436:	429a      	cmp	r2, r3
 8008438:	d04b      	beq.n	80084d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	429a      	cmp	r2, r3
 8008442:	d146      	bne.n	80084d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008444:	4b25      	ldr	r3, [pc, #148]	; (80084dc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	429a      	cmp	r2, r3
 800844c:	d10a      	bne.n	8008464 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	60bb      	str	r3, [r7, #8]
}
 8008460:	bf00      	nop
 8008462:	e7fe      	b.n	8008462 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008468:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	69fa      	ldr	r2, [r7, #28]
 800846e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	2b00      	cmp	r3, #0
 8008476:	db04      	blt.n	8008482 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	6959      	ldr	r1, [r3, #20]
 8008486:	693a      	ldr	r2, [r7, #16]
 8008488:	4613      	mov	r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4413      	add	r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4a13      	ldr	r2, [pc, #76]	; (80084e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008492:	4413      	add	r3, r2
 8008494:	4299      	cmp	r1, r3
 8008496:	d11c      	bne.n	80084d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	3304      	adds	r3, #4
 800849c:	4618      	mov	r0, r3
 800849e:	f7fd ff19 	bl	80062d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a6:	4b0f      	ldr	r3, [pc, #60]	; (80084e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d903      	bls.n	80084b6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b2:	4a0c      	ldr	r2, [pc, #48]	; (80084e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80084b4:	6013      	str	r3, [r2, #0]
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ba:	4613      	mov	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	4413      	add	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4a07      	ldr	r2, [pc, #28]	; (80084e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80084c4:	441a      	add	r2, r3
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	3304      	adds	r3, #4
 80084ca:	4619      	mov	r1, r3
 80084cc:	4610      	mov	r0, r2
 80084ce:	f7fd fea4 	bl	800621a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80084d2:	bf00      	nop
 80084d4:	3720      	adds	r7, #32
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	20005c84 	.word	0x20005c84
 80084e0:	20005c88 	.word	0x20005c88
 80084e4:	20006160 	.word	0x20006160

080084e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80084e8:	b480      	push	{r7}
 80084ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80084ec:	4b07      	ldr	r3, [pc, #28]	; (800850c <pvTaskIncrementMutexHeldCount+0x24>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d004      	beq.n	80084fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80084f4:	4b05      	ldr	r3, [pc, #20]	; (800850c <pvTaskIncrementMutexHeldCount+0x24>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084fa:	3201      	adds	r2, #1
 80084fc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80084fe:	4b03      	ldr	r3, [pc, #12]	; (800850c <pvTaskIncrementMutexHeldCount+0x24>)
 8008500:	681b      	ldr	r3, [r3, #0]
	}
 8008502:	4618      	mov	r0, r3
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr
 800850c:	20005c84 	.word	0x20005c84

08008510 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800851a:	4b21      	ldr	r3, [pc, #132]	; (80085a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008520:	4b20      	ldr	r3, [pc, #128]	; (80085a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3304      	adds	r3, #4
 8008526:	4618      	mov	r0, r3
 8008528:	f7fd fed4 	bl	80062d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008532:	d10a      	bne.n	800854a <prvAddCurrentTaskToDelayedList+0x3a>
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d007      	beq.n	800854a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800853a:	4b1a      	ldr	r3, [pc, #104]	; (80085a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	3304      	adds	r3, #4
 8008540:	4619      	mov	r1, r3
 8008542:	4819      	ldr	r0, [pc, #100]	; (80085a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008544:	f7fd fe69 	bl	800621a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008548:	e026      	b.n	8008598 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4413      	add	r3, r2
 8008550:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008552:	4b14      	ldr	r3, [pc, #80]	; (80085a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	429a      	cmp	r2, r3
 8008560:	d209      	bcs.n	8008576 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008562:	4b12      	ldr	r3, [pc, #72]	; (80085ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	4b0f      	ldr	r3, [pc, #60]	; (80085a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	3304      	adds	r3, #4
 800856c:	4619      	mov	r1, r3
 800856e:	4610      	mov	r0, r2
 8008570:	f7fd fe77 	bl	8006262 <vListInsert>
}
 8008574:	e010      	b.n	8008598 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008576:	4b0e      	ldr	r3, [pc, #56]	; (80085b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	4b0a      	ldr	r3, [pc, #40]	; (80085a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	3304      	adds	r3, #4
 8008580:	4619      	mov	r1, r3
 8008582:	4610      	mov	r0, r2
 8008584:	f7fd fe6d 	bl	8006262 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008588:	4b0a      	ldr	r3, [pc, #40]	; (80085b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	429a      	cmp	r2, r3
 8008590:	d202      	bcs.n	8008598 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008592:	4a08      	ldr	r2, [pc, #32]	; (80085b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	6013      	str	r3, [r2, #0]
}
 8008598:	bf00      	nop
 800859a:	3710      	adds	r7, #16
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	2000615c 	.word	0x2000615c
 80085a4:	20005c84 	.word	0x20005c84
 80085a8:	20006144 	.word	0x20006144
 80085ac:	20006114 	.word	0x20006114
 80085b0:	20006110 	.word	0x20006110
 80085b4:	20006178 	.word	0x20006178

080085b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b08a      	sub	sp, #40	; 0x28
 80085bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80085be:	2300      	movs	r3, #0
 80085c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80085c2:	f000 fb07 	bl	8008bd4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80085c6:	4b1c      	ldr	r3, [pc, #112]	; (8008638 <xTimerCreateTimerTask+0x80>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d021      	beq.n	8008612 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80085ce:	2300      	movs	r3, #0
 80085d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80085d2:	2300      	movs	r3, #0
 80085d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80085d6:	1d3a      	adds	r2, r7, #4
 80085d8:	f107 0108 	add.w	r1, r7, #8
 80085dc:	f107 030c 	add.w	r3, r7, #12
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fd fdd3 	bl	800618c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80085e6:	6879      	ldr	r1, [r7, #4]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	9202      	str	r2, [sp, #8]
 80085ee:	9301      	str	r3, [sp, #4]
 80085f0:	2302      	movs	r3, #2
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	2300      	movs	r3, #0
 80085f6:	460a      	mov	r2, r1
 80085f8:	4910      	ldr	r1, [pc, #64]	; (800863c <xTimerCreateTimerTask+0x84>)
 80085fa:	4811      	ldr	r0, [pc, #68]	; (8008640 <xTimerCreateTimerTask+0x88>)
 80085fc:	f7fe ff94 	bl	8007528 <xTaskCreateStatic>
 8008600:	4603      	mov	r3, r0
 8008602:	4a10      	ldr	r2, [pc, #64]	; (8008644 <xTimerCreateTimerTask+0x8c>)
 8008604:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008606:	4b0f      	ldr	r3, [pc, #60]	; (8008644 <xTimerCreateTimerTask+0x8c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800860e:	2301      	movs	r3, #1
 8008610:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10a      	bne.n	800862e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861c:	f383 8811 	msr	BASEPRI, r3
 8008620:	f3bf 8f6f 	isb	sy
 8008624:	f3bf 8f4f 	dsb	sy
 8008628:	613b      	str	r3, [r7, #16]
}
 800862a:	bf00      	nop
 800862c:	e7fe      	b.n	800862c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800862e:	697b      	ldr	r3, [r7, #20]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3718      	adds	r7, #24
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	200061b4 	.word	0x200061b4
 800863c:	08018c14 	.word	0x08018c14
 8008640:	0800877d 	.word	0x0800877d
 8008644:	200061b8 	.word	0x200061b8

08008648 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b08a      	sub	sp, #40	; 0x28
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
 8008654:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008656:	2300      	movs	r3, #0
 8008658:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10a      	bne.n	8008676 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	623b      	str	r3, [r7, #32]
}
 8008672:	bf00      	nop
 8008674:	e7fe      	b.n	8008674 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008676:	4b1a      	ldr	r3, [pc, #104]	; (80086e0 <xTimerGenericCommand+0x98>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d02a      	beq.n	80086d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	2b05      	cmp	r3, #5
 800868e:	dc18      	bgt.n	80086c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008690:	f7ff fdb4 	bl	80081fc <xTaskGetSchedulerState>
 8008694:	4603      	mov	r3, r0
 8008696:	2b02      	cmp	r3, #2
 8008698:	d109      	bne.n	80086ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800869a:	4b11      	ldr	r3, [pc, #68]	; (80086e0 <xTimerGenericCommand+0x98>)
 800869c:	6818      	ldr	r0, [r3, #0]
 800869e:	f107 0110 	add.w	r1, r7, #16
 80086a2:	2300      	movs	r3, #0
 80086a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086a6:	f7fe f89d 	bl	80067e4 <xQueueGenericSend>
 80086aa:	6278      	str	r0, [r7, #36]	; 0x24
 80086ac:	e012      	b.n	80086d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80086ae:	4b0c      	ldr	r3, [pc, #48]	; (80086e0 <xTimerGenericCommand+0x98>)
 80086b0:	6818      	ldr	r0, [r3, #0]
 80086b2:	f107 0110 	add.w	r1, r7, #16
 80086b6:	2300      	movs	r3, #0
 80086b8:	2200      	movs	r2, #0
 80086ba:	f7fe f893 	bl	80067e4 <xQueueGenericSend>
 80086be:	6278      	str	r0, [r7, #36]	; 0x24
 80086c0:	e008      	b.n	80086d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80086c2:	4b07      	ldr	r3, [pc, #28]	; (80086e0 <xTimerGenericCommand+0x98>)
 80086c4:	6818      	ldr	r0, [r3, #0]
 80086c6:	f107 0110 	add.w	r1, r7, #16
 80086ca:	2300      	movs	r3, #0
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	f7fe f987 	bl	80069e0 <xQueueGenericSendFromISR>
 80086d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3728      	adds	r7, #40	; 0x28
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	200061b4 	.word	0x200061b4

080086e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b088      	sub	sp, #32
 80086e8:	af02      	add	r7, sp, #8
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086ee:	4b22      	ldr	r3, [pc, #136]	; (8008778 <prvProcessExpiredTimer+0x94>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	3304      	adds	r3, #4
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fd fde9 	bl	80062d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008708:	f003 0304 	and.w	r3, r3, #4
 800870c:	2b00      	cmp	r3, #0
 800870e:	d022      	beq.n	8008756 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	699a      	ldr	r2, [r3, #24]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	18d1      	adds	r1, r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	6978      	ldr	r0, [r7, #20]
 800871e:	f000 f8d1 	bl	80088c4 <prvInsertTimerInActiveList>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d01f      	beq.n	8008768 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008728:	2300      	movs	r3, #0
 800872a:	9300      	str	r3, [sp, #0]
 800872c:	2300      	movs	r3, #0
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	2100      	movs	r1, #0
 8008732:	6978      	ldr	r0, [r7, #20]
 8008734:	f7ff ff88 	bl	8008648 <xTimerGenericCommand>
 8008738:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d113      	bne.n	8008768 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	60fb      	str	r3, [r7, #12]
}
 8008752:	bf00      	nop
 8008754:	e7fe      	b.n	8008754 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800875c:	f023 0301 	bic.w	r3, r3, #1
 8008760:	b2da      	uxtb	r2, r3
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	6a1b      	ldr	r3, [r3, #32]
 800876c:	6978      	ldr	r0, [r7, #20]
 800876e:	4798      	blx	r3
}
 8008770:	bf00      	nop
 8008772:	3718      	adds	r7, #24
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	200061ac 	.word	0x200061ac

0800877c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008784:	f107 0308 	add.w	r3, r7, #8
 8008788:	4618      	mov	r0, r3
 800878a:	f000 f857 	bl	800883c <prvGetNextExpireTime>
 800878e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	4619      	mov	r1, r3
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f000 f803 	bl	80087a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800879a:	f000 f8d5 	bl	8008948 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800879e:	e7f1      	b.n	8008784 <prvTimerTask+0x8>

080087a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80087aa:	f7ff f919 	bl	80079e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80087ae:	f107 0308 	add.w	r3, r7, #8
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 f866 	bl	8008884 <prvSampleTimeNow>
 80087b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d130      	bne.n	8008822 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10a      	bne.n	80087dc <prvProcessTimerOrBlockTask+0x3c>
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d806      	bhi.n	80087dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80087ce:	f7ff f915 	bl	80079fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80087d2:	68f9      	ldr	r1, [r7, #12]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7ff ff85 	bl	80086e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80087da:	e024      	b.n	8008826 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d008      	beq.n	80087f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80087e2:	4b13      	ldr	r3, [pc, #76]	; (8008830 <prvProcessTimerOrBlockTask+0x90>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d101      	bne.n	80087f0 <prvProcessTimerOrBlockTask+0x50>
 80087ec:	2301      	movs	r3, #1
 80087ee:	e000      	b.n	80087f2 <prvProcessTimerOrBlockTask+0x52>
 80087f0:	2300      	movs	r3, #0
 80087f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80087f4:	4b0f      	ldr	r3, [pc, #60]	; (8008834 <prvProcessTimerOrBlockTask+0x94>)
 80087f6:	6818      	ldr	r0, [r3, #0]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	4619      	mov	r1, r3
 8008802:	f7fe fe5d 	bl	80074c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008806:	f7ff f8f9 	bl	80079fc <xTaskResumeAll>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10a      	bne.n	8008826 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008810:	4b09      	ldr	r3, [pc, #36]	; (8008838 <prvProcessTimerOrBlockTask+0x98>)
 8008812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008816:	601a      	str	r2, [r3, #0]
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	f3bf 8f6f 	isb	sy
}
 8008820:	e001      	b.n	8008826 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008822:	f7ff f8eb 	bl	80079fc <xTaskResumeAll>
}
 8008826:	bf00      	nop
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	200061b0 	.word	0x200061b0
 8008834:	200061b4 	.word	0x200061b4
 8008838:	e000ed04 	.word	0xe000ed04

0800883c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008844:	4b0e      	ldr	r3, [pc, #56]	; (8008880 <prvGetNextExpireTime+0x44>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <prvGetNextExpireTime+0x16>
 800884e:	2201      	movs	r2, #1
 8008850:	e000      	b.n	8008854 <prvGetNextExpireTime+0x18>
 8008852:	2200      	movs	r2, #0
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d105      	bne.n	800886c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008860:	4b07      	ldr	r3, [pc, #28]	; (8008880 <prvGetNextExpireTime+0x44>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	60fb      	str	r3, [r7, #12]
 800886a:	e001      	b.n	8008870 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800886c:	2300      	movs	r3, #0
 800886e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008870:	68fb      	ldr	r3, [r7, #12]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	200061ac 	.word	0x200061ac

08008884 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800888c:	f7ff f954 	bl	8007b38 <xTaskGetTickCount>
 8008890:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008892:	4b0b      	ldr	r3, [pc, #44]	; (80088c0 <prvSampleTimeNow+0x3c>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	429a      	cmp	r2, r3
 800889a:	d205      	bcs.n	80088a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800889c:	f000 f936 	bl	8008b0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	601a      	str	r2, [r3, #0]
 80088a6:	e002      	b.n	80088ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80088ae:	4a04      	ldr	r2, [pc, #16]	; (80088c0 <prvSampleTimeNow+0x3c>)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80088b4:	68fb      	ldr	r3, [r7, #12]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	200061bc 	.word	0x200061bc

080088c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
 80088d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80088d2:	2300      	movs	r3, #0
 80088d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d812      	bhi.n	8008910 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	1ad2      	subs	r2, r2, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d302      	bcc.n	80088fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80088f8:	2301      	movs	r3, #1
 80088fa:	617b      	str	r3, [r7, #20]
 80088fc:	e01b      	b.n	8008936 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80088fe:	4b10      	ldr	r3, [pc, #64]	; (8008940 <prvInsertTimerInActiveList+0x7c>)
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	3304      	adds	r3, #4
 8008906:	4619      	mov	r1, r3
 8008908:	4610      	mov	r0, r2
 800890a:	f7fd fcaa 	bl	8006262 <vListInsert>
 800890e:	e012      	b.n	8008936 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	429a      	cmp	r2, r3
 8008916:	d206      	bcs.n	8008926 <prvInsertTimerInActiveList+0x62>
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	429a      	cmp	r2, r3
 800891e:	d302      	bcc.n	8008926 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008920:	2301      	movs	r3, #1
 8008922:	617b      	str	r3, [r7, #20]
 8008924:	e007      	b.n	8008936 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008926:	4b07      	ldr	r3, [pc, #28]	; (8008944 <prvInsertTimerInActiveList+0x80>)
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3304      	adds	r3, #4
 800892e:	4619      	mov	r1, r3
 8008930:	4610      	mov	r0, r2
 8008932:	f7fd fc96 	bl	8006262 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008936:	697b      	ldr	r3, [r7, #20]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3718      	adds	r7, #24
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	200061b0 	.word	0x200061b0
 8008944:	200061ac 	.word	0x200061ac

08008948 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b08e      	sub	sp, #56	; 0x38
 800894c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800894e:	e0ca      	b.n	8008ae6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	da18      	bge.n	8008988 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008956:	1d3b      	adds	r3, r7, #4
 8008958:	3304      	adds	r3, #4
 800895a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800895c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10a      	bne.n	8008978 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008966:	f383 8811 	msr	BASEPRI, r3
 800896a:	f3bf 8f6f 	isb	sy
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	61fb      	str	r3, [r7, #28]
}
 8008974:	bf00      	nop
 8008976:	e7fe      	b.n	8008976 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800897e:	6850      	ldr	r0, [r2, #4]
 8008980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008982:	6892      	ldr	r2, [r2, #8]
 8008984:	4611      	mov	r1, r2
 8008986:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	f2c0 80ab 	blt.w	8008ae6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d004      	beq.n	80089a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800899c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899e:	3304      	adds	r3, #4
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fd fc97 	bl	80062d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80089a6:	463b      	mov	r3, r7
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7ff ff6b 	bl	8008884 <prvSampleTimeNow>
 80089ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2b09      	cmp	r3, #9
 80089b4:	f200 8096 	bhi.w	8008ae4 <prvProcessReceivedCommands+0x19c>
 80089b8:	a201      	add	r2, pc, #4	; (adr r2, 80089c0 <prvProcessReceivedCommands+0x78>)
 80089ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089be:	bf00      	nop
 80089c0:	080089e9 	.word	0x080089e9
 80089c4:	080089e9 	.word	0x080089e9
 80089c8:	080089e9 	.word	0x080089e9
 80089cc:	08008a5d 	.word	0x08008a5d
 80089d0:	08008a71 	.word	0x08008a71
 80089d4:	08008abb 	.word	0x08008abb
 80089d8:	080089e9 	.word	0x080089e9
 80089dc:	080089e9 	.word	0x080089e9
 80089e0:	08008a5d 	.word	0x08008a5d
 80089e4:	08008a71 	.word	0x08008a71
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089ee:	f043 0301 	orr.w	r3, r3, #1
 80089f2:	b2da      	uxtb	r2, r3
 80089f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	18d1      	adds	r1, r2, r3
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a08:	f7ff ff5c 	bl	80088c4 <prvInsertTimerInActiveList>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d069      	beq.n	8008ae6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a14:	6a1b      	ldr	r3, [r3, #32]
 8008a16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a20:	f003 0304 	and.w	r3, r3, #4
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d05e      	beq.n	8008ae6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	441a      	add	r2, r3
 8008a30:	2300      	movs	r3, #0
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	2300      	movs	r3, #0
 8008a36:	2100      	movs	r1, #0
 8008a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a3a:	f7ff fe05 	bl	8008648 <xTimerGenericCommand>
 8008a3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008a40:	6a3b      	ldr	r3, [r7, #32]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d14f      	bne.n	8008ae6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	61bb      	str	r3, [r7, #24]
}
 8008a58:	bf00      	nop
 8008a5a:	e7fe      	b.n	8008a5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a62:	f023 0301 	bic.w	r3, r3, #1
 8008a66:	b2da      	uxtb	r2, r3
 8008a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008a6e:	e03a      	b.n	8008ae6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a76:	f043 0301 	orr.w	r3, r3, #1
 8008a7a:	b2da      	uxtb	r2, r3
 8008a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10a      	bne.n	8008aa6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	617b      	str	r3, [r7, #20]
}
 8008aa2:	bf00      	nop
 8008aa4:	e7fe      	b.n	8008aa4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa8:	699a      	ldr	r2, [r3, #24]
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aac:	18d1      	adds	r1, r2, r3
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ab4:	f7ff ff06 	bl	80088c4 <prvInsertTimerInActiveList>
					break;
 8008ab8:	e015      	b.n	8008ae6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ac0:	f003 0302 	and.w	r3, r3, #2
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d103      	bne.n	8008ad0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aca:	f000 fbe1 	bl	8009290 <vPortFree>
 8008ace:	e00a      	b.n	8008ae6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ad6:	f023 0301 	bic.w	r3, r3, #1
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ade:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008ae2:	e000      	b.n	8008ae6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008ae4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ae6:	4b08      	ldr	r3, [pc, #32]	; (8008b08 <prvProcessReceivedCommands+0x1c0>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	1d39      	adds	r1, r7, #4
 8008aec:	2200      	movs	r2, #0
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fe f89e 	bl	8006c30 <xQueueReceive>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f47f af2a 	bne.w	8008950 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008afc:	bf00      	nop
 8008afe:	bf00      	nop
 8008b00:	3730      	adds	r7, #48	; 0x30
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	200061b4 	.word	0x200061b4

08008b0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b088      	sub	sp, #32
 8008b10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b12:	e048      	b.n	8008ba6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b14:	4b2d      	ldr	r3, [pc, #180]	; (8008bcc <prvSwitchTimerLists+0xc0>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b1e:	4b2b      	ldr	r3, [pc, #172]	; (8008bcc <prvSwitchTimerLists+0xc0>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7fd fbd1 	bl	80062d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b40:	f003 0304 	and.w	r3, r3, #4
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d02e      	beq.n	8008ba6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	4413      	add	r3, r2
 8008b50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d90e      	bls.n	8008b78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b66:	4b19      	ldr	r3, [pc, #100]	; (8008bcc <prvSwitchTimerLists+0xc0>)
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	4619      	mov	r1, r3
 8008b70:	4610      	mov	r0, r2
 8008b72:	f7fd fb76 	bl	8006262 <vListInsert>
 8008b76:	e016      	b.n	8008ba6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b78:	2300      	movs	r3, #0
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	2100      	movs	r1, #0
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f7ff fd60 	bl	8008648 <xTimerGenericCommand>
 8008b88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10a      	bne.n	8008ba6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	603b      	str	r3, [r7, #0]
}
 8008ba2:	bf00      	nop
 8008ba4:	e7fe      	b.n	8008ba4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ba6:	4b09      	ldr	r3, [pc, #36]	; (8008bcc <prvSwitchTimerLists+0xc0>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1b1      	bne.n	8008b14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008bb0:	4b06      	ldr	r3, [pc, #24]	; (8008bcc <prvSwitchTimerLists+0xc0>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008bb6:	4b06      	ldr	r3, [pc, #24]	; (8008bd0 <prvSwitchTimerLists+0xc4>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a04      	ldr	r2, [pc, #16]	; (8008bcc <prvSwitchTimerLists+0xc0>)
 8008bbc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008bbe:	4a04      	ldr	r2, [pc, #16]	; (8008bd0 <prvSwitchTimerLists+0xc4>)
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	6013      	str	r3, [r2, #0]
}
 8008bc4:	bf00      	nop
 8008bc6:	3718      	adds	r7, #24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	200061ac 	.word	0x200061ac
 8008bd0:	200061b0 	.word	0x200061b0

08008bd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008bda:	f000 f96b 	bl	8008eb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008bde:	4b15      	ldr	r3, [pc, #84]	; (8008c34 <prvCheckForValidListAndQueue+0x60>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d120      	bne.n	8008c28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008be6:	4814      	ldr	r0, [pc, #80]	; (8008c38 <prvCheckForValidListAndQueue+0x64>)
 8008be8:	f7fd faea 	bl	80061c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008bec:	4813      	ldr	r0, [pc, #76]	; (8008c3c <prvCheckForValidListAndQueue+0x68>)
 8008bee:	f7fd fae7 	bl	80061c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008bf2:	4b13      	ldr	r3, [pc, #76]	; (8008c40 <prvCheckForValidListAndQueue+0x6c>)
 8008bf4:	4a10      	ldr	r2, [pc, #64]	; (8008c38 <prvCheckForValidListAndQueue+0x64>)
 8008bf6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008bf8:	4b12      	ldr	r3, [pc, #72]	; (8008c44 <prvCheckForValidListAndQueue+0x70>)
 8008bfa:	4a10      	ldr	r2, [pc, #64]	; (8008c3c <prvCheckForValidListAndQueue+0x68>)
 8008bfc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008bfe:	2300      	movs	r3, #0
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	4b11      	ldr	r3, [pc, #68]	; (8008c48 <prvCheckForValidListAndQueue+0x74>)
 8008c04:	4a11      	ldr	r2, [pc, #68]	; (8008c4c <prvCheckForValidListAndQueue+0x78>)
 8008c06:	2110      	movs	r1, #16
 8008c08:	200a      	movs	r0, #10
 8008c0a:	f7fd fbf5 	bl	80063f8 <xQueueGenericCreateStatic>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	4a08      	ldr	r2, [pc, #32]	; (8008c34 <prvCheckForValidListAndQueue+0x60>)
 8008c12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c14:	4b07      	ldr	r3, [pc, #28]	; (8008c34 <prvCheckForValidListAndQueue+0x60>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d005      	beq.n	8008c28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c1c:	4b05      	ldr	r3, [pc, #20]	; (8008c34 <prvCheckForValidListAndQueue+0x60>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	490b      	ldr	r1, [pc, #44]	; (8008c50 <prvCheckForValidListAndQueue+0x7c>)
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fe fbf8 	bl	8007418 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c28:	f000 f974 	bl	8008f14 <vPortExitCritical>
}
 8008c2c:	bf00      	nop
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	200061b4 	.word	0x200061b4
 8008c38:	20006184 	.word	0x20006184
 8008c3c:	20006198 	.word	0x20006198
 8008c40:	200061ac 	.word	0x200061ac
 8008c44:	200061b0 	.word	0x200061b0
 8008c48:	20006260 	.word	0x20006260
 8008c4c:	200061c0 	.word	0x200061c0
 8008c50:	08018c1c 	.word	0x08018c1c

08008c54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	3b04      	subs	r3, #4
 8008c64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008c6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	3b04      	subs	r3, #4
 8008c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	f023 0201 	bic.w	r2, r3, #1
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	3b04      	subs	r3, #4
 8008c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c84:	4a0c      	ldr	r2, [pc, #48]	; (8008cb8 <pxPortInitialiseStack+0x64>)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	3b14      	subs	r3, #20
 8008c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	3b04      	subs	r3, #4
 8008c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f06f 0202 	mvn.w	r2, #2
 8008ca2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	3b20      	subs	r3, #32
 8008ca8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008caa:	68fb      	ldr	r3, [r7, #12]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3714      	adds	r7, #20
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr
 8008cb8:	08008cbd 	.word	0x08008cbd

08008cbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008cc6:	4b12      	ldr	r3, [pc, #72]	; (8008d10 <prvTaskExitError+0x54>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cce:	d00a      	beq.n	8008ce6 <prvTaskExitError+0x2a>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	60fb      	str	r3, [r7, #12]
}
 8008ce2:	bf00      	nop
 8008ce4:	e7fe      	b.n	8008ce4 <prvTaskExitError+0x28>
	__asm volatile
 8008ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cea:	f383 8811 	msr	BASEPRI, r3
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	60bb      	str	r3, [r7, #8]
}
 8008cf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008cfa:	bf00      	nop
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d0fc      	beq.n	8008cfc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d02:	bf00      	nop
 8008d04:	bf00      	nop
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr
 8008d10:	20000020 	.word	0x20000020
	...

08008d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d20:	4b07      	ldr	r3, [pc, #28]	; (8008d40 <pxCurrentTCBConst2>)
 8008d22:	6819      	ldr	r1, [r3, #0]
 8008d24:	6808      	ldr	r0, [r1, #0]
 8008d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2a:	f380 8809 	msr	PSP, r0
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f04f 0000 	mov.w	r0, #0
 8008d36:	f380 8811 	msr	BASEPRI, r0
 8008d3a:	4770      	bx	lr
 8008d3c:	f3af 8000 	nop.w

08008d40 <pxCurrentTCBConst2>:
 8008d40:	20005c84 	.word	0x20005c84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop

08008d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008d48:	4808      	ldr	r0, [pc, #32]	; (8008d6c <prvPortStartFirstTask+0x24>)
 8008d4a:	6800      	ldr	r0, [r0, #0]
 8008d4c:	6800      	ldr	r0, [r0, #0]
 8008d4e:	f380 8808 	msr	MSP, r0
 8008d52:	f04f 0000 	mov.w	r0, #0
 8008d56:	f380 8814 	msr	CONTROL, r0
 8008d5a:	b662      	cpsie	i
 8008d5c:	b661      	cpsie	f
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	df00      	svc	0
 8008d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008d6a:	bf00      	nop
 8008d6c:	e000ed08 	.word	0xe000ed08

08008d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b086      	sub	sp, #24
 8008d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008d76:	4b46      	ldr	r3, [pc, #280]	; (8008e90 <xPortStartScheduler+0x120>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a46      	ldr	r2, [pc, #280]	; (8008e94 <xPortStartScheduler+0x124>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d10a      	bne.n	8008d96 <xPortStartScheduler+0x26>
	__asm volatile
 8008d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d84:	f383 8811 	msr	BASEPRI, r3
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	f3bf 8f4f 	dsb	sy
 8008d90:	613b      	str	r3, [r7, #16]
}
 8008d92:	bf00      	nop
 8008d94:	e7fe      	b.n	8008d94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008d96:	4b3e      	ldr	r3, [pc, #248]	; (8008e90 <xPortStartScheduler+0x120>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a3f      	ldr	r2, [pc, #252]	; (8008e98 <xPortStartScheduler+0x128>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d10a      	bne.n	8008db6 <xPortStartScheduler+0x46>
	__asm volatile
 8008da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	60fb      	str	r3, [r7, #12]
}
 8008db2:	bf00      	nop
 8008db4:	e7fe      	b.n	8008db4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008db6:	4b39      	ldr	r3, [pc, #228]	; (8008e9c <xPortStartScheduler+0x12c>)
 8008db8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	22ff      	movs	r2, #255	; 0xff
 8008dc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008dd0:	78fb      	ldrb	r3, [r7, #3]
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008dd8:	b2da      	uxtb	r2, r3
 8008dda:	4b31      	ldr	r3, [pc, #196]	; (8008ea0 <xPortStartScheduler+0x130>)
 8008ddc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008dde:	4b31      	ldr	r3, [pc, #196]	; (8008ea4 <xPortStartScheduler+0x134>)
 8008de0:	2207      	movs	r2, #7
 8008de2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008de4:	e009      	b.n	8008dfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008de6:	4b2f      	ldr	r3, [pc, #188]	; (8008ea4 <xPortStartScheduler+0x134>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	3b01      	subs	r3, #1
 8008dec:	4a2d      	ldr	r2, [pc, #180]	; (8008ea4 <xPortStartScheduler+0x134>)
 8008dee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008df0:	78fb      	ldrb	r3, [r7, #3]
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	005b      	lsls	r3, r3, #1
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008dfa:	78fb      	ldrb	r3, [r7, #3]
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e02:	2b80      	cmp	r3, #128	; 0x80
 8008e04:	d0ef      	beq.n	8008de6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e06:	4b27      	ldr	r3, [pc, #156]	; (8008ea4 <xPortStartScheduler+0x134>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f1c3 0307 	rsb	r3, r3, #7
 8008e0e:	2b04      	cmp	r3, #4
 8008e10:	d00a      	beq.n	8008e28 <xPortStartScheduler+0xb8>
	__asm volatile
 8008e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e16:	f383 8811 	msr	BASEPRI, r3
 8008e1a:	f3bf 8f6f 	isb	sy
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	60bb      	str	r3, [r7, #8]
}
 8008e24:	bf00      	nop
 8008e26:	e7fe      	b.n	8008e26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e28:	4b1e      	ldr	r3, [pc, #120]	; (8008ea4 <xPortStartScheduler+0x134>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	021b      	lsls	r3, r3, #8
 8008e2e:	4a1d      	ldr	r2, [pc, #116]	; (8008ea4 <xPortStartScheduler+0x134>)
 8008e30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e32:	4b1c      	ldr	r3, [pc, #112]	; (8008ea4 <xPortStartScheduler+0x134>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e3a:	4a1a      	ldr	r2, [pc, #104]	; (8008ea4 <xPortStartScheduler+0x134>)
 8008e3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	b2da      	uxtb	r2, r3
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e46:	4b18      	ldr	r3, [pc, #96]	; (8008ea8 <xPortStartScheduler+0x138>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a17      	ldr	r2, [pc, #92]	; (8008ea8 <xPortStartScheduler+0x138>)
 8008e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e52:	4b15      	ldr	r3, [pc, #84]	; (8008ea8 <xPortStartScheduler+0x138>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a14      	ldr	r2, [pc, #80]	; (8008ea8 <xPortStartScheduler+0x138>)
 8008e58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008e5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e5e:	f000 f8dd 	bl	800901c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e62:	4b12      	ldr	r3, [pc, #72]	; (8008eac <xPortStartScheduler+0x13c>)
 8008e64:	2200      	movs	r2, #0
 8008e66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e68:	f000 f8fc 	bl	8009064 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e6c:	4b10      	ldr	r3, [pc, #64]	; (8008eb0 <xPortStartScheduler+0x140>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a0f      	ldr	r2, [pc, #60]	; (8008eb0 <xPortStartScheduler+0x140>)
 8008e72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008e76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e78:	f7ff ff66 	bl	8008d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e7c:	f7fe ff38 	bl	8007cf0 <vTaskSwitchContext>
	prvTaskExitError();
 8008e80:	f7ff ff1c 	bl	8008cbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3718      	adds	r7, #24
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	e000ed00 	.word	0xe000ed00
 8008e94:	410fc271 	.word	0x410fc271
 8008e98:	410fc270 	.word	0x410fc270
 8008e9c:	e000e400 	.word	0xe000e400
 8008ea0:	200062b0 	.word	0x200062b0
 8008ea4:	200062b4 	.word	0x200062b4
 8008ea8:	e000ed20 	.word	0xe000ed20
 8008eac:	20000020 	.word	0x20000020
 8008eb0:	e000ef34 	.word	0xe000ef34

08008eb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
	__asm volatile
 8008eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	607b      	str	r3, [r7, #4]
}
 8008ecc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ece:	4b0f      	ldr	r3, [pc, #60]	; (8008f0c <vPortEnterCritical+0x58>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	4a0d      	ldr	r2, [pc, #52]	; (8008f0c <vPortEnterCritical+0x58>)
 8008ed6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008ed8:	4b0c      	ldr	r3, [pc, #48]	; (8008f0c <vPortEnterCritical+0x58>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d10f      	bne.n	8008f00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ee0:	4b0b      	ldr	r3, [pc, #44]	; (8008f10 <vPortEnterCritical+0x5c>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00a      	beq.n	8008f00 <vPortEnterCritical+0x4c>
	__asm volatile
 8008eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eee:	f383 8811 	msr	BASEPRI, r3
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	603b      	str	r3, [r7, #0]
}
 8008efc:	bf00      	nop
 8008efe:	e7fe      	b.n	8008efe <vPortEnterCritical+0x4a>
	}
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	20000020 	.word	0x20000020
 8008f10:	e000ed04 	.word	0xe000ed04

08008f14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f1a:	4b12      	ldr	r3, [pc, #72]	; (8008f64 <vPortExitCritical+0x50>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10a      	bne.n	8008f38 <vPortExitCritical+0x24>
	__asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	607b      	str	r3, [r7, #4]
}
 8008f34:	bf00      	nop
 8008f36:	e7fe      	b.n	8008f36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008f38:	4b0a      	ldr	r3, [pc, #40]	; (8008f64 <vPortExitCritical+0x50>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	4a09      	ldr	r2, [pc, #36]	; (8008f64 <vPortExitCritical+0x50>)
 8008f40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f42:	4b08      	ldr	r3, [pc, #32]	; (8008f64 <vPortExitCritical+0x50>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d105      	bne.n	8008f56 <vPortExitCritical+0x42>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	f383 8811 	msr	BASEPRI, r3
}
 8008f54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f56:	bf00      	nop
 8008f58:	370c      	adds	r7, #12
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	20000020 	.word	0x20000020
	...

08008f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f70:	f3ef 8009 	mrs	r0, PSP
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	4b15      	ldr	r3, [pc, #84]	; (8008fd0 <pxCurrentTCBConst>)
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	f01e 0f10 	tst.w	lr, #16
 8008f80:	bf08      	it	eq
 8008f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f8a:	6010      	str	r0, [r2, #0]
 8008f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008f90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008f94:	f380 8811 	msr	BASEPRI, r0
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f7fe fea6 	bl	8007cf0 <vTaskSwitchContext>
 8008fa4:	f04f 0000 	mov.w	r0, #0
 8008fa8:	f380 8811 	msr	BASEPRI, r0
 8008fac:	bc09      	pop	{r0, r3}
 8008fae:	6819      	ldr	r1, [r3, #0]
 8008fb0:	6808      	ldr	r0, [r1, #0]
 8008fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb6:	f01e 0f10 	tst.w	lr, #16
 8008fba:	bf08      	it	eq
 8008fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008fc0:	f380 8809 	msr	PSP, r0
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	f3af 8000 	nop.w

08008fd0 <pxCurrentTCBConst>:
 8008fd0:	20005c84 	.word	0x20005c84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008fd4:	bf00      	nop
 8008fd6:	bf00      	nop

08008fd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	607b      	str	r3, [r7, #4]
}
 8008ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ff2:	f7fe fdc3 	bl	8007b7c <xTaskIncrementTick>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d003      	beq.n	8009004 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008ffc:	4b06      	ldr	r3, [pc, #24]	; (8009018 <xPortSysTickHandler+0x40>)
 8008ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009002:	601a      	str	r2, [r3, #0]
 8009004:	2300      	movs	r3, #0
 8009006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	f383 8811 	msr	BASEPRI, r3
}
 800900e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009010:	bf00      	nop
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	e000ed04 	.word	0xe000ed04

0800901c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800901c:	b480      	push	{r7}
 800901e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009020:	4b0b      	ldr	r3, [pc, #44]	; (8009050 <vPortSetupTimerInterrupt+0x34>)
 8009022:	2200      	movs	r2, #0
 8009024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009026:	4b0b      	ldr	r3, [pc, #44]	; (8009054 <vPortSetupTimerInterrupt+0x38>)
 8009028:	2200      	movs	r2, #0
 800902a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800902c:	4b0a      	ldr	r3, [pc, #40]	; (8009058 <vPortSetupTimerInterrupt+0x3c>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a0a      	ldr	r2, [pc, #40]	; (800905c <vPortSetupTimerInterrupt+0x40>)
 8009032:	fba2 2303 	umull	r2, r3, r2, r3
 8009036:	099b      	lsrs	r3, r3, #6
 8009038:	4a09      	ldr	r2, [pc, #36]	; (8009060 <vPortSetupTimerInterrupt+0x44>)
 800903a:	3b01      	subs	r3, #1
 800903c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800903e:	4b04      	ldr	r3, [pc, #16]	; (8009050 <vPortSetupTimerInterrupt+0x34>)
 8009040:	2207      	movs	r2, #7
 8009042:	601a      	str	r2, [r3, #0]
}
 8009044:	bf00      	nop
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	e000e010 	.word	0xe000e010
 8009054:	e000e018 	.word	0xe000e018
 8009058:	20000000 	.word	0x20000000
 800905c:	10624dd3 	.word	0x10624dd3
 8009060:	e000e014 	.word	0xe000e014

08009064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009064:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009074 <vPortEnableVFP+0x10>
 8009068:	6801      	ldr	r1, [r0, #0]
 800906a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800906e:	6001      	str	r1, [r0, #0]
 8009070:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009072:	bf00      	nop
 8009074:	e000ed88 	.word	0xe000ed88

08009078 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800907e:	f3ef 8305 	mrs	r3, IPSR
 8009082:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2b0f      	cmp	r3, #15
 8009088:	d914      	bls.n	80090b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800908a:	4a17      	ldr	r2, [pc, #92]	; (80090e8 <vPortValidateInterruptPriority+0x70>)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	4413      	add	r3, r2
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009094:	4b15      	ldr	r3, [pc, #84]	; (80090ec <vPortValidateInterruptPriority+0x74>)
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	7afa      	ldrb	r2, [r7, #11]
 800909a:	429a      	cmp	r2, r3
 800909c:	d20a      	bcs.n	80090b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800909e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	607b      	str	r3, [r7, #4]
}
 80090b0:	bf00      	nop
 80090b2:	e7fe      	b.n	80090b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80090b4:	4b0e      	ldr	r3, [pc, #56]	; (80090f0 <vPortValidateInterruptPriority+0x78>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80090bc:	4b0d      	ldr	r3, [pc, #52]	; (80090f4 <vPortValidateInterruptPriority+0x7c>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d90a      	bls.n	80090da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80090c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c8:	f383 8811 	msr	BASEPRI, r3
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	603b      	str	r3, [r7, #0]
}
 80090d6:	bf00      	nop
 80090d8:	e7fe      	b.n	80090d8 <vPortValidateInterruptPriority+0x60>
	}
 80090da:	bf00      	nop
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	e000e3f0 	.word	0xe000e3f0
 80090ec:	200062b0 	.word	0x200062b0
 80090f0:	e000ed0c 	.word	0xe000ed0c
 80090f4:	200062b4 	.word	0x200062b4

080090f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b08a      	sub	sp, #40	; 0x28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009100:	2300      	movs	r3, #0
 8009102:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009104:	f7fe fc6c 	bl	80079e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009108:	4b5b      	ldr	r3, [pc, #364]	; (8009278 <pvPortMalloc+0x180>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d101      	bne.n	8009114 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009110:	f000 f920 	bl	8009354 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009114:	4b59      	ldr	r3, [pc, #356]	; (800927c <pvPortMalloc+0x184>)
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4013      	ands	r3, r2
 800911c:	2b00      	cmp	r3, #0
 800911e:	f040 8093 	bne.w	8009248 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d01d      	beq.n	8009164 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009128:	2208      	movs	r2, #8
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4413      	add	r3, r2
 800912e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f003 0307 	and.w	r3, r3, #7
 8009136:	2b00      	cmp	r3, #0
 8009138:	d014      	beq.n	8009164 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f023 0307 	bic.w	r3, r3, #7
 8009140:	3308      	adds	r3, #8
 8009142:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f003 0307 	and.w	r3, r3, #7
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00a      	beq.n	8009164 <pvPortMalloc+0x6c>
	__asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	617b      	str	r3, [r7, #20]
}
 8009160:	bf00      	nop
 8009162:	e7fe      	b.n	8009162 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d06e      	beq.n	8009248 <pvPortMalloc+0x150>
 800916a:	4b45      	ldr	r3, [pc, #276]	; (8009280 <pvPortMalloc+0x188>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	429a      	cmp	r2, r3
 8009172:	d869      	bhi.n	8009248 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009174:	4b43      	ldr	r3, [pc, #268]	; (8009284 <pvPortMalloc+0x18c>)
 8009176:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009178:	4b42      	ldr	r3, [pc, #264]	; (8009284 <pvPortMalloc+0x18c>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800917e:	e004      	b.n	800918a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009182:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800918a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	429a      	cmp	r2, r3
 8009192:	d903      	bls.n	800919c <pvPortMalloc+0xa4>
 8009194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d1f1      	bne.n	8009180 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800919c:	4b36      	ldr	r3, [pc, #216]	; (8009278 <pvPortMalloc+0x180>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d050      	beq.n	8009248 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80091a6:	6a3b      	ldr	r3, [r7, #32]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2208      	movs	r2, #8
 80091ac:	4413      	add	r3, r2
 80091ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	6a3b      	ldr	r3, [r7, #32]
 80091b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80091b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	1ad2      	subs	r2, r2, r3
 80091c0:	2308      	movs	r3, #8
 80091c2:	005b      	lsls	r3, r3, #1
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d91f      	bls.n	8009208 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80091c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4413      	add	r3, r2
 80091ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	f003 0307 	and.w	r3, r3, #7
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00a      	beq.n	80091f0 <pvPortMalloc+0xf8>
	__asm volatile
 80091da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091de:	f383 8811 	msr	BASEPRI, r3
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	613b      	str	r3, [r7, #16]
}
 80091ec:	bf00      	nop
 80091ee:	e7fe      	b.n	80091ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	685a      	ldr	r2, [r3, #4]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	1ad2      	subs	r2, r2, r3
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80091fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009202:	69b8      	ldr	r0, [r7, #24]
 8009204:	f000 f908 	bl	8009418 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009208:	4b1d      	ldr	r3, [pc, #116]	; (8009280 <pvPortMalloc+0x188>)
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	1ad3      	subs	r3, r2, r3
 8009212:	4a1b      	ldr	r2, [pc, #108]	; (8009280 <pvPortMalloc+0x188>)
 8009214:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009216:	4b1a      	ldr	r3, [pc, #104]	; (8009280 <pvPortMalloc+0x188>)
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	4b1b      	ldr	r3, [pc, #108]	; (8009288 <pvPortMalloc+0x190>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	429a      	cmp	r2, r3
 8009220:	d203      	bcs.n	800922a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009222:	4b17      	ldr	r3, [pc, #92]	; (8009280 <pvPortMalloc+0x188>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a18      	ldr	r2, [pc, #96]	; (8009288 <pvPortMalloc+0x190>)
 8009228:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	4b13      	ldr	r3, [pc, #76]	; (800927c <pvPortMalloc+0x184>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	431a      	orrs	r2, r3
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	2200      	movs	r2, #0
 800923c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800923e:	4b13      	ldr	r3, [pc, #76]	; (800928c <pvPortMalloc+0x194>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	3301      	adds	r3, #1
 8009244:	4a11      	ldr	r2, [pc, #68]	; (800928c <pvPortMalloc+0x194>)
 8009246:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009248:	f7fe fbd8 	bl	80079fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	f003 0307 	and.w	r3, r3, #7
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00a      	beq.n	800926c <pvPortMalloc+0x174>
	__asm volatile
 8009256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925a:	f383 8811 	msr	BASEPRI, r3
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	60fb      	str	r3, [r7, #12]
}
 8009268:	bf00      	nop
 800926a:	e7fe      	b.n	800926a <pvPortMalloc+0x172>
	return pvReturn;
 800926c:	69fb      	ldr	r3, [r7, #28]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3728      	adds	r7, #40	; 0x28
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	20009ec0 	.word	0x20009ec0
 800927c:	20009ed4 	.word	0x20009ed4
 8009280:	20009ec4 	.word	0x20009ec4
 8009284:	20009eb8 	.word	0x20009eb8
 8009288:	20009ec8 	.word	0x20009ec8
 800928c:	20009ecc 	.word	0x20009ecc

08009290 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d04d      	beq.n	800933e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80092a2:	2308      	movs	r3, #8
 80092a4:	425b      	negs	r3, r3
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	4413      	add	r3, r2
 80092aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	685a      	ldr	r2, [r3, #4]
 80092b4:	4b24      	ldr	r3, [pc, #144]	; (8009348 <vPortFree+0xb8>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4013      	ands	r3, r2
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10a      	bne.n	80092d4 <vPortFree+0x44>
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	60fb      	str	r3, [r7, #12]
}
 80092d0:	bf00      	nop
 80092d2:	e7fe      	b.n	80092d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00a      	beq.n	80092f2 <vPortFree+0x62>
	__asm volatile
 80092dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e0:	f383 8811 	msr	BASEPRI, r3
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	f3bf 8f4f 	dsb	sy
 80092ec:	60bb      	str	r3, [r7, #8]
}
 80092ee:	bf00      	nop
 80092f0:	e7fe      	b.n	80092f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	4b14      	ldr	r3, [pc, #80]	; (8009348 <vPortFree+0xb8>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4013      	ands	r3, r2
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d01e      	beq.n	800933e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d11a      	bne.n	800933e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	685a      	ldr	r2, [r3, #4]
 800930c:	4b0e      	ldr	r3, [pc, #56]	; (8009348 <vPortFree+0xb8>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	43db      	mvns	r3, r3
 8009312:	401a      	ands	r2, r3
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009318:	f7fe fb62 	bl	80079e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	685a      	ldr	r2, [r3, #4]
 8009320:	4b0a      	ldr	r3, [pc, #40]	; (800934c <vPortFree+0xbc>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4413      	add	r3, r2
 8009326:	4a09      	ldr	r2, [pc, #36]	; (800934c <vPortFree+0xbc>)
 8009328:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800932a:	6938      	ldr	r0, [r7, #16]
 800932c:	f000 f874 	bl	8009418 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009330:	4b07      	ldr	r3, [pc, #28]	; (8009350 <vPortFree+0xc0>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3301      	adds	r3, #1
 8009336:	4a06      	ldr	r2, [pc, #24]	; (8009350 <vPortFree+0xc0>)
 8009338:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800933a:	f7fe fb5f 	bl	80079fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800933e:	bf00      	nop
 8009340:	3718      	adds	r7, #24
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	20009ed4 	.word	0x20009ed4
 800934c:	20009ec4 	.word	0x20009ec4
 8009350:	20009ed0 	.word	0x20009ed0

08009354 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800935a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800935e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009360:	4b27      	ldr	r3, [pc, #156]	; (8009400 <prvHeapInit+0xac>)
 8009362:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f003 0307 	and.w	r3, r3, #7
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00c      	beq.n	8009388 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	3307      	adds	r3, #7
 8009372:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f023 0307 	bic.w	r3, r3, #7
 800937a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800937c:	68ba      	ldr	r2, [r7, #8]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	4a1f      	ldr	r2, [pc, #124]	; (8009400 <prvHeapInit+0xac>)
 8009384:	4413      	add	r3, r2
 8009386:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800938c:	4a1d      	ldr	r2, [pc, #116]	; (8009404 <prvHeapInit+0xb0>)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009392:	4b1c      	ldr	r3, [pc, #112]	; (8009404 <prvHeapInit+0xb0>)
 8009394:	2200      	movs	r2, #0
 8009396:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	4413      	add	r3, r2
 800939e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80093a0:	2208      	movs	r2, #8
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	1a9b      	subs	r3, r3, r2
 80093a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f023 0307 	bic.w	r3, r3, #7
 80093ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	4a15      	ldr	r2, [pc, #84]	; (8009408 <prvHeapInit+0xb4>)
 80093b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80093b6:	4b14      	ldr	r3, [pc, #80]	; (8009408 <prvHeapInit+0xb4>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2200      	movs	r2, #0
 80093bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093be:	4b12      	ldr	r3, [pc, #72]	; (8009408 <prvHeapInit+0xb4>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2200      	movs	r2, #0
 80093c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	1ad2      	subs	r2, r2, r3
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093d4:	4b0c      	ldr	r3, [pc, #48]	; (8009408 <prvHeapInit+0xb4>)
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	4a0a      	ldr	r2, [pc, #40]	; (800940c <prvHeapInit+0xb8>)
 80093e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	4a09      	ldr	r2, [pc, #36]	; (8009410 <prvHeapInit+0xbc>)
 80093ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093ec:	4b09      	ldr	r3, [pc, #36]	; (8009414 <prvHeapInit+0xc0>)
 80093ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80093f2:	601a      	str	r2, [r3, #0]
}
 80093f4:	bf00      	nop
 80093f6:	3714      	adds	r7, #20
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr
 8009400:	200062b8 	.word	0x200062b8
 8009404:	20009eb8 	.word	0x20009eb8
 8009408:	20009ec0 	.word	0x20009ec0
 800940c:	20009ec8 	.word	0x20009ec8
 8009410:	20009ec4 	.word	0x20009ec4
 8009414:	20009ed4 	.word	0x20009ed4

08009418 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009420:	4b28      	ldr	r3, [pc, #160]	; (80094c4 <prvInsertBlockIntoFreeList+0xac>)
 8009422:	60fb      	str	r3, [r7, #12]
 8009424:	e002      	b.n	800942c <prvInsertBlockIntoFreeList+0x14>
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	60fb      	str	r3, [r7, #12]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	429a      	cmp	r2, r3
 8009434:	d8f7      	bhi.n	8009426 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	4413      	add	r3, r2
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	429a      	cmp	r2, r3
 8009446:	d108      	bne.n	800945a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	685a      	ldr	r2, [r3, #4]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	441a      	add	r2, r3
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	441a      	add	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	429a      	cmp	r2, r3
 800946c:	d118      	bne.n	80094a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	4b15      	ldr	r3, [pc, #84]	; (80094c8 <prvInsertBlockIntoFreeList+0xb0>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	429a      	cmp	r2, r3
 8009478:	d00d      	beq.n	8009496 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	441a      	add	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	e008      	b.n	80094a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009496:	4b0c      	ldr	r3, [pc, #48]	; (80094c8 <prvInsertBlockIntoFreeList+0xb0>)
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	e003      	b.n	80094a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d002      	beq.n	80094b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094b6:	bf00      	nop
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	20009eb8 	.word	0x20009eb8
 80094c8:	20009ec0 	.word	0x20009ec0

080094cc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	330c      	adds	r3, #12
 80094dc:	461a      	mov	r2, r3
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f002 fc59 	bl	800bd98 <tcpip_send_msg_wait_sem>
 80094e6:	4603      	mov	r3, r0
 80094e8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80094ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d103      	bne.n	80094fa <netconn_apimsg+0x2e>
    return apimsg->err;
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80094f8:	e001      	b.n	80094fe <netconn_apimsg+0x32>
  }
  return err;
 80094fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
	...

08009508 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b08c      	sub	sp, #48	; 0x30
 800950c:	af00      	add	r7, sp, #0
 800950e:	4603      	mov	r3, r0
 8009510:	603a      	str	r2, [r7, #0]
 8009512:	71fb      	strb	r3, [r7, #7]
 8009514:	460b      	mov	r3, r1
 8009516:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009518:	79fb      	ldrb	r3, [r7, #7]
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	4618      	mov	r0, r3
 800951e:	f001 f989 	bl	800a834 <netconn_alloc>
 8009522:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8009524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009526:	2b00      	cmp	r3, #0
 8009528:	d054      	beq.n	80095d4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800952a:	79bb      	ldrb	r3, [r7, #6]
 800952c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800952e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009530:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009532:	f107 0308 	add.w	r3, r7, #8
 8009536:	4619      	mov	r1, r3
 8009538:	4829      	ldr	r0, [pc, #164]	; (80095e0 <netconn_new_with_proto_and_callback+0xd8>)
 800953a:	f7ff ffc7 	bl	80094cc <netconn_apimsg>
 800953e:	4603      	mov	r3, r0
 8009540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8009544:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009548:	2b00      	cmp	r3, #0
 800954a:	d043      	beq.n	80095d4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800954c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d005      	beq.n	8009560 <netconn_new_with_proto_and_callback+0x58>
 8009554:	4b23      	ldr	r3, [pc, #140]	; (80095e4 <netconn_new_with_proto_and_callback+0xdc>)
 8009556:	22a3      	movs	r2, #163	; 0xa3
 8009558:	4923      	ldr	r1, [pc, #140]	; (80095e8 <netconn_new_with_proto_and_callback+0xe0>)
 800955a:	4824      	ldr	r0, [pc, #144]	; (80095ec <netconn_new_with_proto_and_callback+0xe4>)
 800955c:	f00e f996 	bl	801788c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009562:	3310      	adds	r3, #16
 8009564:	4618      	mov	r0, r3
 8009566:	f00d ff69 	bl	801743c <sys_mbox_valid>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d105      	bne.n	800957c <netconn_new_with_proto_and_callback+0x74>
 8009570:	4b1c      	ldr	r3, [pc, #112]	; (80095e4 <netconn_new_with_proto_and_callback+0xdc>)
 8009572:	22a4      	movs	r2, #164	; 0xa4
 8009574:	491e      	ldr	r1, [pc, #120]	; (80095f0 <netconn_new_with_proto_and_callback+0xe8>)
 8009576:	481d      	ldr	r0, [pc, #116]	; (80095ec <netconn_new_with_proto_and_callback+0xe4>)
 8009578:	f00e f988 	bl	801788c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800957c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957e:	3314      	adds	r3, #20
 8009580:	4618      	mov	r0, r3
 8009582:	f00d ff5b 	bl	801743c <sys_mbox_valid>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d005      	beq.n	8009598 <netconn_new_with_proto_and_callback+0x90>
 800958c:	4b15      	ldr	r3, [pc, #84]	; (80095e4 <netconn_new_with_proto_and_callback+0xdc>)
 800958e:	22a6      	movs	r2, #166	; 0xa6
 8009590:	4918      	ldr	r1, [pc, #96]	; (80095f4 <netconn_new_with_proto_and_callback+0xec>)
 8009592:	4816      	ldr	r0, [pc, #88]	; (80095ec <netconn_new_with_proto_and_callback+0xe4>)
 8009594:	f00e f97a 	bl	801788c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959a:	330c      	adds	r3, #12
 800959c:	4618      	mov	r0, r3
 800959e:	f00d ffdb 	bl	8017558 <sys_sem_valid>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d105      	bne.n	80095b4 <netconn_new_with_proto_and_callback+0xac>
 80095a8:	4b0e      	ldr	r3, [pc, #56]	; (80095e4 <netconn_new_with_proto_and_callback+0xdc>)
 80095aa:	22a9      	movs	r2, #169	; 0xa9
 80095ac:	4912      	ldr	r1, [pc, #72]	; (80095f8 <netconn_new_with_proto_and_callback+0xf0>)
 80095ae:	480f      	ldr	r0, [pc, #60]	; (80095ec <netconn_new_with_proto_and_callback+0xe4>)
 80095b0:	f00e f96c 	bl	801788c <iprintf>
      sys_sem_free(&conn->op_completed);
 80095b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b6:	330c      	adds	r3, #12
 80095b8:	4618      	mov	r0, r3
 80095ba:	f00d ffc0 	bl	801753e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80095be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c0:	3310      	adds	r3, #16
 80095c2:	4618      	mov	r0, r3
 80095c4:	f00d fec6 	bl	8017354 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80095c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095ca:	2007      	movs	r0, #7
 80095cc:	f003 f992 	bl	800c8f4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80095d0:	2300      	movs	r3, #0
 80095d2:	e000      	b.n	80095d6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80095d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3730      	adds	r7, #48	; 0x30
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	0800a809 	.word	0x0800a809
 80095e4:	08018c24 	.word	0x08018c24
 80095e8:	08018c58 	.word	0x08018c58
 80095ec:	08018c7c 	.word	0x08018c7c
 80095f0:	08018ca4 	.word	0x08018ca4
 80095f4:	08018cbc 	.word	0x08018cbc
 80095f8:	08018ce0 	.word	0x08018ce0

080095fc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b08c      	sub	sp, #48	; 0x30
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d101      	bne.n	800960e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800960a:	2300      	movs	r3, #0
 800960c:	e014      	b.n	8009638 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009612:	2329      	movs	r3, #41	; 0x29
 8009614:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009616:	f107 030c 	add.w	r3, r7, #12
 800961a:	4619      	mov	r1, r3
 800961c:	4808      	ldr	r0, [pc, #32]	; (8009640 <netconn_prepare_delete+0x44>)
 800961e:	f7ff ff55 	bl	80094cc <netconn_apimsg>
 8009622:	4603      	mov	r3, r0
 8009624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009628:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800962c:	2b00      	cmp	r3, #0
 800962e:	d002      	beq.n	8009636 <netconn_prepare_delete+0x3a>
    return err;
 8009630:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009634:	e000      	b.n	8009638 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3730      	adds	r7, #48	; 0x30
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	0800ad75 	.word	0x0800ad75

08009644 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d101      	bne.n	8009656 <netconn_delete+0x12>
    return ERR_OK;
 8009652:	2300      	movs	r3, #0
 8009654:	e00d      	b.n	8009672 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7ff ffd0 	bl	80095fc <netconn_prepare_delete>
 800965c:	4603      	mov	r3, r0
 800965e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8009660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d102      	bne.n	800966e <netconn_delete+0x2a>
    netconn_free(conn);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f001 f951 	bl	800a910 <netconn_free>
  }
  return err;
 800966e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
	...

0800967c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b08e      	sub	sp, #56	; 0x38
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	4613      	mov	r3, r2
 8009688:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d109      	bne.n	80096a4 <netconn_bind+0x28>
 8009690:	4b11      	ldr	r3, [pc, #68]	; (80096d8 <netconn_bind+0x5c>)
 8009692:	f44f 729c 	mov.w	r2, #312	; 0x138
 8009696:	4911      	ldr	r1, [pc, #68]	; (80096dc <netconn_bind+0x60>)
 8009698:	4811      	ldr	r0, [pc, #68]	; (80096e0 <netconn_bind+0x64>)
 800969a:	f00e f8f7 	bl	801788c <iprintf>
 800969e:	f06f 030f 	mvn.w	r3, #15
 80096a2:	e015      	b.n	80096d0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d101      	bne.n	80096ae <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80096aa:	4b0e      	ldr	r3, [pc, #56]	; (80096e4 <netconn_bind+0x68>)
 80096ac:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80096b6:	88fb      	ldrh	r3, [r7, #6]
 80096b8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80096ba:	f107 0314 	add.w	r3, r7, #20
 80096be:	4619      	mov	r1, r3
 80096c0:	4809      	ldr	r0, [pc, #36]	; (80096e8 <netconn_bind+0x6c>)
 80096c2:	f7ff ff03 	bl	80094cc <netconn_apimsg>
 80096c6:	4603      	mov	r3, r0
 80096c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80096cc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3738      	adds	r7, #56	; 0x38
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	08018c24 	.word	0x08018c24
 80096dc:	08018d5c 	.word	0x08018d5c
 80096e0:	08018c7c 	.word	0x08018c7c
 80096e4:	0801c298 	.word	0x0801c298
 80096e8:	0800af3d 	.word	0x0800af3d

080096ec <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b08e      	sub	sp, #56	; 0x38
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	4613      	mov	r3, r2
 80096f8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d109      	bne.n	8009714 <netconn_connect+0x28>
 8009700:	4b11      	ldr	r3, [pc, #68]	; (8009748 <netconn_connect+0x5c>)
 8009702:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8009706:	4911      	ldr	r1, [pc, #68]	; (800974c <netconn_connect+0x60>)
 8009708:	4811      	ldr	r0, [pc, #68]	; (8009750 <netconn_connect+0x64>)
 800970a:	f00e f8bf 	bl	801788c <iprintf>
 800970e:	f06f 030f 	mvn.w	r3, #15
 8009712:	e015      	b.n	8009740 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d101      	bne.n	800971e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800971a:	4b0e      	ldr	r3, [pc, #56]	; (8009754 <netconn_connect+0x68>)
 800971c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009726:	88fb      	ldrh	r3, [r7, #6]
 8009728:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800972a:	f107 0314 	add.w	r3, r7, #20
 800972e:	4619      	mov	r1, r3
 8009730:	4809      	ldr	r0, [pc, #36]	; (8009758 <netconn_connect+0x6c>)
 8009732:	f7ff fecb 	bl	80094cc <netconn_apimsg>
 8009736:	4603      	mov	r3, r0
 8009738:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800973c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009740:	4618      	mov	r0, r3
 8009742:	3738      	adds	r7, #56	; 0x38
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	08018c24 	.word	0x08018c24
 800974c:	08018d98 	.word	0x08018d98
 8009750:	08018c7c 	.word	0x08018c7c
 8009754:	0801c298 	.word	0x0801c298
 8009758:	0800b0d1 	.word	0x0800b0d1

0800975c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b08c      	sub	sp, #48	; 0x30
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	460b      	mov	r3, r1
 8009766:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d109      	bne.n	8009782 <netconn_listen_with_backlog+0x26>
 800976e:	4b0d      	ldr	r3, [pc, #52]	; (80097a4 <netconn_listen_with_backlog+0x48>)
 8009770:	f240 12bb 	movw	r2, #443	; 0x1bb
 8009774:	490c      	ldr	r1, [pc, #48]	; (80097a8 <netconn_listen_with_backlog+0x4c>)
 8009776:	480d      	ldr	r0, [pc, #52]	; (80097ac <netconn_listen_with_backlog+0x50>)
 8009778:	f00e f888 	bl	801788c <iprintf>
 800977c:	f06f 030f 	mvn.w	r3, #15
 8009780:	e00c      	b.n	800979c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8009786:	f107 030c 	add.w	r3, r7, #12
 800978a:	4619      	mov	r1, r3
 800978c:	4808      	ldr	r0, [pc, #32]	; (80097b0 <netconn_listen_with_backlog+0x54>)
 800978e:	f7ff fe9d 	bl	80094cc <netconn_apimsg>
 8009792:	4603      	mov	r3, r0
 8009794:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009798:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800979c:	4618      	mov	r0, r3
 800979e:	3730      	adds	r7, #48	; 0x30
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	08018c24 	.word	0x08018c24
 80097a8:	08018ddc 	.word	0x08018ddc
 80097ac:	08018c7c 	.word	0x08018c7c
 80097b0:	0800b24d 	.word	0x0800b24d

080097b4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d109      	bne.n	80097d8 <netconn_accept+0x24>
 80097c4:	4b3d      	ldr	r3, [pc, #244]	; (80098bc <netconn_accept+0x108>)
 80097c6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80097ca:	493d      	ldr	r1, [pc, #244]	; (80098c0 <netconn_accept+0x10c>)
 80097cc:	483d      	ldr	r0, [pc, #244]	; (80098c4 <netconn_accept+0x110>)
 80097ce:	f00e f85d 	bl	801788c <iprintf>
 80097d2:	f06f 030f 	mvn.w	r3, #15
 80097d6:	e06c      	b.n	80098b2 <netconn_accept+0xfe>
  *new_conn = NULL;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	2200      	movs	r2, #0
 80097dc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d109      	bne.n	80097f8 <netconn_accept+0x44>
 80097e4:	4b35      	ldr	r3, [pc, #212]	; (80098bc <netconn_accept+0x108>)
 80097e6:	f240 12e3 	movw	r2, #483	; 0x1e3
 80097ea:	4937      	ldr	r1, [pc, #220]	; (80098c8 <netconn_accept+0x114>)
 80097ec:	4835      	ldr	r0, [pc, #212]	; (80098c4 <netconn_accept+0x110>)
 80097ee:	f00e f84d 	bl	801788c <iprintf>
 80097f2:	f06f 030f 	mvn.w	r3, #15
 80097f6:	e05c      	b.n	80098b2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 fb9a 	bl	8009f32 <netconn_err>
 80097fe:	4603      	mov	r3, r0
 8009800:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8009802:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d002      	beq.n	8009810 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800980a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800980e:	e050      	b.n	80098b2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	3314      	adds	r3, #20
 8009814:	4618      	mov	r0, r3
 8009816:	f00d fe11 	bl	801743c <sys_mbox_valid>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d005      	beq.n	800982c <netconn_accept+0x78>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	7f1b      	ldrb	r3, [r3, #28]
 8009824:	f003 0301 	and.w	r3, r3, #1
 8009828:	2b00      	cmp	r3, #0
 800982a:	d002      	beq.n	8009832 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800982c:	f06f 030e 	mvn.w	r3, #14
 8009830:	e03f      	b.n	80098b2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	7f1b      	ldrb	r3, [r3, #28]
 8009836:	f003 0302 	and.w	r3, r3, #2
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00e      	beq.n	800985c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	3314      	adds	r3, #20
 8009842:	f107 020c 	add.w	r2, r7, #12
 8009846:	4611      	mov	r1, r2
 8009848:	4618      	mov	r0, r3
 800984a:	f00d fde0 	bl	801740e <sys_arch_mbox_tryfetch>
 800984e:	4603      	mov	r3, r0
 8009850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009854:	d10a      	bne.n	800986c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8009856:	f06f 0306 	mvn.w	r3, #6
 800985a:	e02a      	b.n	80098b2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	3314      	adds	r3, #20
 8009860:	f107 010c 	add.w	r1, r7, #12
 8009864:	2200      	movs	r2, #0
 8009866:	4618      	mov	r0, r3
 8009868:	f00d fda0 	bl	80173ac <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009870:	2b00      	cmp	r3, #0
 8009872:	d005      	beq.n	8009880 <netconn_accept+0xcc>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009878:	2200      	movs	r2, #0
 800987a:	2101      	movs	r1, #1
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f107 0213 	add.w	r2, r7, #19
 8009886:	4611      	mov	r1, r2
 8009888:	4618      	mov	r0, r3
 800988a:	f000 fba3 	bl	8009fd4 <lwip_netconn_is_err_msg>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d002      	beq.n	800989a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8009894:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009898:	e00b      	b.n	80098b2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d102      	bne.n	80098a6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 80098a0:	f06f 030e 	mvn.w	r3, #14
 80098a4:	e005      	b.n	80098b2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	697a      	ldr	r2, [r7, #20]
 80098ae:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80098b0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3718      	adds	r7, #24
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	08018c24 	.word	0x08018c24
 80098c0:	08018dfc 	.word	0x08018dfc
 80098c4:	08018c7c 	.word	0x08018c7c
 80098c8:	08018e1c 	.word	0x08018e1c

080098cc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b088      	sub	sp, #32
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	4613      	mov	r3, r2
 80098d8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80098da:	2300      	movs	r3, #0
 80098dc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d109      	bne.n	80098f8 <netconn_recv_data+0x2c>
 80098e4:	4b58      	ldr	r3, [pc, #352]	; (8009a48 <netconn_recv_data+0x17c>)
 80098e6:	f44f 7212 	mov.w	r2, #584	; 0x248
 80098ea:	4958      	ldr	r1, [pc, #352]	; (8009a4c <netconn_recv_data+0x180>)
 80098ec:	4858      	ldr	r0, [pc, #352]	; (8009a50 <netconn_recv_data+0x184>)
 80098ee:	f00d ffcd 	bl	801788c <iprintf>
 80098f2:	f06f 030f 	mvn.w	r3, #15
 80098f6:	e0a2      	b.n	8009a3e <netconn_recv_data+0x172>
  *new_buf = NULL;
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	2200      	movs	r2, #0
 80098fc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d109      	bne.n	8009918 <netconn_recv_data+0x4c>
 8009904:	4b50      	ldr	r3, [pc, #320]	; (8009a48 <netconn_recv_data+0x17c>)
 8009906:	f240 224a 	movw	r2, #586	; 0x24a
 800990a:	4952      	ldr	r1, [pc, #328]	; (8009a54 <netconn_recv_data+0x188>)
 800990c:	4850      	ldr	r0, [pc, #320]	; (8009a50 <netconn_recv_data+0x184>)
 800990e:	f00d ffbd 	bl	801788c <iprintf>
 8009912:	f06f 030f 	mvn.w	r3, #15
 8009916:	e092      	b.n	8009a3e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	3310      	adds	r3, #16
 800991c:	4618      	mov	r0, r3
 800991e:	f00d fd8d 	bl	801743c <sys_mbox_valid>
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10e      	bne.n	8009946 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f000 fb02 	bl	8009f32 <netconn_err>
 800992e:	4603      	mov	r3, r0
 8009930:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8009932:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d002      	beq.n	8009940 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800993a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800993e:	e07e      	b.n	8009a3e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8009940:	f06f 030a 	mvn.w	r3, #10
 8009944:	e07b      	b.n	8009a3e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	7f1b      	ldrb	r3, [r3, #28]
 800994a:	f003 0302 	and.w	r3, r3, #2
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10f      	bne.n	8009972 <netconn_recv_data+0xa6>
 8009952:	79fb      	ldrb	r3, [r7, #7]
 8009954:	f003 0304 	and.w	r3, r3, #4
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10a      	bne.n	8009972 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	7f1b      	ldrb	r3, [r3, #28]
 8009960:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009964:	2b00      	cmp	r3, #0
 8009966:	d104      	bne.n	8009972 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d023      	beq.n	80099ba <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	3310      	adds	r3, #16
 8009976:	f107 0218 	add.w	r2, r7, #24
 800997a:	4611      	mov	r1, r2
 800997c:	4618      	mov	r0, r3
 800997e:	f00d fd46 	bl	801740e <sys_arch_mbox_tryfetch>
 8009982:	4603      	mov	r3, r0
 8009984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009988:	d11f      	bne.n	80099ca <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f000 fad1 	bl	8009f32 <netconn_err>
 8009990:	4603      	mov	r3, r0
 8009992:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009994:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d002      	beq.n	80099a2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800999c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80099a0:	e04d      	b.n	8009a3e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	7f1b      	ldrb	r3, [r3, #28]
 80099a6:	f003 0301 	and.w	r3, r3, #1
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d002      	beq.n	80099b4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 80099ae:	f06f 030a 	mvn.w	r3, #10
 80099b2:	e044      	b.n	8009a3e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80099b4:	f06f 0306 	mvn.w	r3, #6
 80099b8:	e041      	b.n	8009a3e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	3310      	adds	r3, #16
 80099be:	f107 0118 	add.w	r1, r7, #24
 80099c2:	2200      	movs	r2, #0
 80099c4:	4618      	mov	r0, r3
 80099c6:	f00d fcf1 	bl	80173ac <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099d2:	2b10      	cmp	r3, #16
 80099d4:	d117      	bne.n	8009a06 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	f107 0217 	add.w	r2, r7, #23
 80099dc:	4611      	mov	r1, r2
 80099de:	4618      	mov	r0, r3
 80099e0:	f000 faf8 	bl	8009fd4 <lwip_netconn_is_err_msg>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d009      	beq.n	80099fe <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80099ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099ee:	f113 0f0f 	cmn.w	r3, #15
 80099f2:	d101      	bne.n	80099f8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80099f4:	2300      	movs	r3, #0
 80099f6:	e022      	b.n	8009a3e <netconn_recv_data+0x172>
      }
      return err;
 80099f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099fc:	e01f      	b.n	8009a3e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	891b      	ldrh	r3, [r3, #8]
 8009a02:	83fb      	strh	r3, [r7, #30]
 8009a04:	e00d      	b.n	8009a22 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d106      	bne.n	8009a1a <netconn_recv_data+0x14e>
 8009a0c:	4b0e      	ldr	r3, [pc, #56]	; (8009a48 <netconn_recv_data+0x17c>)
 8009a0e:	f240 2291 	movw	r2, #657	; 0x291
 8009a12:	4911      	ldr	r1, [pc, #68]	; (8009a58 <netconn_recv_data+0x18c>)
 8009a14:	480e      	ldr	r0, [pc, #56]	; (8009a50 <netconn_recv_data+0x184>)
 8009a16:	f00d ff39 	bl	801788c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	891b      	ldrh	r3, [r3, #8]
 8009a20:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d005      	beq.n	8009a36 <netconn_recv_data+0x16a>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2e:	8bfa      	ldrh	r2, [r7, #30]
 8009a30:	2101      	movs	r1, #1
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8009a36:	69ba      	ldr	r2, [r7, #24]
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3720      	adds	r7, #32
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	08018c24 	.word	0x08018c24
 8009a4c:	08018e3c 	.word	0x08018e3c
 8009a50:	08018c7c 	.word	0x08018c7c
 8009a54:	08018e5c 	.word	0x08018e5c
 8009a58:	08018e78 	.word	0x08018e78

08009a5c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d005      	beq.n	8009a7a <netconn_tcp_recvd_msg+0x1e>
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a76:	2b10      	cmp	r3, #16
 8009a78:	d009      	beq.n	8009a8e <netconn_tcp_recvd_msg+0x32>
 8009a7a:	4b0c      	ldr	r3, [pc, #48]	; (8009aac <netconn_tcp_recvd_msg+0x50>)
 8009a7c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8009a80:	490b      	ldr	r1, [pc, #44]	; (8009ab0 <netconn_tcp_recvd_msg+0x54>)
 8009a82:	480c      	ldr	r0, [pc, #48]	; (8009ab4 <netconn_tcp_recvd_msg+0x58>)
 8009a84:	f00d ff02 	bl	801788c <iprintf>
 8009a88:	f06f 030f 	mvn.w	r3, #15
 8009a8c:	e00a      	b.n	8009aa4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8009a9a:	6879      	ldr	r1, [r7, #4]
 8009a9c:	4806      	ldr	r0, [pc, #24]	; (8009ab8 <netconn_tcp_recvd_msg+0x5c>)
 8009a9e:	f7ff fd15 	bl	80094cc <netconn_apimsg>
 8009aa2:	4603      	mov	r3, r0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3710      	adds	r7, #16
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	08018c24 	.word	0x08018c24
 8009ab0:	08018e84 	.word	0x08018e84
 8009ab4:	08018c7c 	.word	0x08018c7c
 8009ab8:	0800b417 	.word	0x0800b417

08009abc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b090      	sub	sp, #64	; 0x40
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	3310      	adds	r3, #16
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f00d fcb4 	bl	801743c <sys_mbox_valid>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d102      	bne.n	8009ae0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8009ada:	f06f 030a 	mvn.w	r3, #10
 8009ade:	e06d      	b.n	8009bbc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	7f1b      	ldrb	r3, [r3, #28]
 8009ae4:	b25b      	sxtb	r3, r3
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	da07      	bge.n	8009afa <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	7f1b      	ldrb	r3, [r3, #28]
 8009aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8009af8:	e039      	b.n	8009b6e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009afa:	79fb      	ldrb	r3, [r7, #7]
 8009afc:	461a      	mov	r2, r3
 8009afe:	68b9      	ldr	r1, [r7, #8]
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f7ff fee3 	bl	80098cc <netconn_recv_data>
 8009b06:	4603      	mov	r3, r0
 8009b08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8009b0c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d002      	beq.n	8009b1a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009b14:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b18:	e050      	b.n	8009bbc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009b20:	79fb      	ldrb	r3, [r7, #7]
 8009b22:	f003 0308 	and.w	r3, r3, #8
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d10e      	bne.n	8009b48 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8009b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d002      	beq.n	8009b36 <netconn_recv_data_tcp+0x7a>
 8009b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b32:	891b      	ldrh	r3, [r3, #8]
 8009b34:	e000      	b.n	8009b38 <netconn_recv_data_tcp+0x7c>
 8009b36:	2301      	movs	r3, #1
 8009b38:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8009b3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009b3c:	f107 0214 	add.w	r2, r7, #20
 8009b40:	4619      	mov	r1, r3
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f7ff ff8a 	bl	8009a5c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d134      	bne.n	8009bb8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8009b4e:	79fb      	ldrb	r3, [r7, #7]
 8009b50:	f003 0310 	and.w	r3, r3, #16
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d009      	beq.n	8009b6c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	7f1b      	ldrb	r3, [r3, #28]
 8009b5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b60:	b2da      	uxtb	r2, r3
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8009b66:	f06f 0306 	mvn.w	r3, #6
 8009b6a:	e027      	b.n	8009bbc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8009b6c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d005      	beq.n	8009b82 <netconn_recv_data_tcp+0xc6>
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	2101      	movs	r1, #1
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d10f      	bne.n	8009baa <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	f000 f9d1 	bl	8009f32 <netconn_err>
 8009b90:	4603      	mov	r3, r0
 8009b92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009b96:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d002      	beq.n	8009ba4 <netconn_recv_data_tcp+0xe8>
          return err;
 8009b9e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009ba2:	e00b      	b.n	8009bbc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009ba4:	f06f 030d 	mvn.w	r3, #13
 8009ba8:	e008      	b.n	8009bbc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8009baa:	2101      	movs	r1, #1
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 f983 	bl	8009eb8 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009bb2:	f06f 030e 	mvn.w	r3, #14
 8009bb6:	e001      	b.n	8009bbc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009bb8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3740      	adds	r7, #64	; 0x40
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b086      	sub	sp, #24
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d109      	bne.n	8009bec <netconn_recv+0x28>
 8009bd8:	4b32      	ldr	r3, [pc, #200]	; (8009ca4 <netconn_recv+0xe0>)
 8009bda:	f240 3263 	movw	r2, #867	; 0x363
 8009bde:	4932      	ldr	r1, [pc, #200]	; (8009ca8 <netconn_recv+0xe4>)
 8009be0:	4832      	ldr	r0, [pc, #200]	; (8009cac <netconn_recv+0xe8>)
 8009be2:	f00d fe53 	bl	801788c <iprintf>
 8009be6:	f06f 030f 	mvn.w	r3, #15
 8009bea:	e056      	b.n	8009c9a <netconn_recv+0xd6>
  *new_buf = NULL;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d109      	bne.n	8009c0c <netconn_recv+0x48>
 8009bf8:	4b2a      	ldr	r3, [pc, #168]	; (8009ca4 <netconn_recv+0xe0>)
 8009bfa:	f240 3265 	movw	r2, #869	; 0x365
 8009bfe:	492c      	ldr	r1, [pc, #176]	; (8009cb0 <netconn_recv+0xec>)
 8009c00:	482a      	ldr	r0, [pc, #168]	; (8009cac <netconn_recv+0xe8>)
 8009c02:	f00d fe43 	bl	801788c <iprintf>
 8009c06:	f06f 030f 	mvn.w	r3, #15
 8009c0a:	e046      	b.n	8009c9a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c14:	2b10      	cmp	r3, #16
 8009c16:	d13a      	bne.n	8009c8e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009c1c:	2006      	movs	r0, #6
 8009c1e:	f002 fdf3 	bl	800c808 <memp_malloc>
 8009c22:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d102      	bne.n	8009c30 <netconn_recv+0x6c>
      return ERR_MEM;
 8009c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c2e:	e034      	b.n	8009c9a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8009c30:	f107 030c 	add.w	r3, r7, #12
 8009c34:	2200      	movs	r2, #0
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f7ff ff3f 	bl	8009abc <netconn_recv_data_tcp>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8009c42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d006      	beq.n	8009c58 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8009c4a:	6979      	ldr	r1, [r7, #20]
 8009c4c:	2006      	movs	r0, #6
 8009c4e:	f002 fe51 	bl	800c8f4 <memp_free>
      return err;
 8009c52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c56:	e020      	b.n	8009c9a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d106      	bne.n	8009c6c <netconn_recv+0xa8>
 8009c5e:	4b11      	ldr	r3, [pc, #68]	; (8009ca4 <netconn_recv+0xe0>)
 8009c60:	f240 3279 	movw	r2, #889	; 0x379
 8009c64:	4913      	ldr	r1, [pc, #76]	; (8009cb4 <netconn_recv+0xf0>)
 8009c66:	4811      	ldr	r0, [pc, #68]	; (8009cac <netconn_recv+0xe8>)
 8009c68:	f00d fe10 	bl	801788c <iprintf>

    buf->p = p;
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	2200      	movs	r2, #0
 8009c82:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	e005      	b.n	8009c9a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8009c8e:	2200      	movs	r2, #0
 8009c90:	6839      	ldr	r1, [r7, #0]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f7ff fe1a 	bl	80098cc <netconn_recv_data>
 8009c98:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3718      	adds	r7, #24
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	08018c24 	.word	0x08018c24
 8009ca8:	08018e3c 	.word	0x08018e3c
 8009cac:	08018c7c 	.word	0x08018c7c
 8009cb0:	08018e5c 	.word	0x08018e5c
 8009cb4:	08018ed4 	.word	0x08018ed4

08009cb8 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b08c      	sub	sp, #48	; 0x30
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d109      	bne.n	8009cdc <netconn_send+0x24>
 8009cc8:	4b0e      	ldr	r3, [pc, #56]	; (8009d04 <netconn_send+0x4c>)
 8009cca:	f240 32b2 	movw	r2, #946	; 0x3b2
 8009cce:	490e      	ldr	r1, [pc, #56]	; (8009d08 <netconn_send+0x50>)
 8009cd0:	480e      	ldr	r0, [pc, #56]	; (8009d0c <netconn_send+0x54>)
 8009cd2:	f00d fddb 	bl	801788c <iprintf>
 8009cd6:	f06f 030f 	mvn.w	r3, #15
 8009cda:	e00e      	b.n	8009cfa <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8009ce4:	f107 030c 	add.w	r3, r7, #12
 8009ce8:	4619      	mov	r1, r3
 8009cea:	4809      	ldr	r0, [pc, #36]	; (8009d10 <netconn_send+0x58>)
 8009cec:	f7ff fbee 	bl	80094cc <netconn_apimsg>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009cf6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3730      	adds	r7, #48	; 0x30
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	08018c24 	.word	0x08018c24
 8009d08:	08018ee0 	.word	0x08018ee0
 8009d0c:	08018c7c 	.word	0x08018c7c
 8009d10:	0800b37d 	.word	0x0800b37d

08009d14 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b088      	sub	sp, #32
 8009d18:	af02      	add	r7, sp, #8
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
 8009d20:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8009d2a:	78fa      	ldrb	r2, [r7, #3]
 8009d2c:	f107 0110 	add.w	r1, r7, #16
 8009d30:	6a3b      	ldr	r3, [r7, #32]
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	4613      	mov	r3, r2
 8009d36:	2201      	movs	r2, #1
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f000 f805 	bl	8009d48 <netconn_write_vectors_partly>
 8009d3e:	4603      	mov	r3, r0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3718      	adds	r7, #24
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b092      	sub	sp, #72	; 0x48
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	4611      	mov	r1, r2
 8009d54:	461a      	mov	r2, r3
 8009d56:	460b      	mov	r3, r1
 8009d58:	80fb      	strh	r3, [r7, #6]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d109      	bne.n	8009d78 <netconn_write_vectors_partly+0x30>
 8009d64:	4b4e      	ldr	r3, [pc, #312]	; (8009ea0 <netconn_write_vectors_partly+0x158>)
 8009d66:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009d6a:	494e      	ldr	r1, [pc, #312]	; (8009ea4 <netconn_write_vectors_partly+0x15c>)
 8009d6c:	484e      	ldr	r0, [pc, #312]	; (8009ea8 <netconn_write_vectors_partly+0x160>)
 8009d6e:	f00d fd8d 	bl	801788c <iprintf>
 8009d72:	f06f 030f 	mvn.w	r3, #15
 8009d76:	e08e      	b.n	8009e96 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d80:	2b10      	cmp	r3, #16
 8009d82:	d009      	beq.n	8009d98 <netconn_write_vectors_partly+0x50>
 8009d84:	4b46      	ldr	r3, [pc, #280]	; (8009ea0 <netconn_write_vectors_partly+0x158>)
 8009d86:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8009d8a:	4948      	ldr	r1, [pc, #288]	; (8009eac <netconn_write_vectors_partly+0x164>)
 8009d8c:	4846      	ldr	r0, [pc, #280]	; (8009ea8 <netconn_write_vectors_partly+0x160>)
 8009d8e:	f00d fd7d 	bl	801788c <iprintf>
 8009d92:	f06f 0305 	mvn.w	r3, #5
 8009d96:	e07e      	b.n	8009e96 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	7f1b      	ldrb	r3, [r3, #28]
 8009d9c:	f003 0302 	and.w	r3, r3, #2
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d104      	bne.n	8009dae <netconn_write_vectors_partly+0x66>
 8009da4:	797b      	ldrb	r3, [r7, #5]
 8009da6:	f003 0304 	and.w	r3, r3, #4
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <netconn_write_vectors_partly+0x6a>
 8009dae:	2301      	movs	r3, #1
 8009db0:	e000      	b.n	8009db4 <netconn_write_vectors_partly+0x6c>
 8009db2:	2300      	movs	r3, #0
 8009db4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009db8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d005      	beq.n	8009dcc <netconn_write_vectors_partly+0x84>
 8009dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d102      	bne.n	8009dcc <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009dc6:	f06f 0305 	mvn.w	r3, #5
 8009dca:	e064      	b.n	8009e96 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	643b      	str	r3, [r7, #64]	; 0x40
 8009dd4:	e015      	b.n	8009e02 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8009dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dd8:	00db      	lsls	r3, r3, #3
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	4413      	add	r3, r2
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009de2:	4413      	add	r3, r2
 8009de4:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8009de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009de8:	00db      	lsls	r3, r3, #3
 8009dea:	68ba      	ldr	r2, [r7, #8]
 8009dec:	4413      	add	r3, r2
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d202      	bcs.n	8009dfc <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8009df6:	f06f 0305 	mvn.w	r3, #5
 8009dfa:	e04c      	b.n	8009e96 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8009dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dfe:	3301      	adds	r3, #1
 8009e00:	643b      	str	r3, [r7, #64]	; 0x40
 8009e02:	88fb      	ldrh	r3, [r7, #6]
 8009e04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e06:	429a      	cmp	r2, r3
 8009e08:	dbe5      	blt.n	8009dd6 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8009e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009e10:	2300      	movs	r3, #0
 8009e12:	e040      	b.n	8009e96 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8009e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	da0a      	bge.n	8009e30 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d102      	bne.n	8009e26 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8009e20:	f06f 0305 	mvn.w	r3, #5
 8009e24:	e037      	b.n	8009e96 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009e26:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009e2a:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8009e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2e:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009e38:	88fb      	ldrh	r3, [r7, #6]
 8009e3a:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009e40:	797b      	ldrb	r3, [r7, #5]
 8009e42:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e48:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009e4e:	f107 0314 	add.w	r3, r7, #20
 8009e52:	4619      	mov	r1, r3
 8009e54:	4816      	ldr	r0, [pc, #88]	; (8009eb0 <netconn_write_vectors_partly+0x168>)
 8009e56:	f7ff fb39 	bl	80094cc <netconn_apimsg>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8009e60:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d114      	bne.n	8009e92 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8009e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d002      	beq.n	8009e74 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e72:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009e74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10a      	bne.n	8009e92 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d006      	beq.n	8009e92 <netconn_write_vectors_partly+0x14a>
 8009e84:	4b06      	ldr	r3, [pc, #24]	; (8009ea0 <netconn_write_vectors_partly+0x158>)
 8009e86:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009e8a:	490a      	ldr	r1, [pc, #40]	; (8009eb4 <netconn_write_vectors_partly+0x16c>)
 8009e8c:	4806      	ldr	r0, [pc, #24]	; (8009ea8 <netconn_write_vectors_partly+0x160>)
 8009e8e:	f00d fcfd 	bl	801788c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009e92:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3748      	adds	r7, #72	; 0x48
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	08018c24 	.word	0x08018c24
 8009ea4:	08018efc 	.word	0x08018efc
 8009ea8:	08018c7c 	.word	0x08018c7c
 8009eac:	08018f18 	.word	0x08018f18
 8009eb0:	0800b819 	.word	0x0800b819
 8009eb4:	08018f3c 	.word	0x08018f3c

08009eb8 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b08c      	sub	sp, #48	; 0x30
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d109      	bne.n	8009ede <netconn_close_shutdown+0x26>
 8009eca:	4b0f      	ldr	r3, [pc, #60]	; (8009f08 <netconn_close_shutdown+0x50>)
 8009ecc:	f240 4247 	movw	r2, #1095	; 0x447
 8009ed0:	490e      	ldr	r1, [pc, #56]	; (8009f0c <netconn_close_shutdown+0x54>)
 8009ed2:	480f      	ldr	r0, [pc, #60]	; (8009f10 <netconn_close_shutdown+0x58>)
 8009ed4:	f00d fcda 	bl	801788c <iprintf>
 8009ed8:	f06f 030f 	mvn.w	r3, #15
 8009edc:	e010      	b.n	8009f00 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009ee2:	78fb      	ldrb	r3, [r7, #3]
 8009ee4:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009ee6:	2329      	movs	r3, #41	; 0x29
 8009ee8:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009eea:	f107 030c 	add.w	r3, r7, #12
 8009eee:	4619      	mov	r1, r3
 8009ef0:	4808      	ldr	r0, [pc, #32]	; (8009f14 <netconn_close_shutdown+0x5c>)
 8009ef2:	f7ff faeb 	bl	80094cc <netconn_apimsg>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009efc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3730      	adds	r7, #48	; 0x30
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	08018c24 	.word	0x08018c24
 8009f0c:	08018f60 	.word	0x08018f60
 8009f10:	08018c7c 	.word	0x08018c7c
 8009f14:	0800b931 	.word	0x0800b931

08009f18 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009f20:	2103      	movs	r1, #3
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f7ff ffc8 	bl	8009eb8 <netconn_close_shutdown>
 8009f28:	4603      	mov	r3, r0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b084      	sub	sp, #16
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d101      	bne.n	8009f44 <netconn_err+0x12>
    return ERR_OK;
 8009f40:	2300      	movs	r3, #0
 8009f42:	e00d      	b.n	8009f60 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009f44:	f00d fb84 	bl	8017650 <sys_arch_protect>
 8009f48:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	7a1b      	ldrb	r3, [r3, #8]
 8009f4e:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f00d fb88 	bl	801766c <sys_arch_unprotect>
  return err;
 8009f5c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	4603      	mov	r3, r0
 8009f70:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f76:	f113 0f0d 	cmn.w	r3, #13
 8009f7a:	d009      	beq.n	8009f90 <lwip_netconn_err_to_msg+0x28>
 8009f7c:	f113 0f0d 	cmn.w	r3, #13
 8009f80:	dc0c      	bgt.n	8009f9c <lwip_netconn_err_to_msg+0x34>
 8009f82:	f113 0f0f 	cmn.w	r3, #15
 8009f86:	d007      	beq.n	8009f98 <lwip_netconn_err_to_msg+0x30>
 8009f88:	f113 0f0e 	cmn.w	r3, #14
 8009f8c:	d002      	beq.n	8009f94 <lwip_netconn_err_to_msg+0x2c>
 8009f8e:	e005      	b.n	8009f9c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009f90:	4b0a      	ldr	r3, [pc, #40]	; (8009fbc <lwip_netconn_err_to_msg+0x54>)
 8009f92:	e00e      	b.n	8009fb2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009f94:	4b0a      	ldr	r3, [pc, #40]	; (8009fc0 <lwip_netconn_err_to_msg+0x58>)
 8009f96:	e00c      	b.n	8009fb2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009f98:	4b0a      	ldr	r3, [pc, #40]	; (8009fc4 <lwip_netconn_err_to_msg+0x5c>)
 8009f9a:	e00a      	b.n	8009fb2 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d005      	beq.n	8009fb0 <lwip_netconn_err_to_msg+0x48>
 8009fa4:	4b08      	ldr	r3, [pc, #32]	; (8009fc8 <lwip_netconn_err_to_msg+0x60>)
 8009fa6:	227d      	movs	r2, #125	; 0x7d
 8009fa8:	4908      	ldr	r1, [pc, #32]	; (8009fcc <lwip_netconn_err_to_msg+0x64>)
 8009faa:	4809      	ldr	r0, [pc, #36]	; (8009fd0 <lwip_netconn_err_to_msg+0x68>)
 8009fac:	f00d fc6e 	bl	801788c <iprintf>
      return NULL;
 8009fb0:	2300      	movs	r3, #0
  }
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3708      	adds	r7, #8
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	0801c184 	.word	0x0801c184
 8009fc0:	0801c185 	.word	0x0801c185
 8009fc4:	0801c186 	.word	0x0801c186
 8009fc8:	08018f7c 	.word	0x08018f7c
 8009fcc:	08018fb0 	.word	0x08018fb0
 8009fd0:	08018fc0 	.word	0x08018fc0

08009fd4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d105      	bne.n	8009ff0 <lwip_netconn_is_err_msg+0x1c>
 8009fe4:	4b12      	ldr	r3, [pc, #72]	; (800a030 <lwip_netconn_is_err_msg+0x5c>)
 8009fe6:	2285      	movs	r2, #133	; 0x85
 8009fe8:	4912      	ldr	r1, [pc, #72]	; (800a034 <lwip_netconn_is_err_msg+0x60>)
 8009fea:	4813      	ldr	r0, [pc, #76]	; (800a038 <lwip_netconn_is_err_msg+0x64>)
 8009fec:	f00d fc4e 	bl	801788c <iprintf>

  if (msg == &netconn_aborted) {
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a12      	ldr	r2, [pc, #72]	; (800a03c <lwip_netconn_is_err_msg+0x68>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d104      	bne.n	800a002 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	22f3      	movs	r2, #243	; 0xf3
 8009ffc:	701a      	strb	r2, [r3, #0]
    return 1;
 8009ffe:	2301      	movs	r3, #1
 800a000:	e012      	b.n	800a028 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4a0e      	ldr	r2, [pc, #56]	; (800a040 <lwip_netconn_is_err_msg+0x6c>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d104      	bne.n	800a014 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	22f2      	movs	r2, #242	; 0xf2
 800a00e:	701a      	strb	r2, [r3, #0]
    return 1;
 800a010:	2301      	movs	r3, #1
 800a012:	e009      	b.n	800a028 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a0b      	ldr	r2, [pc, #44]	; (800a044 <lwip_netconn_is_err_msg+0x70>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d104      	bne.n	800a026 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	22f1      	movs	r2, #241	; 0xf1
 800a020:	701a      	strb	r2, [r3, #0]
    return 1;
 800a022:	2301      	movs	r3, #1
 800a024:	e000      	b.n	800a028 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	08018f7c 	.word	0x08018f7c
 800a034:	08018fe8 	.word	0x08018fe8
 800a038:	08018fc0 	.word	0x08018fc0
 800a03c:	0801c184 	.word	0x0801c184
 800a040:	0801c185 	.word	0x0801c185
 800a044:	0801c186 	.word	0x0801c186

0800a048 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b088      	sub	sp, #32
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
 800a054:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d105      	bne.n	800a068 <recv_udp+0x20>
 800a05c:	4b34      	ldr	r3, [pc, #208]	; (800a130 <recv_udp+0xe8>)
 800a05e:	22e5      	movs	r2, #229	; 0xe5
 800a060:	4934      	ldr	r1, [pc, #208]	; (800a134 <recv_udp+0xec>)
 800a062:	4835      	ldr	r0, [pc, #212]	; (800a138 <recv_udp+0xf0>)
 800a064:	f00d fc12 	bl	801788c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d105      	bne.n	800a07a <recv_udp+0x32>
 800a06e:	4b30      	ldr	r3, [pc, #192]	; (800a130 <recv_udp+0xe8>)
 800a070:	22e6      	movs	r2, #230	; 0xe6
 800a072:	4932      	ldr	r1, [pc, #200]	; (800a13c <recv_udp+0xf4>)
 800a074:	4830      	ldr	r0, [pc, #192]	; (800a138 <recv_udp+0xf0>)
 800a076:	f00d fc09 	bl	801788c <iprintf>
  conn = (struct netconn *)arg;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d103      	bne.n	800a08c <recv_udp+0x44>
    pbuf_free(p);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f003 fad9 	bl	800d63c <pbuf_free>
    return;
 800a08a:	e04d      	b.n	800a128 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	429a      	cmp	r2, r3
 800a094:	d005      	beq.n	800a0a2 <recv_udp+0x5a>
 800a096:	4b26      	ldr	r3, [pc, #152]	; (800a130 <recv_udp+0xe8>)
 800a098:	22ee      	movs	r2, #238	; 0xee
 800a09a:	4929      	ldr	r1, [pc, #164]	; (800a140 <recv_udp+0xf8>)
 800a09c:	4826      	ldr	r0, [pc, #152]	; (800a138 <recv_udp+0xf0>)
 800a09e:	f00d fbf5 	bl	801788c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	3310      	adds	r3, #16
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f00d f9c8 	bl	801743c <sys_mbox_valid>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d103      	bne.n	800a0ba <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f003 fac2 	bl	800d63c <pbuf_free>
    return;
 800a0b8:	e036      	b.n	800a128 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a0ba:	2006      	movs	r0, #6
 800a0bc:	f002 fba4 	bl	800c808 <memp_malloc>
 800a0c0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d103      	bne.n	800a0d0 <recv_udp+0x88>
    pbuf_free(p);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f003 fab7 	bl	800d63c <pbuf_free>
    return;
 800a0ce:	e02b      	b.n	800a128 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d002      	beq.n	800a0e8 <recv_udp+0xa0>
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	e000      	b.n	800a0ea <recv_udp+0xa2>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	69ba      	ldr	r2, [r7, #24]
 800a0ec:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a0f2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	891b      	ldrh	r3, [r3, #8]
 800a0f8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	3310      	adds	r3, #16
 800a0fe:	69b9      	ldr	r1, [r7, #24]
 800a100:	4618      	mov	r0, r3
 800a102:	f00d f939 	bl	8017378 <sys_mbox_trypost>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d003      	beq.n	800a114 <recv_udp+0xcc>
    netbuf_delete(buf);
 800a10c:	69b8      	ldr	r0, [r7, #24]
 800a10e:	f001 fc9b 	bl	800ba48 <netbuf_delete>
    return;
 800a112:	e009      	b.n	800a128 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d005      	beq.n	800a128 <recv_udp+0xe0>
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a120:	8afa      	ldrh	r2, [r7, #22]
 800a122:	2100      	movs	r1, #0
 800a124:	69f8      	ldr	r0, [r7, #28]
 800a126:	4798      	blx	r3
  }
}
 800a128:	3720      	adds	r7, #32
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	08018f7c 	.word	0x08018f7c
 800a134:	08018ff4 	.word	0x08018ff4
 800a138:	08018fc0 	.word	0x08018fc0
 800a13c:	08019018 	.word	0x08019018
 800a140:	08019038 	.word	0x08019038

0800a144 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b088      	sub	sp, #32
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
 800a150:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d106      	bne.n	800a166 <recv_tcp+0x22>
 800a158:	4b36      	ldr	r3, [pc, #216]	; (800a234 <recv_tcp+0xf0>)
 800a15a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a15e:	4936      	ldr	r1, [pc, #216]	; (800a238 <recv_tcp+0xf4>)
 800a160:	4836      	ldr	r0, [pc, #216]	; (800a23c <recv_tcp+0xf8>)
 800a162:	f00d fb93 	bl	801788c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d106      	bne.n	800a17a <recv_tcp+0x36>
 800a16c:	4b31      	ldr	r3, [pc, #196]	; (800a234 <recv_tcp+0xf0>)
 800a16e:	f240 122d 	movw	r2, #301	; 0x12d
 800a172:	4933      	ldr	r1, [pc, #204]	; (800a240 <recv_tcp+0xfc>)
 800a174:	4831      	ldr	r0, [pc, #196]	; (800a23c <recv_tcp+0xf8>)
 800a176:	f00d fb89 	bl	801788c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a17a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d006      	beq.n	800a190 <recv_tcp+0x4c>
 800a182:	4b2c      	ldr	r3, [pc, #176]	; (800a234 <recv_tcp+0xf0>)
 800a184:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800a188:	492e      	ldr	r1, [pc, #184]	; (800a244 <recv_tcp+0x100>)
 800a18a:	482c      	ldr	r0, [pc, #176]	; (800a23c <recv_tcp+0xf8>)
 800a18c:	f00d fb7e 	bl	801788c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d102      	bne.n	800a1a0 <recv_tcp+0x5c>
    return ERR_VAL;
 800a19a:	f06f 0305 	mvn.w	r3, #5
 800a19e:	e045      	b.n	800a22c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	68ba      	ldr	r2, [r7, #8]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d006      	beq.n	800a1b8 <recv_tcp+0x74>
 800a1aa:	4b22      	ldr	r3, [pc, #136]	; (800a234 <recv_tcp+0xf0>)
 800a1ac:	f240 1235 	movw	r2, #309	; 0x135
 800a1b0:	4925      	ldr	r1, [pc, #148]	; (800a248 <recv_tcp+0x104>)
 800a1b2:	4822      	ldr	r0, [pc, #136]	; (800a23c <recv_tcp+0xf8>)
 800a1b4:	f00d fb6a 	bl	801788c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	3310      	adds	r3, #16
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f00d f93d 	bl	801743c <sys_mbox_valid>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d10d      	bne.n	800a1e4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d008      	beq.n	800a1e0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	891b      	ldrh	r3, [r3, #8]
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	68b8      	ldr	r0, [r7, #8]
 800a1d6:	f004 fa8b 	bl	800e6f0 <tcp_recved>
      pbuf_free(p);
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f003 fa2e 	bl	800d63c <pbuf_free>
    }
    return ERR_OK;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	e023      	b.n	800a22c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d005      	beq.n	800a1f6 <recv_tcp+0xb2>
    msg = p;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	891b      	ldrh	r3, [r3, #8]
 800a1f2:	83fb      	strh	r3, [r7, #30]
 800a1f4:	e003      	b.n	800a1fe <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a1f6:	4b15      	ldr	r3, [pc, #84]	; (800a24c <recv_tcp+0x108>)
 800a1f8:	61bb      	str	r3, [r7, #24]
    len = 0;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	3310      	adds	r3, #16
 800a202:	69b9      	ldr	r1, [r7, #24]
 800a204:	4618      	mov	r0, r3
 800a206:	f00d f8b7 	bl	8017378 <sys_mbox_trypost>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d002      	beq.n	800a216 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800a210:	f04f 33ff 	mov.w	r3, #4294967295
 800a214:	e00a      	b.n	800a22c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d005      	beq.n	800a22a <recv_tcp+0xe6>
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a222:	8bfa      	ldrh	r2, [r7, #30]
 800a224:	2100      	movs	r1, #0
 800a226:	6978      	ldr	r0, [r7, #20]
 800a228:	4798      	blx	r3
  }

  return ERR_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3720      	adds	r7, #32
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}
 800a234:	08018f7c 	.word	0x08018f7c
 800a238:	08019058 	.word	0x08019058
 800a23c:	08018fc0 	.word	0x08018fc0
 800a240:	0801907c 	.word	0x0801907c
 800a244:	0801909c 	.word	0x0801909c
 800a248:	080190b4 	.word	0x080190b4
 800a24c:	0801c186 	.word	0x0801c186

0800a250 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d106      	bne.n	800a272 <poll_tcp+0x22>
 800a264:	4b29      	ldr	r3, [pc, #164]	; (800a30c <poll_tcp+0xbc>)
 800a266:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800a26a:	4929      	ldr	r1, [pc, #164]	; (800a310 <poll_tcp+0xc0>)
 800a26c:	4829      	ldr	r0, [pc, #164]	; (800a314 <poll_tcp+0xc4>)
 800a26e:	f00d fb0d 	bl	801788c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	785b      	ldrb	r3, [r3, #1]
 800a276:	2b01      	cmp	r3, #1
 800a278:	d104      	bne.n	800a284 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a27a:	2101      	movs	r1, #1
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f001 f8ff 	bl	800b480 <lwip_netconn_do_writemore>
 800a282:	e016      	b.n	800a2b2 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	785b      	ldrb	r3, [r3, #1]
 800a288:	2b04      	cmp	r3, #4
 800a28a:	d112      	bne.n	800a2b2 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6a1b      	ldr	r3, [r3, #32]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d00a      	beq.n	800a2aa <poll_tcp+0x5a>
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6a1b      	ldr	r3, [r3, #32]
 800a298:	7a5b      	ldrb	r3, [r3, #9]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d005      	beq.n	800a2aa <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	7a5a      	ldrb	r2, [r3, #9]
 800a2a4:	3a01      	subs	r2, #1
 800a2a6:	b2d2      	uxtb	r2, r2
 800a2a8:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a2aa:	2101      	movs	r1, #1
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f000 fbf7 	bl	800aaa0 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	7f1b      	ldrb	r3, [r3, #28]
 800a2b6:	f003 0310 	and.w	r3, r3, #16
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d021      	beq.n	800a302 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d01d      	beq.n	800a302 <poll_tcp+0xb2>
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a2ce:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a2d2:	d316      	bcc.n	800a302 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a2dc:	2b04      	cmp	r3, #4
 800a2de:	d810      	bhi.n	800a302 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	7f1b      	ldrb	r3, [r3, #28]
 800a2e4:	f023 0310 	bic.w	r3, r3, #16
 800a2e8:	b2da      	uxtb	r2, r3
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d005      	beq.n	800a302 <poll_tcp+0xb2>
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	2102      	movs	r1, #2
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	08018f7c 	.word	0x08018f7c
 800a310:	080190d4 	.word	0x080190d4
 800a314:	08018fc0 	.word	0x08018fc0

0800a318 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	4613      	mov	r3, r2
 800a324:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d106      	bne.n	800a33e <sent_tcp+0x26>
 800a330:	4b20      	ldr	r3, [pc, #128]	; (800a3b4 <sent_tcp+0x9c>)
 800a332:	f240 1293 	movw	r2, #403	; 0x193
 800a336:	4920      	ldr	r1, [pc, #128]	; (800a3b8 <sent_tcp+0xa0>)
 800a338:	4820      	ldr	r0, [pc, #128]	; (800a3bc <sent_tcp+0xa4>)
 800a33a:	f00d faa7 	bl	801788c <iprintf>

  if (conn) {
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d032      	beq.n	800a3aa <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	785b      	ldrb	r3, [r3, #1]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d104      	bne.n	800a356 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a34c:	2101      	movs	r1, #1
 800a34e:	6978      	ldr	r0, [r7, #20]
 800a350:	f001 f896 	bl	800b480 <lwip_netconn_do_writemore>
 800a354:	e007      	b.n	800a366 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	785b      	ldrb	r3, [r3, #1]
 800a35a:	2b04      	cmp	r3, #4
 800a35c:	d103      	bne.n	800a366 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a35e:	2101      	movs	r1, #1
 800a360:	6978      	ldr	r0, [r7, #20]
 800a362:	f000 fb9d 	bl	800aaa0 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d01d      	beq.n	800a3aa <sent_tcp+0x92>
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a376:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a37a:	d316      	bcc.n	800a3aa <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a384:	2b04      	cmp	r3, #4
 800a386:	d810      	bhi.n	800a3aa <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	7f1b      	ldrb	r3, [r3, #28]
 800a38c:	f023 0310 	bic.w	r3, r3, #16
 800a390:	b2da      	uxtb	r2, r3
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d005      	beq.n	800a3aa <sent_tcp+0x92>
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a2:	88fa      	ldrh	r2, [r7, #6]
 800a3a4:	2102      	movs	r1, #2
 800a3a6:	6978      	ldr	r0, [r7, #20]
 800a3a8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3718      	adds	r7, #24
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	08018f7c 	.word	0x08018f7c
 800a3b8:	080190d4 	.word	0x080190d4
 800a3bc:	08018fc0 	.word	0x08018fc0

0800a3c0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b088      	sub	sp, #32
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d106      	bne.n	800a3e4 <err_tcp+0x24>
 800a3d6:	4b5f      	ldr	r3, [pc, #380]	; (800a554 <err_tcp+0x194>)
 800a3d8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a3dc:	495e      	ldr	r1, [pc, #376]	; (800a558 <err_tcp+0x198>)
 800a3de:	485f      	ldr	r0, [pc, #380]	; (800a55c <err_tcp+0x19c>)
 800a3e0:	f00d fa54 	bl	801788c <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a3e4:	f00d f934 	bl	8017650 <sys_arch_protect>
 800a3e8:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	78fa      	ldrb	r2, [r7, #3]
 800a3f4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	7f1b      	ldrb	r3, [r3, #28]
 800a3fa:	f043 0301 	orr.w	r3, r3, #1
 800a3fe:	b2da      	uxtb	r2, r3
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	785b      	ldrb	r3, [r3, #1]
 800a408:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a40a:	69fb      	ldr	r3, [r7, #28]
 800a40c:	2200      	movs	r2, #0
 800a40e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a410:	69b8      	ldr	r0, [r7, #24]
 800a412:	f00d f92b 	bl	801766c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d005      	beq.n	800a42a <err_tcp+0x6a>
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a422:	2200      	movs	r2, #0
 800a424:	2104      	movs	r1, #4
 800a426:	69f8      	ldr	r0, [r7, #28]
 800a428:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d005      	beq.n	800a43e <err_tcp+0x7e>
 800a432:	69fb      	ldr	r3, [r7, #28]
 800a434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a436:	2200      	movs	r2, #0
 800a438:	2100      	movs	r1, #0
 800a43a:	69f8      	ldr	r0, [r7, #28]
 800a43c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a442:	2b00      	cmp	r3, #0
 800a444:	d005      	beq.n	800a452 <err_tcp+0x92>
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44a:	2200      	movs	r2, #0
 800a44c:	2102      	movs	r1, #2
 800a44e:	69f8      	ldr	r0, [r7, #28]
 800a450:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a452:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a456:	4618      	mov	r0, r3
 800a458:	f7ff fd86 	bl	8009f68 <lwip_netconn_err_to_msg>
 800a45c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a45e:	69fb      	ldr	r3, [r7, #28]
 800a460:	3310      	adds	r3, #16
 800a462:	4618      	mov	r0, r3
 800a464:	f00c ffea 	bl	801743c <sys_mbox_valid>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d005      	beq.n	800a47a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	3310      	adds	r3, #16
 800a472:	6939      	ldr	r1, [r7, #16]
 800a474:	4618      	mov	r0, r3
 800a476:	f00c ff7f 	bl	8017378 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	3314      	adds	r3, #20
 800a47e:	4618      	mov	r0, r3
 800a480:	f00c ffdc 	bl	801743c <sys_mbox_valid>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d005      	beq.n	800a496 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	3314      	adds	r3, #20
 800a48e:	6939      	ldr	r1, [r7, #16]
 800a490:	4618      	mov	r0, r3
 800a492:	f00c ff71 	bl	8017378 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a496:	7dfb      	ldrb	r3, [r7, #23]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d005      	beq.n	800a4a8 <err_tcp+0xe8>
 800a49c:	7dfb      	ldrb	r3, [r7, #23]
 800a49e:	2b04      	cmp	r3, #4
 800a4a0:	d002      	beq.n	800a4a8 <err_tcp+0xe8>
 800a4a2:	7dfb      	ldrb	r3, [r7, #23]
 800a4a4:	2b03      	cmp	r3, #3
 800a4a6:	d143      	bne.n	800a530 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	7f1b      	ldrb	r3, [r3, #28]
 800a4ac:	f003 0304 	and.w	r3, r3, #4
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	bf14      	ite	ne
 800a4b4:	2301      	movne	r3, #1
 800a4b6:	2300      	moveq	r3, #0
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	7f1b      	ldrb	r3, [r3, #28]
 800a4c0:	f023 0304 	bic.w	r3, r3, #4
 800a4c4:	b2da      	uxtb	r2, r3
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d13b      	bne.n	800a548 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	6a1b      	ldr	r3, [r3, #32]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d106      	bne.n	800a4e6 <err_tcp+0x126>
 800a4d8:	4b1e      	ldr	r3, [pc, #120]	; (800a554 <err_tcp+0x194>)
 800a4da:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a4de:	4920      	ldr	r1, [pc, #128]	; (800a560 <err_tcp+0x1a0>)
 800a4e0:	481e      	ldr	r0, [pc, #120]	; (800a55c <err_tcp+0x19c>)
 800a4e2:	f00d f9d3 	bl	801788c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a4e6:	7dfb      	ldrb	r3, [r7, #23]
 800a4e8:	2b04      	cmp	r3, #4
 800a4ea:	d104      	bne.n	800a4f6 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	6a1b      	ldr	r3, [r3, #32]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	711a      	strb	r2, [r3, #4]
 800a4f4:	e003      	b.n	800a4fe <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	6a1b      	ldr	r3, [r3, #32]
 800a4fa:	78fa      	ldrb	r2, [r7, #3]
 800a4fc:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	6a1b      	ldr	r3, [r3, #32]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	330c      	adds	r3, #12
 800a506:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a508:	68b8      	ldr	r0, [r7, #8]
 800a50a:	f00d f825 	bl	8017558 <sys_sem_valid>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d106      	bne.n	800a522 <err_tcp+0x162>
 800a514:	4b0f      	ldr	r3, [pc, #60]	; (800a554 <err_tcp+0x194>)
 800a516:	f240 12ef 	movw	r2, #495	; 0x1ef
 800a51a:	4912      	ldr	r1, [pc, #72]	; (800a564 <err_tcp+0x1a4>)
 800a51c:	480f      	ldr	r0, [pc, #60]	; (800a55c <err_tcp+0x19c>)
 800a51e:	f00d f9b5 	bl	801788c <iprintf>
      conn->current_msg = NULL;
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	2200      	movs	r2, #0
 800a526:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a528:	68b8      	ldr	r0, [r7, #8]
 800a52a:	f00c fffb 	bl	8017524 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a52e:	e00b      	b.n	800a548 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	6a1b      	ldr	r3, [r3, #32]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d008      	beq.n	800a54a <err_tcp+0x18a>
 800a538:	4b06      	ldr	r3, [pc, #24]	; (800a554 <err_tcp+0x194>)
 800a53a:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a53e:	490a      	ldr	r1, [pc, #40]	; (800a568 <err_tcp+0x1a8>)
 800a540:	4806      	ldr	r0, [pc, #24]	; (800a55c <err_tcp+0x19c>)
 800a542:	f00d f9a3 	bl	801788c <iprintf>
  }
}
 800a546:	e000      	b.n	800a54a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a548:	bf00      	nop
}
 800a54a:	bf00      	nop
 800a54c:	3720      	adds	r7, #32
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	08018f7c 	.word	0x08018f7c
 800a558:	080190d4 	.word	0x080190d4
 800a55c:	08018fc0 	.word	0x08018fc0
 800a560:	080190e4 	.word	0x080190e4
 800a564:	08019100 	.word	0x08019100
 800a568:	0801911c 	.word	0x0801911c

0800a56c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a57a:	6879      	ldr	r1, [r7, #4]
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	f005 f895 	bl	800f6ac <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a582:	490a      	ldr	r1, [pc, #40]	; (800a5ac <setup_tcp+0x40>)
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f005 f8a3 	bl	800f6d0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a58a:	4909      	ldr	r1, [pc, #36]	; (800a5b0 <setup_tcp+0x44>)
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f005 f8c1 	bl	800f714 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a592:	2202      	movs	r2, #2
 800a594:	4907      	ldr	r1, [pc, #28]	; (800a5b4 <setup_tcp+0x48>)
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f005 f918 	bl	800f7cc <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a59c:	4906      	ldr	r1, [pc, #24]	; (800a5b8 <setup_tcp+0x4c>)
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	f005 f8da 	bl	800f758 <tcp_err>
}
 800a5a4:	bf00      	nop
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	0800a145 	.word	0x0800a145
 800a5b0:	0800a319 	.word	0x0800a319
 800a5b4:	0800a251 	.word	0x0800a251
 800a5b8:	0800a3c1 	.word	0x0800a3c1

0800a5bc <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800a5bc:	b590      	push	{r4, r7, lr}
 800a5be:	b089      	sub	sp, #36	; 0x24
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d102      	bne.n	800a5da <accept_function+0x1e>
    return ERR_VAL;
 800a5d4:	f06f 0305 	mvn.w	r3, #5
 800a5d8:	e0a1      	b.n	800a71e <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	3314      	adds	r3, #20
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f00c ff2c 	bl	801743c <sys_mbox_valid>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d102      	bne.n	800a5f0 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800a5ea:	f06f 0305 	mvn.w	r3, #5
 800a5ee:	e096      	b.n	800a71e <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d11b      	bne.n	800a62e <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	f103 0414 	add.w	r4, r3, #20
 800a5fc:	f06f 000c 	mvn.w	r0, #12
 800a600:	f7ff fcb2 	bl	8009f68 <lwip_netconn_err_to_msg>
 800a604:	4603      	mov	r3, r0
 800a606:	4619      	mov	r1, r3
 800a608:	4620      	mov	r0, r4
 800a60a:	f00c feb5 	bl	8017378 <sys_mbox_trypost>
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d109      	bne.n	800a628 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d005      	beq.n	800a628 <accept_function+0x6c>
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a620:	2200      	movs	r2, #0
 800a622:	2100      	movs	r1, #0
 800a624:	69f8      	ldr	r0, [r7, #28]
 800a626:	4798      	blx	r3
    }
    return ERR_VAL;
 800a628:	f06f 0305 	mvn.w	r3, #5
 800a62c:	e077      	b.n	800a71e <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800a62e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d006      	beq.n	800a644 <accept_function+0x88>
 800a636:	4b3c      	ldr	r3, [pc, #240]	; (800a728 <accept_function+0x16c>)
 800a638:	f240 222a 	movw	r2, #554	; 0x22a
 800a63c:	493b      	ldr	r1, [pc, #236]	; (800a72c <accept_function+0x170>)
 800a63e:	483c      	ldr	r0, [pc, #240]	; (800a730 <accept_function+0x174>)
 800a640:	f00d f924 	bl	801788c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800a644:	69fb      	ldr	r3, [r7, #28]
 800a646:	781a      	ldrb	r2, [r3, #0]
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64c:	4619      	mov	r1, r3
 800a64e:	4610      	mov	r0, r2
 800a650:	f000 f8f0 	bl	800a834 <netconn_alloc>
 800a654:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d11b      	bne.n	800a694 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	f103 0414 	add.w	r4, r3, #20
 800a662:	f06f 000c 	mvn.w	r0, #12
 800a666:	f7ff fc7f 	bl	8009f68 <lwip_netconn_err_to_msg>
 800a66a:	4603      	mov	r3, r0
 800a66c:	4619      	mov	r1, r3
 800a66e:	4620      	mov	r0, r4
 800a670:	f00c fe82 	bl	8017378 <sys_mbox_trypost>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d109      	bne.n	800a68e <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a67a:	69fb      	ldr	r3, [r7, #28]
 800a67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d005      	beq.n	800a68e <accept_function+0xd2>
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a686:	2200      	movs	r2, #0
 800a688:	2100      	movs	r1, #0
 800a68a:	69f8      	ldr	r0, [r7, #28]
 800a68c:	4798      	blx	r3
    }
    return ERR_MEM;
 800a68e:	f04f 33ff 	mov.w	r3, #4294967295
 800a692:	e044      	b.n	800a71e <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	68ba      	ldr	r2, [r7, #8]
 800a698:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800a69a:	69b8      	ldr	r0, [r7, #24]
 800a69c:	f7ff ff66 	bl	800a56c <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	3314      	adds	r3, #20
 800a6a4:	69b9      	ldr	r1, [r7, #24]
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f00c fe66 	bl	8017378 <sys_mbox_trypost>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d02a      	beq.n	800a708 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800a6b8:	2100      	movs	r1, #0
 800a6ba:	6978      	ldr	r0, [r7, #20]
 800a6bc:	f004 fff6 	bl	800f6ac <tcp_arg>
    tcp_recv(pcb, NULL);
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	6978      	ldr	r0, [r7, #20]
 800a6c4:	f005 f804 	bl	800f6d0 <tcp_recv>
    tcp_sent(pcb, NULL);
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	6978      	ldr	r0, [r7, #20]
 800a6cc:	f005 f822 	bl	800f714 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	6978      	ldr	r0, [r7, #20]
 800a6d6:	f005 f879 	bl	800f7cc <tcp_poll>
    tcp_err(pcb, NULL);
 800a6da:	2100      	movs	r1, #0
 800a6dc:	6978      	ldr	r0, [r7, #20]
 800a6de:	f005 f83b 	bl	800f758 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	3310      	adds	r3, #16
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f00c fe31 	bl	8017354 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	3310      	adds	r3, #16
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f00c feb1 	bl	801745e <sys_mbox_set_invalid>
    netconn_free(newconn);
 800a6fc:	69b8      	ldr	r0, [r7, #24]
 800a6fe:	f000 f907 	bl	800a910 <netconn_free>
    return ERR_MEM;
 800a702:	f04f 33ff 	mov.w	r3, #4294967295
 800a706:	e00a      	b.n	800a71e <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d005      	beq.n	800a71c <accept_function+0x160>
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a714:	2200      	movs	r2, #0
 800a716:	2100      	movs	r1, #0
 800a718:	69f8      	ldr	r0, [r7, #28]
 800a71a:	4798      	blx	r3
  }

  return ERR_OK;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3724      	adds	r7, #36	; 0x24
 800a722:	46bd      	mov	sp, r7
 800a724:	bd90      	pop	{r4, r7, pc}
 800a726:	bf00      	nop
 800a728:	08018f7c 	.word	0x08018f7c
 800a72c:	08019138 	.word	0x08019138
 800a730:	08018fc0 	.word	0x08018fc0

0800a734 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a734:	b590      	push	{r4, r7, lr}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a73c:	2300      	movs	r3, #0
 800a73e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d006      	beq.n	800a758 <pcb_new+0x24>
 800a74a:	4b2b      	ldr	r3, [pc, #172]	; (800a7f8 <pcb_new+0xc4>)
 800a74c:	f240 2265 	movw	r2, #613	; 0x265
 800a750:	492a      	ldr	r1, [pc, #168]	; (800a7fc <pcb_new+0xc8>)
 800a752:	482b      	ldr	r0, [pc, #172]	; (800a800 <pcb_new+0xcc>)
 800a754:	f00d f89a 	bl	801788c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a762:	2b10      	cmp	r3, #16
 800a764:	d022      	beq.n	800a7ac <pcb_new+0x78>
 800a766:	2b20      	cmp	r3, #32
 800a768:	d133      	bne.n	800a7d2 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681c      	ldr	r4, [r3, #0]
 800a76e:	7bfb      	ldrb	r3, [r7, #15]
 800a770:	4618      	mov	r0, r3
 800a772:	f00a fad2 	bl	8014d1a <udp_new_ip_type>
 800a776:	4603      	mov	r3, r0
 800a778:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d02a      	beq.n	800a7da <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	2b22      	cmp	r3, #34	; 0x22
 800a78c:	d104      	bne.n	800a798 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	2201      	movs	r2, #1
 800a796:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	6858      	ldr	r0, [r3, #4]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	4917      	ldr	r1, [pc, #92]	; (800a804 <pcb_new+0xd0>)
 800a7a6:	f00a fa3f 	bl	8014c28 <udp_recv>
      }
      break;
 800a7aa:	e016      	b.n	800a7da <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681c      	ldr	r4, [r3, #0]
 800a7b0:	7bfb      	ldrb	r3, [r7, #15]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f004 ff6c 	bl	800f690 <tcp_new_ip_type>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d00b      	beq.n	800a7de <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7ff fece 	bl	800a56c <setup_tcp>
      }
      break;
 800a7d0:	e005      	b.n	800a7de <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	22fa      	movs	r2, #250	; 0xfa
 800a7d6:	711a      	strb	r2, [r3, #4]
      return;
 800a7d8:	e00a      	b.n	800a7f0 <pcb_new+0xbc>
      break;
 800a7da:	bf00      	nop
 800a7dc:	e000      	b.n	800a7e0 <pcb_new+0xac>
      break;
 800a7de:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d102      	bne.n	800a7f0 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	22ff      	movs	r2, #255	; 0xff
 800a7ee:	711a      	strb	r2, [r3, #4]
  }
}
 800a7f0:	3714      	adds	r7, #20
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd90      	pop	{r4, r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	08018f7c 	.word	0x08018f7c
 800a7fc:	08019160 	.word	0x08019160
 800a800:	08018fc0 	.word	0x08018fc0
 800a804:	0800a049 	.word	0x0800a049

0800a808 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d102      	bne.n	800a82a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f7ff ff85 	bl	800a734 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a82a:	bf00      	nop
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
	...

0800a834 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af00      	add	r7, sp, #0
 800a83a:	4603      	mov	r3, r0
 800a83c:	6039      	str	r1, [r7, #0]
 800a83e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a840:	2300      	movs	r3, #0
 800a842:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a844:	2007      	movs	r0, #7
 800a846:	f001 ffdf 	bl	800c808 <memp_malloc>
 800a84a:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d101      	bne.n	800a856 <netconn_alloc+0x22>
    return NULL;
 800a852:	2300      	movs	r3, #0
 800a854:	e052      	b.n	800a8fc <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	79fa      	ldrb	r2, [r7, #7]
 800a860:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2200      	movs	r2, #0
 800a866:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a868:	79fb      	ldrb	r3, [r7, #7]
 800a86a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a86e:	2b10      	cmp	r3, #16
 800a870:	d004      	beq.n	800a87c <netconn_alloc+0x48>
 800a872:	2b20      	cmp	r3, #32
 800a874:	d105      	bne.n	800a882 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a876:	2306      	movs	r3, #6
 800a878:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a87a:	e00a      	b.n	800a892 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a87c:	2306      	movs	r3, #6
 800a87e:	617b      	str	r3, [r7, #20]
      break;
 800a880:	e007      	b.n	800a892 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a882:	4b20      	ldr	r3, [pc, #128]	; (800a904 <netconn_alloc+0xd0>)
 800a884:	f240 22e5 	movw	r2, #741	; 0x2e5
 800a888:	491f      	ldr	r1, [pc, #124]	; (800a908 <netconn_alloc+0xd4>)
 800a88a:	4820      	ldr	r0, [pc, #128]	; (800a90c <netconn_alloc+0xd8>)
 800a88c:	f00c fffe 	bl	801788c <iprintf>
      goto free_and_return;
 800a890:	e02f      	b.n	800a8f2 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	3310      	adds	r3, #16
 800a896:	6979      	ldr	r1, [r7, #20]
 800a898:	4618      	mov	r0, r3
 800a89a:	f00c fd41 	bl	8017320 <sys_mbox_new>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d125      	bne.n	800a8f0 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	330c      	adds	r3, #12
 800a8a8:	2100      	movs	r1, #0
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f00c fde4 	bl	8017478 <sys_sem_new>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d005      	beq.n	800a8c2 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	3310      	adds	r3, #16
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f00c fd4a 	bl	8017354 <sys_mbox_free>
    goto free_and_return;
 800a8c0:	e017      	b.n	800a8f2 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	3314      	adds	r3, #20
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f00c fdc9 	bl	801745e <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8d8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	683a      	ldr	r2, [r7, #0]
 800a8de:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	7cfa      	ldrb	r2, [r7, #19]
 800a8ea:	771a      	strb	r2, [r3, #28]
  return conn;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	e005      	b.n	800a8fc <netconn_alloc+0xc8>
    goto free_and_return;
 800a8f0:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a8f2:	68f9      	ldr	r1, [r7, #12]
 800a8f4:	2007      	movs	r0, #7
 800a8f6:	f001 fffd 	bl	800c8f4 <memp_free>
  return NULL;
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3718      	adds	r7, #24
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	08018f7c 	.word	0x08018f7c
 800a908:	08019180 	.word	0x08019180
 800a90c:	08018fc0 	.word	0x08018fc0

0800a910 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d006      	beq.n	800a92e <netconn_free+0x1e>
 800a920:	4b1b      	ldr	r3, [pc, #108]	; (800a990 <netconn_free+0x80>)
 800a922:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a926:	491b      	ldr	r1, [pc, #108]	; (800a994 <netconn_free+0x84>)
 800a928:	481b      	ldr	r0, [pc, #108]	; (800a998 <netconn_free+0x88>)
 800a92a:	f00c ffaf 	bl	801788c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	3310      	adds	r3, #16
 800a932:	4618      	mov	r0, r3
 800a934:	f00c fd82 	bl	801743c <sys_mbox_valid>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d006      	beq.n	800a94c <netconn_free+0x3c>
 800a93e:	4b14      	ldr	r3, [pc, #80]	; (800a990 <netconn_free+0x80>)
 800a940:	f240 3223 	movw	r2, #803	; 0x323
 800a944:	4915      	ldr	r1, [pc, #84]	; (800a99c <netconn_free+0x8c>)
 800a946:	4814      	ldr	r0, [pc, #80]	; (800a998 <netconn_free+0x88>)
 800a948:	f00c ffa0 	bl	801788c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	3314      	adds	r3, #20
 800a950:	4618      	mov	r0, r3
 800a952:	f00c fd73 	bl	801743c <sys_mbox_valid>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d006      	beq.n	800a96a <netconn_free+0x5a>
 800a95c:	4b0c      	ldr	r3, [pc, #48]	; (800a990 <netconn_free+0x80>)
 800a95e:	f240 3226 	movw	r2, #806	; 0x326
 800a962:	490f      	ldr	r1, [pc, #60]	; (800a9a0 <netconn_free+0x90>)
 800a964:	480c      	ldr	r0, [pc, #48]	; (800a998 <netconn_free+0x88>)
 800a966:	f00c ff91 	bl	801788c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	330c      	adds	r3, #12
 800a96e:	4618      	mov	r0, r3
 800a970:	f00c fde5 	bl	801753e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	330c      	adds	r3, #12
 800a978:	4618      	mov	r0, r3
 800a97a:	f00c fdfe 	bl	801757a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a97e:	6879      	ldr	r1, [r7, #4]
 800a980:	2007      	movs	r0, #7
 800a982:	f001 ffb7 	bl	800c8f4 <memp_free>
}
 800a986:	bf00      	nop
 800a988:	3708      	adds	r7, #8
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	08018f7c 	.word	0x08018f7c
 800a994:	080191a8 	.word	0x080191a8
 800a998:	08018fc0 	.word	0x08018fc0
 800a99c:	080191d8 	.word	0x080191d8
 800a9a0:	08019214 	.word	0x08019214

0800a9a4 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b086      	sub	sp, #24
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	3310      	adds	r3, #16
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f00c fd43 	bl	801743c <sys_mbox_valid>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d02f      	beq.n	800aa1c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a9bc:	e018      	b.n	800a9f0 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9c6:	2b10      	cmp	r3, #16
 800a9c8:	d10e      	bne.n	800a9e8 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	f107 020f 	add.w	r2, r7, #15
 800a9d0:	4611      	mov	r1, r2
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7ff fafe 	bl	8009fd4 <lwip_netconn_is_err_msg>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d108      	bne.n	800a9f0 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f002 fe2b 	bl	800d63c <pbuf_free>
 800a9e6:	e003      	b.n	800a9f0 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f001 f82c 	bl	800ba48 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	3310      	adds	r3, #16
 800a9f4:	f107 0210 	add.w	r2, r7, #16
 800a9f8:	4611      	mov	r1, r2
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f00c fd07 	bl	801740e <sys_arch_mbox_tryfetch>
 800aa00:	4603      	mov	r3, r0
 800aa02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa06:	d1da      	bne.n	800a9be <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	3310      	adds	r3, #16
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f00c fca1 	bl	8017354 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	3310      	adds	r3, #16
 800aa16:	4618      	mov	r0, r3
 800aa18:	f00c fd21 	bl	801745e <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	3314      	adds	r3, #20
 800aa20:	4618      	mov	r0, r3
 800aa22:	f00c fd0b 	bl	801743c <sys_mbox_valid>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d034      	beq.n	800aa96 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800aa2c:	e01d      	b.n	800aa6a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	f107 020e 	add.w	r2, r7, #14
 800aa34:	4611      	mov	r1, r2
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7ff facc 	bl	8009fd4 <lwip_netconn_is_err_msg>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d113      	bne.n	800aa6a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800aa46:	6978      	ldr	r0, [r7, #20]
 800aa48:	f7ff ffac 	bl	800a9a4 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d007      	beq.n	800aa64 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f003 fc81 	bl	800e360 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	2200      	movs	r2, #0
 800aa62:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800aa64:	6978      	ldr	r0, [r7, #20]
 800aa66:	f7ff ff53 	bl	800a910 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	3314      	adds	r3, #20
 800aa6e:	f107 0210 	add.w	r2, r7, #16
 800aa72:	4611      	mov	r1, r2
 800aa74:	4618      	mov	r0, r3
 800aa76:	f00c fcca 	bl	801740e <sys_arch_mbox_tryfetch>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa80:	d1d5      	bne.n	800aa2e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	3314      	adds	r3, #20
 800aa86:	4618      	mov	r0, r3
 800aa88:	f00c fc64 	bl	8017354 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	3314      	adds	r3, #20
 800aa90:	4618      	mov	r0, r3
 800aa92:	f00c fce4 	bl	801745e <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800aa96:	bf00      	nop
 800aa98:	3718      	adds	r7, #24
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
	...

0800aaa0 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800aaac:	2300      	movs	r3, #0
 800aaae:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d106      	bne.n	800aac4 <lwip_netconn_do_close_internal+0x24>
 800aab6:	4b87      	ldr	r3, [pc, #540]	; (800acd4 <lwip_netconn_do_close_internal+0x234>)
 800aab8:	f240 32a2 	movw	r2, #930	; 0x3a2
 800aabc:	4986      	ldr	r1, [pc, #536]	; (800acd8 <lwip_netconn_do_close_internal+0x238>)
 800aabe:	4887      	ldr	r0, [pc, #540]	; (800acdc <lwip_netconn_do_close_internal+0x23c>)
 800aac0:	f00c fee4 	bl	801788c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aacc:	2b10      	cmp	r3, #16
 800aace:	d006      	beq.n	800aade <lwip_netconn_do_close_internal+0x3e>
 800aad0:	4b80      	ldr	r3, [pc, #512]	; (800acd4 <lwip_netconn_do_close_internal+0x234>)
 800aad2:	f240 32a3 	movw	r2, #931	; 0x3a3
 800aad6:	4982      	ldr	r1, [pc, #520]	; (800ace0 <lwip_netconn_do_close_internal+0x240>)
 800aad8:	4880      	ldr	r0, [pc, #512]	; (800acdc <lwip_netconn_do_close_internal+0x23c>)
 800aada:	f00c fed7 	bl	801788c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	785b      	ldrb	r3, [r3, #1]
 800aae2:	2b04      	cmp	r3, #4
 800aae4:	d006      	beq.n	800aaf4 <lwip_netconn_do_close_internal+0x54>
 800aae6:	4b7b      	ldr	r3, [pc, #492]	; (800acd4 <lwip_netconn_do_close_internal+0x234>)
 800aae8:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800aaec:	497d      	ldr	r1, [pc, #500]	; (800ace4 <lwip_netconn_do_close_internal+0x244>)
 800aaee:	487b      	ldr	r0, [pc, #492]	; (800acdc <lwip_netconn_do_close_internal+0x23c>)
 800aaf0:	f00c fecc 	bl	801788c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d106      	bne.n	800ab0a <lwip_netconn_do_close_internal+0x6a>
 800aafc:	4b75      	ldr	r3, [pc, #468]	; (800acd4 <lwip_netconn_do_close_internal+0x234>)
 800aafe:	f240 32a5 	movw	r2, #933	; 0x3a5
 800ab02:	4979      	ldr	r1, [pc, #484]	; (800ace8 <lwip_netconn_do_close_internal+0x248>)
 800ab04:	4875      	ldr	r0, [pc, #468]	; (800acdc <lwip_netconn_do_close_internal+0x23c>)
 800ab06:	f00c fec1 	bl	801788c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a1b      	ldr	r3, [r3, #32]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d106      	bne.n	800ab20 <lwip_netconn_do_close_internal+0x80>
 800ab12:	4b70      	ldr	r3, [pc, #448]	; (800acd4 <lwip_netconn_do_close_internal+0x234>)
 800ab14:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ab18:	4974      	ldr	r1, [pc, #464]	; (800acec <lwip_netconn_do_close_internal+0x24c>)
 800ab1a:	4870      	ldr	r0, [pc, #448]	; (800acdc <lwip_netconn_do_close_internal+0x23c>)
 800ab1c:	f00c feb6 	bl	801788c <iprintf>

  tpcb = conn->pcb.tcp;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6a1b      	ldr	r3, [r3, #32]
 800ab2a:	7a1b      	ldrb	r3, [r3, #8]
 800ab2c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800ab2e:	7bfb      	ldrb	r3, [r7, #15]
 800ab30:	f003 0301 	and.w	r3, r3, #1
 800ab34:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800ab36:	7bfb      	ldrb	r3, [r7, #15]
 800ab38:	f003 0302 	and.w	r3, r3, #2
 800ab3c:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800ab3e:	7bfb      	ldrb	r3, [r7, #15]
 800ab40:	2b03      	cmp	r3, #3
 800ab42:	d102      	bne.n	800ab4a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800ab44:	2301      	movs	r3, #1
 800ab46:	75bb      	strb	r3, [r7, #22]
 800ab48:	e01f      	b.n	800ab8a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800ab4a:	7bbb      	ldrb	r3, [r7, #14]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00e      	beq.n	800ab6e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800ab54:	2b05      	cmp	r3, #5
 800ab56:	d007      	beq.n	800ab68 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800ab5c:	2b06      	cmp	r3, #6
 800ab5e:	d003      	beq.n	800ab68 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800ab64:	2b08      	cmp	r3, #8
 800ab66:	d102      	bne.n	800ab6e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	75bb      	strb	r3, [r7, #22]
 800ab6c:	e00d      	b.n	800ab8a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800ab6e:	7b7b      	ldrb	r3, [r7, #13]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d008      	beq.n	800ab86 <lwip_netconn_do_close_internal+0xe6>
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	8b5b      	ldrh	r3, [r3, #26]
 800ab78:	f003 0310 	and.w	r3, r3, #16
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d002      	beq.n	800ab86 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800ab80:	2301      	movs	r3, #1
 800ab82:	75bb      	strb	r3, [r7, #22]
 800ab84:	e001      	b.n	800ab8a <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800ab8a:	7dbb      	ldrb	r3, [r7, #22]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d003      	beq.n	800ab98 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800ab90:	2100      	movs	r1, #0
 800ab92:	6938      	ldr	r0, [r7, #16]
 800ab94:	f004 fd8a 	bl	800f6ac <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	7d1b      	ldrb	r3, [r3, #20]
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d104      	bne.n	800abaa <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800aba0:	2100      	movs	r1, #0
 800aba2:	6938      	ldr	r0, [r7, #16]
 800aba4:	f004 fdfa 	bl	800f79c <tcp_accept>
 800aba8:	e01d      	b.n	800abe6 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800abaa:	7bbb      	ldrb	r3, [r7, #14]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d007      	beq.n	800abc0 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800abb0:	2100      	movs	r1, #0
 800abb2:	6938      	ldr	r0, [r7, #16]
 800abb4:	f004 fd8c 	bl	800f6d0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800abb8:	2100      	movs	r1, #0
 800abba:	6938      	ldr	r0, [r7, #16]
 800abbc:	f004 fdee 	bl	800f79c <tcp_accept>
    }
    if (shut_tx) {
 800abc0:	7b7b      	ldrb	r3, [r7, #13]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d003      	beq.n	800abce <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800abc6:	2100      	movs	r1, #0
 800abc8:	6938      	ldr	r0, [r7, #16]
 800abca:	f004 fda3 	bl	800f714 <tcp_sent>
    }
    if (shut_close) {
 800abce:	7dbb      	ldrb	r3, [r7, #22]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d008      	beq.n	800abe6 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800abd4:	2200      	movs	r2, #0
 800abd6:	2100      	movs	r1, #0
 800abd8:	6938      	ldr	r0, [r7, #16]
 800abda:	f004 fdf7 	bl	800f7cc <tcp_poll>
      tcp_err(tpcb, NULL);
 800abde:	2100      	movs	r1, #0
 800abe0:	6938      	ldr	r0, [r7, #16]
 800abe2:	f004 fdb9 	bl	800f758 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800abe6:	7dbb      	ldrb	r3, [r7, #22]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d005      	beq.n	800abf8 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800abec:	6938      	ldr	r0, [r7, #16]
 800abee:	f003 fa71 	bl	800e0d4 <tcp_close>
 800abf2:	4603      	mov	r3, r0
 800abf4:	75fb      	strb	r3, [r7, #23]
 800abf6:	e007      	b.n	800ac08 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800abf8:	7bbb      	ldrb	r3, [r7, #14]
 800abfa:	7b7a      	ldrb	r2, [r7, #13]
 800abfc:	4619      	mov	r1, r3
 800abfe:	6938      	ldr	r0, [r7, #16]
 800ac00:	f003 fa94 	bl	800e12c <tcp_shutdown>
 800ac04:	4603      	mov	r3, r0
 800ac06:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800ac08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d102      	bne.n	800ac16 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800ac10:	2301      	movs	r3, #1
 800ac12:	757b      	strb	r3, [r7, #21]
 800ac14:	e016      	b.n	800ac44 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800ac16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac1e:	d10f      	bne.n	800ac40 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a1b      	ldr	r3, [r3, #32]
 800ac24:	7a5b      	ldrb	r3, [r3, #9]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10c      	bne.n	800ac44 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800ac2e:	7dbb      	ldrb	r3, [r7, #22]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d007      	beq.n	800ac44 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800ac34:	6938      	ldr	r0, [r7, #16]
 800ac36:	f003 fb93 	bl	800e360 <tcp_abort>
          err = ERR_OK;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	75fb      	strb	r3, [r7, #23]
 800ac3e:	e001      	b.n	800ac44 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800ac40:	2301      	movs	r3, #1
 800ac42:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800ac44:	7d7b      	ldrb	r3, [r7, #21]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d052      	beq.n	800acf0 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6a1b      	ldr	r3, [r3, #32]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	330c      	adds	r3, #12
 800ac52:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6a1b      	ldr	r3, [r3, #32]
 800ac58:	7dfa      	ldrb	r2, [r7, #23]
 800ac5a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800ac68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d129      	bne.n	800acc4 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800ac70:	7dbb      	ldrb	r3, [r7, #22]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00c      	beq.n	800ac90 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d005      	beq.n	800ac90 <lwip_netconn_do_close_internal+0x1f0>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac88:	2200      	movs	r2, #0
 800ac8a:	2104      	movs	r1, #4
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	4798      	blx	r3
      }
      if (shut_rx) {
 800ac90:	7bbb      	ldrb	r3, [r7, #14]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d009      	beq.n	800acaa <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d005      	beq.n	800acaa <lwip_netconn_do_close_internal+0x20a>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca2:	2200      	movs	r2, #0
 800aca4:	2100      	movs	r1, #0
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	4798      	blx	r3
      }
      if (shut_tx) {
 800acaa:	7b7b      	ldrb	r3, [r7, #13]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d009      	beq.n	800acc4 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d005      	beq.n	800acc4 <lwip_netconn_do_close_internal+0x224>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbc:	2200      	movs	r2, #0
 800acbe:	2102      	movs	r1, #2
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800acc4:	78fb      	ldrb	r3, [r7, #3]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d002      	beq.n	800acd0 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800acca:	68b8      	ldr	r0, [r7, #8]
 800accc:	f00c fc2a 	bl	8017524 <sys_sem_signal>
    }
    return ERR_OK;
 800acd0:	2300      	movs	r3, #0
 800acd2:	e03c      	b.n	800ad4e <lwip_netconn_do_close_internal+0x2ae>
 800acd4:	08018f7c 	.word	0x08018f7c
 800acd8:	08019250 	.word	0x08019250
 800acdc:	08018fc0 	.word	0x08018fc0
 800ace0:	08019260 	.word	0x08019260
 800ace4:	08019280 	.word	0x08019280
 800ace8:	080192a4 	.word	0x080192a4
 800acec:	080190e4 	.word	0x080190e4
  }
  if (!close_finished) {
 800acf0:	7d7b      	ldrb	r3, [r7, #21]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d11e      	bne.n	800ad34 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	7d1b      	ldrb	r3, [r3, #20]
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d106      	bne.n	800ad0c <lwip_netconn_do_close_internal+0x26c>
 800acfe:	4b16      	ldr	r3, [pc, #88]	; (800ad58 <lwip_netconn_do_close_internal+0x2b8>)
 800ad00:	f240 4241 	movw	r2, #1089	; 0x441
 800ad04:	4915      	ldr	r1, [pc, #84]	; (800ad5c <lwip_netconn_do_close_internal+0x2bc>)
 800ad06:	4816      	ldr	r0, [pc, #88]	; (800ad60 <lwip_netconn_do_close_internal+0x2c0>)
 800ad08:	f00c fdc0 	bl	801788c <iprintf>
    if (shut_tx) {
 800ad0c:	7b7b      	ldrb	r3, [r7, #13]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d003      	beq.n	800ad1a <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800ad12:	4914      	ldr	r1, [pc, #80]	; (800ad64 <lwip_netconn_do_close_internal+0x2c4>)
 800ad14:	6938      	ldr	r0, [r7, #16]
 800ad16:	f004 fcfd 	bl	800f714 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	4912      	ldr	r1, [pc, #72]	; (800ad68 <lwip_netconn_do_close_internal+0x2c8>)
 800ad1e:	6938      	ldr	r0, [r7, #16]
 800ad20:	f004 fd54 	bl	800f7cc <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800ad24:	4911      	ldr	r1, [pc, #68]	; (800ad6c <lwip_netconn_do_close_internal+0x2cc>)
 800ad26:	6938      	ldr	r0, [r7, #16]
 800ad28:	f004 fd16 	bl	800f758 <tcp_err>
    tcp_arg(tpcb, conn);
 800ad2c:	6879      	ldr	r1, [r7, #4]
 800ad2e:	6938      	ldr	r0, [r7, #16]
 800ad30:	f004 fcbc 	bl	800f6ac <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800ad34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d106      	bne.n	800ad4a <lwip_netconn_do_close_internal+0x2aa>
 800ad3c:	4b06      	ldr	r3, [pc, #24]	; (800ad58 <lwip_netconn_do_close_internal+0x2b8>)
 800ad3e:	f240 424d 	movw	r2, #1101	; 0x44d
 800ad42:	490b      	ldr	r1, [pc, #44]	; (800ad70 <lwip_netconn_do_close_internal+0x2d0>)
 800ad44:	4806      	ldr	r0, [pc, #24]	; (800ad60 <lwip_netconn_do_close_internal+0x2c0>)
 800ad46:	f00c fda1 	bl	801788c <iprintf>
  return err;
 800ad4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3718      	adds	r7, #24
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	08018f7c 	.word	0x08018f7c
 800ad5c:	080192b8 	.word	0x080192b8
 800ad60:	08018fc0 	.word	0x08018fc0
 800ad64:	0800a319 	.word	0x0800a319
 800ad68:	0800a251 	.word	0x0800a251
 800ad6c:	0800a3c1 	.word	0x0800a3c1
 800ad70:	080192dc 	.word	0x080192dc

0800ad74 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	785b      	ldrb	r3, [r3, #1]
 800ad86:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800ad88:	7afb      	ldrb	r3, [r7, #11]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00d      	beq.n	800adaa <lwip_netconn_do_delconn+0x36>
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad98:	2b10      	cmp	r3, #16
 800ad9a:	d006      	beq.n	800adaa <lwip_netconn_do_delconn+0x36>
 800ad9c:	4b60      	ldr	r3, [pc, #384]	; (800af20 <lwip_netconn_do_delconn+0x1ac>)
 800ad9e:	f240 425e 	movw	r2, #1118	; 0x45e
 800ada2:	4960      	ldr	r1, [pc, #384]	; (800af24 <lwip_netconn_do_delconn+0x1b0>)
 800ada4:	4860      	ldr	r0, [pc, #384]	; (800af28 <lwip_netconn_do_delconn+0x1b4>)
 800ada6:	f00c fd71 	bl	801788c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800adaa:	7afb      	ldrb	r3, [r7, #11]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d005      	beq.n	800adbc <lwip_netconn_do_delconn+0x48>
 800adb0:	7afb      	ldrb	r3, [r7, #11]
 800adb2:	2b02      	cmp	r3, #2
 800adb4:	d002      	beq.n	800adbc <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800adb6:	7afb      	ldrb	r3, [r7, #11]
 800adb8:	2b03      	cmp	r3, #3
 800adba:	d109      	bne.n	800add0 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800adbc:	7afb      	ldrb	r3, [r7, #11]
 800adbe:	2b03      	cmp	r3, #3
 800adc0:	d10a      	bne.n	800add8 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	7f1b      	ldrb	r3, [r3, #28]
 800adc8:	f003 0304 	and.w	r3, r3, #4
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d103      	bne.n	800add8 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	22fb      	movs	r2, #251	; 0xfb
 800add4:	711a      	strb	r2, [r3, #4]
 800add6:	e097      	b.n	800af08 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800add8:	7afb      	ldrb	r3, [r7, #11]
 800adda:	2b03      	cmp	r3, #3
 800addc:	d10d      	bne.n	800adfa <lwip_netconn_do_delconn+0x86>
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	7f1b      	ldrb	r3, [r3, #28]
 800ade4:	f003 0304 	and.w	r3, r3, #4
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d106      	bne.n	800adfa <lwip_netconn_do_delconn+0x86>
 800adec:	4b4c      	ldr	r3, [pc, #304]	; (800af20 <lwip_netconn_do_delconn+0x1ac>)
 800adee:	f240 427a 	movw	r2, #1146	; 0x47a
 800adf2:	494e      	ldr	r1, [pc, #312]	; (800af2c <lwip_netconn_do_delconn+0x1b8>)
 800adf4:	484c      	ldr	r0, [pc, #304]	; (800af28 <lwip_netconn_do_delconn+0x1b4>)
 800adf6:	f00c fd49 	bl	801788c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2200      	movs	r2, #0
 800adfe:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7ff fdcd 	bl	800a9a4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d05f      	beq.n	800aed4 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae1e:	2b10      	cmp	r3, #16
 800ae20:	d00d      	beq.n	800ae3e <lwip_netconn_do_delconn+0xca>
 800ae22:	2b20      	cmp	r3, #32
 800ae24:	d151      	bne.n	800aeca <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	4618      	mov	r0, r3
 800ae38:	f009 ff16 	bl	8014c68 <udp_remove>
          break;
 800ae3c:	e046      	b.n	800aecc <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	6a1b      	ldr	r3, [r3, #32]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d006      	beq.n	800ae56 <lwip_netconn_do_delconn+0xe2>
 800ae48:	4b35      	ldr	r3, [pc, #212]	; (800af20 <lwip_netconn_do_delconn+0x1ac>)
 800ae4a:	f240 4294 	movw	r2, #1172	; 0x494
 800ae4e:	4938      	ldr	r1, [pc, #224]	; (800af30 <lwip_netconn_do_delconn+0x1bc>)
 800ae50:	4835      	ldr	r0, [pc, #212]	; (800af28 <lwip_netconn_do_delconn+0x1b4>)
 800ae52:	f00c fd1b 	bl	801788c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2204      	movs	r2, #4
 800ae5c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2203      	movs	r2, #3
 800ae62:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2100      	movs	r1, #0
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7ff fe14 	bl	800aaa0 <lwip_netconn_do_close_internal>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d04b      	beq.n	800af16 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	785b      	ldrb	r3, [r3, #1]
 800ae84:	2b04      	cmp	r3, #4
 800ae86:	d006      	beq.n	800ae96 <lwip_netconn_do_delconn+0x122>
 800ae88:	4b25      	ldr	r3, [pc, #148]	; (800af20 <lwip_netconn_do_delconn+0x1ac>)
 800ae8a:	f240 429a 	movw	r2, #1178	; 0x49a
 800ae8e:	4929      	ldr	r1, [pc, #164]	; (800af34 <lwip_netconn_do_delconn+0x1c0>)
 800ae90:	4825      	ldr	r0, [pc, #148]	; (800af28 <lwip_netconn_do_delconn+0x1b4>)
 800ae92:	f00c fcfb 	bl	801788c <iprintf>
            UNLOCK_TCPIP_CORE();
 800ae96:	4828      	ldr	r0, [pc, #160]	; (800af38 <lwip_netconn_do_delconn+0x1c4>)
 800ae98:	f00c fbad 	bl	80175f6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	330c      	adds	r3, #12
 800aea2:	2100      	movs	r1, #0
 800aea4:	4618      	mov	r0, r3
 800aea6:	f00c fb0c 	bl	80174c2 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800aeaa:	4823      	ldr	r0, [pc, #140]	; (800af38 <lwip_netconn_do_delconn+0x1c4>)
 800aeac:	f00c fb94 	bl	80175d8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	785b      	ldrb	r3, [r3, #1]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d02d      	beq.n	800af16 <lwip_netconn_do_delconn+0x1a2>
 800aeba:	4b19      	ldr	r3, [pc, #100]	; (800af20 <lwip_netconn_do_delconn+0x1ac>)
 800aebc:	f240 429e 	movw	r2, #1182	; 0x49e
 800aec0:	491c      	ldr	r1, [pc, #112]	; (800af34 <lwip_netconn_do_delconn+0x1c0>)
 800aec2:	4819      	ldr	r0, [pc, #100]	; (800af28 <lwip_netconn_do_delconn+0x1b4>)
 800aec4:	f00c fce2 	bl	801788c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800aec8:	e025      	b.n	800af16 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800aeca:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2200      	movs	r2, #0
 800aed2:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d007      	beq.n	800aeee <lwip_netconn_do_delconn+0x17a>
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	6810      	ldr	r0, [r2, #0]
 800aee8:	2200      	movs	r2, #0
 800aeea:	2100      	movs	r1, #0
 800aeec:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d007      	beq.n	800af08 <lwip_netconn_do_delconn+0x194>
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	6810      	ldr	r0, [r2, #0]
 800af02:	2200      	movs	r2, #0
 800af04:	2102      	movs	r1, #2
 800af06:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	330c      	adds	r3, #12
 800af0e:	4618      	mov	r0, r3
 800af10:	f00c fb22 	bl	8017558 <sys_sem_valid>
 800af14:	e000      	b.n	800af18 <lwip_netconn_do_delconn+0x1a4>
          return;
 800af16:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	08018f7c 	.word	0x08018f7c
 800af24:	080192ec 	.word	0x080192ec
 800af28:	08018fc0 	.word	0x08018fc0
 800af2c:	08019300 	.word	0x08019300
 800af30:	08019320 	.word	0x08019320
 800af34:	0801933c 	.word	0x0801933c
 800af38:	20009ee4 	.word	0x20009ee4

0800af3c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d025      	beq.n	800af9e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af5c:	2b10      	cmp	r3, #16
 800af5e:	d00e      	beq.n	800af7e <lwip_netconn_do_bind+0x42>
 800af60:	2b20      	cmp	r3, #32
 800af62:	d119      	bne.n	800af98 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	6858      	ldr	r0, [r3, #4]
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	6899      	ldr	r1, [r3, #8]
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	899b      	ldrh	r3, [r3, #12]
 800af72:	461a      	mov	r2, r3
 800af74:	f009 fd62 	bl	8014a3c <udp_bind>
 800af78:	4603      	mov	r3, r0
 800af7a:	73fb      	strb	r3, [r7, #15]
        break;
 800af7c:	e011      	b.n	800afa2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	6858      	ldr	r0, [r3, #4]
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	6899      	ldr	r1, [r3, #8]
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	899b      	ldrh	r3, [r3, #12]
 800af8c:	461a      	mov	r2, r3
 800af8e:	f003 f9f3 	bl	800e378 <tcp_bind>
 800af92:	4603      	mov	r3, r0
 800af94:	73fb      	strb	r3, [r7, #15]
        break;
 800af96:	e004      	b.n	800afa2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800af98:	23fa      	movs	r3, #250	; 0xfa
 800af9a:	73fb      	strb	r3, [r7, #15]
        break;
 800af9c:	e001      	b.n	800afa2 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800af9e:	23fa      	movs	r3, #250	; 0xfa
 800afa0:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	7bfa      	ldrb	r2, [r7, #15]
 800afa6:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800afa8:	bf00      	nop
 800afaa:	3710      	adds	r7, #16
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b088      	sub	sp, #32
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	4613      	mov	r3, r2
 800afbc:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800afbe:	2300      	movs	r3, #0
 800afc0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d102      	bne.n	800afd2 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800afcc:	f06f 0305 	mvn.w	r3, #5
 800afd0:	e070      	b.n	800b0b4 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800afd2:	69bb      	ldr	r3, [r7, #24]
 800afd4:	785b      	ldrb	r3, [r3, #1]
 800afd6:	2b03      	cmp	r3, #3
 800afd8:	d006      	beq.n	800afe8 <lwip_netconn_do_connected+0x38>
 800afda:	4b38      	ldr	r3, [pc, #224]	; (800b0bc <lwip_netconn_do_connected+0x10c>)
 800afdc:	f240 5223 	movw	r2, #1315	; 0x523
 800afe0:	4937      	ldr	r1, [pc, #220]	; (800b0c0 <lwip_netconn_do_connected+0x110>)
 800afe2:	4838      	ldr	r0, [pc, #224]	; (800b0c4 <lwip_netconn_do_connected+0x114>)
 800afe4:	f00c fc52 	bl	801788c <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	6a1b      	ldr	r3, [r3, #32]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d10c      	bne.n	800b00a <lwip_netconn_do_connected+0x5a>
 800aff0:	69bb      	ldr	r3, [r7, #24]
 800aff2:	7f1b      	ldrb	r3, [r3, #28]
 800aff4:	f003 0304 	and.w	r3, r3, #4
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d106      	bne.n	800b00a <lwip_netconn_do_connected+0x5a>
 800affc:	4b2f      	ldr	r3, [pc, #188]	; (800b0bc <lwip_netconn_do_connected+0x10c>)
 800affe:	f240 5224 	movw	r2, #1316	; 0x524
 800b002:	4931      	ldr	r1, [pc, #196]	; (800b0c8 <lwip_netconn_do_connected+0x118>)
 800b004:	482f      	ldr	r0, [pc, #188]	; (800b0c4 <lwip_netconn_do_connected+0x114>)
 800b006:	f00c fc41 	bl	801788c <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	6a1b      	ldr	r3, [r3, #32]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d008      	beq.n	800b024 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800b012:	69bb      	ldr	r3, [r7, #24]
 800b014:	6a1b      	ldr	r3, [r3, #32]
 800b016:	79fa      	ldrb	r2, [r7, #7]
 800b018:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	6a1b      	ldr	r3, [r3, #32]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	330c      	adds	r3, #12
 800b022:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b02c:	2b10      	cmp	r3, #16
 800b02e:	d106      	bne.n	800b03e <lwip_netconn_do_connected+0x8e>
 800b030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d102      	bne.n	800b03e <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800b038:	69b8      	ldr	r0, [r7, #24]
 800b03a:	f7ff fa97 	bl	800a56c <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	7f1b      	ldrb	r3, [r3, #28]
 800b042:	f003 0304 	and.w	r3, r3, #4
 800b046:	2b00      	cmp	r3, #0
 800b048:	bf0c      	ite	eq
 800b04a:	2301      	moveq	r3, #1
 800b04c:	2300      	movne	r3, #0
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	7f1b      	ldrb	r3, [r3, #28]
 800b056:	f023 0304 	bic.w	r3, r3, #4
 800b05a:	b2da      	uxtb	r2, r3
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d002      	beq.n	800b06c <lwip_netconn_do_connected+0xbc>
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d10c      	bne.n	800b086 <lwip_netconn_do_connected+0xd6>
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d102      	bne.n	800b078 <lwip_netconn_do_connected+0xc8>
 800b072:	69fb      	ldr	r3, [r7, #28]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d006      	beq.n	800b086 <lwip_netconn_do_connected+0xd6>
 800b078:	4b10      	ldr	r3, [pc, #64]	; (800b0bc <lwip_netconn_do_connected+0x10c>)
 800b07a:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800b07e:	4913      	ldr	r1, [pc, #76]	; (800b0cc <lwip_netconn_do_connected+0x11c>)
 800b080:	4810      	ldr	r0, [pc, #64]	; (800b0c4 <lwip_netconn_do_connected+0x114>)
 800b082:	f00c fc03 	bl	801788c <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	2200      	movs	r2, #0
 800b08a:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	2200      	movs	r2, #0
 800b090:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b096:	2b00      	cmp	r3, #0
 800b098:	d005      	beq.n	800b0a6 <lwip_netconn_do_connected+0xf6>
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09e:	2200      	movs	r2, #0
 800b0a0:	2102      	movs	r1, #2
 800b0a2:	69b8      	ldr	r0, [r7, #24]
 800b0a4:	4798      	blx	r3

  if (was_blocking) {
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800b0ac:	69f8      	ldr	r0, [r7, #28]
 800b0ae:	f00c fa39 	bl	8017524 <sys_sem_signal>
  }
  return ERR_OK;
 800b0b2:	2300      	movs	r3, #0
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3720      	adds	r7, #32
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}
 800b0bc:	08018f7c 	.word	0x08018f7c
 800b0c0:	08019344 	.word	0x08019344
 800b0c4:	08018fc0 	.word	0x08018fc0
 800b0c8:	08019364 	.word	0x08019364
 800b0cc:	080193a4 	.word	0x080193a4

0800b0d0 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d102      	bne.n	800b0ec <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800b0e6:	23f1      	movs	r3, #241	; 0xf1
 800b0e8:	75fb      	strb	r3, [r7, #23]
 800b0ea:	e09b      	b.n	800b224 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0f6:	2b10      	cmp	r3, #16
 800b0f8:	d00f      	beq.n	800b11a <lwip_netconn_do_connect+0x4a>
 800b0fa:	2b20      	cmp	r3, #32
 800b0fc:	f040 8087 	bne.w	800b20e <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	6858      	ldr	r0, [r3, #4]
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	6899      	ldr	r1, [r3, #8]
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	899b      	ldrh	r3, [r3, #12]
 800b10e:	461a      	mov	r2, r3
 800b110:	f009 fd1c 	bl	8014b4c <udp_connect>
 800b114:	4603      	mov	r3, r0
 800b116:	75fb      	strb	r3, [r7, #23]
        break;
 800b118:	e084      	b.n	800b224 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	785b      	ldrb	r3, [r3, #1]
 800b120:	2b03      	cmp	r3, #3
 800b122:	d102      	bne.n	800b12a <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800b124:	23f7      	movs	r3, #247	; 0xf7
 800b126:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800b128:	e07b      	b.n	800b222 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	785b      	ldrb	r3, [r3, #1]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d002      	beq.n	800b13a <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800b134:	23f6      	movs	r3, #246	; 0xf6
 800b136:	75fb      	strb	r3, [r7, #23]
        break;
 800b138:	e073      	b.n	800b222 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4618      	mov	r0, r3
 800b140:	f7ff fa14 	bl	800a56c <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	6858      	ldr	r0, [r3, #4]
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	6899      	ldr	r1, [r3, #8]
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	899a      	ldrh	r2, [r3, #12]
 800b152:	4b38      	ldr	r3, [pc, #224]	; (800b234 <lwip_netconn_do_connect+0x164>)
 800b154:	f003 fb62 	bl	800e81c <tcp_connect>
 800b158:	4603      	mov	r3, r0
 800b15a:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800b15c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d15e      	bne.n	800b222 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	7f1b      	ldrb	r3, [r3, #28]
 800b16a:	f003 0302 	and.w	r3, r3, #2
 800b16e:	2b00      	cmp	r3, #0
 800b170:	bf14      	ite	ne
 800b172:	2301      	movne	r3, #1
 800b174:	2300      	moveq	r3, #0
 800b176:	b2db      	uxtb	r3, r3
 800b178:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2203      	movs	r2, #3
 800b180:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800b182:	7bfb      	ldrb	r3, [r7, #15]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d009      	beq.n	800b19c <lwip_netconn_do_connect+0xcc>
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	7f1a      	ldrb	r2, [r3, #28]
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f042 0204 	orr.w	r2, r2, #4
 800b196:	b2d2      	uxtb	r2, r2
 800b198:	771a      	strb	r2, [r3, #28]
 800b19a:	e008      	b.n	800b1ae <lwip_netconn_do_connect+0xde>
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	7f1a      	ldrb	r2, [r3, #28]
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f022 0204 	bic.w	r2, r2, #4
 800b1aa:	b2d2      	uxtb	r2, r2
 800b1ac:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800b1ae:	7bfb      	ldrb	r3, [r7, #15]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d002      	beq.n	800b1ba <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800b1b4:	23fb      	movs	r3, #251	; 0xfb
 800b1b6:	75fb      	strb	r3, [r7, #23]
        break;
 800b1b8:	e033      	b.n	800b222 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	693a      	ldr	r2, [r7, #16]
 800b1c0:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	785b      	ldrb	r3, [r3, #1]
 800b1c8:	2b03      	cmp	r3, #3
 800b1ca:	d006      	beq.n	800b1da <lwip_netconn_do_connect+0x10a>
 800b1cc:	4b1a      	ldr	r3, [pc, #104]	; (800b238 <lwip_netconn_do_connect+0x168>)
 800b1ce:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800b1d2:	491a      	ldr	r1, [pc, #104]	; (800b23c <lwip_netconn_do_connect+0x16c>)
 800b1d4:	481a      	ldr	r0, [pc, #104]	; (800b240 <lwip_netconn_do_connect+0x170>)
 800b1d6:	f00c fb59 	bl	801788c <iprintf>
              UNLOCK_TCPIP_CORE();
 800b1da:	481a      	ldr	r0, [pc, #104]	; (800b244 <lwip_netconn_do_connect+0x174>)
 800b1dc:	f00c fa0b 	bl	80175f6 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	330c      	adds	r3, #12
 800b1e6:	2100      	movs	r1, #0
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f00c f96a 	bl	80174c2 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800b1ee:	4815      	ldr	r0, [pc, #84]	; (800b244 <lwip_netconn_do_connect+0x174>)
 800b1f0:	f00c f9f2 	bl	80175d8 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	785b      	ldrb	r3, [r3, #1]
 800b1fa:	2b03      	cmp	r3, #3
 800b1fc:	d116      	bne.n	800b22c <lwip_netconn_do_connect+0x15c>
 800b1fe:	4b0e      	ldr	r3, [pc, #56]	; (800b238 <lwip_netconn_do_connect+0x168>)
 800b200:	f240 5274 	movw	r2, #1396	; 0x574
 800b204:	490d      	ldr	r1, [pc, #52]	; (800b23c <lwip_netconn_do_connect+0x16c>)
 800b206:	480e      	ldr	r0, [pc, #56]	; (800b240 <lwip_netconn_do_connect+0x170>)
 800b208:	f00c fb40 	bl	801788c <iprintf>
              return;
 800b20c:	e00e      	b.n	800b22c <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800b20e:	4b0a      	ldr	r3, [pc, #40]	; (800b238 <lwip_netconn_do_connect+0x168>)
 800b210:	f240 527d 	movw	r2, #1405	; 0x57d
 800b214:	490c      	ldr	r1, [pc, #48]	; (800b248 <lwip_netconn_do_connect+0x178>)
 800b216:	480a      	ldr	r0, [pc, #40]	; (800b240 <lwip_netconn_do_connect+0x170>)
 800b218:	f00c fb38 	bl	801788c <iprintf>
 800b21c:	23fa      	movs	r3, #250	; 0xfa
 800b21e:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800b220:	e000      	b.n	800b224 <lwip_netconn_do_connect+0x154>
        break;
 800b222:	bf00      	nop
    }
  }
  msg->err = err;
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	7dfa      	ldrb	r2, [r7, #23]
 800b228:	711a      	strb	r2, [r3, #4]
 800b22a:	e000      	b.n	800b22e <lwip_netconn_do_connect+0x15e>
              return;
 800b22c:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800b22e:	3718      	adds	r7, #24
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	0800afb1 	.word	0x0800afb1
 800b238:	08018f7c 	.word	0x08018f7c
 800b23c:	0801933c 	.word	0x0801933c
 800b240:	08018fc0 	.word	0x08018fc0
 800b244:	20009ee4 	.word	0x20009ee4
 800b248:	080193c4 	.word	0x080193c4

0800b24c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b086      	sub	sp, #24
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d07f      	beq.n	800b362 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b26c:	2b10      	cmp	r3, #16
 800b26e:	d175      	bne.n	800b35c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	785b      	ldrb	r3, [r3, #1]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d165      	bne.n	800b346 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	7d1b      	ldrb	r3, [r3, #20]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d002      	beq.n	800b28c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800b286:	23fa      	movs	r3, #250	; 0xfa
 800b288:	72fb      	strb	r3, [r7, #11]
 800b28a:	e06c      	b.n	800b366 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800b28c:	23ff      	movs	r3, #255	; 0xff
 800b28e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	f107 020b 	add.w	r2, r7, #11
 800b29a:	7cf9      	ldrb	r1, [r7, #19]
 800b29c:	4618      	mov	r0, r3
 800b29e:	f003 f923 	bl	800e4e8 <tcp_listen_with_backlog_and_err>
 800b2a2:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d05d      	beq.n	800b366 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	3310      	adds	r3, #16
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f00c f8c3 	bl	801743c <sys_mbox_valid>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d00b      	beq.n	800b2d4 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	3310      	adds	r3, #16
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f00c f846 	bl	8017354 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	3310      	adds	r3, #16
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f00c f8c5 	bl	801745e <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	3314      	adds	r3, #20
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f00c f8ac 	bl	801743c <sys_mbox_valid>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d108      	bne.n	800b2fc <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	3314      	adds	r3, #20
 800b2f0:	2106      	movs	r1, #6
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f00c f814 	bl	8017320 <sys_mbox_new>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800b2fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d118      	bne.n	800b336 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2202      	movs	r2, #2
 800b30a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	685a      	ldr	r2, [r3, #4]
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4619      	mov	r1, r3
 800b320:	4610      	mov	r0, r2
 800b322:	f004 f9c3 	bl	800f6ac <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	4912      	ldr	r1, [pc, #72]	; (800b378 <lwip_netconn_do_listen+0x12c>)
 800b32e:	4618      	mov	r0, r3
 800b330:	f004 fa34 	bl	800f79c <tcp_accept>
 800b334:	e017      	b.n	800b366 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	f002 fecc 	bl	800e0d4 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2200      	movs	r2, #0
 800b342:	605a      	str	r2, [r3, #4]
 800b344:	e00f      	b.n	800b366 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	785b      	ldrb	r3, [r3, #1]
 800b34c:	2b02      	cmp	r3, #2
 800b34e:	d102      	bne.n	800b356 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800b350:	2300      	movs	r3, #0
 800b352:	72fb      	strb	r3, [r7, #11]
 800b354:	e007      	b.n	800b366 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800b356:	23f5      	movs	r3, #245	; 0xf5
 800b358:	72fb      	strb	r3, [r7, #11]
 800b35a:	e004      	b.n	800b366 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800b35c:	23f0      	movs	r3, #240	; 0xf0
 800b35e:	72fb      	strb	r3, [r7, #11]
 800b360:	e001      	b.n	800b366 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800b362:	23f5      	movs	r3, #245	; 0xf5
 800b364:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800b366:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b36e:	bf00      	nop
 800b370:	3718      	adds	r7, #24
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	0800a5bd 	.word	0x0800a5bd

0800b37c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7fe fdd0 	bl	8009f32 <netconn_err>
 800b392:	4603      	mov	r3, r0
 800b394:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d134      	bne.n	800b408 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d02d      	beq.n	800b404 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b3b2:	2b20      	cmp	r3, #32
 800b3b4:	d123      	bne.n	800b3fe <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	689b      	ldr	r3, [r3, #8]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d10c      	bne.n	800b3da <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	685a      	ldr	r2, [r3, #4]
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	4610      	mov	r0, r2
 800b3d0:	f009 f94a 	bl	8014668 <udp_send>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800b3d8:	e016      	b.n	800b408 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	6858      	ldr	r0, [r3, #4]
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	6819      	ldr	r1, [r3, #0]
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	689b      	ldr	r3, [r3, #8]
 800b3ea:	f103 0208 	add.w	r2, r3, #8
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	689b      	ldr	r3, [r3, #8]
 800b3f2:	899b      	ldrh	r3, [r3, #12]
 800b3f4:	f009 f96c 	bl	80146d0 <udp_sendto>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	73fb      	strb	r3, [r7, #15]
          break;
 800b3fc:	e004      	b.n	800b408 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800b3fe:	23f5      	movs	r3, #245	; 0xf5
 800b400:	73fb      	strb	r3, [r7, #15]
          break;
 800b402:	e001      	b.n	800b408 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800b404:	23f5      	movs	r3, #245	; 0xf5
 800b406:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	7bfa      	ldrb	r2, [r7, #15]
 800b40c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b40e:	bf00      	nop
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800b416:	b580      	push	{r7, lr}
 800b418:	b086      	sub	sp, #24
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	2200      	movs	r2, #0
 800b426:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d022      	beq.n	800b478 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b43c:	2b10      	cmp	r3, #16
 800b43e:	d11b      	bne.n	800b478 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b44c:	d202      	bcs.n	800b454 <lwip_netconn_do_recv+0x3e>
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	b29b      	uxth	r3, r3
 800b452:	e001      	b.n	800b458 <lwip_netconn_do_recv+0x42>
 800b454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b458:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	89fa      	ldrh	r2, [r7, #14]
 800b462:	4611      	mov	r1, r2
 800b464:	4618      	mov	r0, r3
 800b466:	f003 f943 	bl	800e6f0 <tcp_recved>
        remaining -= recved;
 800b46a:	89fb      	ldrh	r3, [r7, #14]
 800b46c:	697a      	ldr	r2, [r7, #20]
 800b46e:	1ad3      	subs	r3, r2, r3
 800b470:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1e6      	bne.n	800b446 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b478:	bf00      	nop
 800b47a:	3718      	adds	r7, #24
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b088      	sub	sp, #32
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	460b      	mov	r3, r1
 800b48a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800b48c:	2300      	movs	r3, #0
 800b48e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d106      	bne.n	800b4a4 <lwip_netconn_do_writemore+0x24>
 800b496:	4b96      	ldr	r3, [pc, #600]	; (800b6f0 <lwip_netconn_do_writemore+0x270>)
 800b498:	f240 6273 	movw	r2, #1651	; 0x673
 800b49c:	4995      	ldr	r1, [pc, #596]	; (800b6f4 <lwip_netconn_do_writemore+0x274>)
 800b49e:	4896      	ldr	r0, [pc, #600]	; (800b6f8 <lwip_netconn_do_writemore+0x278>)
 800b4a0:	f00c f9f4 	bl	801788c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	785b      	ldrb	r3, [r3, #1]
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d006      	beq.n	800b4ba <lwip_netconn_do_writemore+0x3a>
 800b4ac:	4b90      	ldr	r3, [pc, #576]	; (800b6f0 <lwip_netconn_do_writemore+0x270>)
 800b4ae:	f240 6274 	movw	r2, #1652	; 0x674
 800b4b2:	4992      	ldr	r1, [pc, #584]	; (800b6fc <lwip_netconn_do_writemore+0x27c>)
 800b4b4:	4890      	ldr	r0, [pc, #576]	; (800b6f8 <lwip_netconn_do_writemore+0x278>)
 800b4b6:	f00c f9e9 	bl	801788c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6a1b      	ldr	r3, [r3, #32]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d106      	bne.n	800b4d0 <lwip_netconn_do_writemore+0x50>
 800b4c2:	4b8b      	ldr	r3, [pc, #556]	; (800b6f0 <lwip_netconn_do_writemore+0x270>)
 800b4c4:	f240 6275 	movw	r2, #1653	; 0x675
 800b4c8:	498d      	ldr	r1, [pc, #564]	; (800b700 <lwip_netconn_do_writemore+0x280>)
 800b4ca:	488b      	ldr	r0, [pc, #556]	; (800b6f8 <lwip_netconn_do_writemore+0x278>)
 800b4cc:	f00c f9de 	bl	801788c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d106      	bne.n	800b4e6 <lwip_netconn_do_writemore+0x66>
 800b4d8:	4b85      	ldr	r3, [pc, #532]	; (800b6f0 <lwip_netconn_do_writemore+0x270>)
 800b4da:	f240 6276 	movw	r2, #1654	; 0x676
 800b4de:	4989      	ldr	r1, [pc, #548]	; (800b704 <lwip_netconn_do_writemore+0x284>)
 800b4e0:	4885      	ldr	r0, [pc, #532]	; (800b6f8 <lwip_netconn_do_writemore+0x278>)
 800b4e2:	f00c f9d3 	bl	801788c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6a1b      	ldr	r3, [r3, #32]
 800b4ea:	699a      	ldr	r2, [r3, #24]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6a1b      	ldr	r3, [r3, #32]
 800b4f0:	695b      	ldr	r3, [r3, #20]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d306      	bcc.n	800b504 <lwip_netconn_do_writemore+0x84>
 800b4f6:	4b7e      	ldr	r3, [pc, #504]	; (800b6f0 <lwip_netconn_do_writemore+0x270>)
 800b4f8:	f240 6277 	movw	r2, #1655	; 0x677
 800b4fc:	4982      	ldr	r1, [pc, #520]	; (800b708 <lwip_netconn_do_writemore+0x288>)
 800b4fe:	487e      	ldr	r0, [pc, #504]	; (800b6f8 <lwip_netconn_do_writemore+0x278>)
 800b500:	f00c f9c4 	bl	801788c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6a1b      	ldr	r3, [r3, #32]
 800b508:	899b      	ldrh	r3, [r3, #12]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d106      	bne.n	800b51c <lwip_netconn_do_writemore+0x9c>
 800b50e:	4b78      	ldr	r3, [pc, #480]	; (800b6f0 <lwip_netconn_do_writemore+0x270>)
 800b510:	f240 6279 	movw	r2, #1657	; 0x679
 800b514:	497d      	ldr	r1, [pc, #500]	; (800b70c <lwip_netconn_do_writemore+0x28c>)
 800b516:	4878      	ldr	r0, [pc, #480]	; (800b6f8 <lwip_netconn_do_writemore+0x278>)
 800b518:	f00c f9b8 	bl	801788c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6a1b      	ldr	r3, [r3, #32]
 800b520:	7f1b      	ldrb	r3, [r3, #28]
 800b522:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	7f1b      	ldrb	r3, [r3, #28]
 800b528:	f003 0302 	and.w	r3, r3, #2
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d104      	bne.n	800b53a <lwip_netconn_do_writemore+0xba>
 800b530:	7ebb      	ldrb	r3, [r7, #26]
 800b532:	f003 0304 	and.w	r3, r3, #4
 800b536:	2b00      	cmp	r3, #0
 800b538:	d001      	beq.n	800b53e <lwip_netconn_do_writemore+0xbe>
 800b53a:	2301      	movs	r3, #1
 800b53c:	e000      	b.n	800b540 <lwip_netconn_do_writemore+0xc0>
 800b53e:	2300      	movs	r3, #0
 800b540:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a1b      	ldr	r3, [r3, #32]
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6a1b      	ldr	r3, [r3, #32]
 800b54e:	691b      	ldr	r3, [r3, #16]
 800b550:	4413      	add	r3, r2
 800b552:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6a1b      	ldr	r3, [r3, #32]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	685a      	ldr	r2, [r3, #4]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6a1b      	ldr	r3, [r3, #32]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	1ad3      	subs	r3, r2, r3
 800b564:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b56c:	d307      	bcc.n	800b57e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800b56e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b572:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b574:	7ebb      	ldrb	r3, [r7, #26]
 800b576:	f043 0302 	orr.w	r3, r3, #2
 800b57a:	76bb      	strb	r3, [r7, #26]
 800b57c:	e001      	b.n	800b582 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b58a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800b58c:	89fa      	ldrh	r2, [r7, #14]
 800b58e:	8bbb      	ldrh	r3, [r7, #28]
 800b590:	429a      	cmp	r2, r3
 800b592:	d216      	bcs.n	800b5c2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800b594:	89fb      	ldrh	r3, [r7, #14]
 800b596:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800b598:	7e3b      	ldrb	r3, [r7, #24]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d00d      	beq.n	800b5ba <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800b59e:	8bbb      	ldrh	r3, [r7, #28]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10e      	bne.n	800b5c2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6a1b      	ldr	r3, [r3, #32]
 800b5a8:	699b      	ldr	r3, [r3, #24]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d102      	bne.n	800b5b4 <lwip_netconn_do_writemore+0x134>
 800b5ae:	f06f 0306 	mvn.w	r3, #6
 800b5b2:	e000      	b.n	800b5b6 <lwip_netconn_do_writemore+0x136>
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800b5b8:	e07d      	b.n	800b6b6 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800b5ba:	7ebb      	ldrb	r3, [r7, #26]
 800b5bc:	f043 0302 	orr.w	r3, r3, #2
 800b5c0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6a1b      	ldr	r3, [r3, #32]
 800b5c6:	691a      	ldr	r2, [r3, #16]
 800b5c8:	8bbb      	ldrh	r3, [r7, #28]
 800b5ca:	441a      	add	r2, r3
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6a1b      	ldr	r3, [r3, #32]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d906      	bls.n	800b5e6 <lwip_netconn_do_writemore+0x166>
 800b5d8:	4b45      	ldr	r3, [pc, #276]	; (800b6f0 <lwip_netconn_do_writemore+0x270>)
 800b5da:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800b5de:	494c      	ldr	r1, [pc, #304]	; (800b710 <lwip_netconn_do_writemore+0x290>)
 800b5e0:	4845      	ldr	r0, [pc, #276]	; (800b6f8 <lwip_netconn_do_writemore+0x278>)
 800b5e2:	f00c f953 	bl	801788c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b5e6:	8bbb      	ldrh	r3, [r7, #28]
 800b5e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d103      	bne.n	800b5f8 <lwip_netconn_do_writemore+0x178>
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5f6:	d209      	bcs.n	800b60c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b5fc:	8bba      	ldrh	r2, [r7, #28]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d10b      	bne.n	800b61a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a1b      	ldr	r3, [r3, #32]
 800b606:	899b      	ldrh	r3, [r3, #12]
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d906      	bls.n	800b61a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800b60c:	2301      	movs	r3, #1
 800b60e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b610:	7ebb      	ldrb	r3, [r7, #26]
 800b612:	f043 0302 	orr.w	r3, r3, #2
 800b616:	76bb      	strb	r3, [r7, #26]
 800b618:	e001      	b.n	800b61e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800b61a:	2300      	movs	r3, #0
 800b61c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6858      	ldr	r0, [r3, #4]
 800b622:	7ebb      	ldrb	r3, [r7, #26]
 800b624:	8bba      	ldrh	r2, [r7, #28]
 800b626:	6979      	ldr	r1, [r7, #20]
 800b628:	f006 ff82 	bl	8012530 <tcp_write>
 800b62c:	4603      	mov	r3, r0
 800b62e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b630:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d12c      	bne.n	800b692 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6a1b      	ldr	r3, [r3, #32]
 800b63c:	6999      	ldr	r1, [r3, #24]
 800b63e:	8bba      	ldrh	r2, [r7, #28]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a1b      	ldr	r3, [r3, #32]
 800b644:	440a      	add	r2, r1
 800b646:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a1b      	ldr	r3, [r3, #32]
 800b64c:	6919      	ldr	r1, [r3, #16]
 800b64e:	8bba      	ldrh	r2, [r7, #28]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a1b      	ldr	r3, [r3, #32]
 800b654:	440a      	add	r2, r1
 800b656:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6a1b      	ldr	r3, [r3, #32]
 800b65c:	691a      	ldr	r2, [r3, #16]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6a1b      	ldr	r3, [r3, #32]
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	429a      	cmp	r2, r3
 800b668:	d113      	bne.n	800b692 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6a1b      	ldr	r3, [r3, #32]
 800b66e:	899a      	ldrh	r2, [r3, #12]
 800b670:	3a01      	subs	r2, #1
 800b672:	b292      	uxth	r2, r2
 800b674:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6a1b      	ldr	r3, [r3, #32]
 800b67a:	899b      	ldrh	r3, [r3, #12]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d008      	beq.n	800b692 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6a1b      	ldr	r3, [r3, #32]
 800b684:	689a      	ldr	r2, [r3, #8]
 800b686:	3208      	adds	r2, #8
 800b688:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6a1b      	ldr	r3, [r3, #32]
 800b68e:	2200      	movs	r2, #0
 800b690:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b692:	7e7b      	ldrb	r3, [r7, #25]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d004      	beq.n	800b6a2 <lwip_netconn_do_writemore+0x222>
 800b698:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f43f af50 	beq.w	800b542 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b6a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d004      	beq.n	800b6b4 <lwip_netconn_do_writemore+0x234>
 800b6aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6b2:	d146      	bne.n	800b742 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800b6b4:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b6b6:	7e3b      	ldrb	r3, [r7, #24]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d02b      	beq.n	800b714 <lwip_netconn_do_writemore+0x294>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6a1b      	ldr	r3, [r3, #32]
 800b6c0:	699a      	ldr	r2, [r3, #24]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6a1b      	ldr	r3, [r3, #32]
 800b6c6:	695b      	ldr	r3, [r3, #20]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d223      	bcs.n	800b714 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d005      	beq.n	800b6e0 <lwip_netconn_do_writemore+0x260>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d8:	2200      	movs	r2, #0
 800b6da:	2103      	movs	r1, #3
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	7f1b      	ldrb	r3, [r3, #28]
 800b6e4:	f043 0310 	orr.w	r3, r3, #16
 800b6e8:	b2da      	uxtb	r2, r3
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	771a      	strb	r2, [r3, #28]
 800b6ee:	e028      	b.n	800b742 <lwip_netconn_do_writemore+0x2c2>
 800b6f0:	08018f7c 	.word	0x08018f7c
 800b6f4:	080190d4 	.word	0x080190d4
 800b6f8:	08018fc0 	.word	0x08018fc0
 800b6fc:	080193dc 	.word	0x080193dc
 800b700:	080190e4 	.word	0x080190e4
 800b704:	080193fc 	.word	0x080193fc
 800b708:	08019414 	.word	0x08019414
 800b70c:	08019454 	.word	0x08019454
 800b710:	0801947c 	.word	0x0801947c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b71c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b720:	d305      	bcc.n	800b72e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b72a:	2b04      	cmp	r3, #4
 800b72c:	d909      	bls.n	800b742 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b732:	2b00      	cmp	r3, #0
 800b734:	d005      	beq.n	800b742 <lwip_netconn_do_writemore+0x2c2>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73a:	2200      	movs	r2, #0
 800b73c:	2103      	movs	r1, #3
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b742:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d11d      	bne.n	800b786 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6a1b      	ldr	r3, [r3, #32]
 800b74e:	699a      	ldr	r2, [r3, #24]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6a1b      	ldr	r3, [r3, #32]
 800b754:	695b      	ldr	r3, [r3, #20]
 800b756:	429a      	cmp	r2, r3
 800b758:	d002      	beq.n	800b760 <lwip_netconn_do_writemore+0x2e0>
 800b75a:	7e3b      	ldrb	r3, [r7, #24]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d001      	beq.n	800b764 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b760:	2301      	movs	r3, #1
 800b762:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	4618      	mov	r0, r3
 800b76a:	f007 fccb 	bl	8013104 <tcp_output>
 800b76e:	4603      	mov	r3, r0
 800b770:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b772:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b776:	f113 0f04 	cmn.w	r3, #4
 800b77a:	d12c      	bne.n	800b7d6 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b77c:	7b3b      	ldrb	r3, [r7, #12]
 800b77e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b780:	2301      	movs	r3, #1
 800b782:	76fb      	strb	r3, [r7, #27]
 800b784:	e027      	b.n	800b7d6 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800b786:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b78a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b78e:	d120      	bne.n	800b7d2 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	4618      	mov	r0, r3
 800b796:	f007 fcb5 	bl	8013104 <tcp_output>
 800b79a:	4603      	mov	r3, r0
 800b79c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b79e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b7a2:	f113 0f04 	cmn.w	r3, #4
 800b7a6:	d104      	bne.n	800b7b2 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b7a8:	7b7b      	ldrb	r3, [r7, #13]
 800b7aa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	76fb      	strb	r3, [r7, #27]
 800b7b0:	e011      	b.n	800b7d6 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800b7b2:	7e3b      	ldrb	r3, [r7, #24]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d00e      	beq.n	800b7d6 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6a1b      	ldr	r3, [r3, #32]
 800b7bc:	699b      	ldr	r3, [r3, #24]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d102      	bne.n	800b7c8 <lwip_netconn_do_writemore+0x348>
 800b7c2:	f06f 0306 	mvn.w	r3, #6
 800b7c6:	e000      	b.n	800b7ca <lwip_netconn_do_writemore+0x34a>
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	76fb      	strb	r3, [r7, #27]
 800b7d0:	e001      	b.n	800b7d6 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b7d6:	7efb      	ldrb	r3, [r7, #27]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d015      	beq.n	800b808 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a1b      	ldr	r3, [r3, #32]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	330c      	adds	r3, #12
 800b7e4:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6a1b      	ldr	r3, [r3, #32]
 800b7ea:	7ffa      	ldrb	r2, [r7, #31]
 800b7ec:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b7fa:	78fb      	ldrb	r3, [r7, #3]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d006      	beq.n	800b80e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b800:	68b8      	ldr	r0, [r7, #8]
 800b802:	f00b fe8f 	bl	8017524 <sys_sem_signal>
 800b806:	e002      	b.n	800b80e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b808:	f04f 33ff 	mov.w	r3, #4294967295
 800b80c:	e000      	b.n	800b810 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800b80e:	2300      	movs	r3, #0
}
 800b810:	4618      	mov	r0, r3
 800b812:	3720      	adds	r7, #32
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4618      	mov	r0, r3
 800b82a:	f7fe fb82 	bl	8009f32 <netconn_err>
 800b82e:	4603      	mov	r3, r0
 800b830:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d166      	bne.n	800b908 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b844:	2b10      	cmp	r3, #16
 800b846:	d15d      	bne.n	800b904 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	785b      	ldrb	r3, [r3, #1]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d002      	beq.n	800b858 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b852:	23fb      	movs	r3, #251	; 0xfb
 800b854:	73fb      	strb	r3, [r7, #15]
 800b856:	e057      	b.n	800b908 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d04d      	beq.n	800b8fe <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	2201      	movs	r2, #1
 800b868:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	6a1b      	ldr	r3, [r3, #32]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d006      	beq.n	800b882 <lwip_netconn_do_write+0x6a>
 800b874:	4b28      	ldr	r3, [pc, #160]	; (800b918 <lwip_netconn_do_write+0x100>)
 800b876:	f240 7223 	movw	r2, #1827	; 0x723
 800b87a:	4928      	ldr	r1, [pc, #160]	; (800b91c <lwip_netconn_do_write+0x104>)
 800b87c:	4828      	ldr	r0, [pc, #160]	; (800b920 <lwip_netconn_do_write+0x108>)
 800b87e:	f00c f805 	bl	801788c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	695b      	ldr	r3, [r3, #20]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d106      	bne.n	800b898 <lwip_netconn_do_write+0x80>
 800b88a:	4b23      	ldr	r3, [pc, #140]	; (800b918 <lwip_netconn_do_write+0x100>)
 800b88c:	f240 7224 	movw	r2, #1828	; 0x724
 800b890:	4924      	ldr	r1, [pc, #144]	; (800b924 <lwip_netconn_do_write+0x10c>)
 800b892:	4823      	ldr	r0, [pc, #140]	; (800b920 <lwip_netconn_do_write+0x108>)
 800b894:	f00b fffa 	bl	801788c <iprintf>
        msg->conn->current_msg = msg;
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	68ba      	ldr	r2, [r7, #8]
 800b89e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7ff fdea 	bl	800b480 <lwip_netconn_do_writemore>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d02e      	beq.n	800b910 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	785b      	ldrb	r3, [r3, #1]
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d006      	beq.n	800b8ca <lwip_netconn_do_write+0xb2>
 800b8bc:	4b16      	ldr	r3, [pc, #88]	; (800b918 <lwip_netconn_do_write+0x100>)
 800b8be:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800b8c2:	4919      	ldr	r1, [pc, #100]	; (800b928 <lwip_netconn_do_write+0x110>)
 800b8c4:	4816      	ldr	r0, [pc, #88]	; (800b920 <lwip_netconn_do_write+0x108>)
 800b8c6:	f00b ffe1 	bl	801788c <iprintf>
          UNLOCK_TCPIP_CORE();
 800b8ca:	4818      	ldr	r0, [pc, #96]	; (800b92c <lwip_netconn_do_write+0x114>)
 800b8cc:	f00b fe93 	bl	80175f6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	330c      	adds	r3, #12
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f00b fdf2 	bl	80174c2 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b8de:	4813      	ldr	r0, [pc, #76]	; (800b92c <lwip_netconn_do_write+0x114>)
 800b8e0:	f00b fe7a 	bl	80175d8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	785b      	ldrb	r3, [r3, #1]
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d110      	bne.n	800b910 <lwip_netconn_do_write+0xf8>
 800b8ee:	4b0a      	ldr	r3, [pc, #40]	; (800b918 <lwip_netconn_do_write+0x100>)
 800b8f0:	f240 722c 	movw	r2, #1836	; 0x72c
 800b8f4:	490c      	ldr	r1, [pc, #48]	; (800b928 <lwip_netconn_do_write+0x110>)
 800b8f6:	480a      	ldr	r0, [pc, #40]	; (800b920 <lwip_netconn_do_write+0x108>)
 800b8f8:	f00b ffc8 	bl	801788c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b8fc:	e008      	b.n	800b910 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800b8fe:	23f5      	movs	r3, #245	; 0xf5
 800b900:	73fb      	strb	r3, [r7, #15]
 800b902:	e001      	b.n	800b908 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800b904:	23fa      	movs	r3, #250	; 0xfa
 800b906:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	7bfa      	ldrb	r2, [r7, #15]
 800b90c:	711a      	strb	r2, [r3, #4]
 800b90e:	e000      	b.n	800b912 <lwip_netconn_do_write+0xfa>
        return;
 800b910:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b912:	3710      	adds	r7, #16
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}
 800b918:	08018f7c 	.word	0x08018f7c
 800b91c:	08019320 	.word	0x08019320
 800b920:	08018fc0 	.word	0x08018fc0
 800b924:	080194a8 	.word	0x080194a8
 800b928:	0801933c 	.word	0x0801933c
 800b92c:	20009ee4 	.word	0x20009ee4

0800b930 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	785b      	ldrb	r3, [r3, #1]
 800b942:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d069      	beq.n	800ba22 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b958:	2b10      	cmp	r3, #16
 800b95a:	d162      	bne.n	800ba22 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b960:	2b03      	cmp	r3, #3
 800b962:	d002      	beq.n	800b96a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b964:	7afb      	ldrb	r3, [r7, #11]
 800b966:	2b02      	cmp	r3, #2
 800b968:	d05b      	beq.n	800ba22 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b96a:	7afb      	ldrb	r3, [r7, #11]
 800b96c:	2b03      	cmp	r3, #3
 800b96e:	d103      	bne.n	800b978 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	22f5      	movs	r2, #245	; 0xf5
 800b974:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b976:	e059      	b.n	800ba2c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b978:	7afb      	ldrb	r3, [r7, #11]
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d103      	bne.n	800b986 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	22fb      	movs	r2, #251	; 0xfb
 800b982:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b984:	e052      	b.n	800ba2c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	7a1b      	ldrb	r3, [r3, #8]
 800b98a:	f003 0301 	and.w	r3, r3, #1
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d004      	beq.n	800b99c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4618      	mov	r0, r3
 800b998:	f7ff f804 	bl	800a9a4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6a1b      	ldr	r3, [r3, #32]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d006      	beq.n	800b9b4 <lwip_netconn_do_close+0x84>
 800b9a6:	4b23      	ldr	r3, [pc, #140]	; (800ba34 <lwip_netconn_do_close+0x104>)
 800b9a8:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800b9ac:	4922      	ldr	r1, [pc, #136]	; (800ba38 <lwip_netconn_do_close+0x108>)
 800b9ae:	4823      	ldr	r0, [pc, #140]	; (800ba3c <lwip_netconn_do_close+0x10c>)
 800b9b0:	f00b ff6c 	bl	801788c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2204      	movs	r2, #4
 800b9ba:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	68fa      	ldr	r2, [r7, #12]
 800b9c2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f7ff f868 	bl	800aaa0 <lwip_netconn_do_close_internal>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d029      	beq.n	800ba2a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	785b      	ldrb	r3, [r3, #1]
 800b9dc:	2b04      	cmp	r3, #4
 800b9de:	d006      	beq.n	800b9ee <lwip_netconn_do_close+0xbe>
 800b9e0:	4b14      	ldr	r3, [pc, #80]	; (800ba34 <lwip_netconn_do_close+0x104>)
 800b9e2:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800b9e6:	4916      	ldr	r1, [pc, #88]	; (800ba40 <lwip_netconn_do_close+0x110>)
 800b9e8:	4814      	ldr	r0, [pc, #80]	; (800ba3c <lwip_netconn_do_close+0x10c>)
 800b9ea:	f00b ff4f 	bl	801788c <iprintf>
        UNLOCK_TCPIP_CORE();
 800b9ee:	4815      	ldr	r0, [pc, #84]	; (800ba44 <lwip_netconn_do_close+0x114>)
 800b9f0:	f00b fe01 	bl	80175f6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	330c      	adds	r3, #12
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f00b fd60 	bl	80174c2 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800ba02:	4810      	ldr	r0, [pc, #64]	; (800ba44 <lwip_netconn_do_close+0x114>)
 800ba04:	f00b fde8 	bl	80175d8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	785b      	ldrb	r3, [r3, #1]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00b      	beq.n	800ba2a <lwip_netconn_do_close+0xfa>
 800ba12:	4b08      	ldr	r3, [pc, #32]	; (800ba34 <lwip_netconn_do_close+0x104>)
 800ba14:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800ba18:	4909      	ldr	r1, [pc, #36]	; (800ba40 <lwip_netconn_do_close+0x110>)
 800ba1a:	4808      	ldr	r0, [pc, #32]	; (800ba3c <lwip_netconn_do_close+0x10c>)
 800ba1c:	f00b ff36 	bl	801788c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800ba20:	e003      	b.n	800ba2a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	22f5      	movs	r2, #245	; 0xf5
 800ba26:	711a      	strb	r2, [r3, #4]
 800ba28:	e000      	b.n	800ba2c <lwip_netconn_do_close+0xfc>
      return;
 800ba2a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	08018f7c 	.word	0x08018f7c
 800ba38:	08019320 	.word	0x08019320
 800ba3c:	08018fc0 	.word	0x08018fc0
 800ba40:	0801933c 	.word	0x0801933c
 800ba44:	20009ee4 	.word	0x20009ee4

0800ba48 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d013      	beq.n	800ba7e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00b      	beq.n	800ba76 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4618      	mov	r0, r3
 800ba64:	f001 fdea 	bl	800d63c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	605a      	str	r2, [r3, #4]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	685a      	ldr	r2, [r3, #4]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800ba76:	6879      	ldr	r1, [r7, #4]
 800ba78:	2006      	movs	r0, #6
 800ba7a:	f000 ff3b 	bl	800c8f4 <memp_free>
  }
}
 800ba7e:	bf00      	nop
 800ba80:	3708      	adds	r7, #8
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
	...

0800ba88 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d108      	bne.n	800baa8 <netbuf_next+0x20>
 800ba96:	4b11      	ldr	r3, [pc, #68]	; (800badc <netbuf_next+0x54>)
 800ba98:	22e0      	movs	r2, #224	; 0xe0
 800ba9a:	4911      	ldr	r1, [pc, #68]	; (800bae0 <netbuf_next+0x58>)
 800ba9c:	4811      	ldr	r0, [pc, #68]	; (800bae4 <netbuf_next+0x5c>)
 800ba9e:	f00b fef5 	bl	801788c <iprintf>
 800baa2:	f04f 33ff 	mov.w	r3, #4294967295
 800baa6:	e014      	b.n	800bad2 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d102      	bne.n	800bab8 <netbuf_next+0x30>
    return -1;
 800bab2:	f04f 33ff 	mov.w	r3, #4294967295
 800bab6:	e00c      	b.n	800bad2 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d101      	bne.n	800bad0 <netbuf_next+0x48>
    return 1;
 800bacc:	2301      	movs	r3, #1
 800bace:	e000      	b.n	800bad2 <netbuf_next+0x4a>
  }
  return 0;
 800bad0:	2300      	movs	r3, #0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3708      	adds	r7, #8
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	080194d4 	.word	0x080194d4
 800bae0:	08019634 	.word	0x08019634
 800bae4:	08019524 	.word	0x08019524

0800bae8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800baf2:	f008 fbbf 	bl	8014274 <sys_timeouts_sleeptime>
 800baf6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bafe:	d10b      	bne.n	800bb18 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800bb00:	4813      	ldr	r0, [pc, #76]	; (800bb50 <tcpip_timeouts_mbox_fetch+0x68>)
 800bb02:	f00b fd78 	bl	80175f6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800bb06:	2200      	movs	r2, #0
 800bb08:	6839      	ldr	r1, [r7, #0]
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f00b fc4e 	bl	80173ac <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800bb10:	480f      	ldr	r0, [pc, #60]	; (800bb50 <tcpip_timeouts_mbox_fetch+0x68>)
 800bb12:	f00b fd61 	bl	80175d8 <sys_mutex_lock>
    return;
 800bb16:	e018      	b.n	800bb4a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d102      	bne.n	800bb24 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800bb1e:	f008 fb6f 	bl	8014200 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bb22:	e7e6      	b.n	800baf2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800bb24:	480a      	ldr	r0, [pc, #40]	; (800bb50 <tcpip_timeouts_mbox_fetch+0x68>)
 800bb26:	f00b fd66 	bl	80175f6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800bb2a:	68fa      	ldr	r2, [r7, #12]
 800bb2c:	6839      	ldr	r1, [r7, #0]
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f00b fc3c 	bl	80173ac <sys_arch_mbox_fetch>
 800bb34:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800bb36:	4806      	ldr	r0, [pc, #24]	; (800bb50 <tcpip_timeouts_mbox_fetch+0x68>)
 800bb38:	f00b fd4e 	bl	80175d8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb42:	d102      	bne.n	800bb4a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800bb44:	f008 fb5c 	bl	8014200 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bb48:	e7d3      	b.n	800baf2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800bb4a:	3710      	adds	r7, #16
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	20009ee4 	.word	0x20009ee4

0800bb54 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800bb5c:	4810      	ldr	r0, [pc, #64]	; (800bba0 <tcpip_thread+0x4c>)
 800bb5e:	f00b fd3b 	bl	80175d8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800bb62:	4b10      	ldr	r3, [pc, #64]	; (800bba4 <tcpip_thread+0x50>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d005      	beq.n	800bb76 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800bb6a:	4b0e      	ldr	r3, [pc, #56]	; (800bba4 <tcpip_thread+0x50>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a0e      	ldr	r2, [pc, #56]	; (800bba8 <tcpip_thread+0x54>)
 800bb70:	6812      	ldr	r2, [r2, #0]
 800bb72:	4610      	mov	r0, r2
 800bb74:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800bb76:	f107 030c 	add.w	r3, r7, #12
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	480b      	ldr	r0, [pc, #44]	; (800bbac <tcpip_thread+0x58>)
 800bb7e:	f7ff ffb3 	bl	800bae8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d106      	bne.n	800bb96 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bb88:	4b09      	ldr	r3, [pc, #36]	; (800bbb0 <tcpip_thread+0x5c>)
 800bb8a:	2291      	movs	r2, #145	; 0x91
 800bb8c:	4909      	ldr	r1, [pc, #36]	; (800bbb4 <tcpip_thread+0x60>)
 800bb8e:	480a      	ldr	r0, [pc, #40]	; (800bbb8 <tcpip_thread+0x64>)
 800bb90:	f00b fe7c 	bl	801788c <iprintf>
      continue;
 800bb94:	e003      	b.n	800bb9e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f000 f80f 	bl	800bbbc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800bb9e:	e7ea      	b.n	800bb76 <tcpip_thread+0x22>
 800bba0:	20009ee4 	.word	0x20009ee4
 800bba4:	20009ed8 	.word	0x20009ed8
 800bba8:	20009edc 	.word	0x20009edc
 800bbac:	20009ee0 	.word	0x20009ee0
 800bbb0:	0801966c 	.word	0x0801966c
 800bbb4:	0801969c 	.word	0x0801969c
 800bbb8:	080196bc 	.word	0x080196bc

0800bbbc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	2b02      	cmp	r3, #2
 800bbca:	d026      	beq.n	800bc1a <tcpip_thread_handle_msg+0x5e>
 800bbcc:	2b02      	cmp	r3, #2
 800bbce:	dc2b      	bgt.n	800bc28 <tcpip_thread_handle_msg+0x6c>
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d002      	beq.n	800bbda <tcpip_thread_handle_msg+0x1e>
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d015      	beq.n	800bc04 <tcpip_thread_handle_msg+0x48>
 800bbd8:	e026      	b.n	800bc28 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	68db      	ldr	r3, [r3, #12]
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	6850      	ldr	r0, [r2, #4]
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	6892      	ldr	r2, [r2, #8]
 800bbe6:	4611      	mov	r1, r2
 800bbe8:	4798      	blx	r3
 800bbea:	4603      	mov	r3, r0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d004      	beq.n	800bbfa <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f001 fd21 	bl	800d63c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bbfa:	6879      	ldr	r1, [r7, #4]
 800bbfc:	2009      	movs	r0, #9
 800bbfe:	f000 fe79 	bl	800c8f4 <memp_free>
      break;
 800bc02:	e018      	b.n	800bc36 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	6892      	ldr	r2, [r2, #8]
 800bc0c:	4610      	mov	r0, r2
 800bc0e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800bc10:	6879      	ldr	r1, [r7, #4]
 800bc12:	2008      	movs	r0, #8
 800bc14:	f000 fe6e 	bl	800c8f4 <memp_free>
      break;
 800bc18:	e00d      	b.n	800bc36 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	6892      	ldr	r2, [r2, #8]
 800bc22:	4610      	mov	r0, r2
 800bc24:	4798      	blx	r3
      break;
 800bc26:	e006      	b.n	800bc36 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bc28:	4b05      	ldr	r3, [pc, #20]	; (800bc40 <tcpip_thread_handle_msg+0x84>)
 800bc2a:	22cf      	movs	r2, #207	; 0xcf
 800bc2c:	4905      	ldr	r1, [pc, #20]	; (800bc44 <tcpip_thread_handle_msg+0x88>)
 800bc2e:	4806      	ldr	r0, [pc, #24]	; (800bc48 <tcpip_thread_handle_msg+0x8c>)
 800bc30:	f00b fe2c 	bl	801788c <iprintf>
      break;
 800bc34:	bf00      	nop
  }
}
 800bc36:	bf00      	nop
 800bc38:	3708      	adds	r7, #8
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	0801966c 	.word	0x0801966c
 800bc44:	0801969c 	.word	0x0801969c
 800bc48:	080196bc 	.word	0x080196bc

0800bc4c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b086      	sub	sp, #24
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800bc58:	481a      	ldr	r0, [pc, #104]	; (800bcc4 <tcpip_inpkt+0x78>)
 800bc5a:	f00b fbef 	bl	801743c <sys_mbox_valid>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d105      	bne.n	800bc70 <tcpip_inpkt+0x24>
 800bc64:	4b18      	ldr	r3, [pc, #96]	; (800bcc8 <tcpip_inpkt+0x7c>)
 800bc66:	22fc      	movs	r2, #252	; 0xfc
 800bc68:	4918      	ldr	r1, [pc, #96]	; (800bccc <tcpip_inpkt+0x80>)
 800bc6a:	4819      	ldr	r0, [pc, #100]	; (800bcd0 <tcpip_inpkt+0x84>)
 800bc6c:	f00b fe0e 	bl	801788c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800bc70:	2009      	movs	r0, #9
 800bc72:	f000 fdc9 	bl	800c808 <memp_malloc>
 800bc76:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d102      	bne.n	800bc84 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800bc7e:	f04f 33ff 	mov.w	r3, #4294967295
 800bc82:	e01a      	b.n	800bcba <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	2200      	movs	r2, #0
 800bc88:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	68fa      	ldr	r2, [r7, #12]
 800bc8e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800bc9c:	6979      	ldr	r1, [r7, #20]
 800bc9e:	4809      	ldr	r0, [pc, #36]	; (800bcc4 <tcpip_inpkt+0x78>)
 800bca0:	f00b fb6a 	bl	8017378 <sys_mbox_trypost>
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d006      	beq.n	800bcb8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bcaa:	6979      	ldr	r1, [r7, #20]
 800bcac:	2009      	movs	r0, #9
 800bcae:	f000 fe21 	bl	800c8f4 <memp_free>
    return ERR_MEM;
 800bcb2:	f04f 33ff 	mov.w	r3, #4294967295
 800bcb6:	e000      	b.n	800bcba <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800bcb8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3718      	adds	r7, #24
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	20009ee0 	.word	0x20009ee0
 800bcc8:	0801966c 	.word	0x0801966c
 800bccc:	080196e4 	.word	0x080196e4
 800bcd0:	080196bc 	.word	0x080196bc

0800bcd4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bce4:	f003 0318 	and.w	r3, r3, #24
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d006      	beq.n	800bcfa <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800bcec:	4a08      	ldr	r2, [pc, #32]	; (800bd10 <tcpip_input+0x3c>)
 800bcee:	6839      	ldr	r1, [r7, #0]
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f7ff ffab 	bl	800bc4c <tcpip_inpkt>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	e005      	b.n	800bd06 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800bcfa:	4a06      	ldr	r2, [pc, #24]	; (800bd14 <tcpip_input+0x40>)
 800bcfc:	6839      	ldr	r1, [r7, #0]
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f7ff ffa4 	bl	800bc4c <tcpip_inpkt>
 800bd04:	4603      	mov	r3, r0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3708      	adds	r7, #8
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	08017175 	.word	0x08017175
 800bd14:	0801607d 	.word	0x0801607d

0800bd18 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800bd22:	4819      	ldr	r0, [pc, #100]	; (800bd88 <tcpip_try_callback+0x70>)
 800bd24:	f00b fb8a 	bl	801743c <sys_mbox_valid>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d106      	bne.n	800bd3c <tcpip_try_callback+0x24>
 800bd2e:	4b17      	ldr	r3, [pc, #92]	; (800bd8c <tcpip_try_callback+0x74>)
 800bd30:	f240 125d 	movw	r2, #349	; 0x15d
 800bd34:	4916      	ldr	r1, [pc, #88]	; (800bd90 <tcpip_try_callback+0x78>)
 800bd36:	4817      	ldr	r0, [pc, #92]	; (800bd94 <tcpip_try_callback+0x7c>)
 800bd38:	f00b fda8 	bl	801788c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800bd3c:	2008      	movs	r0, #8
 800bd3e:	f000 fd63 	bl	800c808 <memp_malloc>
 800bd42:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d102      	bne.n	800bd50 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800bd4a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd4e:	e017      	b.n	800bd80 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2201      	movs	r2, #1
 800bd54:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	683a      	ldr	r2, [r7, #0]
 800bd60:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800bd62:	68f9      	ldr	r1, [r7, #12]
 800bd64:	4808      	ldr	r0, [pc, #32]	; (800bd88 <tcpip_try_callback+0x70>)
 800bd66:	f00b fb07 	bl	8017378 <sys_mbox_trypost>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d006      	beq.n	800bd7e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800bd70:	68f9      	ldr	r1, [r7, #12]
 800bd72:	2008      	movs	r0, #8
 800bd74:	f000 fdbe 	bl	800c8f4 <memp_free>
    return ERR_MEM;
 800bd78:	f04f 33ff 	mov.w	r3, #4294967295
 800bd7c:	e000      	b.n	800bd80 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800bd7e:	2300      	movs	r3, #0
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	20009ee0 	.word	0x20009ee0
 800bd8c:	0801966c 	.word	0x0801966c
 800bd90:	080196e4 	.word	0x080196e4
 800bd94:	080196bc 	.word	0x080196bc

0800bd98 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800bda4:	4806      	ldr	r0, [pc, #24]	; (800bdc0 <tcpip_send_msg_wait_sem+0x28>)
 800bda6:	f00b fc17 	bl	80175d8 <sys_mutex_lock>
  fn(apimsg);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	68b8      	ldr	r0, [r7, #8]
 800bdae:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800bdb0:	4803      	ldr	r0, [pc, #12]	; (800bdc0 <tcpip_send_msg_wait_sem+0x28>)
 800bdb2:	f00b fc20 	bl	80175f6 <sys_mutex_unlock>
  return ERR_OK;
 800bdb6:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3710      	adds	r7, #16
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	20009ee4 	.word	0x20009ee4

0800bdc4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af02      	add	r7, sp, #8
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
  lwip_init();
 800bdce:	f000 f871 	bl	800beb4 <lwip_init>

  tcpip_init_done = initfunc;
 800bdd2:	4a17      	ldr	r2, [pc, #92]	; (800be30 <tcpip_init+0x6c>)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800bdd8:	4a16      	ldr	r2, [pc, #88]	; (800be34 <tcpip_init+0x70>)
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800bdde:	2106      	movs	r1, #6
 800bde0:	4815      	ldr	r0, [pc, #84]	; (800be38 <tcpip_init+0x74>)
 800bde2:	f00b fa9d 	bl	8017320 <sys_mbox_new>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d006      	beq.n	800bdfa <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800bdec:	4b13      	ldr	r3, [pc, #76]	; (800be3c <tcpip_init+0x78>)
 800bdee:	f240 2261 	movw	r2, #609	; 0x261
 800bdf2:	4913      	ldr	r1, [pc, #76]	; (800be40 <tcpip_init+0x7c>)
 800bdf4:	4813      	ldr	r0, [pc, #76]	; (800be44 <tcpip_init+0x80>)
 800bdf6:	f00b fd49 	bl	801788c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800bdfa:	4813      	ldr	r0, [pc, #76]	; (800be48 <tcpip_init+0x84>)
 800bdfc:	f00b fbd6 	bl	80175ac <sys_mutex_new>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d006      	beq.n	800be14 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800be06:	4b0d      	ldr	r3, [pc, #52]	; (800be3c <tcpip_init+0x78>)
 800be08:	f240 2265 	movw	r2, #613	; 0x265
 800be0c:	490f      	ldr	r1, [pc, #60]	; (800be4c <tcpip_init+0x88>)
 800be0e:	480d      	ldr	r0, [pc, #52]	; (800be44 <tcpip_init+0x80>)
 800be10:	f00b fd3c 	bl	801788c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800be14:	2318      	movs	r3, #24
 800be16:	9300      	str	r3, [sp, #0]
 800be18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be1c:	2200      	movs	r2, #0
 800be1e:	490c      	ldr	r1, [pc, #48]	; (800be50 <tcpip_init+0x8c>)
 800be20:	480c      	ldr	r0, [pc, #48]	; (800be54 <tcpip_init+0x90>)
 800be22:	f00b fbf5 	bl	8017610 <sys_thread_new>
}
 800be26:	bf00      	nop
 800be28:	3708      	adds	r7, #8
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	20009ed8 	.word	0x20009ed8
 800be34:	20009edc 	.word	0x20009edc
 800be38:	20009ee0 	.word	0x20009ee0
 800be3c:	0801966c 	.word	0x0801966c
 800be40:	080196f4 	.word	0x080196f4
 800be44:	080196bc 	.word	0x080196bc
 800be48:	20009ee4 	.word	0x20009ee4
 800be4c:	08019718 	.word	0x08019718
 800be50:	0800bb55 	.word	0x0800bb55
 800be54:	0801973c 	.word	0x0801973c

0800be58 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800be58:	b480      	push	{r7}
 800be5a:	b083      	sub	sp, #12
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	4603      	mov	r3, r0
 800be60:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800be62:	88fb      	ldrh	r3, [r7, #6]
 800be64:	021b      	lsls	r3, r3, #8
 800be66:	b21a      	sxth	r2, r3
 800be68:	88fb      	ldrh	r3, [r7, #6]
 800be6a:	0a1b      	lsrs	r3, r3, #8
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	b21b      	sxth	r3, r3
 800be70:	4313      	orrs	r3, r2
 800be72:	b21b      	sxth	r3, r3
 800be74:	b29b      	uxth	r3, r3
}
 800be76:	4618      	mov	r0, r3
 800be78:	370c      	adds	r7, #12
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr

0800be82 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800be82:	b480      	push	{r7}
 800be84:	b083      	sub	sp, #12
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	061a      	lsls	r2, r3, #24
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	021b      	lsls	r3, r3, #8
 800be92:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800be96:	431a      	orrs	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	0a1b      	lsrs	r3, r3, #8
 800be9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bea0:	431a      	orrs	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	0e1b      	lsrs	r3, r3, #24
 800bea6:	4313      	orrs	r3, r2
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	370c      	adds	r7, #12
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800beba:	2300      	movs	r3, #0
 800bebc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800bebe:	f00b fb69 	bl	8017594 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800bec2:	f000 f8d5 	bl	800c070 <mem_init>
  memp_init();
 800bec6:	f000 fc31 	bl	800c72c <memp_init>
  pbuf_init();
  netif_init();
 800beca:	f000 fd3d 	bl	800c948 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bece:	f008 fa09 	bl	80142e4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bed2:	f001 feef 	bl	800dcb4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bed6:	f008 f94b 	bl	8014170 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800beda:	bf00      	nop
 800bedc:	3708      	adds	r7, #8
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
	...

0800bee4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b083      	sub	sp, #12
 800bee8:	af00      	add	r7, sp, #0
 800beea:	4603      	mov	r3, r0
 800beec:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800beee:	4b05      	ldr	r3, [pc, #20]	; (800bf04 <ptr_to_mem+0x20>)
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	88fb      	ldrh	r3, [r7, #6]
 800bef4:	4413      	add	r3, r2
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	370c      	adds	r7, #12
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr
 800bf02:	bf00      	nop
 800bf04:	2000a554 	.word	0x2000a554

0800bf08 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bf10:	4b05      	ldr	r3, [pc, #20]	; (800bf28 <mem_to_ptr+0x20>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	1ad3      	subs	r3, r2, r3
 800bf18:	b29b      	uxth	r3, r3
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	370c      	adds	r7, #12
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr
 800bf26:	bf00      	nop
 800bf28:	2000a554 	.word	0x2000a554

0800bf2c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bf2c:	b590      	push	{r4, r7, lr}
 800bf2e:	b085      	sub	sp, #20
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bf34:	4b45      	ldr	r3, [pc, #276]	; (800c04c <plug_holes+0x120>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d206      	bcs.n	800bf4c <plug_holes+0x20>
 800bf3e:	4b44      	ldr	r3, [pc, #272]	; (800c050 <plug_holes+0x124>)
 800bf40:	f240 12df 	movw	r2, #479	; 0x1df
 800bf44:	4943      	ldr	r1, [pc, #268]	; (800c054 <plug_holes+0x128>)
 800bf46:	4844      	ldr	r0, [pc, #272]	; (800c058 <plug_holes+0x12c>)
 800bf48:	f00b fca0 	bl	801788c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bf4c:	4b43      	ldr	r3, [pc, #268]	; (800c05c <plug_holes+0x130>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d306      	bcc.n	800bf64 <plug_holes+0x38>
 800bf56:	4b3e      	ldr	r3, [pc, #248]	; (800c050 <plug_holes+0x124>)
 800bf58:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bf5c:	4940      	ldr	r1, [pc, #256]	; (800c060 <plug_holes+0x134>)
 800bf5e:	483e      	ldr	r0, [pc, #248]	; (800c058 <plug_holes+0x12c>)
 800bf60:	f00b fc94 	bl	801788c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	791b      	ldrb	r3, [r3, #4]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d006      	beq.n	800bf7a <plug_holes+0x4e>
 800bf6c:	4b38      	ldr	r3, [pc, #224]	; (800c050 <plug_holes+0x124>)
 800bf6e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bf72:	493c      	ldr	r1, [pc, #240]	; (800c064 <plug_holes+0x138>)
 800bf74:	4838      	ldr	r0, [pc, #224]	; (800c058 <plug_holes+0x12c>)
 800bf76:	f00b fc89 	bl	801788c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	881b      	ldrh	r3, [r3, #0]
 800bf7e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf82:	d906      	bls.n	800bf92 <plug_holes+0x66>
 800bf84:	4b32      	ldr	r3, [pc, #200]	; (800c050 <plug_holes+0x124>)
 800bf86:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800bf8a:	4937      	ldr	r1, [pc, #220]	; (800c068 <plug_holes+0x13c>)
 800bf8c:	4832      	ldr	r0, [pc, #200]	; (800c058 <plug_holes+0x12c>)
 800bf8e:	f00b fc7d 	bl	801788c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	881b      	ldrh	r3, [r3, #0]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7ff ffa4 	bl	800bee4 <ptr_to_mem>
 800bf9c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bf9e:	687a      	ldr	r2, [r7, #4]
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d024      	beq.n	800bff0 <plug_holes+0xc4>
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	791b      	ldrb	r3, [r3, #4]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d120      	bne.n	800bff0 <plug_holes+0xc4>
 800bfae:	4b2b      	ldr	r3, [pc, #172]	; (800c05c <plug_holes+0x130>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	68fa      	ldr	r2, [r7, #12]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d01b      	beq.n	800bff0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bfb8:	4b2c      	ldr	r3, [pc, #176]	; (800c06c <plug_holes+0x140>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	68fa      	ldr	r2, [r7, #12]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d102      	bne.n	800bfc8 <plug_holes+0x9c>
      lfree = mem;
 800bfc2:	4a2a      	ldr	r2, [pc, #168]	; (800c06c <plug_holes+0x140>)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	881a      	ldrh	r2, [r3, #0]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	881b      	ldrh	r3, [r3, #0]
 800bfd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bfd8:	d00a      	beq.n	800bff0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	881b      	ldrh	r3, [r3, #0]
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7ff ff80 	bl	800bee4 <ptr_to_mem>
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f7ff ff8e 	bl	800bf08 <mem_to_ptr>
 800bfec:	4603      	mov	r3, r0
 800bfee:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	885b      	ldrh	r3, [r3, #2]
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7ff ff75 	bl	800bee4 <ptr_to_mem>
 800bffa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bffc:	68ba      	ldr	r2, [r7, #8]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	429a      	cmp	r2, r3
 800c002:	d01f      	beq.n	800c044 <plug_holes+0x118>
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	791b      	ldrb	r3, [r3, #4]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d11b      	bne.n	800c044 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c00c:	4b17      	ldr	r3, [pc, #92]	; (800c06c <plug_holes+0x140>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	429a      	cmp	r2, r3
 800c014:	d102      	bne.n	800c01c <plug_holes+0xf0>
      lfree = pmem;
 800c016:	4a15      	ldr	r2, [pc, #84]	; (800c06c <plug_holes+0x140>)
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	881a      	ldrh	r2, [r3, #0]
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	881b      	ldrh	r3, [r3, #0]
 800c028:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c02c:	d00a      	beq.n	800c044 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	881b      	ldrh	r3, [r3, #0]
 800c032:	4618      	mov	r0, r3
 800c034:	f7ff ff56 	bl	800bee4 <ptr_to_mem>
 800c038:	4604      	mov	r4, r0
 800c03a:	68b8      	ldr	r0, [r7, #8]
 800c03c:	f7ff ff64 	bl	800bf08 <mem_to_ptr>
 800c040:	4603      	mov	r3, r0
 800c042:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c044:	bf00      	nop
 800c046:	3714      	adds	r7, #20
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd90      	pop	{r4, r7, pc}
 800c04c:	2000a554 	.word	0x2000a554
 800c050:	0801974c 	.word	0x0801974c
 800c054:	0801977c 	.word	0x0801977c
 800c058:	08019794 	.word	0x08019794
 800c05c:	2000a558 	.word	0x2000a558
 800c060:	080197bc 	.word	0x080197bc
 800c064:	080197d8 	.word	0x080197d8
 800c068:	080197f4 	.word	0x080197f4
 800c06c:	2000a560 	.word	0x2000a560

0800c070 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c076:	4b1f      	ldr	r3, [pc, #124]	; (800c0f4 <mem_init+0x84>)
 800c078:	3303      	adds	r3, #3
 800c07a:	f023 0303 	bic.w	r3, r3, #3
 800c07e:	461a      	mov	r2, r3
 800c080:	4b1d      	ldr	r3, [pc, #116]	; (800c0f8 <mem_init+0x88>)
 800c082:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c084:	4b1c      	ldr	r3, [pc, #112]	; (800c0f8 <mem_init+0x88>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c090:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2200      	movs	r2, #0
 800c096:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2200      	movs	r2, #0
 800c09c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c09e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c0a2:	f7ff ff1f 	bl	800bee4 <ptr_to_mem>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	4a14      	ldr	r2, [pc, #80]	; (800c0fc <mem_init+0x8c>)
 800c0aa:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c0ac:	4b13      	ldr	r3, [pc, #76]	; (800c0fc <mem_init+0x8c>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c0b4:	4b11      	ldr	r3, [pc, #68]	; (800c0fc <mem_init+0x8c>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c0bc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c0be:	4b0f      	ldr	r3, [pc, #60]	; (800c0fc <mem_init+0x8c>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c0c6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c0c8:	4b0b      	ldr	r3, [pc, #44]	; (800c0f8 <mem_init+0x88>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a0c      	ldr	r2, [pc, #48]	; (800c100 <mem_init+0x90>)
 800c0ce:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c0d0:	480c      	ldr	r0, [pc, #48]	; (800c104 <mem_init+0x94>)
 800c0d2:	f00b fa6b 	bl	80175ac <sys_mutex_new>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d006      	beq.n	800c0ea <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c0dc:	4b0a      	ldr	r3, [pc, #40]	; (800c108 <mem_init+0x98>)
 800c0de:	f240 221f 	movw	r2, #543	; 0x21f
 800c0e2:	490a      	ldr	r1, [pc, #40]	; (800c10c <mem_init+0x9c>)
 800c0e4:	480a      	ldr	r0, [pc, #40]	; (800c110 <mem_init+0xa0>)
 800c0e6:	f00b fbd1 	bl	801788c <iprintf>
  }
}
 800c0ea:	bf00      	nop
 800c0ec:	3708      	adds	r7, #8
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	20009f00 	.word	0x20009f00
 800c0f8:	2000a554 	.word	0x2000a554
 800c0fc:	2000a558 	.word	0x2000a558
 800c100:	2000a560 	.word	0x2000a560
 800c104:	2000a55c 	.word	0x2000a55c
 800c108:	0801974c 	.word	0x0801974c
 800c10c:	08019820 	.word	0x08019820
 800c110:	08019794 	.word	0x08019794

0800c114 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b086      	sub	sp, #24
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f7ff fef3 	bl	800bf08 <mem_to_ptr>
 800c122:	4603      	mov	r3, r0
 800c124:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	881b      	ldrh	r3, [r3, #0]
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7ff feda 	bl	800bee4 <ptr_to_mem>
 800c130:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	885b      	ldrh	r3, [r3, #2]
 800c136:	4618      	mov	r0, r3
 800c138:	f7ff fed4 	bl	800bee4 <ptr_to_mem>
 800c13c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	881b      	ldrh	r3, [r3, #0]
 800c142:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c146:	d818      	bhi.n	800c17a <mem_link_valid+0x66>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	885b      	ldrh	r3, [r3, #2]
 800c14c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c150:	d813      	bhi.n	800c17a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c156:	8afa      	ldrh	r2, [r7, #22]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d004      	beq.n	800c166 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	881b      	ldrh	r3, [r3, #0]
 800c160:	8afa      	ldrh	r2, [r7, #22]
 800c162:	429a      	cmp	r2, r3
 800c164:	d109      	bne.n	800c17a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c166:	4b08      	ldr	r3, [pc, #32]	; (800c188 <mem_link_valid+0x74>)
 800c168:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c16a:	693a      	ldr	r2, [r7, #16]
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d006      	beq.n	800c17e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	885b      	ldrh	r3, [r3, #2]
 800c174:	8afa      	ldrh	r2, [r7, #22]
 800c176:	429a      	cmp	r2, r3
 800c178:	d001      	beq.n	800c17e <mem_link_valid+0x6a>
    return 0;
 800c17a:	2300      	movs	r3, #0
 800c17c:	e000      	b.n	800c180 <mem_link_valid+0x6c>
  }
  return 1;
 800c17e:	2301      	movs	r3, #1
}
 800c180:	4618      	mov	r0, r3
 800c182:	3718      	adds	r7, #24
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	2000a558 	.word	0x2000a558

0800c18c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b088      	sub	sp, #32
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d070      	beq.n	800c27c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f003 0303 	and.w	r3, r3, #3
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d00d      	beq.n	800c1c0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c1a4:	4b37      	ldr	r3, [pc, #220]	; (800c284 <mem_free+0xf8>)
 800c1a6:	f240 2273 	movw	r2, #627	; 0x273
 800c1aa:	4937      	ldr	r1, [pc, #220]	; (800c288 <mem_free+0xfc>)
 800c1ac:	4837      	ldr	r0, [pc, #220]	; (800c28c <mem_free+0x100>)
 800c1ae:	f00b fb6d 	bl	801788c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c1b2:	f00b fa4d 	bl	8017650 <sys_arch_protect>
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	68f8      	ldr	r0, [r7, #12]
 800c1ba:	f00b fa57 	bl	801766c <sys_arch_unprotect>
    return;
 800c1be:	e05e      	b.n	800c27e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	3b08      	subs	r3, #8
 800c1c4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c1c6:	4b32      	ldr	r3, [pc, #200]	; (800c290 <mem_free+0x104>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	69fa      	ldr	r2, [r7, #28]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d306      	bcc.n	800c1de <mem_free+0x52>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f103 020c 	add.w	r2, r3, #12
 800c1d6:	4b2f      	ldr	r3, [pc, #188]	; (800c294 <mem_free+0x108>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d90d      	bls.n	800c1fa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c1de:	4b29      	ldr	r3, [pc, #164]	; (800c284 <mem_free+0xf8>)
 800c1e0:	f240 227f 	movw	r2, #639	; 0x27f
 800c1e4:	492c      	ldr	r1, [pc, #176]	; (800c298 <mem_free+0x10c>)
 800c1e6:	4829      	ldr	r0, [pc, #164]	; (800c28c <mem_free+0x100>)
 800c1e8:	f00b fb50 	bl	801788c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c1ec:	f00b fa30 	bl	8017650 <sys_arch_protect>
 800c1f0:	6138      	str	r0, [r7, #16]
 800c1f2:	6938      	ldr	r0, [r7, #16]
 800c1f4:	f00b fa3a 	bl	801766c <sys_arch_unprotect>
    return;
 800c1f8:	e041      	b.n	800c27e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c1fa:	4828      	ldr	r0, [pc, #160]	; (800c29c <mem_free+0x110>)
 800c1fc:	f00b f9ec 	bl	80175d8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c200:	69fb      	ldr	r3, [r7, #28]
 800c202:	791b      	ldrb	r3, [r3, #4]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d110      	bne.n	800c22a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c208:	4b1e      	ldr	r3, [pc, #120]	; (800c284 <mem_free+0xf8>)
 800c20a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c20e:	4924      	ldr	r1, [pc, #144]	; (800c2a0 <mem_free+0x114>)
 800c210:	481e      	ldr	r0, [pc, #120]	; (800c28c <mem_free+0x100>)
 800c212:	f00b fb3b 	bl	801788c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c216:	4821      	ldr	r0, [pc, #132]	; (800c29c <mem_free+0x110>)
 800c218:	f00b f9ed 	bl	80175f6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c21c:	f00b fa18 	bl	8017650 <sys_arch_protect>
 800c220:	6178      	str	r0, [r7, #20]
 800c222:	6978      	ldr	r0, [r7, #20]
 800c224:	f00b fa22 	bl	801766c <sys_arch_unprotect>
    return;
 800c228:	e029      	b.n	800c27e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c22a:	69f8      	ldr	r0, [r7, #28]
 800c22c:	f7ff ff72 	bl	800c114 <mem_link_valid>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d110      	bne.n	800c258 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c236:	4b13      	ldr	r3, [pc, #76]	; (800c284 <mem_free+0xf8>)
 800c238:	f240 2295 	movw	r2, #661	; 0x295
 800c23c:	4919      	ldr	r1, [pc, #100]	; (800c2a4 <mem_free+0x118>)
 800c23e:	4813      	ldr	r0, [pc, #76]	; (800c28c <mem_free+0x100>)
 800c240:	f00b fb24 	bl	801788c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c244:	4815      	ldr	r0, [pc, #84]	; (800c29c <mem_free+0x110>)
 800c246:	f00b f9d6 	bl	80175f6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c24a:	f00b fa01 	bl	8017650 <sys_arch_protect>
 800c24e:	61b8      	str	r0, [r7, #24]
 800c250:	69b8      	ldr	r0, [r7, #24]
 800c252:	f00b fa0b 	bl	801766c <sys_arch_unprotect>
    return;
 800c256:	e012      	b.n	800c27e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c258:	69fb      	ldr	r3, [r7, #28]
 800c25a:	2200      	movs	r2, #0
 800c25c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c25e:	4b12      	ldr	r3, [pc, #72]	; (800c2a8 <mem_free+0x11c>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	69fa      	ldr	r2, [r7, #28]
 800c264:	429a      	cmp	r2, r3
 800c266:	d202      	bcs.n	800c26e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c268:	4a0f      	ldr	r2, [pc, #60]	; (800c2a8 <mem_free+0x11c>)
 800c26a:	69fb      	ldr	r3, [r7, #28]
 800c26c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c26e:	69f8      	ldr	r0, [r7, #28]
 800c270:	f7ff fe5c 	bl	800bf2c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c274:	4809      	ldr	r0, [pc, #36]	; (800c29c <mem_free+0x110>)
 800c276:	f00b f9be 	bl	80175f6 <sys_mutex_unlock>
 800c27a:	e000      	b.n	800c27e <mem_free+0xf2>
    return;
 800c27c:	bf00      	nop
}
 800c27e:	3720      	adds	r7, #32
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	0801974c 	.word	0x0801974c
 800c288:	0801983c 	.word	0x0801983c
 800c28c:	08019794 	.word	0x08019794
 800c290:	2000a554 	.word	0x2000a554
 800c294:	2000a558 	.word	0x2000a558
 800c298:	08019860 	.word	0x08019860
 800c29c:	2000a55c 	.word	0x2000a55c
 800c2a0:	0801987c 	.word	0x0801987c
 800c2a4:	080198a4 	.word	0x080198a4
 800c2a8:	2000a560 	.word	0x2000a560

0800c2ac <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b088      	sub	sp, #32
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c2b8:	887b      	ldrh	r3, [r7, #2]
 800c2ba:	3303      	adds	r3, #3
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	f023 0303 	bic.w	r3, r3, #3
 800c2c2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c2c4:	8bfb      	ldrh	r3, [r7, #30]
 800c2c6:	2b0b      	cmp	r3, #11
 800c2c8:	d801      	bhi.n	800c2ce <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c2ca:	230c      	movs	r3, #12
 800c2cc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c2ce:	8bfb      	ldrh	r3, [r7, #30]
 800c2d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c2d4:	d803      	bhi.n	800c2de <mem_trim+0x32>
 800c2d6:	8bfa      	ldrh	r2, [r7, #30]
 800c2d8:	887b      	ldrh	r3, [r7, #2]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d201      	bcs.n	800c2e2 <mem_trim+0x36>
    return NULL;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	e0d8      	b.n	800c494 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c2e2:	4b6e      	ldr	r3, [pc, #440]	; (800c49c <mem_trim+0x1f0>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d304      	bcc.n	800c2f6 <mem_trim+0x4a>
 800c2ec:	4b6c      	ldr	r3, [pc, #432]	; (800c4a0 <mem_trim+0x1f4>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d306      	bcc.n	800c304 <mem_trim+0x58>
 800c2f6:	4b6b      	ldr	r3, [pc, #428]	; (800c4a4 <mem_trim+0x1f8>)
 800c2f8:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c2fc:	496a      	ldr	r1, [pc, #424]	; (800c4a8 <mem_trim+0x1fc>)
 800c2fe:	486b      	ldr	r0, [pc, #428]	; (800c4ac <mem_trim+0x200>)
 800c300:	f00b fac4 	bl	801788c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c304:	4b65      	ldr	r3, [pc, #404]	; (800c49c <mem_trim+0x1f0>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d304      	bcc.n	800c318 <mem_trim+0x6c>
 800c30e:	4b64      	ldr	r3, [pc, #400]	; (800c4a0 <mem_trim+0x1f4>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	429a      	cmp	r2, r3
 800c316:	d307      	bcc.n	800c328 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c318:	f00b f99a 	bl	8017650 <sys_arch_protect>
 800c31c:	60b8      	str	r0, [r7, #8]
 800c31e:	68b8      	ldr	r0, [r7, #8]
 800c320:	f00b f9a4 	bl	801766c <sys_arch_unprotect>
    return rmem;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	e0b5      	b.n	800c494 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	3b08      	subs	r3, #8
 800c32c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c32e:	69b8      	ldr	r0, [r7, #24]
 800c330:	f7ff fdea 	bl	800bf08 <mem_to_ptr>
 800c334:	4603      	mov	r3, r0
 800c336:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	881a      	ldrh	r2, [r3, #0]
 800c33c:	8afb      	ldrh	r3, [r7, #22]
 800c33e:	1ad3      	subs	r3, r2, r3
 800c340:	b29b      	uxth	r3, r3
 800c342:	3b08      	subs	r3, #8
 800c344:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c346:	8bfa      	ldrh	r2, [r7, #30]
 800c348:	8abb      	ldrh	r3, [r7, #20]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d906      	bls.n	800c35c <mem_trim+0xb0>
 800c34e:	4b55      	ldr	r3, [pc, #340]	; (800c4a4 <mem_trim+0x1f8>)
 800c350:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c354:	4956      	ldr	r1, [pc, #344]	; (800c4b0 <mem_trim+0x204>)
 800c356:	4855      	ldr	r0, [pc, #340]	; (800c4ac <mem_trim+0x200>)
 800c358:	f00b fa98 	bl	801788c <iprintf>
  if (newsize > size) {
 800c35c:	8bfa      	ldrh	r2, [r7, #30]
 800c35e:	8abb      	ldrh	r3, [r7, #20]
 800c360:	429a      	cmp	r2, r3
 800c362:	d901      	bls.n	800c368 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c364:	2300      	movs	r3, #0
 800c366:	e095      	b.n	800c494 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c368:	8bfa      	ldrh	r2, [r7, #30]
 800c36a:	8abb      	ldrh	r3, [r7, #20]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d101      	bne.n	800c374 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	e08f      	b.n	800c494 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c374:	484f      	ldr	r0, [pc, #316]	; (800c4b4 <mem_trim+0x208>)
 800c376:	f00b f92f 	bl	80175d8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	881b      	ldrh	r3, [r3, #0]
 800c37e:	4618      	mov	r0, r3
 800c380:	f7ff fdb0 	bl	800bee4 <ptr_to_mem>
 800c384:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	791b      	ldrb	r3, [r3, #4]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d13f      	bne.n	800c40e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	881b      	ldrh	r3, [r3, #0]
 800c392:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c396:	d106      	bne.n	800c3a6 <mem_trim+0xfa>
 800c398:	4b42      	ldr	r3, [pc, #264]	; (800c4a4 <mem_trim+0x1f8>)
 800c39a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c39e:	4946      	ldr	r1, [pc, #280]	; (800c4b8 <mem_trim+0x20c>)
 800c3a0:	4842      	ldr	r0, [pc, #264]	; (800c4ac <mem_trim+0x200>)
 800c3a2:	f00b fa73 	bl	801788c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	881b      	ldrh	r3, [r3, #0]
 800c3aa:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c3ac:	8afa      	ldrh	r2, [r7, #22]
 800c3ae:	8bfb      	ldrh	r3, [r7, #30]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	3308      	adds	r3, #8
 800c3b6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c3b8:	4b40      	ldr	r3, [pc, #256]	; (800c4bc <mem_trim+0x210>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	693a      	ldr	r2, [r7, #16]
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d106      	bne.n	800c3d0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c3c2:	89fb      	ldrh	r3, [r7, #14]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7ff fd8d 	bl	800bee4 <ptr_to_mem>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	4a3b      	ldr	r2, [pc, #236]	; (800c4bc <mem_trim+0x210>)
 800c3ce:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c3d0:	89fb      	ldrh	r3, [r7, #14]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7ff fd86 	bl	800bee4 <ptr_to_mem>
 800c3d8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	89ba      	ldrh	r2, [r7, #12]
 800c3e4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	8afa      	ldrh	r2, [r7, #22]
 800c3ea:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c3ec:	69bb      	ldr	r3, [r7, #24]
 800c3ee:	89fa      	ldrh	r2, [r7, #14]
 800c3f0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	881b      	ldrh	r3, [r3, #0]
 800c3f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c3fa:	d047      	beq.n	800c48c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	881b      	ldrh	r3, [r3, #0]
 800c400:	4618      	mov	r0, r3
 800c402:	f7ff fd6f 	bl	800bee4 <ptr_to_mem>
 800c406:	4602      	mov	r2, r0
 800c408:	89fb      	ldrh	r3, [r7, #14]
 800c40a:	8053      	strh	r3, [r2, #2]
 800c40c:	e03e      	b.n	800c48c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c40e:	8bfb      	ldrh	r3, [r7, #30]
 800c410:	f103 0214 	add.w	r2, r3, #20
 800c414:	8abb      	ldrh	r3, [r7, #20]
 800c416:	429a      	cmp	r2, r3
 800c418:	d838      	bhi.n	800c48c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c41a:	8afa      	ldrh	r2, [r7, #22]
 800c41c:	8bfb      	ldrh	r3, [r7, #30]
 800c41e:	4413      	add	r3, r2
 800c420:	b29b      	uxth	r3, r3
 800c422:	3308      	adds	r3, #8
 800c424:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c426:	69bb      	ldr	r3, [r7, #24]
 800c428:	881b      	ldrh	r3, [r3, #0]
 800c42a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c42e:	d106      	bne.n	800c43e <mem_trim+0x192>
 800c430:	4b1c      	ldr	r3, [pc, #112]	; (800c4a4 <mem_trim+0x1f8>)
 800c432:	f240 3216 	movw	r2, #790	; 0x316
 800c436:	4920      	ldr	r1, [pc, #128]	; (800c4b8 <mem_trim+0x20c>)
 800c438:	481c      	ldr	r0, [pc, #112]	; (800c4ac <mem_trim+0x200>)
 800c43a:	f00b fa27 	bl	801788c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c43e:	89fb      	ldrh	r3, [r7, #14]
 800c440:	4618      	mov	r0, r3
 800c442:	f7ff fd4f 	bl	800bee4 <ptr_to_mem>
 800c446:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c448:	4b1c      	ldr	r3, [pc, #112]	; (800c4bc <mem_trim+0x210>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	693a      	ldr	r2, [r7, #16]
 800c44e:	429a      	cmp	r2, r3
 800c450:	d202      	bcs.n	800c458 <mem_trim+0x1ac>
      lfree = mem2;
 800c452:	4a1a      	ldr	r2, [pc, #104]	; (800c4bc <mem_trim+0x210>)
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	2200      	movs	r2, #0
 800c45c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c45e:	69bb      	ldr	r3, [r7, #24]
 800c460:	881a      	ldrh	r2, [r3, #0]
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	8afa      	ldrh	r2, [r7, #22]
 800c46a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c46c:	69bb      	ldr	r3, [r7, #24]
 800c46e:	89fa      	ldrh	r2, [r7, #14]
 800c470:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	881b      	ldrh	r3, [r3, #0]
 800c476:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c47a:	d007      	beq.n	800c48c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	881b      	ldrh	r3, [r3, #0]
 800c480:	4618      	mov	r0, r3
 800c482:	f7ff fd2f 	bl	800bee4 <ptr_to_mem>
 800c486:	4602      	mov	r2, r0
 800c488:	89fb      	ldrh	r3, [r7, #14]
 800c48a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c48c:	4809      	ldr	r0, [pc, #36]	; (800c4b4 <mem_trim+0x208>)
 800c48e:	f00b f8b2 	bl	80175f6 <sys_mutex_unlock>
  return rmem;
 800c492:	687b      	ldr	r3, [r7, #4]
}
 800c494:	4618      	mov	r0, r3
 800c496:	3720      	adds	r7, #32
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}
 800c49c:	2000a554 	.word	0x2000a554
 800c4a0:	2000a558 	.word	0x2000a558
 800c4a4:	0801974c 	.word	0x0801974c
 800c4a8:	080198d8 	.word	0x080198d8
 800c4ac:	08019794 	.word	0x08019794
 800c4b0:	080198f0 	.word	0x080198f0
 800c4b4:	2000a55c 	.word	0x2000a55c
 800c4b8:	08019910 	.word	0x08019910
 800c4bc:	2000a560 	.word	0x2000a560

0800c4c0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b088      	sub	sp, #32
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c4ca:	88fb      	ldrh	r3, [r7, #6]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d101      	bne.n	800c4d4 <mem_malloc+0x14>
    return NULL;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	e0e2      	b.n	800c69a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c4d4:	88fb      	ldrh	r3, [r7, #6]
 800c4d6:	3303      	adds	r3, #3
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	f023 0303 	bic.w	r3, r3, #3
 800c4de:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c4e0:	8bbb      	ldrh	r3, [r7, #28]
 800c4e2:	2b0b      	cmp	r3, #11
 800c4e4:	d801      	bhi.n	800c4ea <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c4e6:	230c      	movs	r3, #12
 800c4e8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c4ea:	8bbb      	ldrh	r3, [r7, #28]
 800c4ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c4f0:	d803      	bhi.n	800c4fa <mem_malloc+0x3a>
 800c4f2:	8bba      	ldrh	r2, [r7, #28]
 800c4f4:	88fb      	ldrh	r3, [r7, #6]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d201      	bcs.n	800c4fe <mem_malloc+0x3e>
    return NULL;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	e0cd      	b.n	800c69a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c4fe:	4869      	ldr	r0, [pc, #420]	; (800c6a4 <mem_malloc+0x1e4>)
 800c500:	f00b f86a 	bl	80175d8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c504:	4b68      	ldr	r3, [pc, #416]	; (800c6a8 <mem_malloc+0x1e8>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4618      	mov	r0, r3
 800c50a:	f7ff fcfd 	bl	800bf08 <mem_to_ptr>
 800c50e:	4603      	mov	r3, r0
 800c510:	83fb      	strh	r3, [r7, #30]
 800c512:	e0b7      	b.n	800c684 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c514:	8bfb      	ldrh	r3, [r7, #30]
 800c516:	4618      	mov	r0, r3
 800c518:	f7ff fce4 	bl	800bee4 <ptr_to_mem>
 800c51c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	791b      	ldrb	r3, [r3, #4]
 800c522:	2b00      	cmp	r3, #0
 800c524:	f040 80a7 	bne.w	800c676 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	881b      	ldrh	r3, [r3, #0]
 800c52c:	461a      	mov	r2, r3
 800c52e:	8bfb      	ldrh	r3, [r7, #30]
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	f1a3 0208 	sub.w	r2, r3, #8
 800c536:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c538:	429a      	cmp	r2, r3
 800c53a:	f0c0 809c 	bcc.w	800c676 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	881b      	ldrh	r3, [r3, #0]
 800c542:	461a      	mov	r2, r3
 800c544:	8bfb      	ldrh	r3, [r7, #30]
 800c546:	1ad3      	subs	r3, r2, r3
 800c548:	f1a3 0208 	sub.w	r2, r3, #8
 800c54c:	8bbb      	ldrh	r3, [r7, #28]
 800c54e:	3314      	adds	r3, #20
 800c550:	429a      	cmp	r2, r3
 800c552:	d333      	bcc.n	800c5bc <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c554:	8bfa      	ldrh	r2, [r7, #30]
 800c556:	8bbb      	ldrh	r3, [r7, #28]
 800c558:	4413      	add	r3, r2
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	3308      	adds	r3, #8
 800c55e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c560:	8a7b      	ldrh	r3, [r7, #18]
 800c562:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c566:	d106      	bne.n	800c576 <mem_malloc+0xb6>
 800c568:	4b50      	ldr	r3, [pc, #320]	; (800c6ac <mem_malloc+0x1ec>)
 800c56a:	f240 3287 	movw	r2, #903	; 0x387
 800c56e:	4950      	ldr	r1, [pc, #320]	; (800c6b0 <mem_malloc+0x1f0>)
 800c570:	4850      	ldr	r0, [pc, #320]	; (800c6b4 <mem_malloc+0x1f4>)
 800c572:	f00b f98b 	bl	801788c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c576:	8a7b      	ldrh	r3, [r7, #18]
 800c578:	4618      	mov	r0, r3
 800c57a:	f7ff fcb3 	bl	800bee4 <ptr_to_mem>
 800c57e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2200      	movs	r2, #0
 800c584:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	881a      	ldrh	r2, [r3, #0]
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	8bfa      	ldrh	r2, [r7, #30]
 800c592:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	8a7a      	ldrh	r2, [r7, #18]
 800c598:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	2201      	movs	r2, #1
 800c59e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	881b      	ldrh	r3, [r3, #0]
 800c5a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c5a8:	d00b      	beq.n	800c5c2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	881b      	ldrh	r3, [r3, #0]
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7ff fc98 	bl	800bee4 <ptr_to_mem>
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	8a7b      	ldrh	r3, [r7, #18]
 800c5b8:	8053      	strh	r3, [r2, #2]
 800c5ba:	e002      	b.n	800c5c2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c5c2:	4b39      	ldr	r3, [pc, #228]	; (800c6a8 <mem_malloc+0x1e8>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	697a      	ldr	r2, [r7, #20]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d127      	bne.n	800c61c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c5cc:	4b36      	ldr	r3, [pc, #216]	; (800c6a8 <mem_malloc+0x1e8>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c5d2:	e005      	b.n	800c5e0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c5d4:	69bb      	ldr	r3, [r7, #24]
 800c5d6:	881b      	ldrh	r3, [r3, #0]
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7ff fc83 	bl	800bee4 <ptr_to_mem>
 800c5de:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	791b      	ldrb	r3, [r3, #4]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d004      	beq.n	800c5f2 <mem_malloc+0x132>
 800c5e8:	4b33      	ldr	r3, [pc, #204]	; (800c6b8 <mem_malloc+0x1f8>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	69ba      	ldr	r2, [r7, #24]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d1f0      	bne.n	800c5d4 <mem_malloc+0x114>
          }
          lfree = cur;
 800c5f2:	4a2d      	ldr	r2, [pc, #180]	; (800c6a8 <mem_malloc+0x1e8>)
 800c5f4:	69bb      	ldr	r3, [r7, #24]
 800c5f6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c5f8:	4b2b      	ldr	r3, [pc, #172]	; (800c6a8 <mem_malloc+0x1e8>)
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	4b2e      	ldr	r3, [pc, #184]	; (800c6b8 <mem_malloc+0x1f8>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	429a      	cmp	r2, r3
 800c602:	d00b      	beq.n	800c61c <mem_malloc+0x15c>
 800c604:	4b28      	ldr	r3, [pc, #160]	; (800c6a8 <mem_malloc+0x1e8>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	791b      	ldrb	r3, [r3, #4]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d006      	beq.n	800c61c <mem_malloc+0x15c>
 800c60e:	4b27      	ldr	r3, [pc, #156]	; (800c6ac <mem_malloc+0x1ec>)
 800c610:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c614:	4929      	ldr	r1, [pc, #164]	; (800c6bc <mem_malloc+0x1fc>)
 800c616:	4827      	ldr	r0, [pc, #156]	; (800c6b4 <mem_malloc+0x1f4>)
 800c618:	f00b f938 	bl	801788c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c61c:	4821      	ldr	r0, [pc, #132]	; (800c6a4 <mem_malloc+0x1e4>)
 800c61e:	f00a ffea 	bl	80175f6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c622:	8bba      	ldrh	r2, [r7, #28]
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	4413      	add	r3, r2
 800c628:	3308      	adds	r3, #8
 800c62a:	4a23      	ldr	r2, [pc, #140]	; (800c6b8 <mem_malloc+0x1f8>)
 800c62c:	6812      	ldr	r2, [r2, #0]
 800c62e:	4293      	cmp	r3, r2
 800c630:	d906      	bls.n	800c640 <mem_malloc+0x180>
 800c632:	4b1e      	ldr	r3, [pc, #120]	; (800c6ac <mem_malloc+0x1ec>)
 800c634:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c638:	4921      	ldr	r1, [pc, #132]	; (800c6c0 <mem_malloc+0x200>)
 800c63a:	481e      	ldr	r0, [pc, #120]	; (800c6b4 <mem_malloc+0x1f4>)
 800c63c:	f00b f926 	bl	801788c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	f003 0303 	and.w	r3, r3, #3
 800c646:	2b00      	cmp	r3, #0
 800c648:	d006      	beq.n	800c658 <mem_malloc+0x198>
 800c64a:	4b18      	ldr	r3, [pc, #96]	; (800c6ac <mem_malloc+0x1ec>)
 800c64c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c650:	491c      	ldr	r1, [pc, #112]	; (800c6c4 <mem_malloc+0x204>)
 800c652:	4818      	ldr	r0, [pc, #96]	; (800c6b4 <mem_malloc+0x1f4>)
 800c654:	f00b f91a 	bl	801788c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	f003 0303 	and.w	r3, r3, #3
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d006      	beq.n	800c670 <mem_malloc+0x1b0>
 800c662:	4b12      	ldr	r3, [pc, #72]	; (800c6ac <mem_malloc+0x1ec>)
 800c664:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c668:	4917      	ldr	r1, [pc, #92]	; (800c6c8 <mem_malloc+0x208>)
 800c66a:	4812      	ldr	r0, [pc, #72]	; (800c6b4 <mem_malloc+0x1f4>)
 800c66c:	f00b f90e 	bl	801788c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	3308      	adds	r3, #8
 800c674:	e011      	b.n	800c69a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c676:	8bfb      	ldrh	r3, [r7, #30]
 800c678:	4618      	mov	r0, r3
 800c67a:	f7ff fc33 	bl	800bee4 <ptr_to_mem>
 800c67e:	4603      	mov	r3, r0
 800c680:	881b      	ldrh	r3, [r3, #0]
 800c682:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c684:	8bfa      	ldrh	r2, [r7, #30]
 800c686:	8bbb      	ldrh	r3, [r7, #28]
 800c688:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c68c:	429a      	cmp	r2, r3
 800c68e:	f4ff af41 	bcc.w	800c514 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c692:	4804      	ldr	r0, [pc, #16]	; (800c6a4 <mem_malloc+0x1e4>)
 800c694:	f00a ffaf 	bl	80175f6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c698:	2300      	movs	r3, #0
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3720      	adds	r7, #32
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	2000a55c 	.word	0x2000a55c
 800c6a8:	2000a560 	.word	0x2000a560
 800c6ac:	0801974c 	.word	0x0801974c
 800c6b0:	08019910 	.word	0x08019910
 800c6b4:	08019794 	.word	0x08019794
 800c6b8:	2000a558 	.word	0x2000a558
 800c6bc:	08019924 	.word	0x08019924
 800c6c0:	08019940 	.word	0x08019940
 800c6c4:	08019970 	.word	0x08019970
 800c6c8:	080199a0 	.word	0x080199a0

0800c6cc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b085      	sub	sp, #20
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	689b      	ldr	r3, [r3, #8]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	3303      	adds	r3, #3
 800c6e2:	f023 0303 	bic.w	r3, r3, #3
 800c6e6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	60fb      	str	r3, [r7, #12]
 800c6ec:	e011      	b.n	800c712 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	689b      	ldr	r3, [r3, #8]
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	689b      	ldr	r3, [r3, #8]
 800c6fc:	68ba      	ldr	r2, [r7, #8]
 800c6fe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	881b      	ldrh	r3, [r3, #0]
 800c704:	461a      	mov	r2, r3
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	4413      	add	r3, r2
 800c70a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	3301      	adds	r3, #1
 800c710:	60fb      	str	r3, [r7, #12]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	885b      	ldrh	r3, [r3, #2]
 800c716:	461a      	mov	r2, r3
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	4293      	cmp	r3, r2
 800c71c:	dbe7      	blt.n	800c6ee <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c71e:	bf00      	nop
 800c720:	bf00      	nop
 800c722:	3714      	adds	r7, #20
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr

0800c72c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c732:	2300      	movs	r3, #0
 800c734:	80fb      	strh	r3, [r7, #6]
 800c736:	e009      	b.n	800c74c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c738:	88fb      	ldrh	r3, [r7, #6]
 800c73a:	4a08      	ldr	r2, [pc, #32]	; (800c75c <memp_init+0x30>)
 800c73c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c740:	4618      	mov	r0, r3
 800c742:	f7ff ffc3 	bl	800c6cc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c746:	88fb      	ldrh	r3, [r7, #6]
 800c748:	3301      	adds	r3, #1
 800c74a:	80fb      	strh	r3, [r7, #6]
 800c74c:	88fb      	ldrh	r3, [r7, #6]
 800c74e:	2b0c      	cmp	r3, #12
 800c750:	d9f2      	bls.n	800c738 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c752:	bf00      	nop
 800c754:	bf00      	nop
 800c756:	3708      	adds	r7, #8
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	0801c224 	.word	0x0801c224

0800c760 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c768:	f00a ff72 	bl	8017650 <sys_arch_protect>
 800c76c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d015      	beq.n	800c7a8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	689b      	ldr	r3, [r3, #8]
 800c780:	68ba      	ldr	r2, [r7, #8]
 800c782:	6812      	ldr	r2, [r2, #0]
 800c784:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	f003 0303 	and.w	r3, r3, #3
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d006      	beq.n	800c79e <do_memp_malloc_pool+0x3e>
 800c790:	4b09      	ldr	r3, [pc, #36]	; (800c7b8 <do_memp_malloc_pool+0x58>)
 800c792:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c796:	4909      	ldr	r1, [pc, #36]	; (800c7bc <do_memp_malloc_pool+0x5c>)
 800c798:	4809      	ldr	r0, [pc, #36]	; (800c7c0 <do_memp_malloc_pool+0x60>)
 800c79a:	f00b f877 	bl	801788c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c79e:	68f8      	ldr	r0, [r7, #12]
 800c7a0:	f00a ff64 	bl	801766c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	e003      	b.n	800c7b0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c7a8:	68f8      	ldr	r0, [r7, #12]
 800c7aa:	f00a ff5f 	bl	801766c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c7ae:	2300      	movs	r3, #0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3710      	adds	r7, #16
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	080199c4 	.word	0x080199c4
 800c7bc:	080199f4 	.word	0x080199f4
 800c7c0:	08019a18 	.word	0x08019a18

0800c7c4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d106      	bne.n	800c7e0 <memp_malloc_pool+0x1c>
 800c7d2:	4b0a      	ldr	r3, [pc, #40]	; (800c7fc <memp_malloc_pool+0x38>)
 800c7d4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c7d8:	4909      	ldr	r1, [pc, #36]	; (800c800 <memp_malloc_pool+0x3c>)
 800c7da:	480a      	ldr	r0, [pc, #40]	; (800c804 <memp_malloc_pool+0x40>)
 800c7dc:	f00b f856 	bl	801788c <iprintf>
  if (desc == NULL) {
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d101      	bne.n	800c7ea <memp_malloc_pool+0x26>
    return NULL;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	e003      	b.n	800c7f2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f7ff ffb8 	bl	800c760 <do_memp_malloc_pool>
 800c7f0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
 800c7fa:	bf00      	nop
 800c7fc:	080199c4 	.word	0x080199c4
 800c800:	08019a40 	.word	0x08019a40
 800c804:	08019a18 	.word	0x08019a18

0800c808 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	4603      	mov	r3, r0
 800c810:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c812:	79fb      	ldrb	r3, [r7, #7]
 800c814:	2b0c      	cmp	r3, #12
 800c816:	d908      	bls.n	800c82a <memp_malloc+0x22>
 800c818:	4b0a      	ldr	r3, [pc, #40]	; (800c844 <memp_malloc+0x3c>)
 800c81a:	f240 1257 	movw	r2, #343	; 0x157
 800c81e:	490a      	ldr	r1, [pc, #40]	; (800c848 <memp_malloc+0x40>)
 800c820:	480a      	ldr	r0, [pc, #40]	; (800c84c <memp_malloc+0x44>)
 800c822:	f00b f833 	bl	801788c <iprintf>
 800c826:	2300      	movs	r3, #0
 800c828:	e008      	b.n	800c83c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c82a:	79fb      	ldrb	r3, [r7, #7]
 800c82c:	4a08      	ldr	r2, [pc, #32]	; (800c850 <memp_malloc+0x48>)
 800c82e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c832:	4618      	mov	r0, r3
 800c834:	f7ff ff94 	bl	800c760 <do_memp_malloc_pool>
 800c838:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c83a:	68fb      	ldr	r3, [r7, #12]
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3710      	adds	r7, #16
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	080199c4 	.word	0x080199c4
 800c848:	08019a54 	.word	0x08019a54
 800c84c:	08019a18 	.word	0x08019a18
 800c850:	0801c224 	.word	0x0801c224

0800c854 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	f003 0303 	and.w	r3, r3, #3
 800c864:	2b00      	cmp	r3, #0
 800c866:	d006      	beq.n	800c876 <do_memp_free_pool+0x22>
 800c868:	4b0d      	ldr	r3, [pc, #52]	; (800c8a0 <do_memp_free_pool+0x4c>)
 800c86a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c86e:	490d      	ldr	r1, [pc, #52]	; (800c8a4 <do_memp_free_pool+0x50>)
 800c870:	480d      	ldr	r0, [pc, #52]	; (800c8a8 <do_memp_free_pool+0x54>)
 800c872:	f00b f80b 	bl	801788c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c87a:	f00a fee9 	bl	8017650 <sys_arch_protect>
 800c87e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	681a      	ldr	r2, [r3, #0]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	689b      	ldr	r3, [r3, #8]
 800c88e:	68fa      	ldr	r2, [r7, #12]
 800c890:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c892:	68b8      	ldr	r0, [r7, #8]
 800c894:	f00a feea 	bl	801766c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c898:	bf00      	nop
 800c89a:	3710      	adds	r7, #16
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	080199c4 	.word	0x080199c4
 800c8a4:	08019a74 	.word	0x08019a74
 800c8a8:	08019a18 	.word	0x08019a18

0800c8ac <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d106      	bne.n	800c8ca <memp_free_pool+0x1e>
 800c8bc:	4b0a      	ldr	r3, [pc, #40]	; (800c8e8 <memp_free_pool+0x3c>)
 800c8be:	f240 1295 	movw	r2, #405	; 0x195
 800c8c2:	490a      	ldr	r1, [pc, #40]	; (800c8ec <memp_free_pool+0x40>)
 800c8c4:	480a      	ldr	r0, [pc, #40]	; (800c8f0 <memp_free_pool+0x44>)
 800c8c6:	f00a ffe1 	bl	801788c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d007      	beq.n	800c8e0 <memp_free_pool+0x34>
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d004      	beq.n	800c8e0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c8d6:	6839      	ldr	r1, [r7, #0]
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f7ff ffbb 	bl	800c854 <do_memp_free_pool>
 800c8de:	e000      	b.n	800c8e2 <memp_free_pool+0x36>
    return;
 800c8e0:	bf00      	nop
}
 800c8e2:	3708      	adds	r7, #8
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	080199c4 	.word	0x080199c4
 800c8ec:	08019a40 	.word	0x08019a40
 800c8f0:	08019a18 	.word	0x08019a18

0800c8f4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b082      	sub	sp, #8
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	6039      	str	r1, [r7, #0]
 800c8fe:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c900:	79fb      	ldrb	r3, [r7, #7]
 800c902:	2b0c      	cmp	r3, #12
 800c904:	d907      	bls.n	800c916 <memp_free+0x22>
 800c906:	4b0c      	ldr	r3, [pc, #48]	; (800c938 <memp_free+0x44>)
 800c908:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c90c:	490b      	ldr	r1, [pc, #44]	; (800c93c <memp_free+0x48>)
 800c90e:	480c      	ldr	r0, [pc, #48]	; (800c940 <memp_free+0x4c>)
 800c910:	f00a ffbc 	bl	801788c <iprintf>
 800c914:	e00c      	b.n	800c930 <memp_free+0x3c>

  if (mem == NULL) {
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d008      	beq.n	800c92e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c91c:	79fb      	ldrb	r3, [r7, #7]
 800c91e:	4a09      	ldr	r2, [pc, #36]	; (800c944 <memp_free+0x50>)
 800c920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c924:	6839      	ldr	r1, [r7, #0]
 800c926:	4618      	mov	r0, r3
 800c928:	f7ff ff94 	bl	800c854 <do_memp_free_pool>
 800c92c:	e000      	b.n	800c930 <memp_free+0x3c>
    return;
 800c92e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c930:	3708      	adds	r7, #8
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
 800c936:	bf00      	nop
 800c938:	080199c4 	.word	0x080199c4
 800c93c:	08019a94 	.word	0x08019a94
 800c940:	08019a18 	.word	0x08019a18
 800c944:	0801c224 	.word	0x0801c224

0800c948 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c948:	b480      	push	{r7}
 800c94a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c94c:	bf00      	nop
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr
	...

0800c958 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b086      	sub	sp, #24
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	60b9      	str	r1, [r7, #8]
 800c962:	607a      	str	r2, [r7, #4]
 800c964:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d108      	bne.n	800c97e <netif_add+0x26>
 800c96c:	4b57      	ldr	r3, [pc, #348]	; (800cacc <netif_add+0x174>)
 800c96e:	f240 1227 	movw	r2, #295	; 0x127
 800c972:	4957      	ldr	r1, [pc, #348]	; (800cad0 <netif_add+0x178>)
 800c974:	4857      	ldr	r0, [pc, #348]	; (800cad4 <netif_add+0x17c>)
 800c976:	f00a ff89 	bl	801788c <iprintf>
 800c97a:	2300      	movs	r3, #0
 800c97c:	e0a2      	b.n	800cac4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c980:	2b00      	cmp	r3, #0
 800c982:	d108      	bne.n	800c996 <netif_add+0x3e>
 800c984:	4b51      	ldr	r3, [pc, #324]	; (800cacc <netif_add+0x174>)
 800c986:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c98a:	4953      	ldr	r1, [pc, #332]	; (800cad8 <netif_add+0x180>)
 800c98c:	4851      	ldr	r0, [pc, #324]	; (800cad4 <netif_add+0x17c>)
 800c98e:	f00a ff7d 	bl	801788c <iprintf>
 800c992:	2300      	movs	r3, #0
 800c994:	e096      	b.n	800cac4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d101      	bne.n	800c9a0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c99c:	4b4f      	ldr	r3, [pc, #316]	; (800cadc <netif_add+0x184>)
 800c99e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d101      	bne.n	800c9aa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c9a6:	4b4d      	ldr	r3, [pc, #308]	; (800cadc <netif_add+0x184>)
 800c9a8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d101      	bne.n	800c9b4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c9b0:	4b4a      	ldr	r3, [pc, #296]	; (800cadc <netif_add+0x184>)
 800c9b2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	4a45      	ldr	r2, [pc, #276]	; (800cae0 <netif_add+0x188>)
 800c9ca:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	6a3a      	ldr	r2, [r7, #32]
 800c9e4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c9e6:	4b3f      	ldr	r3, [pc, #252]	; (800cae4 <netif_add+0x18c>)
 800c9e8:	781a      	ldrb	r2, [r3, #0]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9f4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	687a      	ldr	r2, [r7, #4]
 800c9fa:	68b9      	ldr	r1, [r7, #8]
 800c9fc:	68f8      	ldr	r0, [r7, #12]
 800c9fe:	f000 f913 	bl	800cc28 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ca02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca04:	68f8      	ldr	r0, [r7, #12]
 800ca06:	4798      	blx	r3
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d001      	beq.n	800ca12 <netif_add+0xba>
    return NULL;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	e058      	b.n	800cac4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca18:	2bff      	cmp	r3, #255	; 0xff
 800ca1a:	d103      	bne.n	800ca24 <netif_add+0xcc>
        netif->num = 0;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800ca24:	2300      	movs	r3, #0
 800ca26:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ca28:	4b2f      	ldr	r3, [pc, #188]	; (800cae8 <netif_add+0x190>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	617b      	str	r3, [r7, #20]
 800ca2e:	e02b      	b.n	800ca88 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ca30:	697a      	ldr	r2, [r7, #20]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d106      	bne.n	800ca46 <netif_add+0xee>
 800ca38:	4b24      	ldr	r3, [pc, #144]	; (800cacc <netif_add+0x174>)
 800ca3a:	f240 128b 	movw	r2, #395	; 0x18b
 800ca3e:	492b      	ldr	r1, [pc, #172]	; (800caec <netif_add+0x194>)
 800ca40:	4824      	ldr	r0, [pc, #144]	; (800cad4 <netif_add+0x17c>)
 800ca42:	f00a ff23 	bl	801788c <iprintf>
        num_netifs++;
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	2bff      	cmp	r3, #255	; 0xff
 800ca50:	dd06      	ble.n	800ca60 <netif_add+0x108>
 800ca52:	4b1e      	ldr	r3, [pc, #120]	; (800cacc <netif_add+0x174>)
 800ca54:	f240 128d 	movw	r2, #397	; 0x18d
 800ca58:	4925      	ldr	r1, [pc, #148]	; (800caf0 <netif_add+0x198>)
 800ca5a:	481e      	ldr	r0, [pc, #120]	; (800cad4 <netif_add+0x17c>)
 800ca5c:	f00a ff16 	bl	801788c <iprintf>
        if (netif2->num == netif->num) {
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d108      	bne.n	800ca82 <netif_add+0x12a>
          netif->num++;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca76:	3301      	adds	r3, #1
 800ca78:	b2da      	uxtb	r2, r3
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800ca80:	e005      	b.n	800ca8e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	617b      	str	r3, [r7, #20]
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d1d0      	bne.n	800ca30 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d1be      	bne.n	800ca12 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca9a:	2bfe      	cmp	r3, #254	; 0xfe
 800ca9c:	d103      	bne.n	800caa6 <netif_add+0x14e>
    netif_num = 0;
 800ca9e:	4b11      	ldr	r3, [pc, #68]	; (800cae4 <netif_add+0x18c>)
 800caa0:	2200      	movs	r2, #0
 800caa2:	701a      	strb	r2, [r3, #0]
 800caa4:	e006      	b.n	800cab4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800caac:	3301      	adds	r3, #1
 800caae:	b2da      	uxtb	r2, r3
 800cab0:	4b0c      	ldr	r3, [pc, #48]	; (800cae4 <netif_add+0x18c>)
 800cab2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cab4:	4b0c      	ldr	r3, [pc, #48]	; (800cae8 <netif_add+0x190>)
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800cabc:	4a0a      	ldr	r2, [pc, #40]	; (800cae8 <netif_add+0x190>)
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800cac2:	68fb      	ldr	r3, [r7, #12]
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3718      	adds	r7, #24
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	08019ab0 	.word	0x08019ab0
 800cad0:	08019b44 	.word	0x08019b44
 800cad4:	08019b00 	.word	0x08019b00
 800cad8:	08019b60 	.word	0x08019b60
 800cadc:	0801c298 	.word	0x0801c298
 800cae0:	0800cf03 	.word	0x0800cf03
 800cae4:	2000d638 	.word	0x2000d638
 800cae8:	2000d630 	.word	0x2000d630
 800caec:	08019b84 	.word	0x08019b84
 800caf0:	08019b98 	.word	0x08019b98

0800caf4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800cafe:	6839      	ldr	r1, [r7, #0]
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f003 f809 	bl	800fb18 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800cb06:	6839      	ldr	r1, [r7, #0]
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f008 f913 	bl	8014d34 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800cb0e:	bf00      	nop
 800cb10:	3708      	adds	r7, #8
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
	...

0800cb18 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b086      	sub	sp, #24
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	60f8      	str	r0, [r7, #12]
 800cb20:	60b9      	str	r1, [r7, #8]
 800cb22:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d106      	bne.n	800cb38 <netif_do_set_ipaddr+0x20>
 800cb2a:	4b1d      	ldr	r3, [pc, #116]	; (800cba0 <netif_do_set_ipaddr+0x88>)
 800cb2c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800cb30:	491c      	ldr	r1, [pc, #112]	; (800cba4 <netif_do_set_ipaddr+0x8c>)
 800cb32:	481d      	ldr	r0, [pc, #116]	; (800cba8 <netif_do_set_ipaddr+0x90>)
 800cb34:	f00a feaa 	bl	801788c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d106      	bne.n	800cb4c <netif_do_set_ipaddr+0x34>
 800cb3e:	4b18      	ldr	r3, [pc, #96]	; (800cba0 <netif_do_set_ipaddr+0x88>)
 800cb40:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800cb44:	4917      	ldr	r1, [pc, #92]	; (800cba4 <netif_do_set_ipaddr+0x8c>)
 800cb46:	4818      	ldr	r0, [pc, #96]	; (800cba8 <netif_do_set_ipaddr+0x90>)
 800cb48:	f00a fea0 	bl	801788c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	681a      	ldr	r2, [r3, #0]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	3304      	adds	r3, #4
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d01c      	beq.n	800cb94 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	3304      	adds	r3, #4
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800cb6a:	f107 0314 	add.w	r3, r7, #20
 800cb6e:	4619      	mov	r1, r3
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f7ff ffbf 	bl	800caf4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d002      	beq.n	800cb82 <netif_do_set_ipaddr+0x6a>
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	e000      	b.n	800cb84 <netif_do_set_ipaddr+0x6c>
 800cb82:	2300      	movs	r3, #0
 800cb84:	68fa      	ldr	r2, [r7, #12]
 800cb86:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800cb88:	2101      	movs	r1, #1
 800cb8a:	68f8      	ldr	r0, [r7, #12]
 800cb8c:	f000 f8d2 	bl	800cd34 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800cb90:	2301      	movs	r3, #1
 800cb92:	e000      	b.n	800cb96 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800cb94:	2300      	movs	r3, #0
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3718      	adds	r7, #24
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	08019ab0 	.word	0x08019ab0
 800cba4:	08019bc8 	.word	0x08019bc8
 800cba8:	08019b00 	.word	0x08019b00

0800cbac <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b085      	sub	sp, #20
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	60f8      	str	r0, [r7, #12]
 800cbb4:	60b9      	str	r1, [r7, #8]
 800cbb6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	3308      	adds	r3, #8
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d00a      	beq.n	800cbdc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d002      	beq.n	800cbd2 <netif_do_set_netmask+0x26>
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	e000      	b.n	800cbd4 <netif_do_set_netmask+0x28>
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	68fa      	ldr	r2, [r7, #12]
 800cbd6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800cbd8:	2301      	movs	r3, #1
 800cbda:	e000      	b.n	800cbde <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800cbdc:	2300      	movs	r3, #0
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3714      	adds	r7, #20
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr

0800cbea <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800cbea:	b480      	push	{r7}
 800cbec:	b085      	sub	sp, #20
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	60f8      	str	r0, [r7, #12]
 800cbf2:	60b9      	str	r1, [r7, #8]
 800cbf4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	681a      	ldr	r2, [r3, #0]
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	330c      	adds	r3, #12
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d00a      	beq.n	800cc1a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d002      	beq.n	800cc10 <netif_do_set_gw+0x26>
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	e000      	b.n	800cc12 <netif_do_set_gw+0x28>
 800cc10:	2300      	movs	r3, #0
 800cc12:	68fa      	ldr	r2, [r7, #12]
 800cc14:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800cc16:	2301      	movs	r3, #1
 800cc18:	e000      	b.n	800cc1c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800cc1a:	2300      	movs	r3, #0
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3714      	adds	r7, #20
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b088      	sub	sp, #32
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	607a      	str	r2, [r7, #4]
 800cc34:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800cc36:	2300      	movs	r3, #0
 800cc38:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d101      	bne.n	800cc48 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cc44:	4b1c      	ldr	r3, [pc, #112]	; (800ccb8 <netif_set_addr+0x90>)
 800cc46:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d101      	bne.n	800cc52 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800cc4e:	4b1a      	ldr	r3, [pc, #104]	; (800ccb8 <netif_set_addr+0x90>)
 800cc50:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d101      	bne.n	800cc5c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800cc58:	4b17      	ldr	r3, [pc, #92]	; (800ccb8 <netif_set_addr+0x90>)
 800cc5a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d003      	beq.n	800cc6a <netif_set_addr+0x42>
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d101      	bne.n	800cc6e <netif_set_addr+0x46>
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e000      	b.n	800cc70 <netif_set_addr+0x48>
 800cc6e:	2300      	movs	r3, #0
 800cc70:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d006      	beq.n	800cc86 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cc78:	f107 0310 	add.w	r3, r7, #16
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	68b9      	ldr	r1, [r7, #8]
 800cc80:	68f8      	ldr	r0, [r7, #12]
 800cc82:	f7ff ff49 	bl	800cb18 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800cc86:	69fa      	ldr	r2, [r7, #28]
 800cc88:	6879      	ldr	r1, [r7, #4]
 800cc8a:	68f8      	ldr	r0, [r7, #12]
 800cc8c:	f7ff ff8e 	bl	800cbac <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800cc90:	69ba      	ldr	r2, [r7, #24]
 800cc92:	6839      	ldr	r1, [r7, #0]
 800cc94:	68f8      	ldr	r0, [r7, #12]
 800cc96:	f7ff ffa8 	bl	800cbea <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d106      	bne.n	800ccae <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cca0:	f107 0310 	add.w	r3, r7, #16
 800cca4:	461a      	mov	r2, r3
 800cca6:	68b9      	ldr	r1, [r7, #8]
 800cca8:	68f8      	ldr	r0, [r7, #12]
 800ccaa:	f7ff ff35 	bl	800cb18 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ccae:	bf00      	nop
 800ccb0:	3720      	adds	r7, #32
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	0801c298 	.word	0x0801c298

0800ccbc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ccc4:	4a04      	ldr	r2, [pc, #16]	; (800ccd8 <netif_set_default+0x1c>)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ccca:	bf00      	nop
 800cccc:	370c      	adds	r7, #12
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr
 800ccd6:	bf00      	nop
 800ccd8:	2000d634 	.word	0x2000d634

0800ccdc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d107      	bne.n	800ccfa <netif_set_up+0x1e>
 800ccea:	4b0f      	ldr	r3, [pc, #60]	; (800cd28 <netif_set_up+0x4c>)
 800ccec:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ccf0:	490e      	ldr	r1, [pc, #56]	; (800cd2c <netif_set_up+0x50>)
 800ccf2:	480f      	ldr	r0, [pc, #60]	; (800cd30 <netif_set_up+0x54>)
 800ccf4:	f00a fdca 	bl	801788c <iprintf>
 800ccf8:	e013      	b.n	800cd22 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cd00:	f003 0301 	and.w	r3, r3, #1
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d10c      	bne.n	800cd22 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cd0e:	f043 0301 	orr.w	r3, r3, #1
 800cd12:	b2da      	uxtb	r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cd1a:	2103      	movs	r1, #3
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f000 f809 	bl	800cd34 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800cd22:	3708      	adds	r7, #8
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	08019ab0 	.word	0x08019ab0
 800cd2c:	08019c38 	.word	0x08019c38
 800cd30:	08019b00 	.word	0x08019b00

0800cd34 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d106      	bne.n	800cd54 <netif_issue_reports+0x20>
 800cd46:	4b18      	ldr	r3, [pc, #96]	; (800cda8 <netif_issue_reports+0x74>)
 800cd48:	f240 326d 	movw	r2, #877	; 0x36d
 800cd4c:	4917      	ldr	r1, [pc, #92]	; (800cdac <netif_issue_reports+0x78>)
 800cd4e:	4818      	ldr	r0, [pc, #96]	; (800cdb0 <netif_issue_reports+0x7c>)
 800cd50:	f00a fd9c 	bl	801788c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cd5a:	f003 0304 	and.w	r3, r3, #4
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d01e      	beq.n	800cda0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cd68:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d017      	beq.n	800cda0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cd70:	78fb      	ldrb	r3, [r7, #3]
 800cd72:	f003 0301 	and.w	r3, r3, #1
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d013      	beq.n	800cda2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	3304      	adds	r3, #4
 800cd7e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d00e      	beq.n	800cda2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cd8a:	f003 0308 	and.w	r3, r3, #8
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d007      	beq.n	800cda2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	3304      	adds	r3, #4
 800cd96:	4619      	mov	r1, r3
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f008 ff35 	bl	8015c08 <etharp_request>
 800cd9e:	e000      	b.n	800cda2 <netif_issue_reports+0x6e>
    return;
 800cda0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800cda2:	3708      	adds	r7, #8
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	08019ab0 	.word	0x08019ab0
 800cdac:	08019c54 	.word	0x08019c54
 800cdb0:	08019b00 	.word	0x08019b00

0800cdb4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d107      	bne.n	800cdd2 <netif_set_down+0x1e>
 800cdc2:	4b12      	ldr	r3, [pc, #72]	; (800ce0c <netif_set_down+0x58>)
 800cdc4:	f240 329b 	movw	r2, #923	; 0x39b
 800cdc8:	4911      	ldr	r1, [pc, #68]	; (800ce10 <netif_set_down+0x5c>)
 800cdca:	4812      	ldr	r0, [pc, #72]	; (800ce14 <netif_set_down+0x60>)
 800cdcc:	f00a fd5e 	bl	801788c <iprintf>
 800cdd0:	e019      	b.n	800ce06 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cdd8:	f003 0301 	and.w	r3, r3, #1
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d012      	beq.n	800ce06 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cde6:	f023 0301 	bic.w	r3, r3, #1
 800cdea:	b2da      	uxtb	r2, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cdf8:	f003 0308 	and.w	r3, r3, #8
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d002      	beq.n	800ce06 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f008 fabf 	bl	8015384 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ce06:	3708      	adds	r7, #8
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	08019ab0 	.word	0x08019ab0
 800ce10:	08019c78 	.word	0x08019c78
 800ce14:	08019b00 	.word	0x08019b00

0800ce18 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d107      	bne.n	800ce36 <netif_set_link_up+0x1e>
 800ce26:	4b13      	ldr	r3, [pc, #76]	; (800ce74 <netif_set_link_up+0x5c>)
 800ce28:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ce2c:	4912      	ldr	r1, [pc, #72]	; (800ce78 <netif_set_link_up+0x60>)
 800ce2e:	4813      	ldr	r0, [pc, #76]	; (800ce7c <netif_set_link_up+0x64>)
 800ce30:	f00a fd2c 	bl	801788c <iprintf>
 800ce34:	e01b      	b.n	800ce6e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce3c:	f003 0304 	and.w	r3, r3, #4
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d114      	bne.n	800ce6e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce4a:	f043 0304 	orr.w	r3, r3, #4
 800ce4e:	b2da      	uxtb	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ce56:	2103      	movs	r1, #3
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f7ff ff6b 	bl	800cd34 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	69db      	ldr	r3, [r3, #28]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d003      	beq.n	800ce6e <netif_set_link_up+0x56>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	69db      	ldr	r3, [r3, #28]
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ce6e:	3708      	adds	r7, #8
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	08019ab0 	.word	0x08019ab0
 800ce78:	08019c98 	.word	0x08019c98
 800ce7c:	08019b00 	.word	0x08019b00

0800ce80 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d107      	bne.n	800ce9e <netif_set_link_down+0x1e>
 800ce8e:	4b11      	ldr	r3, [pc, #68]	; (800ced4 <netif_set_link_down+0x54>)
 800ce90:	f240 4206 	movw	r2, #1030	; 0x406
 800ce94:	4910      	ldr	r1, [pc, #64]	; (800ced8 <netif_set_link_down+0x58>)
 800ce96:	4811      	ldr	r0, [pc, #68]	; (800cedc <netif_set_link_down+0x5c>)
 800ce98:	f00a fcf8 	bl	801788c <iprintf>
 800ce9c:	e017      	b.n	800cece <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cea4:	f003 0304 	and.w	r3, r3, #4
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d010      	beq.n	800cece <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ceb2:	f023 0304 	bic.w	r3, r3, #4
 800ceb6:	b2da      	uxtb	r2, r3
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	69db      	ldr	r3, [r3, #28]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d003      	beq.n	800cece <netif_set_link_down+0x4e>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	69db      	ldr	r3, [r3, #28]
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cece:	3708      	adds	r7, #8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	08019ab0 	.word	0x08019ab0
 800ced8:	08019cbc 	.word	0x08019cbc
 800cedc:	08019b00 	.word	0x08019b00

0800cee0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b083      	sub	sp, #12
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d002      	beq.n	800cef6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	683a      	ldr	r2, [r7, #0]
 800cef4:	61da      	str	r2, [r3, #28]
  }
}
 800cef6:	bf00      	nop
 800cef8:	370c      	adds	r7, #12
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr

0800cf02 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cf02:	b480      	push	{r7}
 800cf04:	b085      	sub	sp, #20
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	60f8      	str	r0, [r7, #12]
 800cf0a:	60b9      	str	r1, [r7, #8]
 800cf0c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cf0e:	f06f 030b 	mvn.w	r3, #11
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3714      	adds	r7, #20
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr
	...

0800cf20 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b085      	sub	sp, #20
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	4603      	mov	r3, r0
 800cf28:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cf2a:	79fb      	ldrb	r3, [r7, #7]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d013      	beq.n	800cf58 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cf30:	4b0d      	ldr	r3, [pc, #52]	; (800cf68 <netif_get_by_index+0x48>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	60fb      	str	r3, [r7, #12]
 800cf36:	e00c      	b.n	800cf52 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf3e:	3301      	adds	r3, #1
 800cf40:	b2db      	uxtb	r3, r3
 800cf42:	79fa      	ldrb	r2, [r7, #7]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d101      	bne.n	800cf4c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	e006      	b.n	800cf5a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	60fb      	str	r3, [r7, #12]
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d1ef      	bne.n	800cf38 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3714      	adds	r7, #20
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	2000d630 	.word	0x2000d630

0800cf6c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cf72:	f00a fb6d 	bl	8017650 <sys_arch_protect>
 800cf76:	6038      	str	r0, [r7, #0]
 800cf78:	4b0d      	ldr	r3, [pc, #52]	; (800cfb0 <pbuf_free_ooseq+0x44>)
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	701a      	strb	r2, [r3, #0]
 800cf7e:	6838      	ldr	r0, [r7, #0]
 800cf80:	f00a fb74 	bl	801766c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cf84:	4b0b      	ldr	r3, [pc, #44]	; (800cfb4 <pbuf_free_ooseq+0x48>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	607b      	str	r3, [r7, #4]
 800cf8a:	e00a      	b.n	800cfa2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d003      	beq.n	800cf9c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f002 fdfd 	bl	800fb94 <tcp_free_ooseq>
      return;
 800cf9a:	e005      	b.n	800cfa8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	68db      	ldr	r3, [r3, #12]
 800cfa0:	607b      	str	r3, [r7, #4]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d1f1      	bne.n	800cf8c <pbuf_free_ooseq+0x20>
    }
  }
}
 800cfa8:	3708      	adds	r7, #8
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}
 800cfae:	bf00      	nop
 800cfb0:	2000d639 	.word	0x2000d639
 800cfb4:	2000d648 	.word	0x2000d648

0800cfb8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800cfc0:	f7ff ffd4 	bl	800cf6c <pbuf_free_ooseq>
}
 800cfc4:	bf00      	nop
 800cfc6:	3708      	adds	r7, #8
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800cfd2:	f00a fb3d 	bl	8017650 <sys_arch_protect>
 800cfd6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cfd8:	4b0f      	ldr	r3, [pc, #60]	; (800d018 <pbuf_pool_is_empty+0x4c>)
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800cfde:	4b0e      	ldr	r3, [pc, #56]	; (800d018 <pbuf_pool_is_empty+0x4c>)
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f00a fb41 	bl	801766c <sys_arch_unprotect>

  if (!queued) {
 800cfea:	78fb      	ldrb	r3, [r7, #3]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d10f      	bne.n	800d010 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cff0:	2100      	movs	r1, #0
 800cff2:	480a      	ldr	r0, [pc, #40]	; (800d01c <pbuf_pool_is_empty+0x50>)
 800cff4:	f7fe fe90 	bl	800bd18 <tcpip_try_callback>
 800cff8:	4603      	mov	r3, r0
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d008      	beq.n	800d010 <pbuf_pool_is_empty+0x44>
 800cffe:	f00a fb27 	bl	8017650 <sys_arch_protect>
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	4b04      	ldr	r3, [pc, #16]	; (800d018 <pbuf_pool_is_empty+0x4c>)
 800d006:	2200      	movs	r2, #0
 800d008:	701a      	strb	r2, [r3, #0]
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f00a fb2e 	bl	801766c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d010:	bf00      	nop
 800d012:	3708      	adds	r7, #8
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	2000d639 	.word	0x2000d639
 800d01c:	0800cfb9 	.word	0x0800cfb9

0800d020 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d020:	b480      	push	{r7}
 800d022:	b085      	sub	sp, #20
 800d024:	af00      	add	r7, sp, #0
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	4611      	mov	r1, r2
 800d02c:	461a      	mov	r2, r3
 800d02e:	460b      	mov	r3, r1
 800d030:	80fb      	strh	r3, [r7, #6]
 800d032:	4613      	mov	r3, r2
 800d034:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	2200      	movs	r2, #0
 800d03a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	68ba      	ldr	r2, [r7, #8]
 800d040:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	88fa      	ldrh	r2, [r7, #6]
 800d046:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	88ba      	ldrh	r2, [r7, #4]
 800d04c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d04e:	8b3b      	ldrh	r3, [r7, #24]
 800d050:	b2da      	uxtb	r2, r3
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	7f3a      	ldrb	r2, [r7, #28]
 800d05a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2201      	movs	r2, #1
 800d060:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	2200      	movs	r2, #0
 800d066:	73da      	strb	r2, [r3, #15]
}
 800d068:	bf00      	nop
 800d06a:	3714      	adds	r7, #20
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr

0800d074 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b08c      	sub	sp, #48	; 0x30
 800d078:	af02      	add	r7, sp, #8
 800d07a:	4603      	mov	r3, r0
 800d07c:	71fb      	strb	r3, [r7, #7]
 800d07e:	460b      	mov	r3, r1
 800d080:	80bb      	strh	r3, [r7, #4]
 800d082:	4613      	mov	r3, r2
 800d084:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d086:	79fb      	ldrb	r3, [r7, #7]
 800d088:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d08a:	887b      	ldrh	r3, [r7, #2]
 800d08c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d090:	d07f      	beq.n	800d192 <pbuf_alloc+0x11e>
 800d092:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d096:	f300 80c8 	bgt.w	800d22a <pbuf_alloc+0x1b6>
 800d09a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d09e:	d010      	beq.n	800d0c2 <pbuf_alloc+0x4e>
 800d0a0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d0a4:	f300 80c1 	bgt.w	800d22a <pbuf_alloc+0x1b6>
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d002      	beq.n	800d0b2 <pbuf_alloc+0x3e>
 800d0ac:	2b41      	cmp	r3, #65	; 0x41
 800d0ae:	f040 80bc 	bne.w	800d22a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d0b2:	887a      	ldrh	r2, [r7, #2]
 800d0b4:	88bb      	ldrh	r3, [r7, #4]
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	2000      	movs	r0, #0
 800d0ba:	f000 f8d1 	bl	800d260 <pbuf_alloc_reference>
 800d0be:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d0c0:	e0bd      	b.n	800d23e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d0ca:	88bb      	ldrh	r3, [r7, #4]
 800d0cc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d0ce:	200c      	movs	r0, #12
 800d0d0:	f7ff fb9a 	bl	800c808 <memp_malloc>
 800d0d4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d109      	bne.n	800d0f0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d0dc:	f7ff ff76 	bl	800cfcc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d002      	beq.n	800d0ec <pbuf_alloc+0x78>
            pbuf_free(p);
 800d0e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d0e8:	f000 faa8 	bl	800d63c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	e0a7      	b.n	800d240 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d0f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0f2:	3303      	adds	r3, #3
 800d0f4:	b29b      	uxth	r3, r3
 800d0f6:	f023 0303 	bic.w	r3, r3, #3
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d100:	b29b      	uxth	r3, r3
 800d102:	8b7a      	ldrh	r2, [r7, #26]
 800d104:	4293      	cmp	r3, r2
 800d106:	bf28      	it	cs
 800d108:	4613      	movcs	r3, r2
 800d10a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d10c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d10e:	3310      	adds	r3, #16
 800d110:	693a      	ldr	r2, [r7, #16]
 800d112:	4413      	add	r3, r2
 800d114:	3303      	adds	r3, #3
 800d116:	f023 0303 	bic.w	r3, r3, #3
 800d11a:	4618      	mov	r0, r3
 800d11c:	89f9      	ldrh	r1, [r7, #14]
 800d11e:	8b7a      	ldrh	r2, [r7, #26]
 800d120:	2300      	movs	r3, #0
 800d122:	9301      	str	r3, [sp, #4]
 800d124:	887b      	ldrh	r3, [r7, #2]
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	460b      	mov	r3, r1
 800d12a:	4601      	mov	r1, r0
 800d12c:	6938      	ldr	r0, [r7, #16]
 800d12e:	f7ff ff77 	bl	800d020 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	685b      	ldr	r3, [r3, #4]
 800d136:	f003 0303 	and.w	r3, r3, #3
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d006      	beq.n	800d14c <pbuf_alloc+0xd8>
 800d13e:	4b42      	ldr	r3, [pc, #264]	; (800d248 <pbuf_alloc+0x1d4>)
 800d140:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d144:	4941      	ldr	r1, [pc, #260]	; (800d24c <pbuf_alloc+0x1d8>)
 800d146:	4842      	ldr	r0, [pc, #264]	; (800d250 <pbuf_alloc+0x1dc>)
 800d148:	f00a fba0 	bl	801788c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d14c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d14e:	3303      	adds	r3, #3
 800d150:	f023 0303 	bic.w	r3, r3, #3
 800d154:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d158:	d106      	bne.n	800d168 <pbuf_alloc+0xf4>
 800d15a:	4b3b      	ldr	r3, [pc, #236]	; (800d248 <pbuf_alloc+0x1d4>)
 800d15c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d160:	493c      	ldr	r1, [pc, #240]	; (800d254 <pbuf_alloc+0x1e0>)
 800d162:	483b      	ldr	r0, [pc, #236]	; (800d250 <pbuf_alloc+0x1dc>)
 800d164:	f00a fb92 	bl	801788c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d102      	bne.n	800d174 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	627b      	str	r3, [r7, #36]	; 0x24
 800d172:	e002      	b.n	800d17a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	693a      	ldr	r2, [r7, #16]
 800d178:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d17e:	8b7a      	ldrh	r2, [r7, #26]
 800d180:	89fb      	ldrh	r3, [r7, #14]
 800d182:	1ad3      	subs	r3, r2, r3
 800d184:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d186:	2300      	movs	r3, #0
 800d188:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d18a:	8b7b      	ldrh	r3, [r7, #26]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d19e      	bne.n	800d0ce <pbuf_alloc+0x5a>
      break;
 800d190:	e055      	b.n	800d23e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d192:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d194:	3303      	adds	r3, #3
 800d196:	b29b      	uxth	r3, r3
 800d198:	f023 0303 	bic.w	r3, r3, #3
 800d19c:	b29a      	uxth	r2, r3
 800d19e:	88bb      	ldrh	r3, [r7, #4]
 800d1a0:	3303      	adds	r3, #3
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	f023 0303 	bic.w	r3, r3, #3
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	4413      	add	r3, r2
 800d1ac:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d1ae:	8b3b      	ldrh	r3, [r7, #24]
 800d1b0:	3310      	adds	r3, #16
 800d1b2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d1b4:	8b3a      	ldrh	r2, [r7, #24]
 800d1b6:	88bb      	ldrh	r3, [r7, #4]
 800d1b8:	3303      	adds	r3, #3
 800d1ba:	f023 0303 	bic.w	r3, r3, #3
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	d306      	bcc.n	800d1d0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d1c2:	8afa      	ldrh	r2, [r7, #22]
 800d1c4:	88bb      	ldrh	r3, [r7, #4]
 800d1c6:	3303      	adds	r3, #3
 800d1c8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d201      	bcs.n	800d1d4 <pbuf_alloc+0x160>
        return NULL;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	e035      	b.n	800d240 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d1d4:	8afb      	ldrh	r3, [r7, #22]
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f7ff f972 	bl	800c4c0 <mem_malloc>
 800d1dc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d101      	bne.n	800d1e8 <pbuf_alloc+0x174>
        return NULL;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	e02b      	b.n	800d240 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d1e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d1ea:	3310      	adds	r3, #16
 800d1ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1ee:	4413      	add	r3, r2
 800d1f0:	3303      	adds	r3, #3
 800d1f2:	f023 0303 	bic.w	r3, r3, #3
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	88b9      	ldrh	r1, [r7, #4]
 800d1fa:	88ba      	ldrh	r2, [r7, #4]
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	9301      	str	r3, [sp, #4]
 800d200:	887b      	ldrh	r3, [r7, #2]
 800d202:	9300      	str	r3, [sp, #0]
 800d204:	460b      	mov	r3, r1
 800d206:	4601      	mov	r1, r0
 800d208:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d20a:	f7ff ff09 	bl	800d020 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d210:	685b      	ldr	r3, [r3, #4]
 800d212:	f003 0303 	and.w	r3, r3, #3
 800d216:	2b00      	cmp	r3, #0
 800d218:	d010      	beq.n	800d23c <pbuf_alloc+0x1c8>
 800d21a:	4b0b      	ldr	r3, [pc, #44]	; (800d248 <pbuf_alloc+0x1d4>)
 800d21c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d220:	490d      	ldr	r1, [pc, #52]	; (800d258 <pbuf_alloc+0x1e4>)
 800d222:	480b      	ldr	r0, [pc, #44]	; (800d250 <pbuf_alloc+0x1dc>)
 800d224:	f00a fb32 	bl	801788c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d228:	e008      	b.n	800d23c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d22a:	4b07      	ldr	r3, [pc, #28]	; (800d248 <pbuf_alloc+0x1d4>)
 800d22c:	f240 1227 	movw	r2, #295	; 0x127
 800d230:	490a      	ldr	r1, [pc, #40]	; (800d25c <pbuf_alloc+0x1e8>)
 800d232:	4807      	ldr	r0, [pc, #28]	; (800d250 <pbuf_alloc+0x1dc>)
 800d234:	f00a fb2a 	bl	801788c <iprintf>
      return NULL;
 800d238:	2300      	movs	r3, #0
 800d23a:	e001      	b.n	800d240 <pbuf_alloc+0x1cc>
      break;
 800d23c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d240:	4618      	mov	r0, r3
 800d242:	3728      	adds	r7, #40	; 0x28
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}
 800d248:	08019ce0 	.word	0x08019ce0
 800d24c:	08019d10 	.word	0x08019d10
 800d250:	08019d40 	.word	0x08019d40
 800d254:	08019d68 	.word	0x08019d68
 800d258:	08019d9c 	.word	0x08019d9c
 800d25c:	08019dc8 	.word	0x08019dc8

0800d260 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b086      	sub	sp, #24
 800d264:	af02      	add	r7, sp, #8
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	460b      	mov	r3, r1
 800d26a:	807b      	strh	r3, [r7, #2]
 800d26c:	4613      	mov	r3, r2
 800d26e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d270:	883b      	ldrh	r3, [r7, #0]
 800d272:	2b41      	cmp	r3, #65	; 0x41
 800d274:	d009      	beq.n	800d28a <pbuf_alloc_reference+0x2a>
 800d276:	883b      	ldrh	r3, [r7, #0]
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d006      	beq.n	800d28a <pbuf_alloc_reference+0x2a>
 800d27c:	4b0f      	ldr	r3, [pc, #60]	; (800d2bc <pbuf_alloc_reference+0x5c>)
 800d27e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d282:	490f      	ldr	r1, [pc, #60]	; (800d2c0 <pbuf_alloc_reference+0x60>)
 800d284:	480f      	ldr	r0, [pc, #60]	; (800d2c4 <pbuf_alloc_reference+0x64>)
 800d286:	f00a fb01 	bl	801788c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d28a:	200b      	movs	r0, #11
 800d28c:	f7ff fabc 	bl	800c808 <memp_malloc>
 800d290:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d101      	bne.n	800d29c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d298:	2300      	movs	r3, #0
 800d29a:	e00b      	b.n	800d2b4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d29c:	8879      	ldrh	r1, [r7, #2]
 800d29e:	887a      	ldrh	r2, [r7, #2]
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	9301      	str	r3, [sp, #4]
 800d2a4:	883b      	ldrh	r3, [r7, #0]
 800d2a6:	9300      	str	r3, [sp, #0]
 800d2a8:	460b      	mov	r3, r1
 800d2aa:	6879      	ldr	r1, [r7, #4]
 800d2ac:	68f8      	ldr	r0, [r7, #12]
 800d2ae:	f7ff feb7 	bl	800d020 <pbuf_init_alloced_pbuf>
  return p;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3710      	adds	r7, #16
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	08019ce0 	.word	0x08019ce0
 800d2c0:	08019de4 	.word	0x08019de4
 800d2c4:	08019d40 	.word	0x08019d40

0800d2c8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b088      	sub	sp, #32
 800d2cc:	af02      	add	r7, sp, #8
 800d2ce:	607b      	str	r3, [r7, #4]
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	73fb      	strb	r3, [r7, #15]
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	81bb      	strh	r3, [r7, #12]
 800d2d8:	4613      	mov	r3, r2
 800d2da:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d2dc:	7bfb      	ldrb	r3, [r7, #15]
 800d2de:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d2e0:	8a7b      	ldrh	r3, [r7, #18]
 800d2e2:	3303      	adds	r3, #3
 800d2e4:	f023 0203 	bic.w	r2, r3, #3
 800d2e8:	89bb      	ldrh	r3, [r7, #12]
 800d2ea:	441a      	add	r2, r3
 800d2ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d901      	bls.n	800d2f6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	e018      	b.n	800d328 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d2f6:	6a3b      	ldr	r3, [r7, #32]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d007      	beq.n	800d30c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d2fc:	8a7b      	ldrh	r3, [r7, #18]
 800d2fe:	3303      	adds	r3, #3
 800d300:	f023 0303 	bic.w	r3, r3, #3
 800d304:	6a3a      	ldr	r2, [r7, #32]
 800d306:	4413      	add	r3, r2
 800d308:	617b      	str	r3, [r7, #20]
 800d30a:	e001      	b.n	800d310 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d30c:	2300      	movs	r3, #0
 800d30e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	89b9      	ldrh	r1, [r7, #12]
 800d314:	89ba      	ldrh	r2, [r7, #12]
 800d316:	2302      	movs	r3, #2
 800d318:	9301      	str	r3, [sp, #4]
 800d31a:	897b      	ldrh	r3, [r7, #10]
 800d31c:	9300      	str	r3, [sp, #0]
 800d31e:	460b      	mov	r3, r1
 800d320:	6979      	ldr	r1, [r7, #20]
 800d322:	f7ff fe7d 	bl	800d020 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d326:	687b      	ldr	r3, [r7, #4]
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3718      	adds	r7, #24
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}

0800d330 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b084      	sub	sp, #16
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	460b      	mov	r3, r1
 800d33a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d106      	bne.n	800d350 <pbuf_realloc+0x20>
 800d342:	4b3a      	ldr	r3, [pc, #232]	; (800d42c <pbuf_realloc+0xfc>)
 800d344:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d348:	4939      	ldr	r1, [pc, #228]	; (800d430 <pbuf_realloc+0x100>)
 800d34a:	483a      	ldr	r0, [pc, #232]	; (800d434 <pbuf_realloc+0x104>)
 800d34c:	f00a fa9e 	bl	801788c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	891b      	ldrh	r3, [r3, #8]
 800d354:	887a      	ldrh	r2, [r7, #2]
 800d356:	429a      	cmp	r2, r3
 800d358:	d263      	bcs.n	800d422 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	891a      	ldrh	r2, [r3, #8]
 800d35e:	887b      	ldrh	r3, [r7, #2]
 800d360:	1ad3      	subs	r3, r2, r3
 800d362:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d364:	887b      	ldrh	r3, [r7, #2]
 800d366:	817b      	strh	r3, [r7, #10]
  q = p;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d36c:	e018      	b.n	800d3a0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	895b      	ldrh	r3, [r3, #10]
 800d372:	897a      	ldrh	r2, [r7, #10]
 800d374:	1ad3      	subs	r3, r2, r3
 800d376:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	891a      	ldrh	r2, [r3, #8]
 800d37c:	893b      	ldrh	r3, [r7, #8]
 800d37e:	1ad3      	subs	r3, r2, r3
 800d380:	b29a      	uxth	r2, r3
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d106      	bne.n	800d3a0 <pbuf_realloc+0x70>
 800d392:	4b26      	ldr	r3, [pc, #152]	; (800d42c <pbuf_realloc+0xfc>)
 800d394:	f240 12af 	movw	r2, #431	; 0x1af
 800d398:	4927      	ldr	r1, [pc, #156]	; (800d438 <pbuf_realloc+0x108>)
 800d39a:	4826      	ldr	r0, [pc, #152]	; (800d434 <pbuf_realloc+0x104>)
 800d39c:	f00a fa76 	bl	801788c <iprintf>
  while (rem_len > q->len) {
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	895b      	ldrh	r3, [r3, #10]
 800d3a4:	897a      	ldrh	r2, [r7, #10]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d8e1      	bhi.n	800d36e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	7b1b      	ldrb	r3, [r3, #12]
 800d3ae:	f003 030f 	and.w	r3, r3, #15
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d121      	bne.n	800d3fa <pbuf_realloc+0xca>
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	895b      	ldrh	r3, [r3, #10]
 800d3ba:	897a      	ldrh	r2, [r7, #10]
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d01c      	beq.n	800d3fa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	7b5b      	ldrb	r3, [r3, #13]
 800d3c4:	f003 0302 	and.w	r3, r3, #2
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d116      	bne.n	800d3fa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	685a      	ldr	r2, [r3, #4]
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	1ad3      	subs	r3, r2, r3
 800d3d4:	b29a      	uxth	r2, r3
 800d3d6:	897b      	ldrh	r3, [r7, #10]
 800d3d8:	4413      	add	r3, r2
 800d3da:	b29b      	uxth	r3, r3
 800d3dc:	4619      	mov	r1, r3
 800d3de:	68f8      	ldr	r0, [r7, #12]
 800d3e0:	f7fe ff64 	bl	800c2ac <mem_trim>
 800d3e4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d106      	bne.n	800d3fa <pbuf_realloc+0xca>
 800d3ec:	4b0f      	ldr	r3, [pc, #60]	; (800d42c <pbuf_realloc+0xfc>)
 800d3ee:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d3f2:	4912      	ldr	r1, [pc, #72]	; (800d43c <pbuf_realloc+0x10c>)
 800d3f4:	480f      	ldr	r0, [pc, #60]	; (800d434 <pbuf_realloc+0x104>)
 800d3f6:	f00a fa49 	bl	801788c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	897a      	ldrh	r2, [r7, #10]
 800d3fe:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	895a      	ldrh	r2, [r3, #10]
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d004      	beq.n	800d41a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4618      	mov	r0, r3
 800d416:	f000 f911 	bl	800d63c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2200      	movs	r2, #0
 800d41e:	601a      	str	r2, [r3, #0]
 800d420:	e000      	b.n	800d424 <pbuf_realloc+0xf4>
    return;
 800d422:	bf00      	nop

}
 800d424:	3710      	adds	r7, #16
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	bf00      	nop
 800d42c:	08019ce0 	.word	0x08019ce0
 800d430:	08019df8 	.word	0x08019df8
 800d434:	08019d40 	.word	0x08019d40
 800d438:	08019e10 	.word	0x08019e10
 800d43c:	08019e28 	.word	0x08019e28

0800d440 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b086      	sub	sp, #24
 800d444:	af00      	add	r7, sp, #0
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	60b9      	str	r1, [r7, #8]
 800d44a:	4613      	mov	r3, r2
 800d44c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d106      	bne.n	800d462 <pbuf_add_header_impl+0x22>
 800d454:	4b2b      	ldr	r3, [pc, #172]	; (800d504 <pbuf_add_header_impl+0xc4>)
 800d456:	f240 12df 	movw	r2, #479	; 0x1df
 800d45a:	492b      	ldr	r1, [pc, #172]	; (800d508 <pbuf_add_header_impl+0xc8>)
 800d45c:	482b      	ldr	r0, [pc, #172]	; (800d50c <pbuf_add_header_impl+0xcc>)
 800d45e:	f00a fa15 	bl	801788c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d003      	beq.n	800d470 <pbuf_add_header_impl+0x30>
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d46e:	d301      	bcc.n	800d474 <pbuf_add_header_impl+0x34>
    return 1;
 800d470:	2301      	movs	r3, #1
 800d472:	e043      	b.n	800d4fc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d101      	bne.n	800d47e <pbuf_add_header_impl+0x3e>
    return 0;
 800d47a:	2300      	movs	r3, #0
 800d47c:	e03e      	b.n	800d4fc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	891a      	ldrh	r2, [r3, #8]
 800d486:	8a7b      	ldrh	r3, [r7, #18]
 800d488:	4413      	add	r3, r2
 800d48a:	b29b      	uxth	r3, r3
 800d48c:	8a7a      	ldrh	r2, [r7, #18]
 800d48e:	429a      	cmp	r2, r3
 800d490:	d901      	bls.n	800d496 <pbuf_add_header_impl+0x56>
    return 1;
 800d492:	2301      	movs	r3, #1
 800d494:	e032      	b.n	800d4fc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	7b1b      	ldrb	r3, [r3, #12]
 800d49a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d49c:	8a3b      	ldrh	r3, [r7, #16]
 800d49e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d00c      	beq.n	800d4c0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	685a      	ldr	r2, [r3, #4]
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	425b      	negs	r3, r3
 800d4ae:	4413      	add	r3, r2
 800d4b0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	3310      	adds	r3, #16
 800d4b6:	697a      	ldr	r2, [r7, #20]
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d20d      	bcs.n	800d4d8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e01d      	b.n	800d4fc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d4c0:	79fb      	ldrb	r3, [r7, #7]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d006      	beq.n	800d4d4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	685a      	ldr	r2, [r3, #4]
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	425b      	negs	r3, r3
 800d4ce:	4413      	add	r3, r2
 800d4d0:	617b      	str	r3, [r7, #20]
 800d4d2:	e001      	b.n	800d4d8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	e011      	b.n	800d4fc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	697a      	ldr	r2, [r7, #20]
 800d4dc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	895a      	ldrh	r2, [r3, #10]
 800d4e2:	8a7b      	ldrh	r3, [r7, #18]
 800d4e4:	4413      	add	r3, r2
 800d4e6:	b29a      	uxth	r2, r3
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	891a      	ldrh	r2, [r3, #8]
 800d4f0:	8a7b      	ldrh	r3, [r7, #18]
 800d4f2:	4413      	add	r3, r2
 800d4f4:	b29a      	uxth	r2, r3
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	811a      	strh	r2, [r3, #8]


  return 0;
 800d4fa:	2300      	movs	r3, #0
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3718      	adds	r7, #24
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	08019ce0 	.word	0x08019ce0
 800d508:	08019e44 	.word	0x08019e44
 800d50c:	08019d40 	.word	0x08019d40

0800d510 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d51a:	2200      	movs	r2, #0
 800d51c:	6839      	ldr	r1, [r7, #0]
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f7ff ff8e 	bl	800d440 <pbuf_add_header_impl>
 800d524:	4603      	mov	r3, r0
}
 800d526:	4618      	mov	r0, r3
 800d528:	3708      	adds	r7, #8
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
	...

0800d530 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d106      	bne.n	800d54e <pbuf_remove_header+0x1e>
 800d540:	4b20      	ldr	r3, [pc, #128]	; (800d5c4 <pbuf_remove_header+0x94>)
 800d542:	f240 224b 	movw	r2, #587	; 0x24b
 800d546:	4920      	ldr	r1, [pc, #128]	; (800d5c8 <pbuf_remove_header+0x98>)
 800d548:	4820      	ldr	r0, [pc, #128]	; (800d5cc <pbuf_remove_header+0x9c>)
 800d54a:	f00a f99f 	bl	801788c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d003      	beq.n	800d55c <pbuf_remove_header+0x2c>
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d55a:	d301      	bcc.n	800d560 <pbuf_remove_header+0x30>
    return 1;
 800d55c:	2301      	movs	r3, #1
 800d55e:	e02c      	b.n	800d5ba <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d101      	bne.n	800d56a <pbuf_remove_header+0x3a>
    return 0;
 800d566:	2300      	movs	r3, #0
 800d568:	e027      	b.n	800d5ba <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	895b      	ldrh	r3, [r3, #10]
 800d572:	89fa      	ldrh	r2, [r7, #14]
 800d574:	429a      	cmp	r2, r3
 800d576:	d908      	bls.n	800d58a <pbuf_remove_header+0x5a>
 800d578:	4b12      	ldr	r3, [pc, #72]	; (800d5c4 <pbuf_remove_header+0x94>)
 800d57a:	f240 2255 	movw	r2, #597	; 0x255
 800d57e:	4914      	ldr	r1, [pc, #80]	; (800d5d0 <pbuf_remove_header+0xa0>)
 800d580:	4812      	ldr	r0, [pc, #72]	; (800d5cc <pbuf_remove_header+0x9c>)
 800d582:	f00a f983 	bl	801788c <iprintf>
 800d586:	2301      	movs	r3, #1
 800d588:	e017      	b.n	800d5ba <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	685a      	ldr	r2, [r3, #4]
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	441a      	add	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	895a      	ldrh	r2, [r3, #10]
 800d5a0:	89fb      	ldrh	r3, [r7, #14]
 800d5a2:	1ad3      	subs	r3, r2, r3
 800d5a4:	b29a      	uxth	r2, r3
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	891a      	ldrh	r2, [r3, #8]
 800d5ae:	89fb      	ldrh	r3, [r7, #14]
 800d5b0:	1ad3      	subs	r3, r2, r3
 800d5b2:	b29a      	uxth	r2, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d5b8:	2300      	movs	r3, #0
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3710      	adds	r7, #16
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	08019ce0 	.word	0x08019ce0
 800d5c8:	08019e44 	.word	0x08019e44
 800d5cc:	08019d40 	.word	0x08019d40
 800d5d0:	08019e50 	.word	0x08019e50

0800d5d4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b082      	sub	sp, #8
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	460b      	mov	r3, r1
 800d5de:	807b      	strh	r3, [r7, #2]
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d5e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	da08      	bge.n	800d5fe <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d5ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d5f0:	425b      	negs	r3, r3
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f7ff ff9b 	bl	800d530 <pbuf_remove_header>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	e007      	b.n	800d60e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d5fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d602:	787a      	ldrb	r2, [r7, #1]
 800d604:	4619      	mov	r1, r3
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f7ff ff1a 	bl	800d440 <pbuf_add_header_impl>
 800d60c:	4603      	mov	r3, r0
  }
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3708      	adds	r7, #8
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d616:	b580      	push	{r7, lr}
 800d618:	b082      	sub	sp, #8
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
 800d61e:	460b      	mov	r3, r1
 800d620:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d622:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d626:	2201      	movs	r2, #1
 800d628:	4619      	mov	r1, r3
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f7ff ffd2 	bl	800d5d4 <pbuf_header_impl>
 800d630:	4603      	mov	r3, r0
}
 800d632:	4618      	mov	r0, r3
 800d634:	3708      	adds	r7, #8
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
	...

0800d63c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b088      	sub	sp, #32
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d10b      	bne.n	800d662 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d106      	bne.n	800d65e <pbuf_free+0x22>
 800d650:	4b3b      	ldr	r3, [pc, #236]	; (800d740 <pbuf_free+0x104>)
 800d652:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d656:	493b      	ldr	r1, [pc, #236]	; (800d744 <pbuf_free+0x108>)
 800d658:	483b      	ldr	r0, [pc, #236]	; (800d748 <pbuf_free+0x10c>)
 800d65a:	f00a f917 	bl	801788c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d65e:	2300      	movs	r3, #0
 800d660:	e069      	b.n	800d736 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d662:	2300      	movs	r3, #0
 800d664:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d666:	e062      	b.n	800d72e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d668:	f009 fff2 	bl	8017650 <sys_arch_protect>
 800d66c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	7b9b      	ldrb	r3, [r3, #14]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d106      	bne.n	800d684 <pbuf_free+0x48>
 800d676:	4b32      	ldr	r3, [pc, #200]	; (800d740 <pbuf_free+0x104>)
 800d678:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d67c:	4933      	ldr	r1, [pc, #204]	; (800d74c <pbuf_free+0x110>)
 800d67e:	4832      	ldr	r0, [pc, #200]	; (800d748 <pbuf_free+0x10c>)
 800d680:	f00a f904 	bl	801788c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	7b9b      	ldrb	r3, [r3, #14]
 800d688:	3b01      	subs	r3, #1
 800d68a:	b2da      	uxtb	r2, r3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	739a      	strb	r2, [r3, #14]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	7b9b      	ldrb	r3, [r3, #14]
 800d694:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d696:	69b8      	ldr	r0, [r7, #24]
 800d698:	f009 ffe8 	bl	801766c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d69c:	7dfb      	ldrb	r3, [r7, #23]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d143      	bne.n	800d72a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	7b1b      	ldrb	r3, [r3, #12]
 800d6ac:	f003 030f 	and.w	r3, r3, #15
 800d6b0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	7b5b      	ldrb	r3, [r3, #13]
 800d6b6:	f003 0302 	and.w	r3, r3, #2
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d011      	beq.n	800d6e2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	691b      	ldr	r3, [r3, #16]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d106      	bne.n	800d6d8 <pbuf_free+0x9c>
 800d6ca:	4b1d      	ldr	r3, [pc, #116]	; (800d740 <pbuf_free+0x104>)
 800d6cc:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d6d0:	491f      	ldr	r1, [pc, #124]	; (800d750 <pbuf_free+0x114>)
 800d6d2:	481d      	ldr	r0, [pc, #116]	; (800d748 <pbuf_free+0x10c>)
 800d6d4:	f00a f8da 	bl	801788c <iprintf>
        pc->custom_free_function(p);
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	691b      	ldr	r3, [r3, #16]
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	4798      	blx	r3
 800d6e0:	e01d      	b.n	800d71e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d6e2:	7bfb      	ldrb	r3, [r7, #15]
 800d6e4:	2b02      	cmp	r3, #2
 800d6e6:	d104      	bne.n	800d6f2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d6e8:	6879      	ldr	r1, [r7, #4]
 800d6ea:	200c      	movs	r0, #12
 800d6ec:	f7ff f902 	bl	800c8f4 <memp_free>
 800d6f0:	e015      	b.n	800d71e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d6f2:	7bfb      	ldrb	r3, [r7, #15]
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d104      	bne.n	800d702 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d6f8:	6879      	ldr	r1, [r7, #4]
 800d6fa:	200b      	movs	r0, #11
 800d6fc:	f7ff f8fa 	bl	800c8f4 <memp_free>
 800d700:	e00d      	b.n	800d71e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d702:	7bfb      	ldrb	r3, [r7, #15]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d103      	bne.n	800d710 <pbuf_free+0xd4>
          mem_free(p);
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f7fe fd3f 	bl	800c18c <mem_free>
 800d70e:	e006      	b.n	800d71e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d710:	4b0b      	ldr	r3, [pc, #44]	; (800d740 <pbuf_free+0x104>)
 800d712:	f240 320f 	movw	r2, #783	; 0x30f
 800d716:	490f      	ldr	r1, [pc, #60]	; (800d754 <pbuf_free+0x118>)
 800d718:	480b      	ldr	r0, [pc, #44]	; (800d748 <pbuf_free+0x10c>)
 800d71a:	f00a f8b7 	bl	801788c <iprintf>
        }
      }
      count++;
 800d71e:	7ffb      	ldrb	r3, [r7, #31]
 800d720:	3301      	adds	r3, #1
 800d722:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	607b      	str	r3, [r7, #4]
 800d728:	e001      	b.n	800d72e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d72a:	2300      	movs	r3, #0
 800d72c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d199      	bne.n	800d668 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d734:	7ffb      	ldrb	r3, [r7, #31]
}
 800d736:	4618      	mov	r0, r3
 800d738:	3720      	adds	r7, #32
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	08019ce0 	.word	0x08019ce0
 800d744:	08019e44 	.word	0x08019e44
 800d748:	08019d40 	.word	0x08019d40
 800d74c:	08019e70 	.word	0x08019e70
 800d750:	08019e88 	.word	0x08019e88
 800d754:	08019eac 	.word	0x08019eac

0800d758 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d758:	b480      	push	{r7}
 800d75a:	b085      	sub	sp, #20
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d760:	2300      	movs	r3, #0
 800d762:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d764:	e005      	b.n	800d772 <pbuf_clen+0x1a>
    ++len;
 800d766:	89fb      	ldrh	r3, [r7, #14]
 800d768:	3301      	adds	r3, #1
 800d76a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d1f6      	bne.n	800d766 <pbuf_clen+0xe>
  }
  return len;
 800d778:	89fb      	ldrh	r3, [r7, #14]
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3714      	adds	r7, #20
 800d77e:	46bd      	mov	sp, r7
 800d780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d784:	4770      	bx	lr
	...

0800d788 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d016      	beq.n	800d7c4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d796:	f009 ff5b 	bl	8017650 <sys_arch_protect>
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	7b9b      	ldrb	r3, [r3, #14]
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	b2da      	uxtb	r2, r3
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	739a      	strb	r2, [r3, #14]
 800d7a8:	68f8      	ldr	r0, [r7, #12]
 800d7aa:	f009 ff5f 	bl	801766c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	7b9b      	ldrb	r3, [r3, #14]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d106      	bne.n	800d7c4 <pbuf_ref+0x3c>
 800d7b6:	4b05      	ldr	r3, [pc, #20]	; (800d7cc <pbuf_ref+0x44>)
 800d7b8:	f240 3242 	movw	r2, #834	; 0x342
 800d7bc:	4904      	ldr	r1, [pc, #16]	; (800d7d0 <pbuf_ref+0x48>)
 800d7be:	4805      	ldr	r0, [pc, #20]	; (800d7d4 <pbuf_ref+0x4c>)
 800d7c0:	f00a f864 	bl	801788c <iprintf>
  }
}
 800d7c4:	bf00      	nop
 800d7c6:	3710      	adds	r7, #16
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	08019ce0 	.word	0x08019ce0
 800d7d0:	08019ec0 	.word	0x08019ec0
 800d7d4:	08019d40 	.word	0x08019d40

0800d7d8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d002      	beq.n	800d7ee <pbuf_cat+0x16>
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d107      	bne.n	800d7fe <pbuf_cat+0x26>
 800d7ee:	4b20      	ldr	r3, [pc, #128]	; (800d870 <pbuf_cat+0x98>)
 800d7f0:	f240 3259 	movw	r2, #857	; 0x359
 800d7f4:	491f      	ldr	r1, [pc, #124]	; (800d874 <pbuf_cat+0x9c>)
 800d7f6:	4820      	ldr	r0, [pc, #128]	; (800d878 <pbuf_cat+0xa0>)
 800d7f8:	f00a f848 	bl	801788c <iprintf>
 800d7fc:	e034      	b.n	800d868 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	60fb      	str	r3, [r7, #12]
 800d802:	e00a      	b.n	800d81a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	891a      	ldrh	r2, [r3, #8]
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	891b      	ldrh	r3, [r3, #8]
 800d80c:	4413      	add	r3, r2
 800d80e:	b29a      	uxth	r2, r3
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	60fb      	str	r3, [r7, #12]
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d1f0      	bne.n	800d804 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	891a      	ldrh	r2, [r3, #8]
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	895b      	ldrh	r3, [r3, #10]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d006      	beq.n	800d83c <pbuf_cat+0x64>
 800d82e:	4b10      	ldr	r3, [pc, #64]	; (800d870 <pbuf_cat+0x98>)
 800d830:	f240 3262 	movw	r2, #866	; 0x362
 800d834:	4911      	ldr	r1, [pc, #68]	; (800d87c <pbuf_cat+0xa4>)
 800d836:	4810      	ldr	r0, [pc, #64]	; (800d878 <pbuf_cat+0xa0>)
 800d838:	f00a f828 	bl	801788c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d006      	beq.n	800d852 <pbuf_cat+0x7a>
 800d844:	4b0a      	ldr	r3, [pc, #40]	; (800d870 <pbuf_cat+0x98>)
 800d846:	f240 3263 	movw	r2, #867	; 0x363
 800d84a:	490d      	ldr	r1, [pc, #52]	; (800d880 <pbuf_cat+0xa8>)
 800d84c:	480a      	ldr	r0, [pc, #40]	; (800d878 <pbuf_cat+0xa0>)
 800d84e:	f00a f81d 	bl	801788c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	891a      	ldrh	r2, [r3, #8]
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	891b      	ldrh	r3, [r3, #8]
 800d85a:	4413      	add	r3, r2
 800d85c:	b29a      	uxth	r2, r3
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	683a      	ldr	r2, [r7, #0]
 800d866:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d868:	3710      	adds	r7, #16
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
 800d86e:	bf00      	nop
 800d870:	08019ce0 	.word	0x08019ce0
 800d874:	08019ed4 	.word	0x08019ed4
 800d878:	08019d40 	.word	0x08019d40
 800d87c:	08019f0c 	.word	0x08019f0c
 800d880:	08019f3c 	.word	0x08019f3c

0800d884 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b082      	sub	sp, #8
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d88e:	6839      	ldr	r1, [r7, #0]
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f7ff ffa1 	bl	800d7d8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d896:	6838      	ldr	r0, [r7, #0]
 800d898:	f7ff ff76 	bl	800d788 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d89c:	bf00      	nop
 800d89e:	3708      	adds	r7, #8
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b086      	sub	sp, #24
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	617b      	str	r3, [r7, #20]
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d008      	beq.n	800d8ce <pbuf_copy+0x2a>
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d005      	beq.n	800d8ce <pbuf_copy+0x2a>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	891a      	ldrh	r2, [r3, #8]
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	891b      	ldrh	r3, [r3, #8]
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d209      	bcs.n	800d8e2 <pbuf_copy+0x3e>
 800d8ce:	4b57      	ldr	r3, [pc, #348]	; (800da2c <pbuf_copy+0x188>)
 800d8d0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d8d4:	4956      	ldr	r1, [pc, #344]	; (800da30 <pbuf_copy+0x18c>)
 800d8d6:	4857      	ldr	r0, [pc, #348]	; (800da34 <pbuf_copy+0x190>)
 800d8d8:	f009 ffd8 	bl	801788c <iprintf>
 800d8dc:	f06f 030f 	mvn.w	r3, #15
 800d8e0:	e09f      	b.n	800da22 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	895b      	ldrh	r3, [r3, #10]
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	1ad2      	subs	r2, r2, r3
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	895b      	ldrh	r3, [r3, #10]
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	1acb      	subs	r3, r1, r3
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d306      	bcc.n	800d908 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	895b      	ldrh	r3, [r3, #10]
 800d8fe:	461a      	mov	r2, r3
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	1ad3      	subs	r3, r2, r3
 800d904:	60fb      	str	r3, [r7, #12]
 800d906:	e005      	b.n	800d914 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	895b      	ldrh	r3, [r3, #10]
 800d90c:	461a      	mov	r2, r3
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	1ad3      	subs	r3, r2, r3
 800d912:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	685a      	ldr	r2, [r3, #4]
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	18d0      	adds	r0, r2, r3
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	685a      	ldr	r2, [r3, #4]
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	4413      	add	r3, r2
 800d924:	68fa      	ldr	r2, [r7, #12]
 800d926:	4619      	mov	r1, r3
 800d928:	f00a f935 	bl	8017b96 <memcpy>
    offset_to += len;
 800d92c:	697a      	ldr	r2, [r7, #20]
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	4413      	add	r3, r2
 800d932:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d934:	693a      	ldr	r2, [r7, #16]
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	4413      	add	r3, r2
 800d93a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	895b      	ldrh	r3, [r3, #10]
 800d940:	461a      	mov	r2, r3
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	4293      	cmp	r3, r2
 800d946:	d906      	bls.n	800d956 <pbuf_copy+0xb2>
 800d948:	4b38      	ldr	r3, [pc, #224]	; (800da2c <pbuf_copy+0x188>)
 800d94a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d94e:	493a      	ldr	r1, [pc, #232]	; (800da38 <pbuf_copy+0x194>)
 800d950:	4838      	ldr	r0, [pc, #224]	; (800da34 <pbuf_copy+0x190>)
 800d952:	f009 ff9b 	bl	801788c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	895b      	ldrh	r3, [r3, #10]
 800d95a:	461a      	mov	r2, r3
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	4293      	cmp	r3, r2
 800d960:	d906      	bls.n	800d970 <pbuf_copy+0xcc>
 800d962:	4b32      	ldr	r3, [pc, #200]	; (800da2c <pbuf_copy+0x188>)
 800d964:	f240 32da 	movw	r2, #986	; 0x3da
 800d968:	4934      	ldr	r1, [pc, #208]	; (800da3c <pbuf_copy+0x198>)
 800d96a:	4832      	ldr	r0, [pc, #200]	; (800da34 <pbuf_copy+0x190>)
 800d96c:	f009 ff8e 	bl	801788c <iprintf>
    if (offset_from >= p_from->len) {
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	895b      	ldrh	r3, [r3, #10]
 800d974:	461a      	mov	r2, r3
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	4293      	cmp	r3, r2
 800d97a:	d304      	bcc.n	800d986 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d97c:	2300      	movs	r3, #0
 800d97e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	895b      	ldrh	r3, [r3, #10]
 800d98a:	461a      	mov	r2, r3
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	4293      	cmp	r3, r2
 800d990:	d114      	bne.n	800d9bc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d992:	2300      	movs	r3, #0
 800d994:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d10c      	bne.n	800d9bc <pbuf_copy+0x118>
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d009      	beq.n	800d9bc <pbuf_copy+0x118>
 800d9a8:	4b20      	ldr	r3, [pc, #128]	; (800da2c <pbuf_copy+0x188>)
 800d9aa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d9ae:	4924      	ldr	r1, [pc, #144]	; (800da40 <pbuf_copy+0x19c>)
 800d9b0:	4820      	ldr	r0, [pc, #128]	; (800da34 <pbuf_copy+0x190>)
 800d9b2:	f009 ff6b 	bl	801788c <iprintf>
 800d9b6:	f06f 030f 	mvn.w	r3, #15
 800d9ba:	e032      	b.n	800da22 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d013      	beq.n	800d9ea <pbuf_copy+0x146>
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	895a      	ldrh	r2, [r3, #10]
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	891b      	ldrh	r3, [r3, #8]
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	d10d      	bne.n	800d9ea <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d009      	beq.n	800d9ea <pbuf_copy+0x146>
 800d9d6:	4b15      	ldr	r3, [pc, #84]	; (800da2c <pbuf_copy+0x188>)
 800d9d8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d9dc:	4919      	ldr	r1, [pc, #100]	; (800da44 <pbuf_copy+0x1a0>)
 800d9de:	4815      	ldr	r0, [pc, #84]	; (800da34 <pbuf_copy+0x190>)
 800d9e0:	f009 ff54 	bl	801788c <iprintf>
 800d9e4:	f06f 0305 	mvn.w	r3, #5
 800d9e8:	e01b      	b.n	800da22 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d013      	beq.n	800da18 <pbuf_copy+0x174>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	895a      	ldrh	r2, [r3, #10]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	891b      	ldrh	r3, [r3, #8]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d10d      	bne.n	800da18 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d009      	beq.n	800da18 <pbuf_copy+0x174>
 800da04:	4b09      	ldr	r3, [pc, #36]	; (800da2c <pbuf_copy+0x188>)
 800da06:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800da0a:	490e      	ldr	r1, [pc, #56]	; (800da44 <pbuf_copy+0x1a0>)
 800da0c:	4809      	ldr	r0, [pc, #36]	; (800da34 <pbuf_copy+0x190>)
 800da0e:	f009 ff3d 	bl	801788c <iprintf>
 800da12:	f06f 0305 	mvn.w	r3, #5
 800da16:	e004      	b.n	800da22 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	f47f af61 	bne.w	800d8e2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800da20:	2300      	movs	r3, #0
}
 800da22:	4618      	mov	r0, r3
 800da24:	3718      	adds	r7, #24
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	08019ce0 	.word	0x08019ce0
 800da30:	08019f88 	.word	0x08019f88
 800da34:	08019d40 	.word	0x08019d40
 800da38:	08019fb8 	.word	0x08019fb8
 800da3c:	08019fd0 	.word	0x08019fd0
 800da40:	08019fec 	.word	0x08019fec
 800da44:	08019ffc 	.word	0x08019ffc

0800da48 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b088      	sub	sp, #32
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	60b9      	str	r1, [r7, #8]
 800da52:	4611      	mov	r1, r2
 800da54:	461a      	mov	r2, r3
 800da56:	460b      	mov	r3, r1
 800da58:	80fb      	strh	r3, [r7, #6]
 800da5a:	4613      	mov	r3, r2
 800da5c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800da5e:	2300      	movs	r3, #0
 800da60:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800da62:	2300      	movs	r3, #0
 800da64:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d108      	bne.n	800da7e <pbuf_copy_partial+0x36>
 800da6c:	4b2b      	ldr	r3, [pc, #172]	; (800db1c <pbuf_copy_partial+0xd4>)
 800da6e:	f240 420a 	movw	r2, #1034	; 0x40a
 800da72:	492b      	ldr	r1, [pc, #172]	; (800db20 <pbuf_copy_partial+0xd8>)
 800da74:	482b      	ldr	r0, [pc, #172]	; (800db24 <pbuf_copy_partial+0xdc>)
 800da76:	f009 ff09 	bl	801788c <iprintf>
 800da7a:	2300      	movs	r3, #0
 800da7c:	e04a      	b.n	800db14 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d108      	bne.n	800da96 <pbuf_copy_partial+0x4e>
 800da84:	4b25      	ldr	r3, [pc, #148]	; (800db1c <pbuf_copy_partial+0xd4>)
 800da86:	f240 420b 	movw	r2, #1035	; 0x40b
 800da8a:	4927      	ldr	r1, [pc, #156]	; (800db28 <pbuf_copy_partial+0xe0>)
 800da8c:	4825      	ldr	r0, [pc, #148]	; (800db24 <pbuf_copy_partial+0xdc>)
 800da8e:	f009 fefd 	bl	801788c <iprintf>
 800da92:	2300      	movs	r3, #0
 800da94:	e03e      	b.n	800db14 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	61fb      	str	r3, [r7, #28]
 800da9a:	e034      	b.n	800db06 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800da9c:	88bb      	ldrh	r3, [r7, #4]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d00a      	beq.n	800dab8 <pbuf_copy_partial+0x70>
 800daa2:	69fb      	ldr	r3, [r7, #28]
 800daa4:	895b      	ldrh	r3, [r3, #10]
 800daa6:	88ba      	ldrh	r2, [r7, #4]
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d305      	bcc.n	800dab8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	895b      	ldrh	r3, [r3, #10]
 800dab0:	88ba      	ldrh	r2, [r7, #4]
 800dab2:	1ad3      	subs	r3, r2, r3
 800dab4:	80bb      	strh	r3, [r7, #4]
 800dab6:	e023      	b.n	800db00 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800dab8:	69fb      	ldr	r3, [r7, #28]
 800daba:	895a      	ldrh	r2, [r3, #10]
 800dabc:	88bb      	ldrh	r3, [r7, #4]
 800dabe:	1ad3      	subs	r3, r2, r3
 800dac0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800dac2:	8b3a      	ldrh	r2, [r7, #24]
 800dac4:	88fb      	ldrh	r3, [r7, #6]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d901      	bls.n	800dace <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800daca:	88fb      	ldrh	r3, [r7, #6]
 800dacc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800dace:	8b7b      	ldrh	r3, [r7, #26]
 800dad0:	68ba      	ldr	r2, [r7, #8]
 800dad2:	18d0      	adds	r0, r2, r3
 800dad4:	69fb      	ldr	r3, [r7, #28]
 800dad6:	685a      	ldr	r2, [r3, #4]
 800dad8:	88bb      	ldrh	r3, [r7, #4]
 800dada:	4413      	add	r3, r2
 800dadc:	8b3a      	ldrh	r2, [r7, #24]
 800dade:	4619      	mov	r1, r3
 800dae0:	f00a f859 	bl	8017b96 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800dae4:	8afa      	ldrh	r2, [r7, #22]
 800dae6:	8b3b      	ldrh	r3, [r7, #24]
 800dae8:	4413      	add	r3, r2
 800daea:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800daec:	8b7a      	ldrh	r2, [r7, #26]
 800daee:	8b3b      	ldrh	r3, [r7, #24]
 800daf0:	4413      	add	r3, r2
 800daf2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800daf4:	88fa      	ldrh	r2, [r7, #6]
 800daf6:	8b3b      	ldrh	r3, [r7, #24]
 800daf8:	1ad3      	subs	r3, r2, r3
 800dafa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800dafc:	2300      	movs	r3, #0
 800dafe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800db00:	69fb      	ldr	r3, [r7, #28]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	61fb      	str	r3, [r7, #28]
 800db06:	88fb      	ldrh	r3, [r7, #6]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d002      	beq.n	800db12 <pbuf_copy_partial+0xca>
 800db0c:	69fb      	ldr	r3, [r7, #28]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d1c4      	bne.n	800da9c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800db12:	8afb      	ldrh	r3, [r7, #22]
}
 800db14:	4618      	mov	r0, r3
 800db16:	3720      	adds	r7, #32
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	08019ce0 	.word	0x08019ce0
 800db20:	0801a028 	.word	0x0801a028
 800db24:	08019d40 	.word	0x08019d40
 800db28:	0801a048 	.word	0x0801a048

0800db2c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b088      	sub	sp, #32
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	4613      	mov	r3, r2
 800db38:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800db3a:	88fb      	ldrh	r3, [r7, #6]
 800db3c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800db3e:	2300      	movs	r3, #0
 800db40:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d109      	bne.n	800db5c <pbuf_take+0x30>
 800db48:	4b3a      	ldr	r3, [pc, #232]	; (800dc34 <pbuf_take+0x108>)
 800db4a:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800db4e:	493a      	ldr	r1, [pc, #232]	; (800dc38 <pbuf_take+0x10c>)
 800db50:	483a      	ldr	r0, [pc, #232]	; (800dc3c <pbuf_take+0x110>)
 800db52:	f009 fe9b 	bl	801788c <iprintf>
 800db56:	f06f 030f 	mvn.w	r3, #15
 800db5a:	e067      	b.n	800dc2c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d109      	bne.n	800db76 <pbuf_take+0x4a>
 800db62:	4b34      	ldr	r3, [pc, #208]	; (800dc34 <pbuf_take+0x108>)
 800db64:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800db68:	4935      	ldr	r1, [pc, #212]	; (800dc40 <pbuf_take+0x114>)
 800db6a:	4834      	ldr	r0, [pc, #208]	; (800dc3c <pbuf_take+0x110>)
 800db6c:	f009 fe8e 	bl	801788c <iprintf>
 800db70:	f06f 030f 	mvn.w	r3, #15
 800db74:	e05a      	b.n	800dc2c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	891b      	ldrh	r3, [r3, #8]
 800db7a:	88fa      	ldrh	r2, [r7, #6]
 800db7c:	429a      	cmp	r2, r3
 800db7e:	d909      	bls.n	800db94 <pbuf_take+0x68>
 800db80:	4b2c      	ldr	r3, [pc, #176]	; (800dc34 <pbuf_take+0x108>)
 800db82:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800db86:	492f      	ldr	r1, [pc, #188]	; (800dc44 <pbuf_take+0x118>)
 800db88:	482c      	ldr	r0, [pc, #176]	; (800dc3c <pbuf_take+0x110>)
 800db8a:	f009 fe7f 	bl	801788c <iprintf>
 800db8e:	f04f 33ff 	mov.w	r3, #4294967295
 800db92:	e04b      	b.n	800dc2c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d007      	beq.n	800dbaa <pbuf_take+0x7e>
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d004      	beq.n	800dbaa <pbuf_take+0x7e>
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	891b      	ldrh	r3, [r3, #8]
 800dba4:	88fa      	ldrh	r2, [r7, #6]
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d902      	bls.n	800dbb0 <pbuf_take+0x84>
    return ERR_ARG;
 800dbaa:	f06f 030f 	mvn.w	r3, #15
 800dbae:	e03d      	b.n	800dc2c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	61fb      	str	r3, [r7, #28]
 800dbb4:	e028      	b.n	800dc08 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800dbb6:	69fb      	ldr	r3, [r7, #28]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d106      	bne.n	800dbca <pbuf_take+0x9e>
 800dbbc:	4b1d      	ldr	r3, [pc, #116]	; (800dc34 <pbuf_take+0x108>)
 800dbbe:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800dbc2:	4921      	ldr	r1, [pc, #132]	; (800dc48 <pbuf_take+0x11c>)
 800dbc4:	481d      	ldr	r0, [pc, #116]	; (800dc3c <pbuf_take+0x110>)
 800dbc6:	f009 fe61 	bl	801788c <iprintf>
    buf_copy_len = total_copy_len;
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800dbce:	69fb      	ldr	r3, [r7, #28]
 800dbd0:	895b      	ldrh	r3, [r3, #10]
 800dbd2:	461a      	mov	r2, r3
 800dbd4:	69bb      	ldr	r3, [r7, #24]
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d902      	bls.n	800dbe0 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800dbda:	69fb      	ldr	r3, [r7, #28]
 800dbdc:	895b      	ldrh	r3, [r3, #10]
 800dbde:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800dbe0:	69fb      	ldr	r3, [r7, #28]
 800dbe2:	6858      	ldr	r0, [r3, #4]
 800dbe4:	68ba      	ldr	r2, [r7, #8]
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	4413      	add	r3, r2
 800dbea:	69ba      	ldr	r2, [r7, #24]
 800dbec:	4619      	mov	r1, r3
 800dbee:	f009 ffd2 	bl	8017b96 <memcpy>
    total_copy_len -= buf_copy_len;
 800dbf2:	697a      	ldr	r2, [r7, #20]
 800dbf4:	69bb      	ldr	r3, [r7, #24]
 800dbf6:	1ad3      	subs	r3, r2, r3
 800dbf8:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800dbfa:	693a      	ldr	r2, [r7, #16]
 800dbfc:	69bb      	ldr	r3, [r7, #24]
 800dbfe:	4413      	add	r3, r2
 800dc00:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800dc02:	69fb      	ldr	r3, [r7, #28]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	61fb      	str	r3, [r7, #28]
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d1d3      	bne.n	800dbb6 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d103      	bne.n	800dc1c <pbuf_take+0xf0>
 800dc14:	88fb      	ldrh	r3, [r7, #6]
 800dc16:	693a      	ldr	r2, [r7, #16]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d006      	beq.n	800dc2a <pbuf_take+0xfe>
 800dc1c:	4b05      	ldr	r3, [pc, #20]	; (800dc34 <pbuf_take+0x108>)
 800dc1e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800dc22:	490a      	ldr	r1, [pc, #40]	; (800dc4c <pbuf_take+0x120>)
 800dc24:	4805      	ldr	r0, [pc, #20]	; (800dc3c <pbuf_take+0x110>)
 800dc26:	f009 fe31 	bl	801788c <iprintf>
  return ERR_OK;
 800dc2a:	2300      	movs	r3, #0
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3720      	adds	r7, #32
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}
 800dc34:	08019ce0 	.word	0x08019ce0
 800dc38:	0801a0b8 	.word	0x0801a0b8
 800dc3c:	08019d40 	.word	0x08019d40
 800dc40:	0801a0d0 	.word	0x0801a0d0
 800dc44:	0801a0ec 	.word	0x0801a0ec
 800dc48:	0801a10c 	.word	0x0801a10c
 800dc4c:	0801a124 	.word	0x0801a124

0800dc50 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	4603      	mov	r3, r0
 800dc58:	603a      	str	r2, [r7, #0]
 800dc5a:	71fb      	strb	r3, [r7, #7]
 800dc5c:	460b      	mov	r3, r1
 800dc5e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	8919      	ldrh	r1, [r3, #8]
 800dc64:	88ba      	ldrh	r2, [r7, #4]
 800dc66:	79fb      	ldrb	r3, [r7, #7]
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7ff fa03 	bl	800d074 <pbuf_alloc>
 800dc6e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d101      	bne.n	800dc7a <pbuf_clone+0x2a>
    return NULL;
 800dc76:	2300      	movs	r3, #0
 800dc78:	e011      	b.n	800dc9e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800dc7a:	6839      	ldr	r1, [r7, #0]
 800dc7c:	68f8      	ldr	r0, [r7, #12]
 800dc7e:	f7ff fe11 	bl	800d8a4 <pbuf_copy>
 800dc82:	4603      	mov	r3, r0
 800dc84:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800dc86:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d006      	beq.n	800dc9c <pbuf_clone+0x4c>
 800dc8e:	4b06      	ldr	r3, [pc, #24]	; (800dca8 <pbuf_clone+0x58>)
 800dc90:	f240 5224 	movw	r2, #1316	; 0x524
 800dc94:	4905      	ldr	r1, [pc, #20]	; (800dcac <pbuf_clone+0x5c>)
 800dc96:	4806      	ldr	r0, [pc, #24]	; (800dcb0 <pbuf_clone+0x60>)
 800dc98:	f009 fdf8 	bl	801788c <iprintf>
  return q;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3710      	adds	r7, #16
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	08019ce0 	.word	0x08019ce0
 800dcac:	0801a154 	.word	0x0801a154
 800dcb0:	08019d40 	.word	0x08019d40

0800dcb4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dcb8:	f009 fce8 	bl	801768c <rand>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800dcca:	b29a      	uxth	r2, r3
 800dccc:	4b01      	ldr	r3, [pc, #4]	; (800dcd4 <tcp_init+0x20>)
 800dcce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800dcd0:	bf00      	nop
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	20000024 	.word	0x20000024

0800dcd8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b082      	sub	sp, #8
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	7d1b      	ldrb	r3, [r3, #20]
 800dce4:	2b01      	cmp	r3, #1
 800dce6:	d105      	bne.n	800dcf4 <tcp_free+0x1c>
 800dce8:	4b06      	ldr	r3, [pc, #24]	; (800dd04 <tcp_free+0x2c>)
 800dcea:	22d4      	movs	r2, #212	; 0xd4
 800dcec:	4906      	ldr	r1, [pc, #24]	; (800dd08 <tcp_free+0x30>)
 800dcee:	4807      	ldr	r0, [pc, #28]	; (800dd0c <tcp_free+0x34>)
 800dcf0:	f009 fdcc 	bl	801788c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800dcf4:	6879      	ldr	r1, [r7, #4]
 800dcf6:	2001      	movs	r0, #1
 800dcf8:	f7fe fdfc 	bl	800c8f4 <memp_free>
}
 800dcfc:	bf00      	nop
 800dcfe:	3708      	adds	r7, #8
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	0801a1e0 	.word	0x0801a1e0
 800dd08:	0801a210 	.word	0x0801a210
 800dd0c:	0801a224 	.word	0x0801a224

0800dd10 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	7d1b      	ldrb	r3, [r3, #20]
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d105      	bne.n	800dd2c <tcp_free_listen+0x1c>
 800dd20:	4b06      	ldr	r3, [pc, #24]	; (800dd3c <tcp_free_listen+0x2c>)
 800dd22:	22df      	movs	r2, #223	; 0xdf
 800dd24:	4906      	ldr	r1, [pc, #24]	; (800dd40 <tcp_free_listen+0x30>)
 800dd26:	4807      	ldr	r0, [pc, #28]	; (800dd44 <tcp_free_listen+0x34>)
 800dd28:	f009 fdb0 	bl	801788c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800dd2c:	6879      	ldr	r1, [r7, #4]
 800dd2e:	2002      	movs	r0, #2
 800dd30:	f7fe fde0 	bl	800c8f4 <memp_free>
}
 800dd34:	bf00      	nop
 800dd36:	3708      	adds	r7, #8
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	0801a1e0 	.word	0x0801a1e0
 800dd40:	0801a24c 	.word	0x0801a24c
 800dd44:	0801a224 	.word	0x0801a224

0800dd48 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800dd4c:	f001 f9be 	bl	800f0cc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800dd50:	4b07      	ldr	r3, [pc, #28]	; (800dd70 <tcp_tmr+0x28>)
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	3301      	adds	r3, #1
 800dd56:	b2da      	uxtb	r2, r3
 800dd58:	4b05      	ldr	r3, [pc, #20]	; (800dd70 <tcp_tmr+0x28>)
 800dd5a:	701a      	strb	r2, [r3, #0]
 800dd5c:	4b04      	ldr	r3, [pc, #16]	; (800dd70 <tcp_tmr+0x28>)
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	f003 0301 	and.w	r3, r3, #1
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d001      	beq.n	800dd6c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800dd68:	f000 fe70 	bl	800ea4c <tcp_slowtmr>
  }
}
 800dd6c:	bf00      	nop
 800dd6e:	bd80      	pop	{r7, pc}
 800dd70:	2000d651 	.word	0x2000d651

0800dd74 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d105      	bne.n	800dd90 <tcp_remove_listener+0x1c>
 800dd84:	4b0d      	ldr	r3, [pc, #52]	; (800ddbc <tcp_remove_listener+0x48>)
 800dd86:	22ff      	movs	r2, #255	; 0xff
 800dd88:	490d      	ldr	r1, [pc, #52]	; (800ddc0 <tcp_remove_listener+0x4c>)
 800dd8a:	480e      	ldr	r0, [pc, #56]	; (800ddc4 <tcp_remove_listener+0x50>)
 800dd8c:	f009 fd7e 	bl	801788c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	60fb      	str	r3, [r7, #12]
 800dd94:	e00a      	b.n	800ddac <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd9a:	683a      	ldr	r2, [r7, #0]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d102      	bne.n	800dda6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2200      	movs	r2, #0
 800dda4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	68db      	ldr	r3, [r3, #12]
 800ddaa:	60fb      	str	r3, [r7, #12]
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d1f1      	bne.n	800dd96 <tcp_remove_listener+0x22>
    }
  }
}
 800ddb2:	bf00      	nop
 800ddb4:	bf00      	nop
 800ddb6:	3710      	adds	r7, #16
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	0801a1e0 	.word	0x0801a1e0
 800ddc0:	0801a268 	.word	0x0801a268
 800ddc4:	0801a224 	.word	0x0801a224

0800ddc8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b084      	sub	sp, #16
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d106      	bne.n	800dde4 <tcp_listen_closed+0x1c>
 800ddd6:	4b14      	ldr	r3, [pc, #80]	; (800de28 <tcp_listen_closed+0x60>)
 800ddd8:	f240 1211 	movw	r2, #273	; 0x111
 800dddc:	4913      	ldr	r1, [pc, #76]	; (800de2c <tcp_listen_closed+0x64>)
 800ddde:	4814      	ldr	r0, [pc, #80]	; (800de30 <tcp_listen_closed+0x68>)
 800dde0:	f009 fd54 	bl	801788c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	7d1b      	ldrb	r3, [r3, #20]
 800dde8:	2b01      	cmp	r3, #1
 800ddea:	d006      	beq.n	800ddfa <tcp_listen_closed+0x32>
 800ddec:	4b0e      	ldr	r3, [pc, #56]	; (800de28 <tcp_listen_closed+0x60>)
 800ddee:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ddf2:	4910      	ldr	r1, [pc, #64]	; (800de34 <tcp_listen_closed+0x6c>)
 800ddf4:	480e      	ldr	r0, [pc, #56]	; (800de30 <tcp_listen_closed+0x68>)
 800ddf6:	f009 fd49 	bl	801788c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	60fb      	str	r3, [r7, #12]
 800ddfe:	e00b      	b.n	800de18 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800de00:	4a0d      	ldr	r2, [pc, #52]	; (800de38 <tcp_listen_closed+0x70>)
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	6879      	ldr	r1, [r7, #4]
 800de0c:	4618      	mov	r0, r3
 800de0e:	f7ff ffb1 	bl	800dd74 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	3301      	adds	r3, #1
 800de16:	60fb      	str	r3, [r7, #12]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2b03      	cmp	r3, #3
 800de1c:	d9f0      	bls.n	800de00 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800de1e:	bf00      	nop
 800de20:	bf00      	nop
 800de22:	3710      	adds	r7, #16
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	0801a1e0 	.word	0x0801a1e0
 800de2c:	0801a290 	.word	0x0801a290
 800de30:	0801a224 	.word	0x0801a224
 800de34:	0801a29c 	.word	0x0801a29c
 800de38:	0801c270 	.word	0x0801c270

0800de3c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800de3c:	b5b0      	push	{r4, r5, r7, lr}
 800de3e:	b088      	sub	sp, #32
 800de40:	af04      	add	r7, sp, #16
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	460b      	mov	r3, r1
 800de46:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d106      	bne.n	800de5c <tcp_close_shutdown+0x20>
 800de4e:	4b63      	ldr	r3, [pc, #396]	; (800dfdc <tcp_close_shutdown+0x1a0>)
 800de50:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800de54:	4962      	ldr	r1, [pc, #392]	; (800dfe0 <tcp_close_shutdown+0x1a4>)
 800de56:	4863      	ldr	r0, [pc, #396]	; (800dfe4 <tcp_close_shutdown+0x1a8>)
 800de58:	f009 fd18 	bl	801788c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800de5c:	78fb      	ldrb	r3, [r7, #3]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d066      	beq.n	800df30 <tcp_close_shutdown+0xf4>
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	7d1b      	ldrb	r3, [r3, #20]
 800de66:	2b04      	cmp	r3, #4
 800de68:	d003      	beq.n	800de72 <tcp_close_shutdown+0x36>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	7d1b      	ldrb	r3, [r3, #20]
 800de6e:	2b07      	cmp	r3, #7
 800de70:	d15e      	bne.n	800df30 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de76:	2b00      	cmp	r3, #0
 800de78:	d104      	bne.n	800de84 <tcp_close_shutdown+0x48>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de7e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800de82:	d055      	beq.n	800df30 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	8b5b      	ldrh	r3, [r3, #26]
 800de88:	f003 0310 	and.w	r3, r3, #16
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d106      	bne.n	800de9e <tcp_close_shutdown+0x62>
 800de90:	4b52      	ldr	r3, [pc, #328]	; (800dfdc <tcp_close_shutdown+0x1a0>)
 800de92:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800de96:	4954      	ldr	r1, [pc, #336]	; (800dfe8 <tcp_close_shutdown+0x1ac>)
 800de98:	4852      	ldr	r0, [pc, #328]	; (800dfe4 <tcp_close_shutdown+0x1a8>)
 800de9a:	f009 fcf7 	bl	801788c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800dea6:	687d      	ldr	r5, [r7, #4]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	3304      	adds	r3, #4
 800deac:	687a      	ldr	r2, [r7, #4]
 800deae:	8ad2      	ldrh	r2, [r2, #22]
 800deb0:	6879      	ldr	r1, [r7, #4]
 800deb2:	8b09      	ldrh	r1, [r1, #24]
 800deb4:	9102      	str	r1, [sp, #8]
 800deb6:	9201      	str	r2, [sp, #4]
 800deb8:	9300      	str	r3, [sp, #0]
 800deba:	462b      	mov	r3, r5
 800debc:	4622      	mov	r2, r4
 800debe:	4601      	mov	r1, r0
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f005 fed3 	bl	8013c6c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f001 fcb0 	bl	800f82c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800decc:	4b47      	ldr	r3, [pc, #284]	; (800dfec <tcp_close_shutdown+0x1b0>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	687a      	ldr	r2, [r7, #4]
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d105      	bne.n	800dee2 <tcp_close_shutdown+0xa6>
 800ded6:	4b45      	ldr	r3, [pc, #276]	; (800dfec <tcp_close_shutdown+0x1b0>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	4a43      	ldr	r2, [pc, #268]	; (800dfec <tcp_close_shutdown+0x1b0>)
 800dede:	6013      	str	r3, [r2, #0]
 800dee0:	e013      	b.n	800df0a <tcp_close_shutdown+0xce>
 800dee2:	4b42      	ldr	r3, [pc, #264]	; (800dfec <tcp_close_shutdown+0x1b0>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	60fb      	str	r3, [r7, #12]
 800dee8:	e00c      	b.n	800df04 <tcp_close_shutdown+0xc8>
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	68db      	ldr	r3, [r3, #12]
 800deee:	687a      	ldr	r2, [r7, #4]
 800def0:	429a      	cmp	r2, r3
 800def2:	d104      	bne.n	800defe <tcp_close_shutdown+0xc2>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	68da      	ldr	r2, [r3, #12]
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	60da      	str	r2, [r3, #12]
 800defc:	e005      	b.n	800df0a <tcp_close_shutdown+0xce>
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	60fb      	str	r3, [r7, #12]
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d1ef      	bne.n	800deea <tcp_close_shutdown+0xae>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2200      	movs	r2, #0
 800df0e:	60da      	str	r2, [r3, #12]
 800df10:	4b37      	ldr	r3, [pc, #220]	; (800dff0 <tcp_close_shutdown+0x1b4>)
 800df12:	2201      	movs	r2, #1
 800df14:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800df16:	4b37      	ldr	r3, [pc, #220]	; (800dff4 <tcp_close_shutdown+0x1b8>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	687a      	ldr	r2, [r7, #4]
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d102      	bne.n	800df26 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800df20:	f004 f948 	bl	80121b4 <tcp_trigger_input_pcb_close>
 800df24:	e002      	b.n	800df2c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f7ff fed6 	bl	800dcd8 <tcp_free>
      }
      return ERR_OK;
 800df2c:	2300      	movs	r3, #0
 800df2e:	e050      	b.n	800dfd2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	7d1b      	ldrb	r3, [r3, #20]
 800df34:	2b02      	cmp	r3, #2
 800df36:	d03b      	beq.n	800dfb0 <tcp_close_shutdown+0x174>
 800df38:	2b02      	cmp	r3, #2
 800df3a:	dc44      	bgt.n	800dfc6 <tcp_close_shutdown+0x18a>
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d002      	beq.n	800df46 <tcp_close_shutdown+0x10a>
 800df40:	2b01      	cmp	r3, #1
 800df42:	d02a      	beq.n	800df9a <tcp_close_shutdown+0x15e>
 800df44:	e03f      	b.n	800dfc6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	8adb      	ldrh	r3, [r3, #22]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d021      	beq.n	800df92 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800df4e:	4b2a      	ldr	r3, [pc, #168]	; (800dff8 <tcp_close_shutdown+0x1bc>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	429a      	cmp	r2, r3
 800df56:	d105      	bne.n	800df64 <tcp_close_shutdown+0x128>
 800df58:	4b27      	ldr	r3, [pc, #156]	; (800dff8 <tcp_close_shutdown+0x1bc>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	68db      	ldr	r3, [r3, #12]
 800df5e:	4a26      	ldr	r2, [pc, #152]	; (800dff8 <tcp_close_shutdown+0x1bc>)
 800df60:	6013      	str	r3, [r2, #0]
 800df62:	e013      	b.n	800df8c <tcp_close_shutdown+0x150>
 800df64:	4b24      	ldr	r3, [pc, #144]	; (800dff8 <tcp_close_shutdown+0x1bc>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	60bb      	str	r3, [r7, #8]
 800df6a:	e00c      	b.n	800df86 <tcp_close_shutdown+0x14a>
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	68db      	ldr	r3, [r3, #12]
 800df70:	687a      	ldr	r2, [r7, #4]
 800df72:	429a      	cmp	r2, r3
 800df74:	d104      	bne.n	800df80 <tcp_close_shutdown+0x144>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	68da      	ldr	r2, [r3, #12]
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	60da      	str	r2, [r3, #12]
 800df7e:	e005      	b.n	800df8c <tcp_close_shutdown+0x150>
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	60bb      	str	r3, [r7, #8]
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d1ef      	bne.n	800df6c <tcp_close_shutdown+0x130>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2200      	movs	r2, #0
 800df90:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f7ff fea0 	bl	800dcd8 <tcp_free>
      break;
 800df98:	e01a      	b.n	800dfd0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f7ff ff14 	bl	800ddc8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800dfa0:	6879      	ldr	r1, [r7, #4]
 800dfa2:	4816      	ldr	r0, [pc, #88]	; (800dffc <tcp_close_shutdown+0x1c0>)
 800dfa4:	f001 fc92 	bl	800f8cc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f7ff feb1 	bl	800dd10 <tcp_free_listen>
      break;
 800dfae:	e00f      	b.n	800dfd0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dfb0:	6879      	ldr	r1, [r7, #4]
 800dfb2:	480e      	ldr	r0, [pc, #56]	; (800dfec <tcp_close_shutdown+0x1b0>)
 800dfb4:	f001 fc8a 	bl	800f8cc <tcp_pcb_remove>
 800dfb8:	4b0d      	ldr	r3, [pc, #52]	; (800dff0 <tcp_close_shutdown+0x1b4>)
 800dfba:	2201      	movs	r2, #1
 800dfbc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f7ff fe8a 	bl	800dcd8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800dfc4:	e004      	b.n	800dfd0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 f81a 	bl	800e000 <tcp_close_shutdown_fin>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	e000      	b.n	800dfd2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800dfd0:	2300      	movs	r3, #0
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3710      	adds	r7, #16
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bdb0      	pop	{r4, r5, r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	0801a1e0 	.word	0x0801a1e0
 800dfe0:	0801a2b4 	.word	0x0801a2b4
 800dfe4:	0801a224 	.word	0x0801a224
 800dfe8:	0801a2d4 	.word	0x0801a2d4
 800dfec:	2000d648 	.word	0x2000d648
 800dff0:	2000d650 	.word	0x2000d650
 800dff4:	2000d688 	.word	0x2000d688
 800dff8:	2000d640 	.word	0x2000d640
 800dffc:	2000d644 	.word	0x2000d644

0800e000 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d106      	bne.n	800e01c <tcp_close_shutdown_fin+0x1c>
 800e00e:	4b2e      	ldr	r3, [pc, #184]	; (800e0c8 <tcp_close_shutdown_fin+0xc8>)
 800e010:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e014:	492d      	ldr	r1, [pc, #180]	; (800e0cc <tcp_close_shutdown_fin+0xcc>)
 800e016:	482e      	ldr	r0, [pc, #184]	; (800e0d0 <tcp_close_shutdown_fin+0xd0>)
 800e018:	f009 fc38 	bl	801788c <iprintf>

  switch (pcb->state) {
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	7d1b      	ldrb	r3, [r3, #20]
 800e020:	2b07      	cmp	r3, #7
 800e022:	d020      	beq.n	800e066 <tcp_close_shutdown_fin+0x66>
 800e024:	2b07      	cmp	r3, #7
 800e026:	dc2b      	bgt.n	800e080 <tcp_close_shutdown_fin+0x80>
 800e028:	2b03      	cmp	r3, #3
 800e02a:	d002      	beq.n	800e032 <tcp_close_shutdown_fin+0x32>
 800e02c:	2b04      	cmp	r3, #4
 800e02e:	d00d      	beq.n	800e04c <tcp_close_shutdown_fin+0x4c>
 800e030:	e026      	b.n	800e080 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f004 ff28 	bl	8012e88 <tcp_send_fin>
 800e038:	4603      	mov	r3, r0
 800e03a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e03c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d11f      	bne.n	800e084 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2205      	movs	r2, #5
 800e048:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e04a:	e01b      	b.n	800e084 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f004 ff1b 	bl	8012e88 <tcp_send_fin>
 800e052:	4603      	mov	r3, r0
 800e054:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d114      	bne.n	800e088 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2205      	movs	r2, #5
 800e062:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e064:	e010      	b.n	800e088 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f004 ff0e 	bl	8012e88 <tcp_send_fin>
 800e06c:	4603      	mov	r3, r0
 800e06e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d109      	bne.n	800e08c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2209      	movs	r2, #9
 800e07c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e07e:	e005      	b.n	800e08c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e080:	2300      	movs	r3, #0
 800e082:	e01c      	b.n	800e0be <tcp_close_shutdown_fin+0xbe>
      break;
 800e084:	bf00      	nop
 800e086:	e002      	b.n	800e08e <tcp_close_shutdown_fin+0x8e>
      break;
 800e088:	bf00      	nop
 800e08a:	e000      	b.n	800e08e <tcp_close_shutdown_fin+0x8e>
      break;
 800e08c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e08e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d103      	bne.n	800e09e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f005 f834 	bl	8013104 <tcp_output>
 800e09c:	e00d      	b.n	800e0ba <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e09e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0a6:	d108      	bne.n	800e0ba <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	8b5b      	ldrh	r3, [r3, #26]
 800e0ac:	f043 0308 	orr.w	r3, r3, #8
 800e0b0:	b29a      	uxth	r2, r3
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	e001      	b.n	800e0be <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e0ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3710      	adds	r7, #16
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
 800e0c6:	bf00      	nop
 800e0c8:	0801a1e0 	.word	0x0801a1e0
 800e0cc:	0801a290 	.word	0x0801a290
 800e0d0:	0801a224 	.word	0x0801a224

0800e0d4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b082      	sub	sp, #8
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d109      	bne.n	800e0f6 <tcp_close+0x22>
 800e0e2:	4b0f      	ldr	r3, [pc, #60]	; (800e120 <tcp_close+0x4c>)
 800e0e4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e0e8:	490e      	ldr	r1, [pc, #56]	; (800e124 <tcp_close+0x50>)
 800e0ea:	480f      	ldr	r0, [pc, #60]	; (800e128 <tcp_close+0x54>)
 800e0ec:	f009 fbce 	bl	801788c <iprintf>
 800e0f0:	f06f 030f 	mvn.w	r3, #15
 800e0f4:	e00f      	b.n	800e116 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	7d1b      	ldrb	r3, [r3, #20]
 800e0fa:	2b01      	cmp	r3, #1
 800e0fc:	d006      	beq.n	800e10c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	8b5b      	ldrh	r3, [r3, #26]
 800e102:	f043 0310 	orr.w	r3, r3, #16
 800e106:	b29a      	uxth	r2, r3
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e10c:	2101      	movs	r1, #1
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f7ff fe94 	bl	800de3c <tcp_close_shutdown>
 800e114:	4603      	mov	r3, r0
}
 800e116:	4618      	mov	r0, r3
 800e118:	3708      	adds	r7, #8
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	0801a1e0 	.word	0x0801a1e0
 800e124:	0801a2f0 	.word	0x0801a2f0
 800e128:	0801a224 	.word	0x0801a224

0800e12c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b084      	sub	sp, #16
 800e130:	af00      	add	r7, sp, #0
 800e132:	60f8      	str	r0, [r7, #12]
 800e134:	60b9      	str	r1, [r7, #8]
 800e136:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d109      	bne.n	800e152 <tcp_shutdown+0x26>
 800e13e:	4b26      	ldr	r3, [pc, #152]	; (800e1d8 <tcp_shutdown+0xac>)
 800e140:	f240 2207 	movw	r2, #519	; 0x207
 800e144:	4925      	ldr	r1, [pc, #148]	; (800e1dc <tcp_shutdown+0xb0>)
 800e146:	4826      	ldr	r0, [pc, #152]	; (800e1e0 <tcp_shutdown+0xb4>)
 800e148:	f009 fba0 	bl	801788c <iprintf>
 800e14c:	f06f 030f 	mvn.w	r3, #15
 800e150:	e03d      	b.n	800e1ce <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	7d1b      	ldrb	r3, [r3, #20]
 800e156:	2b01      	cmp	r3, #1
 800e158:	d102      	bne.n	800e160 <tcp_shutdown+0x34>
    return ERR_CONN;
 800e15a:	f06f 030a 	mvn.w	r3, #10
 800e15e:	e036      	b.n	800e1ce <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d01b      	beq.n	800e19e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	8b5b      	ldrh	r3, [r3, #26]
 800e16a:	f043 0310 	orr.w	r3, r3, #16
 800e16e:	b29a      	uxth	r2, r3
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d005      	beq.n	800e186 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800e17a:	2101      	movs	r1, #1
 800e17c:	68f8      	ldr	r0, [r7, #12]
 800e17e:	f7ff fe5d 	bl	800de3c <tcp_close_shutdown>
 800e182:	4603      	mov	r3, r0
 800e184:	e023      	b.n	800e1ce <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d007      	beq.n	800e19e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e192:	4618      	mov	r0, r3
 800e194:	f7ff fa52 	bl	800d63c <pbuf_free>
      pcb->refused_data = NULL;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	2200      	movs	r2, #0
 800e19c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d013      	beq.n	800e1cc <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	7d1b      	ldrb	r3, [r3, #20]
 800e1a8:	2b04      	cmp	r3, #4
 800e1aa:	dc02      	bgt.n	800e1b2 <tcp_shutdown+0x86>
 800e1ac:	2b03      	cmp	r3, #3
 800e1ae:	da02      	bge.n	800e1b6 <tcp_shutdown+0x8a>
 800e1b0:	e009      	b.n	800e1c6 <tcp_shutdown+0x9a>
 800e1b2:	2b07      	cmp	r3, #7
 800e1b4:	d107      	bne.n	800e1c6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	b2db      	uxtb	r3, r3
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	68f8      	ldr	r0, [r7, #12]
 800e1be:	f7ff fe3d 	bl	800de3c <tcp_close_shutdown>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	e003      	b.n	800e1ce <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800e1c6:	f06f 030a 	mvn.w	r3, #10
 800e1ca:	e000      	b.n	800e1ce <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800e1cc:	2300      	movs	r3, #0
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3710      	adds	r7, #16
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	0801a1e0 	.word	0x0801a1e0
 800e1dc:	0801a308 	.word	0x0801a308
 800e1e0:	0801a224 	.word	0x0801a224

0800e1e4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b08e      	sub	sp, #56	; 0x38
 800e1e8:	af04      	add	r7, sp, #16
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d107      	bne.n	800e204 <tcp_abandon+0x20>
 800e1f4:	4b52      	ldr	r3, [pc, #328]	; (800e340 <tcp_abandon+0x15c>)
 800e1f6:	f240 223d 	movw	r2, #573	; 0x23d
 800e1fa:	4952      	ldr	r1, [pc, #328]	; (800e344 <tcp_abandon+0x160>)
 800e1fc:	4852      	ldr	r0, [pc, #328]	; (800e348 <tcp_abandon+0x164>)
 800e1fe:	f009 fb45 	bl	801788c <iprintf>
 800e202:	e099      	b.n	800e338 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	7d1b      	ldrb	r3, [r3, #20]
 800e208:	2b01      	cmp	r3, #1
 800e20a:	d106      	bne.n	800e21a <tcp_abandon+0x36>
 800e20c:	4b4c      	ldr	r3, [pc, #304]	; (800e340 <tcp_abandon+0x15c>)
 800e20e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e212:	494e      	ldr	r1, [pc, #312]	; (800e34c <tcp_abandon+0x168>)
 800e214:	484c      	ldr	r0, [pc, #304]	; (800e348 <tcp_abandon+0x164>)
 800e216:	f009 fb39 	bl	801788c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	7d1b      	ldrb	r3, [r3, #20]
 800e21e:	2b0a      	cmp	r3, #10
 800e220:	d107      	bne.n	800e232 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e222:	6879      	ldr	r1, [r7, #4]
 800e224:	484a      	ldr	r0, [pc, #296]	; (800e350 <tcp_abandon+0x16c>)
 800e226:	f001 fb51 	bl	800f8cc <tcp_pcb_remove>
    tcp_free(pcb);
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f7ff fd54 	bl	800dcd8 <tcp_free>
 800e230:	e082      	b.n	800e338 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e232:	2300      	movs	r3, #0
 800e234:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e236:	2300      	movs	r3, #0
 800e238:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e23e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e244:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e24c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	691b      	ldr	r3, [r3, #16]
 800e252:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	7d1b      	ldrb	r3, [r3, #20]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d126      	bne.n	800e2aa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	8adb      	ldrh	r3, [r3, #22]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d02e      	beq.n	800e2c2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e264:	4b3b      	ldr	r3, [pc, #236]	; (800e354 <tcp_abandon+0x170>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	429a      	cmp	r2, r3
 800e26c:	d105      	bne.n	800e27a <tcp_abandon+0x96>
 800e26e:	4b39      	ldr	r3, [pc, #228]	; (800e354 <tcp_abandon+0x170>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	68db      	ldr	r3, [r3, #12]
 800e274:	4a37      	ldr	r2, [pc, #220]	; (800e354 <tcp_abandon+0x170>)
 800e276:	6013      	str	r3, [r2, #0]
 800e278:	e013      	b.n	800e2a2 <tcp_abandon+0xbe>
 800e27a:	4b36      	ldr	r3, [pc, #216]	; (800e354 <tcp_abandon+0x170>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	61fb      	str	r3, [r7, #28]
 800e280:	e00c      	b.n	800e29c <tcp_abandon+0xb8>
 800e282:	69fb      	ldr	r3, [r7, #28]
 800e284:	68db      	ldr	r3, [r3, #12]
 800e286:	687a      	ldr	r2, [r7, #4]
 800e288:	429a      	cmp	r2, r3
 800e28a:	d104      	bne.n	800e296 <tcp_abandon+0xb2>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	68da      	ldr	r2, [r3, #12]
 800e290:	69fb      	ldr	r3, [r7, #28]
 800e292:	60da      	str	r2, [r3, #12]
 800e294:	e005      	b.n	800e2a2 <tcp_abandon+0xbe>
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	68db      	ldr	r3, [r3, #12]
 800e29a:	61fb      	str	r3, [r7, #28]
 800e29c:	69fb      	ldr	r3, [r7, #28]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d1ef      	bne.n	800e282 <tcp_abandon+0x9e>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	60da      	str	r2, [r3, #12]
 800e2a8:	e00b      	b.n	800e2c2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	8adb      	ldrh	r3, [r3, #22]
 800e2b2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e2b4:	6879      	ldr	r1, [r7, #4]
 800e2b6:	4828      	ldr	r0, [pc, #160]	; (800e358 <tcp_abandon+0x174>)
 800e2b8:	f001 fb08 	bl	800f8cc <tcp_pcb_remove>
 800e2bc:	4b27      	ldr	r3, [pc, #156]	; (800e35c <tcp_abandon+0x178>)
 800e2be:	2201      	movs	r2, #1
 800e2c0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d004      	beq.n	800e2d4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f000 ffdc 	bl	800f28c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d004      	beq.n	800e2e6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f000 ffd3 	bl	800f28c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d004      	beq.n	800e2f8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f000 ffca 	bl	800f28c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d00e      	beq.n	800e31c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e2fe:	6879      	ldr	r1, [r7, #4]
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	3304      	adds	r3, #4
 800e304:	687a      	ldr	r2, [r7, #4]
 800e306:	8b12      	ldrh	r2, [r2, #24]
 800e308:	9202      	str	r2, [sp, #8]
 800e30a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e30c:	9201      	str	r2, [sp, #4]
 800e30e:	9300      	str	r3, [sp, #0]
 800e310:	460b      	mov	r3, r1
 800e312:	697a      	ldr	r2, [r7, #20]
 800e314:	69b9      	ldr	r1, [r7, #24]
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f005 fca8 	bl	8013c6c <tcp_rst>
    }
    last_state = pcb->state;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	7d1b      	ldrb	r3, [r3, #20]
 800e320:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f7ff fcd8 	bl	800dcd8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d004      	beq.n	800e338 <tcp_abandon+0x154>
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	f06f 010c 	mvn.w	r1, #12
 800e334:	68f8      	ldr	r0, [r7, #12]
 800e336:	4798      	blx	r3
  }
}
 800e338:	3728      	adds	r7, #40	; 0x28
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop
 800e340:	0801a1e0 	.word	0x0801a1e0
 800e344:	0801a324 	.word	0x0801a324
 800e348:	0801a224 	.word	0x0801a224
 800e34c:	0801a340 	.word	0x0801a340
 800e350:	2000d64c 	.word	0x2000d64c
 800e354:	2000d640 	.word	0x2000d640
 800e358:	2000d648 	.word	0x2000d648
 800e35c:	2000d650 	.word	0x2000d650

0800e360 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e368:	2101      	movs	r1, #1
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f7ff ff3a 	bl	800e1e4 <tcp_abandon>
}
 800e370:	bf00      	nop
 800e372:	3708      	adds	r7, #8
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}

0800e378 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b088      	sub	sp, #32
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	60f8      	str	r0, [r7, #12]
 800e380:	60b9      	str	r1, [r7, #8]
 800e382:	4613      	mov	r3, r2
 800e384:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e386:	2304      	movs	r3, #4
 800e388:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d101      	bne.n	800e394 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800e390:	4b3e      	ldr	r3, [pc, #248]	; (800e48c <tcp_bind+0x114>)
 800e392:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d109      	bne.n	800e3ae <tcp_bind+0x36>
 800e39a:	4b3d      	ldr	r3, [pc, #244]	; (800e490 <tcp_bind+0x118>)
 800e39c:	f240 22a9 	movw	r2, #681	; 0x2a9
 800e3a0:	493c      	ldr	r1, [pc, #240]	; (800e494 <tcp_bind+0x11c>)
 800e3a2:	483d      	ldr	r0, [pc, #244]	; (800e498 <tcp_bind+0x120>)
 800e3a4:	f009 fa72 	bl	801788c <iprintf>
 800e3a8:	f06f 030f 	mvn.w	r3, #15
 800e3ac:	e06a      	b.n	800e484 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	7d1b      	ldrb	r3, [r3, #20]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d009      	beq.n	800e3ca <tcp_bind+0x52>
 800e3b6:	4b36      	ldr	r3, [pc, #216]	; (800e490 <tcp_bind+0x118>)
 800e3b8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e3bc:	4937      	ldr	r1, [pc, #220]	; (800e49c <tcp_bind+0x124>)
 800e3be:	4836      	ldr	r0, [pc, #216]	; (800e498 <tcp_bind+0x120>)
 800e3c0:	f009 fa64 	bl	801788c <iprintf>
 800e3c4:	f06f 0305 	mvn.w	r3, #5
 800e3c8:	e05c      	b.n	800e484 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800e3ca:	88fb      	ldrh	r3, [r7, #6]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d109      	bne.n	800e3e4 <tcp_bind+0x6c>
    port = tcp_new_port();
 800e3d0:	f000 f9de 	bl	800e790 <tcp_new_port>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e3d8:	88fb      	ldrh	r3, [r7, #6]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d135      	bne.n	800e44a <tcp_bind+0xd2>
      return ERR_BUF;
 800e3de:	f06f 0301 	mvn.w	r3, #1
 800e3e2:	e04f      	b.n	800e484 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	61fb      	str	r3, [r7, #28]
 800e3e8:	e02b      	b.n	800e442 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e3ea:	4a2d      	ldr	r2, [pc, #180]	; (800e4a0 <tcp_bind+0x128>)
 800e3ec:	69fb      	ldr	r3, [r7, #28]
 800e3ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	61bb      	str	r3, [r7, #24]
 800e3f6:	e01e      	b.n	800e436 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800e3f8:	69bb      	ldr	r3, [r7, #24]
 800e3fa:	8adb      	ldrh	r3, [r3, #22]
 800e3fc:	88fa      	ldrh	r2, [r7, #6]
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d116      	bne.n	800e430 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e402:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e404:	2b00      	cmp	r3, #0
 800e406:	d010      	beq.n	800e42a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e408:	69bb      	ldr	r3, [r7, #24]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d00c      	beq.n	800e42a <tcp_bind+0xb2>
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d009      	beq.n	800e42a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d005      	beq.n	800e42a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e41e:	69bb      	ldr	r3, [r7, #24]
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e426:	429a      	cmp	r2, r3
 800e428:	d102      	bne.n	800e430 <tcp_bind+0xb8>
              return ERR_USE;
 800e42a:	f06f 0307 	mvn.w	r3, #7
 800e42e:	e029      	b.n	800e484 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e430:	69bb      	ldr	r3, [r7, #24]
 800e432:	68db      	ldr	r3, [r3, #12]
 800e434:	61bb      	str	r3, [r7, #24]
 800e436:	69bb      	ldr	r3, [r7, #24]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d1dd      	bne.n	800e3f8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800e43c:	69fb      	ldr	r3, [r7, #28]
 800e43e:	3301      	adds	r3, #1
 800e440:	61fb      	str	r3, [r7, #28]
 800e442:	69fa      	ldr	r2, [r7, #28]
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	429a      	cmp	r2, r3
 800e448:	dbcf      	blt.n	800e3ea <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d00c      	beq.n	800e46a <tcp_bind+0xf2>
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d008      	beq.n	800e46a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d002      	beq.n	800e464 <tcp_bind+0xec>
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	e000      	b.n	800e466 <tcp_bind+0xee>
 800e464:	2300      	movs	r3, #0
 800e466:	68fa      	ldr	r2, [r7, #12]
 800e468:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	88fa      	ldrh	r2, [r7, #6]
 800e46e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e470:	4b0c      	ldr	r3, [pc, #48]	; (800e4a4 <tcp_bind+0x12c>)
 800e472:	681a      	ldr	r2, [r3, #0]
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	60da      	str	r2, [r3, #12]
 800e478:	4a0a      	ldr	r2, [pc, #40]	; (800e4a4 <tcp_bind+0x12c>)
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	6013      	str	r3, [r2, #0]
 800e47e:	f005 fdb7 	bl	8013ff0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e482:	2300      	movs	r3, #0
}
 800e484:	4618      	mov	r0, r3
 800e486:	3720      	adds	r7, #32
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}
 800e48c:	0801c298 	.word	0x0801c298
 800e490:	0801a1e0 	.word	0x0801a1e0
 800e494:	0801a374 	.word	0x0801a374
 800e498:	0801a224 	.word	0x0801a224
 800e49c:	0801a38c 	.word	0x0801a38c
 800e4a0:	0801c270 	.word	0x0801c270
 800e4a4:	2000d640 	.word	0x2000d640

0800e4a8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b084      	sub	sp, #16
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	60f8      	str	r0, [r7, #12]
 800e4b0:	60b9      	str	r1, [r7, #8]
 800e4b2:	4613      	mov	r3, r2
 800e4b4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d106      	bne.n	800e4ca <tcp_accept_null+0x22>
 800e4bc:	4b07      	ldr	r3, [pc, #28]	; (800e4dc <tcp_accept_null+0x34>)
 800e4be:	f240 320f 	movw	r2, #783	; 0x30f
 800e4c2:	4907      	ldr	r1, [pc, #28]	; (800e4e0 <tcp_accept_null+0x38>)
 800e4c4:	4807      	ldr	r0, [pc, #28]	; (800e4e4 <tcp_accept_null+0x3c>)
 800e4c6:	f009 f9e1 	bl	801788c <iprintf>

  tcp_abort(pcb);
 800e4ca:	68b8      	ldr	r0, [r7, #8]
 800e4cc:	f7ff ff48 	bl	800e360 <tcp_abort>

  return ERR_ABRT;
 800e4d0:	f06f 030c 	mvn.w	r3, #12
}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	3710      	adds	r7, #16
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}
 800e4dc:	0801a1e0 	.word	0x0801a1e0
 800e4e0:	0801a3b4 	.word	0x0801a3b4
 800e4e4:	0801a224 	.word	0x0801a224

0800e4e8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b088      	sub	sp, #32
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	460b      	mov	r3, r1
 800e4f2:	607a      	str	r2, [r7, #4]
 800e4f4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d109      	bne.n	800e514 <tcp_listen_with_backlog_and_err+0x2c>
 800e500:	4b47      	ldr	r3, [pc, #284]	; (800e620 <tcp_listen_with_backlog_and_err+0x138>)
 800e502:	f240 3259 	movw	r2, #857	; 0x359
 800e506:	4947      	ldr	r1, [pc, #284]	; (800e624 <tcp_listen_with_backlog_and_err+0x13c>)
 800e508:	4847      	ldr	r0, [pc, #284]	; (800e628 <tcp_listen_with_backlog_and_err+0x140>)
 800e50a:	f009 f9bf 	bl	801788c <iprintf>
 800e50e:	23f0      	movs	r3, #240	; 0xf0
 800e510:	76fb      	strb	r3, [r7, #27]
 800e512:	e079      	b.n	800e608 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	7d1b      	ldrb	r3, [r3, #20]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d009      	beq.n	800e530 <tcp_listen_with_backlog_and_err+0x48>
 800e51c:	4b40      	ldr	r3, [pc, #256]	; (800e620 <tcp_listen_with_backlog_and_err+0x138>)
 800e51e:	f240 325a 	movw	r2, #858	; 0x35a
 800e522:	4942      	ldr	r1, [pc, #264]	; (800e62c <tcp_listen_with_backlog_and_err+0x144>)
 800e524:	4840      	ldr	r0, [pc, #256]	; (800e628 <tcp_listen_with_backlog_and_err+0x140>)
 800e526:	f009 f9b1 	bl	801788c <iprintf>
 800e52a:	23f1      	movs	r3, #241	; 0xf1
 800e52c:	76fb      	strb	r3, [r7, #27]
 800e52e:	e06b      	b.n	800e608 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	7d1b      	ldrb	r3, [r3, #20]
 800e534:	2b01      	cmp	r3, #1
 800e536:	d104      	bne.n	800e542 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800e53c:	23f7      	movs	r3, #247	; 0xf7
 800e53e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e540:	e062      	b.n	800e608 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800e542:	2002      	movs	r0, #2
 800e544:	f7fe f960 	bl	800c808 <memp_malloc>
 800e548:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800e54a:	69fb      	ldr	r3, [r7, #28]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d102      	bne.n	800e556 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800e550:	23ff      	movs	r3, #255	; 0xff
 800e552:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e554:	e058      	b.n	800e608 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	691a      	ldr	r2, [r3, #16]
 800e55a:	69fb      	ldr	r3, [r7, #28]
 800e55c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	8ada      	ldrh	r2, [r3, #22]
 800e562:	69fb      	ldr	r3, [r7, #28]
 800e564:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800e566:	69fb      	ldr	r3, [r7, #28]
 800e568:	2201      	movs	r2, #1
 800e56a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	7d5a      	ldrb	r2, [r3, #21]
 800e570:	69fb      	ldr	r3, [r7, #28]
 800e572:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	7a5a      	ldrb	r2, [r3, #9]
 800e578:	69fb      	ldr	r3, [r7, #28]
 800e57a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	2200      	movs	r2, #0
 800e580:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	7ada      	ldrb	r2, [r3, #11]
 800e586:	69fb      	ldr	r3, [r7, #28]
 800e588:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	7a9a      	ldrb	r2, [r3, #10]
 800e58e:	69fb      	ldr	r3, [r7, #28]
 800e590:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681a      	ldr	r2, [r3, #0]
 800e596:	69fb      	ldr	r3, [r7, #28]
 800e598:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	8adb      	ldrh	r3, [r3, #22]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d021      	beq.n	800e5e6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e5a2:	4b23      	ldr	r3, [pc, #140]	; (800e630 <tcp_listen_with_backlog_and_err+0x148>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	68fa      	ldr	r2, [r7, #12]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d105      	bne.n	800e5b8 <tcp_listen_with_backlog_and_err+0xd0>
 800e5ac:	4b20      	ldr	r3, [pc, #128]	; (800e630 <tcp_listen_with_backlog_and_err+0x148>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	68db      	ldr	r3, [r3, #12]
 800e5b2:	4a1f      	ldr	r2, [pc, #124]	; (800e630 <tcp_listen_with_backlog_and_err+0x148>)
 800e5b4:	6013      	str	r3, [r2, #0]
 800e5b6:	e013      	b.n	800e5e0 <tcp_listen_with_backlog_and_err+0xf8>
 800e5b8:	4b1d      	ldr	r3, [pc, #116]	; (800e630 <tcp_listen_with_backlog_and_err+0x148>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	617b      	str	r3, [r7, #20]
 800e5be:	e00c      	b.n	800e5da <tcp_listen_with_backlog_and_err+0xf2>
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	68db      	ldr	r3, [r3, #12]
 800e5c4:	68fa      	ldr	r2, [r7, #12]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d104      	bne.n	800e5d4 <tcp_listen_with_backlog_and_err+0xec>
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	68da      	ldr	r2, [r3, #12]
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	60da      	str	r2, [r3, #12]
 800e5d2:	e005      	b.n	800e5e0 <tcp_listen_with_backlog_and_err+0xf8>
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	68db      	ldr	r3, [r3, #12]
 800e5d8:	617b      	str	r3, [r7, #20]
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d1ef      	bne.n	800e5c0 <tcp_listen_with_backlog_and_err+0xd8>
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800e5e6:	68f8      	ldr	r0, [r7, #12]
 800e5e8:	f7ff fb76 	bl	800dcd8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e5ec:	69fb      	ldr	r3, [r7, #28]
 800e5ee:	4a11      	ldr	r2, [pc, #68]	; (800e634 <tcp_listen_with_backlog_and_err+0x14c>)
 800e5f0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e5f2:	4b11      	ldr	r3, [pc, #68]	; (800e638 <tcp_listen_with_backlog_and_err+0x150>)
 800e5f4:	681a      	ldr	r2, [r3, #0]
 800e5f6:	69fb      	ldr	r3, [r7, #28]
 800e5f8:	60da      	str	r2, [r3, #12]
 800e5fa:	4a0f      	ldr	r2, [pc, #60]	; (800e638 <tcp_listen_with_backlog_and_err+0x150>)
 800e5fc:	69fb      	ldr	r3, [r7, #28]
 800e5fe:	6013      	str	r3, [r2, #0]
 800e600:	f005 fcf6 	bl	8013ff0 <tcp_timer_needed>
  res = ERR_OK;
 800e604:	2300      	movs	r3, #0
 800e606:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d002      	beq.n	800e614 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	7efa      	ldrb	r2, [r7, #27]
 800e612:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e614:	69fb      	ldr	r3, [r7, #28]
}
 800e616:	4618      	mov	r0, r3
 800e618:	3720      	adds	r7, #32
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
 800e61e:	bf00      	nop
 800e620:	0801a1e0 	.word	0x0801a1e0
 800e624:	0801a3d4 	.word	0x0801a3d4
 800e628:	0801a224 	.word	0x0801a224
 800e62c:	0801a404 	.word	0x0801a404
 800e630:	2000d640 	.word	0x2000d640
 800e634:	0800e4a9 	.word	0x0800e4a9
 800e638:	2000d644 	.word	0x2000d644

0800e63c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b084      	sub	sp, #16
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d106      	bne.n	800e658 <tcp_update_rcv_ann_wnd+0x1c>
 800e64a:	4b25      	ldr	r3, [pc, #148]	; (800e6e0 <tcp_update_rcv_ann_wnd+0xa4>)
 800e64c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e650:	4924      	ldr	r1, [pc, #144]	; (800e6e4 <tcp_update_rcv_ann_wnd+0xa8>)
 800e652:	4825      	ldr	r0, [pc, #148]	; (800e6e8 <tcp_update_rcv_ann_wnd+0xac>)
 800e654:	f009 f91a 	bl	801788c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e660:	4413      	add	r3, r2
 800e662:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e66c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e670:	bf28      	it	cs
 800e672:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e676:	b292      	uxth	r2, r2
 800e678:	4413      	add	r3, r2
 800e67a:	68fa      	ldr	r2, [r7, #12]
 800e67c:	1ad3      	subs	r3, r2, r3
 800e67e:	2b00      	cmp	r3, #0
 800e680:	db08      	blt.n	800e694 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e68e:	68fa      	ldr	r2, [r7, #12]
 800e690:	1ad3      	subs	r3, r2, r3
 800e692:	e020      	b.n	800e6d6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e69c:	1ad3      	subs	r3, r2, r3
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	dd03      	ble.n	800e6aa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e6a8:	e014      	b.n	800e6d4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b2:	1ad3      	subs	r3, r2, r3
 800e6b4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6bc:	d306      	bcc.n	800e6cc <tcp_update_rcv_ann_wnd+0x90>
 800e6be:	4b08      	ldr	r3, [pc, #32]	; (800e6e0 <tcp_update_rcv_ann_wnd+0xa4>)
 800e6c0:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e6c4:	4909      	ldr	r1, [pc, #36]	; (800e6ec <tcp_update_rcv_ann_wnd+0xb0>)
 800e6c6:	4808      	ldr	r0, [pc, #32]	; (800e6e8 <tcp_update_rcv_ann_wnd+0xac>)
 800e6c8:	f009 f8e0 	bl	801788c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	b29a      	uxth	r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e6d4:	2300      	movs	r3, #0
  }
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3710      	adds	r7, #16
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	0801a1e0 	.word	0x0801a1e0
 800e6e4:	0801a43c 	.word	0x0801a43c
 800e6e8:	0801a224 	.word	0x0801a224
 800e6ec:	0801a460 	.word	0x0801a460

0800e6f0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d107      	bne.n	800e712 <tcp_recved+0x22>
 800e702:	4b1f      	ldr	r3, [pc, #124]	; (800e780 <tcp_recved+0x90>)
 800e704:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e708:	491e      	ldr	r1, [pc, #120]	; (800e784 <tcp_recved+0x94>)
 800e70a:	481f      	ldr	r0, [pc, #124]	; (800e788 <tcp_recved+0x98>)
 800e70c:	f009 f8be 	bl	801788c <iprintf>
 800e710:	e032      	b.n	800e778 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	7d1b      	ldrb	r3, [r3, #20]
 800e716:	2b01      	cmp	r3, #1
 800e718:	d106      	bne.n	800e728 <tcp_recved+0x38>
 800e71a:	4b19      	ldr	r3, [pc, #100]	; (800e780 <tcp_recved+0x90>)
 800e71c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e720:	491a      	ldr	r1, [pc, #104]	; (800e78c <tcp_recved+0x9c>)
 800e722:	4819      	ldr	r0, [pc, #100]	; (800e788 <tcp_recved+0x98>)
 800e724:	f009 f8b2 	bl	801788c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e72c:	887b      	ldrh	r3, [r7, #2]
 800e72e:	4413      	add	r3, r2
 800e730:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e732:	89fb      	ldrh	r3, [r7, #14]
 800e734:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e738:	d804      	bhi.n	800e744 <tcp_recved+0x54>
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e73e:	89fa      	ldrh	r2, [r7, #14]
 800e740:	429a      	cmp	r2, r3
 800e742:	d204      	bcs.n	800e74e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e74a:	851a      	strh	r2, [r3, #40]	; 0x28
 800e74c:	e002      	b.n	800e754 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	89fa      	ldrh	r2, [r7, #14]
 800e752:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f7ff ff71 	bl	800e63c <tcp_update_rcv_ann_wnd>
 800e75a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e762:	d309      	bcc.n	800e778 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	8b5b      	ldrh	r3, [r3, #26]
 800e768:	f043 0302 	orr.w	r3, r3, #2
 800e76c:	b29a      	uxth	r2, r3
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f004 fcc6 	bl	8013104 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e778:	3710      	adds	r7, #16
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	bf00      	nop
 800e780:	0801a1e0 	.word	0x0801a1e0
 800e784:	0801a47c 	.word	0x0801a47c
 800e788:	0801a224 	.word	0x0801a224
 800e78c:	0801a494 	.word	0x0801a494

0800e790 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e790:	b480      	push	{r7}
 800e792:	b083      	sub	sp, #12
 800e794:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e796:	2300      	movs	r3, #0
 800e798:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e79a:	4b1e      	ldr	r3, [pc, #120]	; (800e814 <tcp_new_port+0x84>)
 800e79c:	881b      	ldrh	r3, [r3, #0]
 800e79e:	3301      	adds	r3, #1
 800e7a0:	b29a      	uxth	r2, r3
 800e7a2:	4b1c      	ldr	r3, [pc, #112]	; (800e814 <tcp_new_port+0x84>)
 800e7a4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e7a6:	4b1b      	ldr	r3, [pc, #108]	; (800e814 <tcp_new_port+0x84>)
 800e7a8:	881b      	ldrh	r3, [r3, #0]
 800e7aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d103      	bne.n	800e7ba <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e7b2:	4b18      	ldr	r3, [pc, #96]	; (800e814 <tcp_new_port+0x84>)
 800e7b4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e7b8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	71fb      	strb	r3, [r7, #7]
 800e7be:	e01e      	b.n	800e7fe <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e7c0:	79fb      	ldrb	r3, [r7, #7]
 800e7c2:	4a15      	ldr	r2, [pc, #84]	; (800e818 <tcp_new_port+0x88>)
 800e7c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	603b      	str	r3, [r7, #0]
 800e7cc:	e011      	b.n	800e7f2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	8ada      	ldrh	r2, [r3, #22]
 800e7d2:	4b10      	ldr	r3, [pc, #64]	; (800e814 <tcp_new_port+0x84>)
 800e7d4:	881b      	ldrh	r3, [r3, #0]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d108      	bne.n	800e7ec <tcp_new_port+0x5c>
        n++;
 800e7da:	88bb      	ldrh	r3, [r7, #4]
 800e7dc:	3301      	adds	r3, #1
 800e7de:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e7e0:	88bb      	ldrh	r3, [r7, #4]
 800e7e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e7e6:	d3d8      	bcc.n	800e79a <tcp_new_port+0xa>
          return 0;
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	e00d      	b.n	800e808 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	68db      	ldr	r3, [r3, #12]
 800e7f0:	603b      	str	r3, [r7, #0]
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d1ea      	bne.n	800e7ce <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e7f8:	79fb      	ldrb	r3, [r7, #7]
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	71fb      	strb	r3, [r7, #7]
 800e7fe:	79fb      	ldrb	r3, [r7, #7]
 800e800:	2b03      	cmp	r3, #3
 800e802:	d9dd      	bls.n	800e7c0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e804:	4b03      	ldr	r3, [pc, #12]	; (800e814 <tcp_new_port+0x84>)
 800e806:	881b      	ldrh	r3, [r3, #0]
}
 800e808:	4618      	mov	r0, r3
 800e80a:	370c      	adds	r7, #12
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr
 800e814:	20000024 	.word	0x20000024
 800e818:	0801c270 	.word	0x0801c270

0800e81c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b08a      	sub	sp, #40	; 0x28
 800e820:	af00      	add	r7, sp, #0
 800e822:	60f8      	str	r0, [r7, #12]
 800e824:	60b9      	str	r1, [r7, #8]
 800e826:	603b      	str	r3, [r7, #0]
 800e828:	4613      	mov	r3, r2
 800e82a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800e82c:	2300      	movs	r3, #0
 800e82e:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d109      	bne.n	800e84a <tcp_connect+0x2e>
 800e836:	4b7d      	ldr	r3, [pc, #500]	; (800ea2c <tcp_connect+0x210>)
 800e838:	f240 4235 	movw	r2, #1077	; 0x435
 800e83c:	497c      	ldr	r1, [pc, #496]	; (800ea30 <tcp_connect+0x214>)
 800e83e:	487d      	ldr	r0, [pc, #500]	; (800ea34 <tcp_connect+0x218>)
 800e840:	f009 f824 	bl	801788c <iprintf>
 800e844:	f06f 030f 	mvn.w	r3, #15
 800e848:	e0ec      	b.n	800ea24 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d109      	bne.n	800e864 <tcp_connect+0x48>
 800e850:	4b76      	ldr	r3, [pc, #472]	; (800ea2c <tcp_connect+0x210>)
 800e852:	f240 4236 	movw	r2, #1078	; 0x436
 800e856:	4978      	ldr	r1, [pc, #480]	; (800ea38 <tcp_connect+0x21c>)
 800e858:	4876      	ldr	r0, [pc, #472]	; (800ea34 <tcp_connect+0x218>)
 800e85a:	f009 f817 	bl	801788c <iprintf>
 800e85e:	f06f 030f 	mvn.w	r3, #15
 800e862:	e0df      	b.n	800ea24 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	7d1b      	ldrb	r3, [r3, #20]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d009      	beq.n	800e880 <tcp_connect+0x64>
 800e86c:	4b6f      	ldr	r3, [pc, #444]	; (800ea2c <tcp_connect+0x210>)
 800e86e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800e872:	4972      	ldr	r1, [pc, #456]	; (800ea3c <tcp_connect+0x220>)
 800e874:	486f      	ldr	r0, [pc, #444]	; (800ea34 <tcp_connect+0x218>)
 800e876:	f009 f809 	bl	801788c <iprintf>
 800e87a:	f06f 0309 	mvn.w	r3, #9
 800e87e:	e0d1      	b.n	800ea24 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d002      	beq.n	800e88c <tcp_connect+0x70>
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	e000      	b.n	800e88e <tcp_connect+0x72>
 800e88c:	2300      	movs	r3, #0
 800e88e:	68fa      	ldr	r2, [r7, #12]
 800e890:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	88fa      	ldrh	r2, [r7, #6]
 800e896:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	7a1b      	ldrb	r3, [r3, #8]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d006      	beq.n	800e8ae <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	7a1b      	ldrb	r3, [r3, #8]
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7fe fb3b 	bl	800cf20 <netif_get_by_index>
 800e8aa:	6278      	str	r0, [r7, #36]	; 0x24
 800e8ac:	e005      	b.n	800e8ba <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	3304      	adds	r3, #4
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f007 fb48 	bl	8015f48 <ip4_route>
 800e8b8:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800e8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d102      	bne.n	800e8c6 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800e8c0:	f06f 0303 	mvn.w	r3, #3
 800e8c4:	e0ae      	b.n	800ea24 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d003      	beq.n	800e8d4 <tcp_connect+0xb8>
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d111      	bne.n	800e8f8 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800e8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d002      	beq.n	800e8e0 <tcp_connect+0xc4>
 800e8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8dc:	3304      	adds	r3, #4
 800e8de:	e000      	b.n	800e8e2 <tcp_connect+0xc6>
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800e8e4:	69fb      	ldr	r3, [r7, #28]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d102      	bne.n	800e8f0 <tcp_connect+0xd4>
      return ERR_RTE;
 800e8ea:	f06f 0303 	mvn.w	r3, #3
 800e8ee:	e099      	b.n	800ea24 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e8f0:	69fb      	ldr	r3, [r7, #28]
 800e8f2:	681a      	ldr	r2, [r3, #0]
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	8adb      	ldrh	r3, [r3, #22]
 800e8fc:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	8adb      	ldrh	r3, [r3, #22]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d10c      	bne.n	800e920 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800e906:	f7ff ff43 	bl	800e790 <tcp_new_port>
 800e90a:	4603      	mov	r3, r0
 800e90c:	461a      	mov	r2, r3
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	8adb      	ldrh	r3, [r3, #22]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d102      	bne.n	800e920 <tcp_connect+0x104>
      return ERR_BUF;
 800e91a:	f06f 0301 	mvn.w	r3, #1
 800e91e:	e081      	b.n	800ea24 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800e920:	68f8      	ldr	r0, [r7, #12]
 800e922:	f001 f867 	bl	800f9f4 <tcp_next_iss>
 800e926:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	2200      	movs	r2, #0
 800e92c:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	697a      	ldr	r2, [r7, #20]
 800e932:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	1e5a      	subs	r2, r3, #1
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	1e5a      	subs	r2, r3, #1
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	1e5a      	subs	r2, r3, #1
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e952:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e96a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e974:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	3304      	adds	r3, #4
 800e97e:	461a      	mov	r2, r3
 800e980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e982:	f001 f85d 	bl	800fa40 <tcp_eff_send_mss_netif>
 800e986:	4603      	mov	r3, r0
 800e988:	461a      	mov	r2, r3
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2201      	movs	r2, #1
 800e992:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	683a      	ldr	r2, [r7, #0]
 800e99a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800e99e:	2102      	movs	r1, #2
 800e9a0:	68f8      	ldr	r0, [r7, #12]
 800e9a2:	f004 fac1 	bl	8012f28 <tcp_enqueue_flags>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800e9aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d136      	bne.n	800ea20 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	2202      	movs	r2, #2
 800e9b6:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800e9b8:	8b7b      	ldrh	r3, [r7, #26]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d021      	beq.n	800ea02 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e9be:	4b20      	ldr	r3, [pc, #128]	; (800ea40 <tcp_connect+0x224>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	68fa      	ldr	r2, [r7, #12]
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d105      	bne.n	800e9d4 <tcp_connect+0x1b8>
 800e9c8:	4b1d      	ldr	r3, [pc, #116]	; (800ea40 <tcp_connect+0x224>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	68db      	ldr	r3, [r3, #12]
 800e9ce:	4a1c      	ldr	r2, [pc, #112]	; (800ea40 <tcp_connect+0x224>)
 800e9d0:	6013      	str	r3, [r2, #0]
 800e9d2:	e013      	b.n	800e9fc <tcp_connect+0x1e0>
 800e9d4:	4b1a      	ldr	r3, [pc, #104]	; (800ea40 <tcp_connect+0x224>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	623b      	str	r3, [r7, #32]
 800e9da:	e00c      	b.n	800e9f6 <tcp_connect+0x1da>
 800e9dc:	6a3b      	ldr	r3, [r7, #32]
 800e9de:	68db      	ldr	r3, [r3, #12]
 800e9e0:	68fa      	ldr	r2, [r7, #12]
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d104      	bne.n	800e9f0 <tcp_connect+0x1d4>
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	68da      	ldr	r2, [r3, #12]
 800e9ea:	6a3b      	ldr	r3, [r7, #32]
 800e9ec:	60da      	str	r2, [r3, #12]
 800e9ee:	e005      	b.n	800e9fc <tcp_connect+0x1e0>
 800e9f0:	6a3b      	ldr	r3, [r7, #32]
 800e9f2:	68db      	ldr	r3, [r3, #12]
 800e9f4:	623b      	str	r3, [r7, #32]
 800e9f6:	6a3b      	ldr	r3, [r7, #32]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d1ef      	bne.n	800e9dc <tcp_connect+0x1c0>
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800ea02:	4b10      	ldr	r3, [pc, #64]	; (800ea44 <tcp_connect+0x228>)
 800ea04:	681a      	ldr	r2, [r3, #0]
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	60da      	str	r2, [r3, #12]
 800ea0a:	4a0e      	ldr	r2, [pc, #56]	; (800ea44 <tcp_connect+0x228>)
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	6013      	str	r3, [r2, #0]
 800ea10:	f005 faee 	bl	8013ff0 <tcp_timer_needed>
 800ea14:	4b0c      	ldr	r3, [pc, #48]	; (800ea48 <tcp_connect+0x22c>)
 800ea16:	2201      	movs	r2, #1
 800ea18:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800ea1a:	68f8      	ldr	r0, [r7, #12]
 800ea1c:	f004 fb72 	bl	8013104 <tcp_output>
  }
  return ret;
 800ea20:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3728      	adds	r7, #40	; 0x28
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	0801a1e0 	.word	0x0801a1e0
 800ea30:	0801a4bc 	.word	0x0801a4bc
 800ea34:	0801a224 	.word	0x0801a224
 800ea38:	0801a4d8 	.word	0x0801a4d8
 800ea3c:	0801a4f4 	.word	0x0801a4f4
 800ea40:	2000d640 	.word	0x2000d640
 800ea44:	2000d648 	.word	0x2000d648
 800ea48:	2000d650 	.word	0x2000d650

0800ea4c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ea4c:	b5b0      	push	{r4, r5, r7, lr}
 800ea4e:	b090      	sub	sp, #64	; 0x40
 800ea50:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ea52:	2300      	movs	r3, #0
 800ea54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ea58:	4b94      	ldr	r3, [pc, #592]	; (800ecac <tcp_slowtmr+0x260>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	3301      	adds	r3, #1
 800ea5e:	4a93      	ldr	r2, [pc, #588]	; (800ecac <tcp_slowtmr+0x260>)
 800ea60:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ea62:	4b93      	ldr	r3, [pc, #588]	; (800ecb0 <tcp_slowtmr+0x264>)
 800ea64:	781b      	ldrb	r3, [r3, #0]
 800ea66:	3301      	adds	r3, #1
 800ea68:	b2da      	uxtb	r2, r3
 800ea6a:	4b91      	ldr	r3, [pc, #580]	; (800ecb0 <tcp_slowtmr+0x264>)
 800ea6c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ea72:	4b90      	ldr	r3, [pc, #576]	; (800ecb4 <tcp_slowtmr+0x268>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ea78:	e29f      	b.n	800efba <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ea7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea7c:	7d1b      	ldrb	r3, [r3, #20]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d106      	bne.n	800ea90 <tcp_slowtmr+0x44>
 800ea82:	4b8d      	ldr	r3, [pc, #564]	; (800ecb8 <tcp_slowtmr+0x26c>)
 800ea84:	f240 42be 	movw	r2, #1214	; 0x4be
 800ea88:	498c      	ldr	r1, [pc, #560]	; (800ecbc <tcp_slowtmr+0x270>)
 800ea8a:	488d      	ldr	r0, [pc, #564]	; (800ecc0 <tcp_slowtmr+0x274>)
 800ea8c:	f008 fefe 	bl	801788c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ea90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea92:	7d1b      	ldrb	r3, [r3, #20]
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	d106      	bne.n	800eaa6 <tcp_slowtmr+0x5a>
 800ea98:	4b87      	ldr	r3, [pc, #540]	; (800ecb8 <tcp_slowtmr+0x26c>)
 800ea9a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ea9e:	4989      	ldr	r1, [pc, #548]	; (800ecc4 <tcp_slowtmr+0x278>)
 800eaa0:	4887      	ldr	r0, [pc, #540]	; (800ecc0 <tcp_slowtmr+0x274>)
 800eaa2:	f008 fef3 	bl	801788c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800eaa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa8:	7d1b      	ldrb	r3, [r3, #20]
 800eaaa:	2b0a      	cmp	r3, #10
 800eaac:	d106      	bne.n	800eabc <tcp_slowtmr+0x70>
 800eaae:	4b82      	ldr	r3, [pc, #520]	; (800ecb8 <tcp_slowtmr+0x26c>)
 800eab0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800eab4:	4984      	ldr	r1, [pc, #528]	; (800ecc8 <tcp_slowtmr+0x27c>)
 800eab6:	4882      	ldr	r0, [pc, #520]	; (800ecc0 <tcp_slowtmr+0x274>)
 800eab8:	f008 fee8 	bl	801788c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800eabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eabe:	7f9a      	ldrb	r2, [r3, #30]
 800eac0:	4b7b      	ldr	r3, [pc, #492]	; (800ecb0 <tcp_slowtmr+0x264>)
 800eac2:	781b      	ldrb	r3, [r3, #0]
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d105      	bne.n	800ead4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800eac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800eacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eace:	68db      	ldr	r3, [r3, #12]
 800ead0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ead2:	e272      	b.n	800efba <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ead4:	4b76      	ldr	r3, [pc, #472]	; (800ecb0 <tcp_slowtmr+0x264>)
 800ead6:	781a      	ldrb	r2, [r3, #0]
 800ead8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eada:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800eadc:	2300      	movs	r3, #0
 800eade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800eae2:	2300      	movs	r3, #0
 800eae4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800eae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaea:	7d1b      	ldrb	r3, [r3, #20]
 800eaec:	2b02      	cmp	r3, #2
 800eaee:	d10a      	bne.n	800eb06 <tcp_slowtmr+0xba>
 800eaf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eaf6:	2b05      	cmp	r3, #5
 800eaf8:	d905      	bls.n	800eb06 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800eafa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eafe:	3301      	adds	r3, #1
 800eb00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb04:	e11e      	b.n	800ed44 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800eb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eb0c:	2b0b      	cmp	r3, #11
 800eb0e:	d905      	bls.n	800eb1c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800eb10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb14:	3301      	adds	r3, #1
 800eb16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb1a:	e113      	b.n	800ed44 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800eb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb1e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d075      	beq.n	800ec12 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800eb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d006      	beq.n	800eb3c <tcp_slowtmr+0xf0>
 800eb2e:	4b62      	ldr	r3, [pc, #392]	; (800ecb8 <tcp_slowtmr+0x26c>)
 800eb30:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800eb34:	4965      	ldr	r1, [pc, #404]	; (800eccc <tcp_slowtmr+0x280>)
 800eb36:	4862      	ldr	r0, [pc, #392]	; (800ecc0 <tcp_slowtmr+0x274>)
 800eb38:	f008 fea8 	bl	801788c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800eb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d106      	bne.n	800eb52 <tcp_slowtmr+0x106>
 800eb44:	4b5c      	ldr	r3, [pc, #368]	; (800ecb8 <tcp_slowtmr+0x26c>)
 800eb46:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800eb4a:	4961      	ldr	r1, [pc, #388]	; (800ecd0 <tcp_slowtmr+0x284>)
 800eb4c:	485c      	ldr	r0, [pc, #368]	; (800ecc0 <tcp_slowtmr+0x274>)
 800eb4e:	f008 fe9d 	bl	801788c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800eb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb54:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800eb58:	2b0b      	cmp	r3, #11
 800eb5a:	d905      	bls.n	800eb68 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800eb5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb60:	3301      	adds	r3, #1
 800eb62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb66:	e0ed      	b.n	800ed44 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800eb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb6a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800eb6e:	3b01      	subs	r3, #1
 800eb70:	4a58      	ldr	r2, [pc, #352]	; (800ecd4 <tcp_slowtmr+0x288>)
 800eb72:	5cd3      	ldrb	r3, [r2, r3]
 800eb74:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800eb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb78:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800eb7c:	7c7a      	ldrb	r2, [r7, #17]
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	d907      	bls.n	800eb92 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800eb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb84:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800eb88:	3301      	adds	r3, #1
 800eb8a:	b2da      	uxtb	r2, r3
 800eb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb8e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800eb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb94:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800eb98:	7c7a      	ldrb	r2, [r7, #17]
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	f200 80d2 	bhi.w	800ed44 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800eba0:	2301      	movs	r3, #1
 800eba2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800eba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d108      	bne.n	800ebc0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ebae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebb0:	f005 f950 	bl	8013e54 <tcp_zero_window_probe>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d014      	beq.n	800ebe4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ebba:	2300      	movs	r3, #0
 800ebbc:	623b      	str	r3, [r7, #32]
 800ebbe:	e011      	b.n	800ebe4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ebc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebca:	f004 f815 	bl	8012bf8 <tcp_split_unsent_seg>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d107      	bne.n	800ebe4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ebd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebd6:	f004 fa95 	bl	8013104 <tcp_output>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d101      	bne.n	800ebe4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ebe4:	6a3b      	ldr	r3, [r7, #32]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	f000 80ac 	beq.w	800ed44 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ebec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebee:	2200      	movs	r2, #0
 800ebf0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ebf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ebfa:	2b06      	cmp	r3, #6
 800ebfc:	f200 80a2 	bhi.w	800ed44 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ec00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec02:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ec06:	3301      	adds	r3, #1
 800ec08:	b2da      	uxtb	r2, r3
 800ec0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ec10:	e098      	b.n	800ed44 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ec12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	db0f      	blt.n	800ec3c <tcp_slowtmr+0x1f0>
 800ec1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ec22:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ec26:	4293      	cmp	r3, r2
 800ec28:	d008      	beq.n	800ec3c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ec2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec2c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	3301      	adds	r3, #1
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	b21a      	sxth	r2, r3
 800ec38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800ec3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ec42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec44:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	db7b      	blt.n	800ed44 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ec4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec4e:	f004 fd4d 	bl	80136ec <tcp_rexmit_rto_prepare>
 800ec52:	4603      	mov	r3, r0
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d007      	beq.n	800ec68 <tcp_slowtmr+0x21c>
 800ec58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d171      	bne.n	800ed44 <tcp_slowtmr+0x2f8>
 800ec60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d06d      	beq.n	800ed44 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ec68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec6a:	7d1b      	ldrb	r3, [r3, #20]
 800ec6c:	2b02      	cmp	r3, #2
 800ec6e:	d03a      	beq.n	800ece6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ec70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec76:	2b0c      	cmp	r3, #12
 800ec78:	bf28      	it	cs
 800ec7a:	230c      	movcs	r3, #12
 800ec7c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ec7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec80:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ec84:	10db      	asrs	r3, r3, #3
 800ec86:	b21b      	sxth	r3, r3
 800ec88:	461a      	mov	r2, r3
 800ec8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec8c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ec90:	4413      	add	r3, r2
 800ec92:	7efa      	ldrb	r2, [r7, #27]
 800ec94:	4910      	ldr	r1, [pc, #64]	; (800ecd8 <tcp_slowtmr+0x28c>)
 800ec96:	5c8a      	ldrb	r2, [r1, r2]
 800ec98:	4093      	lsls	r3, r2
 800ec9a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800eca2:	4293      	cmp	r3, r2
 800eca4:	dc1a      	bgt.n	800ecdc <tcp_slowtmr+0x290>
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	b21a      	sxth	r2, r3
 800ecaa:	e019      	b.n	800ece0 <tcp_slowtmr+0x294>
 800ecac:	2000d63c 	.word	0x2000d63c
 800ecb0:	2000d652 	.word	0x2000d652
 800ecb4:	2000d648 	.word	0x2000d648
 800ecb8:	0801a1e0 	.word	0x0801a1e0
 800ecbc:	0801a524 	.word	0x0801a524
 800ecc0:	0801a224 	.word	0x0801a224
 800ecc4:	0801a550 	.word	0x0801a550
 800ecc8:	0801a57c 	.word	0x0801a57c
 800eccc:	0801a5ac 	.word	0x0801a5ac
 800ecd0:	0801a5e0 	.word	0x0801a5e0
 800ecd4:	0801c268 	.word	0x0801c268
 800ecd8:	0801c258 	.word	0x0801c258
 800ecdc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ece0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ece6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece8:	2200      	movs	r2, #0
 800ecea:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ecec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ecf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ecf8:	4293      	cmp	r3, r2
 800ecfa:	bf28      	it	cs
 800ecfc:	4613      	movcs	r3, r2
 800ecfe:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ed00:	8a7b      	ldrh	r3, [r7, #18]
 800ed02:	085b      	lsrs	r3, r3, #1
 800ed04:	b29a      	uxth	r2, r3
 800ed06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed08:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ed0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed0e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ed12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed16:	005b      	lsls	r3, r3, #1
 800ed18:	b29b      	uxth	r3, r3
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d206      	bcs.n	800ed2c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ed1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed22:	005b      	lsls	r3, r3, #1
 800ed24:	b29a      	uxth	r2, r3
 800ed26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed28:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ed2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed2e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ed30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ed36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed38:	2200      	movs	r2, #0
 800ed3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ed3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed40:	f004 fd44 	bl	80137cc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ed44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed46:	7d1b      	ldrb	r3, [r3, #20]
 800ed48:	2b06      	cmp	r3, #6
 800ed4a:	d111      	bne.n	800ed70 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ed4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed4e:	8b5b      	ldrh	r3, [r3, #26]
 800ed50:	f003 0310 	and.w	r3, r3, #16
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d00b      	beq.n	800ed70 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ed58:	4b9d      	ldr	r3, [pc, #628]	; (800efd0 <tcp_slowtmr+0x584>)
 800ed5a:	681a      	ldr	r2, [r3, #0]
 800ed5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5e:	6a1b      	ldr	r3, [r3, #32]
 800ed60:	1ad3      	subs	r3, r2, r3
 800ed62:	2b28      	cmp	r3, #40	; 0x28
 800ed64:	d904      	bls.n	800ed70 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ed66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed6a:	3301      	adds	r3, #1
 800ed6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ed70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed72:	7a5b      	ldrb	r3, [r3, #9]
 800ed74:	f003 0308 	and.w	r3, r3, #8
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d04c      	beq.n	800ee16 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800ed7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed7e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ed80:	2b04      	cmp	r3, #4
 800ed82:	d003      	beq.n	800ed8c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ed84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed86:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ed88:	2b07      	cmp	r3, #7
 800ed8a:	d144      	bne.n	800ee16 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ed8c:	4b90      	ldr	r3, [pc, #576]	; (800efd0 <tcp_slowtmr+0x584>)
 800ed8e:	681a      	ldr	r2, [r3, #0]
 800ed90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed92:	6a1b      	ldr	r3, [r3, #32]
 800ed94:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ed96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ed9c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800eda0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800eda4:	498b      	ldr	r1, [pc, #556]	; (800efd4 <tcp_slowtmr+0x588>)
 800eda6:	fba1 1303 	umull	r1, r3, r1, r3
 800edaa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800edac:	429a      	cmp	r2, r3
 800edae:	d90a      	bls.n	800edc6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800edb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edb4:	3301      	adds	r3, #1
 800edb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800edba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800edbe:	3301      	adds	r3, #1
 800edc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800edc4:	e027      	b.n	800ee16 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800edc6:	4b82      	ldr	r3, [pc, #520]	; (800efd0 <tcp_slowtmr+0x584>)
 800edc8:	681a      	ldr	r2, [r3, #0]
 800edca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edcc:	6a1b      	ldr	r3, [r3, #32]
 800edce:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800edd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800edd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800eddc:	4618      	mov	r0, r3
 800edde:	4b7e      	ldr	r3, [pc, #504]	; (800efd8 <tcp_slowtmr+0x58c>)
 800ede0:	fb00 f303 	mul.w	r3, r0, r3
 800ede4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ede6:	497b      	ldr	r1, [pc, #492]	; (800efd4 <tcp_slowtmr+0x588>)
 800ede8:	fba1 1303 	umull	r1, r3, r1, r3
 800edec:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800edee:	429a      	cmp	r2, r3
 800edf0:	d911      	bls.n	800ee16 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800edf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edf4:	f004 ffee 	bl	8013dd4 <tcp_keepalive>
 800edf8:	4603      	mov	r3, r0
 800edfa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800edfe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d107      	bne.n	800ee16 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800ee06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee08:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	b2da      	uxtb	r2, r3
 800ee10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee12:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ee16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d011      	beq.n	800ee42 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ee1e:	4b6c      	ldr	r3, [pc, #432]	; (800efd0 <tcp_slowtmr+0x584>)
 800ee20:	681a      	ldr	r2, [r3, #0]
 800ee22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee24:	6a1b      	ldr	r3, [r3, #32]
 800ee26:	1ad2      	subs	r2, r2, r3
 800ee28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee2a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ee2e:	4619      	mov	r1, r3
 800ee30:	460b      	mov	r3, r1
 800ee32:	005b      	lsls	r3, r3, #1
 800ee34:	440b      	add	r3, r1
 800ee36:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d302      	bcc.n	800ee42 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ee3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee3e:	f000 fea9 	bl	800fb94 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ee42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee44:	7d1b      	ldrb	r3, [r3, #20]
 800ee46:	2b03      	cmp	r3, #3
 800ee48:	d10b      	bne.n	800ee62 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ee4a:	4b61      	ldr	r3, [pc, #388]	; (800efd0 <tcp_slowtmr+0x584>)
 800ee4c:	681a      	ldr	r2, [r3, #0]
 800ee4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee50:	6a1b      	ldr	r3, [r3, #32]
 800ee52:	1ad3      	subs	r3, r2, r3
 800ee54:	2b28      	cmp	r3, #40	; 0x28
 800ee56:	d904      	bls.n	800ee62 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ee58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee5c:	3301      	adds	r3, #1
 800ee5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ee62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee64:	7d1b      	ldrb	r3, [r3, #20]
 800ee66:	2b09      	cmp	r3, #9
 800ee68:	d10b      	bne.n	800ee82 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ee6a:	4b59      	ldr	r3, [pc, #356]	; (800efd0 <tcp_slowtmr+0x584>)
 800ee6c:	681a      	ldr	r2, [r3, #0]
 800ee6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee70:	6a1b      	ldr	r3, [r3, #32]
 800ee72:	1ad3      	subs	r3, r2, r3
 800ee74:	2bf0      	cmp	r3, #240	; 0xf0
 800ee76:	d904      	bls.n	800ee82 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800ee78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee7c:	3301      	adds	r3, #1
 800ee7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ee82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d060      	beq.n	800ef4c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ee8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee90:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ee92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee94:	f000 fcca 	bl	800f82c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ee98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d010      	beq.n	800eec0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ee9e:	4b4f      	ldr	r3, [pc, #316]	; (800efdc <tcp_slowtmr+0x590>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eea4:	429a      	cmp	r2, r3
 800eea6:	d106      	bne.n	800eeb6 <tcp_slowtmr+0x46a>
 800eea8:	4b4d      	ldr	r3, [pc, #308]	; (800efe0 <tcp_slowtmr+0x594>)
 800eeaa:	f240 526d 	movw	r2, #1389	; 0x56d
 800eeae:	494d      	ldr	r1, [pc, #308]	; (800efe4 <tcp_slowtmr+0x598>)
 800eeb0:	484d      	ldr	r0, [pc, #308]	; (800efe8 <tcp_slowtmr+0x59c>)
 800eeb2:	f008 fceb 	bl	801788c <iprintf>
        prev->next = pcb->next;
 800eeb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb8:	68da      	ldr	r2, [r3, #12]
 800eeba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eebc:	60da      	str	r2, [r3, #12]
 800eebe:	e00f      	b.n	800eee0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800eec0:	4b46      	ldr	r3, [pc, #280]	; (800efdc <tcp_slowtmr+0x590>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d006      	beq.n	800eed8 <tcp_slowtmr+0x48c>
 800eeca:	4b45      	ldr	r3, [pc, #276]	; (800efe0 <tcp_slowtmr+0x594>)
 800eecc:	f240 5271 	movw	r2, #1393	; 0x571
 800eed0:	4946      	ldr	r1, [pc, #280]	; (800efec <tcp_slowtmr+0x5a0>)
 800eed2:	4845      	ldr	r0, [pc, #276]	; (800efe8 <tcp_slowtmr+0x59c>)
 800eed4:	f008 fcda 	bl	801788c <iprintf>
        tcp_active_pcbs = pcb->next;
 800eed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeda:	68db      	ldr	r3, [r3, #12]
 800eedc:	4a3f      	ldr	r2, [pc, #252]	; (800efdc <tcp_slowtmr+0x590>)
 800eede:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800eee0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d013      	beq.n	800ef10 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800eee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeea:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800eeec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800eef0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800eef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef4:	3304      	adds	r3, #4
 800eef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eef8:	8ad2      	ldrh	r2, [r2, #22]
 800eefa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eefc:	8b09      	ldrh	r1, [r1, #24]
 800eefe:	9102      	str	r1, [sp, #8]
 800ef00:	9201      	str	r2, [sp, #4]
 800ef02:	9300      	str	r3, [sp, #0]
 800ef04:	462b      	mov	r3, r5
 800ef06:	4622      	mov	r2, r4
 800ef08:	4601      	mov	r1, r0
 800ef0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef0c:	f004 feae 	bl	8013c6c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ef10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef12:	691b      	ldr	r3, [r3, #16]
 800ef14:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ef16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef18:	7d1b      	ldrb	r3, [r3, #20]
 800ef1a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ef1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ef20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef22:	68db      	ldr	r3, [r3, #12]
 800ef24:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ef26:	6838      	ldr	r0, [r7, #0]
 800ef28:	f7fe fed6 	bl	800dcd8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ef2c:	4b30      	ldr	r3, [pc, #192]	; (800eff0 <tcp_slowtmr+0x5a4>)
 800ef2e:	2200      	movs	r2, #0
 800ef30:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d004      	beq.n	800ef42 <tcp_slowtmr+0x4f6>
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	f06f 010c 	mvn.w	r1, #12
 800ef3e:	68b8      	ldr	r0, [r7, #8]
 800ef40:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ef42:	4b2b      	ldr	r3, [pc, #172]	; (800eff0 <tcp_slowtmr+0x5a4>)
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d037      	beq.n	800efba <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800ef4a:	e590      	b.n	800ea6e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ef4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef4e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ef50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef52:	68db      	ldr	r3, [r3, #12]
 800ef54:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ef56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef58:	7f1b      	ldrb	r3, [r3, #28]
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	b2da      	uxtb	r2, r3
 800ef5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef60:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ef62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef64:	7f1a      	ldrb	r2, [r3, #28]
 800ef66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef68:	7f5b      	ldrb	r3, [r3, #29]
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d325      	bcc.n	800efba <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ef6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef70:	2200      	movs	r2, #0
 800ef72:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ef74:	4b1e      	ldr	r3, [pc, #120]	; (800eff0 <tcp_slowtmr+0x5a4>)
 800ef76:	2200      	movs	r2, #0
 800ef78:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ef7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d00b      	beq.n	800ef9c <tcp_slowtmr+0x550>
 800ef84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef8c:	6912      	ldr	r2, [r2, #16]
 800ef8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef90:	4610      	mov	r0, r2
 800ef92:	4798      	blx	r3
 800ef94:	4603      	mov	r3, r0
 800ef96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ef9a:	e002      	b.n	800efa2 <tcp_slowtmr+0x556>
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800efa2:	4b13      	ldr	r3, [pc, #76]	; (800eff0 <tcp_slowtmr+0x5a4>)
 800efa4:	781b      	ldrb	r3, [r3, #0]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d000      	beq.n	800efac <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800efaa:	e560      	b.n	800ea6e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800efac:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d102      	bne.n	800efba <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800efb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efb6:	f004 f8a5 	bl	8013104 <tcp_output>
  while (pcb != NULL) {
 800efba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	f47f ad5c 	bne.w	800ea7a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800efc2:	2300      	movs	r3, #0
 800efc4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800efc6:	4b0b      	ldr	r3, [pc, #44]	; (800eff4 <tcp_slowtmr+0x5a8>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800efcc:	e067      	b.n	800f09e <tcp_slowtmr+0x652>
 800efce:	bf00      	nop
 800efd0:	2000d63c 	.word	0x2000d63c
 800efd4:	10624dd3 	.word	0x10624dd3
 800efd8:	000124f8 	.word	0x000124f8
 800efdc:	2000d648 	.word	0x2000d648
 800efe0:	0801a1e0 	.word	0x0801a1e0
 800efe4:	0801a618 	.word	0x0801a618
 800efe8:	0801a224 	.word	0x0801a224
 800efec:	0801a644 	.word	0x0801a644
 800eff0:	2000d650 	.word	0x2000d650
 800eff4:	2000d64c 	.word	0x2000d64c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800eff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effa:	7d1b      	ldrb	r3, [r3, #20]
 800effc:	2b0a      	cmp	r3, #10
 800effe:	d006      	beq.n	800f00e <tcp_slowtmr+0x5c2>
 800f000:	4b2b      	ldr	r3, [pc, #172]	; (800f0b0 <tcp_slowtmr+0x664>)
 800f002:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f006:	492b      	ldr	r1, [pc, #172]	; (800f0b4 <tcp_slowtmr+0x668>)
 800f008:	482b      	ldr	r0, [pc, #172]	; (800f0b8 <tcp_slowtmr+0x66c>)
 800f00a:	f008 fc3f 	bl	801788c <iprintf>
    pcb_remove = 0;
 800f00e:	2300      	movs	r3, #0
 800f010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f014:	4b29      	ldr	r3, [pc, #164]	; (800f0bc <tcp_slowtmr+0x670>)
 800f016:	681a      	ldr	r2, [r3, #0]
 800f018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f01a:	6a1b      	ldr	r3, [r3, #32]
 800f01c:	1ad3      	subs	r3, r2, r3
 800f01e:	2bf0      	cmp	r3, #240	; 0xf0
 800f020:	d904      	bls.n	800f02c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f026:	3301      	adds	r3, #1
 800f028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f02c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f030:	2b00      	cmp	r3, #0
 800f032:	d02f      	beq.n	800f094 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f034:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f036:	f000 fbf9 	bl	800f82c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d010      	beq.n	800f062 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f040:	4b1f      	ldr	r3, [pc, #124]	; (800f0c0 <tcp_slowtmr+0x674>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f046:	429a      	cmp	r2, r3
 800f048:	d106      	bne.n	800f058 <tcp_slowtmr+0x60c>
 800f04a:	4b19      	ldr	r3, [pc, #100]	; (800f0b0 <tcp_slowtmr+0x664>)
 800f04c:	f240 52af 	movw	r2, #1455	; 0x5af
 800f050:	491c      	ldr	r1, [pc, #112]	; (800f0c4 <tcp_slowtmr+0x678>)
 800f052:	4819      	ldr	r0, [pc, #100]	; (800f0b8 <tcp_slowtmr+0x66c>)
 800f054:	f008 fc1a 	bl	801788c <iprintf>
        prev->next = pcb->next;
 800f058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05a:	68da      	ldr	r2, [r3, #12]
 800f05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f05e:	60da      	str	r2, [r3, #12]
 800f060:	e00f      	b.n	800f082 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f062:	4b17      	ldr	r3, [pc, #92]	; (800f0c0 <tcp_slowtmr+0x674>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f068:	429a      	cmp	r2, r3
 800f06a:	d006      	beq.n	800f07a <tcp_slowtmr+0x62e>
 800f06c:	4b10      	ldr	r3, [pc, #64]	; (800f0b0 <tcp_slowtmr+0x664>)
 800f06e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f072:	4915      	ldr	r1, [pc, #84]	; (800f0c8 <tcp_slowtmr+0x67c>)
 800f074:	4810      	ldr	r0, [pc, #64]	; (800f0b8 <tcp_slowtmr+0x66c>)
 800f076:	f008 fc09 	bl	801788c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f07c:	68db      	ldr	r3, [r3, #12]
 800f07e:	4a10      	ldr	r2, [pc, #64]	; (800f0c0 <tcp_slowtmr+0x674>)
 800f080:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f084:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f088:	68db      	ldr	r3, [r3, #12]
 800f08a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f08c:	69f8      	ldr	r0, [r7, #28]
 800f08e:	f7fe fe23 	bl	800dcd8 <tcp_free>
 800f092:	e004      	b.n	800f09e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f096:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09a:	68db      	ldr	r3, [r3, #12]
 800f09c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d1a9      	bne.n	800eff8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f0a4:	bf00      	nop
 800f0a6:	bf00      	nop
 800f0a8:	3730      	adds	r7, #48	; 0x30
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bdb0      	pop	{r4, r5, r7, pc}
 800f0ae:	bf00      	nop
 800f0b0:	0801a1e0 	.word	0x0801a1e0
 800f0b4:	0801a670 	.word	0x0801a670
 800f0b8:	0801a224 	.word	0x0801a224
 800f0bc:	2000d63c 	.word	0x2000d63c
 800f0c0:	2000d64c 	.word	0x2000d64c
 800f0c4:	0801a6a0 	.word	0x0801a6a0
 800f0c8:	0801a6c8 	.word	0x0801a6c8

0800f0cc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b082      	sub	sp, #8
 800f0d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f0d2:	4b2d      	ldr	r3, [pc, #180]	; (800f188 <tcp_fasttmr+0xbc>)
 800f0d4:	781b      	ldrb	r3, [r3, #0]
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	b2da      	uxtb	r2, r3
 800f0da:	4b2b      	ldr	r3, [pc, #172]	; (800f188 <tcp_fasttmr+0xbc>)
 800f0dc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f0de:	4b2b      	ldr	r3, [pc, #172]	; (800f18c <tcp_fasttmr+0xc0>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f0e4:	e048      	b.n	800f178 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	7f9a      	ldrb	r2, [r3, #30]
 800f0ea:	4b27      	ldr	r3, [pc, #156]	; (800f188 <tcp_fasttmr+0xbc>)
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d03f      	beq.n	800f172 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f0f2:	4b25      	ldr	r3, [pc, #148]	; (800f188 <tcp_fasttmr+0xbc>)
 800f0f4:	781a      	ldrb	r2, [r3, #0]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	8b5b      	ldrh	r3, [r3, #26]
 800f0fe:	f003 0301 	and.w	r3, r3, #1
 800f102:	2b00      	cmp	r3, #0
 800f104:	d010      	beq.n	800f128 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	8b5b      	ldrh	r3, [r3, #26]
 800f10a:	f043 0302 	orr.w	r3, r3, #2
 800f10e:	b29a      	uxth	r2, r3
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f003 fff5 	bl	8013104 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	8b5b      	ldrh	r3, [r3, #26]
 800f11e:	f023 0303 	bic.w	r3, r3, #3
 800f122:	b29a      	uxth	r2, r3
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	8b5b      	ldrh	r3, [r3, #26]
 800f12c:	f003 0308 	and.w	r3, r3, #8
 800f130:	2b00      	cmp	r3, #0
 800f132:	d009      	beq.n	800f148 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	8b5b      	ldrh	r3, [r3, #26]
 800f138:	f023 0308 	bic.w	r3, r3, #8
 800f13c:	b29a      	uxth	r2, r3
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f7fe ff5c 	bl	800e000 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	68db      	ldr	r3, [r3, #12]
 800f14c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f152:	2b00      	cmp	r3, #0
 800f154:	d00a      	beq.n	800f16c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f156:	4b0e      	ldr	r3, [pc, #56]	; (800f190 <tcp_fasttmr+0xc4>)
 800f158:	2200      	movs	r2, #0
 800f15a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f000 f819 	bl	800f194 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f162:	4b0b      	ldr	r3, [pc, #44]	; (800f190 <tcp_fasttmr+0xc4>)
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d000      	beq.n	800f16c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f16a:	e7b8      	b.n	800f0de <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	607b      	str	r3, [r7, #4]
 800f170:	e002      	b.n	800f178 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	68db      	ldr	r3, [r3, #12]
 800f176:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d1b3      	bne.n	800f0e6 <tcp_fasttmr+0x1a>
    }
  }
}
 800f17e:	bf00      	nop
 800f180:	bf00      	nop
 800f182:	3708      	adds	r7, #8
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}
 800f188:	2000d652 	.word	0x2000d652
 800f18c:	2000d648 	.word	0x2000d648
 800f190:	2000d650 	.word	0x2000d650

0800f194 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f194:	b590      	push	{r4, r7, lr}
 800f196:	b085      	sub	sp, #20
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d109      	bne.n	800f1b6 <tcp_process_refused_data+0x22>
 800f1a2:	4b37      	ldr	r3, [pc, #220]	; (800f280 <tcp_process_refused_data+0xec>)
 800f1a4:	f240 6209 	movw	r2, #1545	; 0x609
 800f1a8:	4936      	ldr	r1, [pc, #216]	; (800f284 <tcp_process_refused_data+0xf0>)
 800f1aa:	4837      	ldr	r0, [pc, #220]	; (800f288 <tcp_process_refused_data+0xf4>)
 800f1ac:	f008 fb6e 	bl	801788c <iprintf>
 800f1b0:	f06f 030f 	mvn.w	r3, #15
 800f1b4:	e060      	b.n	800f278 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1ba:	7b5b      	ldrb	r3, [r3, #13]
 800f1bc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1c2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d00b      	beq.n	800f1ec <tcp_process_refused_data+0x58>
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6918      	ldr	r0, [r3, #16]
 800f1de:	2300      	movs	r3, #0
 800f1e0:	68ba      	ldr	r2, [r7, #8]
 800f1e2:	6879      	ldr	r1, [r7, #4]
 800f1e4:	47a0      	blx	r4
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	73fb      	strb	r3, [r7, #15]
 800f1ea:	e007      	b.n	800f1fc <tcp_process_refused_data+0x68>
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	68ba      	ldr	r2, [r7, #8]
 800f1f0:	6879      	ldr	r1, [r7, #4]
 800f1f2:	2000      	movs	r0, #0
 800f1f4:	f000 f8a4 	bl	800f340 <tcp_recv_null>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f1fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d12a      	bne.n	800f25a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f204:	7bbb      	ldrb	r3, [r7, #14]
 800f206:	f003 0320 	and.w	r3, r3, #32
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d033      	beq.n	800f276 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f212:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f216:	d005      	beq.n	800f224 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f21c:	3301      	adds	r3, #1
 800f21e:	b29a      	uxth	r2, r3
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d00b      	beq.n	800f246 <tcp_process_refused_data+0xb2>
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6918      	ldr	r0, [r3, #16]
 800f238:	2300      	movs	r3, #0
 800f23a:	2200      	movs	r2, #0
 800f23c:	6879      	ldr	r1, [r7, #4]
 800f23e:	47a0      	blx	r4
 800f240:	4603      	mov	r3, r0
 800f242:	73fb      	strb	r3, [r7, #15]
 800f244:	e001      	b.n	800f24a <tcp_process_refused_data+0xb6>
 800f246:	2300      	movs	r3, #0
 800f248:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f24a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f24e:	f113 0f0d 	cmn.w	r3, #13
 800f252:	d110      	bne.n	800f276 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f254:	f06f 030c 	mvn.w	r3, #12
 800f258:	e00e      	b.n	800f278 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f25a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f25e:	f113 0f0d 	cmn.w	r3, #13
 800f262:	d102      	bne.n	800f26a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f264:	f06f 030c 	mvn.w	r3, #12
 800f268:	e006      	b.n	800f278 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	68ba      	ldr	r2, [r7, #8]
 800f26e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f270:	f06f 0304 	mvn.w	r3, #4
 800f274:	e000      	b.n	800f278 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f276:	2300      	movs	r3, #0
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3714      	adds	r7, #20
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd90      	pop	{r4, r7, pc}
 800f280:	0801a1e0 	.word	0x0801a1e0
 800f284:	0801a6f0 	.word	0x0801a6f0
 800f288:	0801a224 	.word	0x0801a224

0800f28c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b084      	sub	sp, #16
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f294:	e007      	b.n	800f2a6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f000 f80a 	bl	800f2b6 <tcp_seg_free>
    seg = next;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d1f4      	bne.n	800f296 <tcp_segs_free+0xa>
  }
}
 800f2ac:	bf00      	nop
 800f2ae:	bf00      	nop
 800f2b0:	3710      	adds	r7, #16
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}

0800f2b6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f2b6:	b580      	push	{r7, lr}
 800f2b8:	b082      	sub	sp, #8
 800f2ba:	af00      	add	r7, sp, #0
 800f2bc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d00c      	beq.n	800f2de <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	685b      	ldr	r3, [r3, #4]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d004      	beq.n	800f2d6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	685b      	ldr	r3, [r3, #4]
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f7fe f9b3 	bl	800d63c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f2d6:	6879      	ldr	r1, [r7, #4]
 800f2d8:	2003      	movs	r0, #3
 800f2da:	f7fd fb0b 	bl	800c8f4 <memp_free>
  }
}
 800f2de:	bf00      	nop
 800f2e0:	3708      	adds	r7, #8
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
	...

0800f2e8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b084      	sub	sp, #16
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d106      	bne.n	800f304 <tcp_seg_copy+0x1c>
 800f2f6:	4b0f      	ldr	r3, [pc, #60]	; (800f334 <tcp_seg_copy+0x4c>)
 800f2f8:	f240 6282 	movw	r2, #1666	; 0x682
 800f2fc:	490e      	ldr	r1, [pc, #56]	; (800f338 <tcp_seg_copy+0x50>)
 800f2fe:	480f      	ldr	r0, [pc, #60]	; (800f33c <tcp_seg_copy+0x54>)
 800f300:	f008 fac4 	bl	801788c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f304:	2003      	movs	r0, #3
 800f306:	f7fd fa7f 	bl	800c808 <memp_malloc>
 800f30a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d101      	bne.n	800f316 <tcp_seg_copy+0x2e>
    return NULL;
 800f312:	2300      	movs	r3, #0
 800f314:	e00a      	b.n	800f32c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f316:	2210      	movs	r2, #16
 800f318:	6879      	ldr	r1, [r7, #4]
 800f31a:	68f8      	ldr	r0, [r7, #12]
 800f31c:	f008 fc3b 	bl	8017b96 <memcpy>
  pbuf_ref(cseg->p);
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	685b      	ldr	r3, [r3, #4]
 800f324:	4618      	mov	r0, r3
 800f326:	f7fe fa2f 	bl	800d788 <pbuf_ref>
  return cseg;
 800f32a:	68fb      	ldr	r3, [r7, #12]
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3710      	adds	r7, #16
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}
 800f334:	0801a1e0 	.word	0x0801a1e0
 800f338:	0801a734 	.word	0x0801a734
 800f33c:	0801a224 	.word	0x0801a224

0800f340 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b084      	sub	sp, #16
 800f344:	af00      	add	r7, sp, #0
 800f346:	60f8      	str	r0, [r7, #12]
 800f348:	60b9      	str	r1, [r7, #8]
 800f34a:	607a      	str	r2, [r7, #4]
 800f34c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d109      	bne.n	800f368 <tcp_recv_null+0x28>
 800f354:	4b12      	ldr	r3, [pc, #72]	; (800f3a0 <tcp_recv_null+0x60>)
 800f356:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f35a:	4912      	ldr	r1, [pc, #72]	; (800f3a4 <tcp_recv_null+0x64>)
 800f35c:	4812      	ldr	r0, [pc, #72]	; (800f3a8 <tcp_recv_null+0x68>)
 800f35e:	f008 fa95 	bl	801788c <iprintf>
 800f362:	f06f 030f 	mvn.w	r3, #15
 800f366:	e016      	b.n	800f396 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d009      	beq.n	800f382 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	891b      	ldrh	r3, [r3, #8]
 800f372:	4619      	mov	r1, r3
 800f374:	68b8      	ldr	r0, [r7, #8]
 800f376:	f7ff f9bb 	bl	800e6f0 <tcp_recved>
    pbuf_free(p);
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f7fe f95e 	bl	800d63c <pbuf_free>
 800f380:	e008      	b.n	800f394 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f382:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d104      	bne.n	800f394 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f38a:	68b8      	ldr	r0, [r7, #8]
 800f38c:	f7fe fea2 	bl	800e0d4 <tcp_close>
 800f390:	4603      	mov	r3, r0
 800f392:	e000      	b.n	800f396 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f394:	2300      	movs	r3, #0
}
 800f396:	4618      	mov	r0, r3
 800f398:	3710      	adds	r7, #16
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}
 800f39e:	bf00      	nop
 800f3a0:	0801a1e0 	.word	0x0801a1e0
 800f3a4:	0801a750 	.word	0x0801a750
 800f3a8:	0801a224 	.word	0x0801a224

0800f3ac <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b086      	sub	sp, #24
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f3b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	db01      	blt.n	800f3c2 <tcp_kill_prio+0x16>
 800f3be:	79fb      	ldrb	r3, [r7, #7]
 800f3c0:	e000      	b.n	800f3c4 <tcp_kill_prio+0x18>
 800f3c2:	237f      	movs	r3, #127	; 0x7f
 800f3c4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f3c6:	7afb      	ldrb	r3, [r7, #11]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d034      	beq.n	800f436 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f3cc:	7afb      	ldrb	r3, [r7, #11]
 800f3ce:	3b01      	subs	r3, #1
 800f3d0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3da:	4b19      	ldr	r3, [pc, #100]	; (800f440 <tcp_kill_prio+0x94>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	617b      	str	r3, [r7, #20]
 800f3e0:	e01f      	b.n	800f422 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	7d5b      	ldrb	r3, [r3, #21]
 800f3e6:	7afa      	ldrb	r2, [r7, #11]
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d80c      	bhi.n	800f406 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f3f0:	7afa      	ldrb	r2, [r7, #11]
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	d112      	bne.n	800f41c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f3f6:	4b13      	ldr	r3, [pc, #76]	; (800f444 <tcp_kill_prio+0x98>)
 800f3f8:	681a      	ldr	r2, [r3, #0]
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	6a1b      	ldr	r3, [r3, #32]
 800f3fe:	1ad3      	subs	r3, r2, r3
 800f400:	68fa      	ldr	r2, [r7, #12]
 800f402:	429a      	cmp	r2, r3
 800f404:	d80a      	bhi.n	800f41c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f406:	4b0f      	ldr	r3, [pc, #60]	; (800f444 <tcp_kill_prio+0x98>)
 800f408:	681a      	ldr	r2, [r3, #0]
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	6a1b      	ldr	r3, [r3, #32]
 800f40e:	1ad3      	subs	r3, r2, r3
 800f410:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	7d5b      	ldrb	r3, [r3, #21]
 800f41a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	68db      	ldr	r3, [r3, #12]
 800f420:	617b      	str	r3, [r7, #20]
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d1dc      	bne.n	800f3e2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f428:	693b      	ldr	r3, [r7, #16]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d004      	beq.n	800f438 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f42e:	6938      	ldr	r0, [r7, #16]
 800f430:	f7fe ff96 	bl	800e360 <tcp_abort>
 800f434:	e000      	b.n	800f438 <tcp_kill_prio+0x8c>
    return;
 800f436:	bf00      	nop
  }
}
 800f438:	3718      	adds	r7, #24
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
 800f43e:	bf00      	nop
 800f440:	2000d648 	.word	0x2000d648
 800f444:	2000d63c 	.word	0x2000d63c

0800f448 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b086      	sub	sp, #24
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	4603      	mov	r3, r0
 800f450:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f452:	79fb      	ldrb	r3, [r7, #7]
 800f454:	2b08      	cmp	r3, #8
 800f456:	d009      	beq.n	800f46c <tcp_kill_state+0x24>
 800f458:	79fb      	ldrb	r3, [r7, #7]
 800f45a:	2b09      	cmp	r3, #9
 800f45c:	d006      	beq.n	800f46c <tcp_kill_state+0x24>
 800f45e:	4b1a      	ldr	r3, [pc, #104]	; (800f4c8 <tcp_kill_state+0x80>)
 800f460:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f464:	4919      	ldr	r1, [pc, #100]	; (800f4cc <tcp_kill_state+0x84>)
 800f466:	481a      	ldr	r0, [pc, #104]	; (800f4d0 <tcp_kill_state+0x88>)
 800f468:	f008 fa10 	bl	801788c <iprintf>

  inactivity = 0;
 800f46c:	2300      	movs	r3, #0
 800f46e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f470:	2300      	movs	r3, #0
 800f472:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f474:	4b17      	ldr	r3, [pc, #92]	; (800f4d4 <tcp_kill_state+0x8c>)
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	617b      	str	r3, [r7, #20]
 800f47a:	e017      	b.n	800f4ac <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	7d1b      	ldrb	r3, [r3, #20]
 800f480:	79fa      	ldrb	r2, [r7, #7]
 800f482:	429a      	cmp	r2, r3
 800f484:	d10f      	bne.n	800f4a6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f486:	4b14      	ldr	r3, [pc, #80]	; (800f4d8 <tcp_kill_state+0x90>)
 800f488:	681a      	ldr	r2, [r3, #0]
 800f48a:	697b      	ldr	r3, [r7, #20]
 800f48c:	6a1b      	ldr	r3, [r3, #32]
 800f48e:	1ad3      	subs	r3, r2, r3
 800f490:	68fa      	ldr	r2, [r7, #12]
 800f492:	429a      	cmp	r2, r3
 800f494:	d807      	bhi.n	800f4a6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f496:	4b10      	ldr	r3, [pc, #64]	; (800f4d8 <tcp_kill_state+0x90>)
 800f498:	681a      	ldr	r2, [r3, #0]
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	6a1b      	ldr	r3, [r3, #32]
 800f49e:	1ad3      	subs	r3, r2, r3
 800f4a0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	68db      	ldr	r3, [r3, #12]
 800f4aa:	617b      	str	r3, [r7, #20]
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d1e4      	bne.n	800f47c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d003      	beq.n	800f4c0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f4b8:	2100      	movs	r1, #0
 800f4ba:	6938      	ldr	r0, [r7, #16]
 800f4bc:	f7fe fe92 	bl	800e1e4 <tcp_abandon>
  }
}
 800f4c0:	bf00      	nop
 800f4c2:	3718      	adds	r7, #24
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}
 800f4c8:	0801a1e0 	.word	0x0801a1e0
 800f4cc:	0801a76c 	.word	0x0801a76c
 800f4d0:	0801a224 	.word	0x0801a224
 800f4d4:	2000d648 	.word	0x2000d648
 800f4d8:	2000d63c 	.word	0x2000d63c

0800f4dc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b084      	sub	sp, #16
 800f4e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4ea:	4b12      	ldr	r3, [pc, #72]	; (800f534 <tcp_kill_timewait+0x58>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	60fb      	str	r3, [r7, #12]
 800f4f0:	e012      	b.n	800f518 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f4f2:	4b11      	ldr	r3, [pc, #68]	; (800f538 <tcp_kill_timewait+0x5c>)
 800f4f4:	681a      	ldr	r2, [r3, #0]
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	6a1b      	ldr	r3, [r3, #32]
 800f4fa:	1ad3      	subs	r3, r2, r3
 800f4fc:	687a      	ldr	r2, [r7, #4]
 800f4fe:	429a      	cmp	r2, r3
 800f500:	d807      	bhi.n	800f512 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f502:	4b0d      	ldr	r3, [pc, #52]	; (800f538 <tcp_kill_timewait+0x5c>)
 800f504:	681a      	ldr	r2, [r3, #0]
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	6a1b      	ldr	r3, [r3, #32]
 800f50a:	1ad3      	subs	r3, r2, r3
 800f50c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	68db      	ldr	r3, [r3, #12]
 800f516:	60fb      	str	r3, [r7, #12]
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d1e9      	bne.n	800f4f2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d002      	beq.n	800f52a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f524:	68b8      	ldr	r0, [r7, #8]
 800f526:	f7fe ff1b 	bl	800e360 <tcp_abort>
  }
}
 800f52a:	bf00      	nop
 800f52c:	3710      	adds	r7, #16
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}
 800f532:	bf00      	nop
 800f534:	2000d64c 	.word	0x2000d64c
 800f538:	2000d63c 	.word	0x2000d63c

0800f53c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b082      	sub	sp, #8
 800f540:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f542:	4b10      	ldr	r3, [pc, #64]	; (800f584 <tcp_handle_closepend+0x48>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f548:	e014      	b.n	800f574 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	68db      	ldr	r3, [r3, #12]
 800f54e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	8b5b      	ldrh	r3, [r3, #26]
 800f554:	f003 0308 	and.w	r3, r3, #8
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d009      	beq.n	800f570 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	8b5b      	ldrh	r3, [r3, #26]
 800f560:	f023 0308 	bic.w	r3, r3, #8
 800f564:	b29a      	uxth	r2, r3
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f7fe fd48 	bl	800e000 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d1e7      	bne.n	800f54a <tcp_handle_closepend+0xe>
  }
}
 800f57a:	bf00      	nop
 800f57c:	bf00      	nop
 800f57e:	3708      	adds	r7, #8
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}
 800f584:	2000d648 	.word	0x2000d648

0800f588 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b084      	sub	sp, #16
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	4603      	mov	r3, r0
 800f590:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f592:	2001      	movs	r0, #1
 800f594:	f7fd f938 	bl	800c808 <memp_malloc>
 800f598:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d126      	bne.n	800f5ee <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f5a0:	f7ff ffcc 	bl	800f53c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f5a4:	f7ff ff9a 	bl	800f4dc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f5a8:	2001      	movs	r0, #1
 800f5aa:	f7fd f92d 	bl	800c808 <memp_malloc>
 800f5ae:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d11b      	bne.n	800f5ee <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f5b6:	2009      	movs	r0, #9
 800f5b8:	f7ff ff46 	bl	800f448 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f5bc:	2001      	movs	r0, #1
 800f5be:	f7fd f923 	bl	800c808 <memp_malloc>
 800f5c2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d111      	bne.n	800f5ee <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f5ca:	2008      	movs	r0, #8
 800f5cc:	f7ff ff3c 	bl	800f448 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f5d0:	2001      	movs	r0, #1
 800f5d2:	f7fd f919 	bl	800c808 <memp_malloc>
 800f5d6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d107      	bne.n	800f5ee <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f5de:	79fb      	ldrb	r3, [r7, #7]
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f7ff fee3 	bl	800f3ac <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f5e6:	2001      	movs	r0, #1
 800f5e8:	f7fd f90e 	bl	800c808 <memp_malloc>
 800f5ec:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d03f      	beq.n	800f674 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f5f4:	229c      	movs	r2, #156	; 0x9c
 800f5f6:	2100      	movs	r1, #0
 800f5f8:	68f8      	ldr	r0, [r7, #12]
 800f5fa:	f008 f9e6 	bl	80179ca <memset>
    pcb->prio = prio;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	79fa      	ldrb	r2, [r7, #7]
 800f602:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f60a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f614:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	22ff      	movs	r2, #255	; 0xff
 800f622:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f62a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	2206      	movs	r2, #6
 800f630:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	2206      	movs	r2, #6
 800f638:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f640:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	2201      	movs	r2, #1
 800f646:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f64a:	4b0d      	ldr	r3, [pc, #52]	; (800f680 <tcp_alloc+0xf8>)
 800f64c:	681a      	ldr	r2, [r3, #0]
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f652:	4b0c      	ldr	r3, [pc, #48]	; (800f684 <tcp_alloc+0xfc>)
 800f654:	781a      	ldrb	r2, [r3, #0]
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f660:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	4a08      	ldr	r2, [pc, #32]	; (800f688 <tcp_alloc+0x100>)
 800f668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	4a07      	ldr	r2, [pc, #28]	; (800f68c <tcp_alloc+0x104>)
 800f670:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f674:	68fb      	ldr	r3, [r7, #12]
}
 800f676:	4618      	mov	r0, r3
 800f678:	3710      	adds	r7, #16
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
 800f67e:	bf00      	nop
 800f680:	2000d63c 	.word	0x2000d63c
 800f684:	2000d652 	.word	0x2000d652
 800f688:	0800f341 	.word	0x0800f341
 800f68c:	006ddd00 	.word	0x006ddd00

0800f690 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b084      	sub	sp, #16
 800f694:	af00      	add	r7, sp, #0
 800f696:	4603      	mov	r3, r0
 800f698:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f69a:	2040      	movs	r0, #64	; 0x40
 800f69c:	f7ff ff74 	bl	800f588 <tcp_alloc>
 800f6a0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3710      	adds	r7, #16
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b083      	sub	sp, #12
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d002      	beq.n	800f6c2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	683a      	ldr	r2, [r7, #0]
 800f6c0:	611a      	str	r2, [r3, #16]
  }
}
 800f6c2:	bf00      	nop
 800f6c4:	370c      	adds	r7, #12
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6cc:	4770      	bx	lr
	...

0800f6d0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b082      	sub	sp, #8
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d00e      	beq.n	800f6fe <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	7d1b      	ldrb	r3, [r3, #20]
 800f6e4:	2b01      	cmp	r3, #1
 800f6e6:	d106      	bne.n	800f6f6 <tcp_recv+0x26>
 800f6e8:	4b07      	ldr	r3, [pc, #28]	; (800f708 <tcp_recv+0x38>)
 800f6ea:	f240 72df 	movw	r2, #2015	; 0x7df
 800f6ee:	4907      	ldr	r1, [pc, #28]	; (800f70c <tcp_recv+0x3c>)
 800f6f0:	4807      	ldr	r0, [pc, #28]	; (800f710 <tcp_recv+0x40>)
 800f6f2:	f008 f8cb 	bl	801788c <iprintf>
    pcb->recv = recv;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	683a      	ldr	r2, [r7, #0]
 800f6fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f6fe:	bf00      	nop
 800f700:	3708      	adds	r7, #8
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}
 800f706:	bf00      	nop
 800f708:	0801a1e0 	.word	0x0801a1e0
 800f70c:	0801a77c 	.word	0x0801a77c
 800f710:	0801a224 	.word	0x0801a224

0800f714 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b082      	sub	sp, #8
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
 800f71c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d00e      	beq.n	800f742 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	7d1b      	ldrb	r3, [r3, #20]
 800f728:	2b01      	cmp	r3, #1
 800f72a:	d106      	bne.n	800f73a <tcp_sent+0x26>
 800f72c:	4b07      	ldr	r3, [pc, #28]	; (800f74c <tcp_sent+0x38>)
 800f72e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f732:	4907      	ldr	r1, [pc, #28]	; (800f750 <tcp_sent+0x3c>)
 800f734:	4807      	ldr	r0, [pc, #28]	; (800f754 <tcp_sent+0x40>)
 800f736:	f008 f8a9 	bl	801788c <iprintf>
    pcb->sent = sent;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	683a      	ldr	r2, [r7, #0]
 800f73e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f742:	bf00      	nop
 800f744:	3708      	adds	r7, #8
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}
 800f74a:	bf00      	nop
 800f74c:	0801a1e0 	.word	0x0801a1e0
 800f750:	0801a7a4 	.word	0x0801a7a4
 800f754:	0801a224 	.word	0x0801a224

0800f758 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d00e      	beq.n	800f786 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	7d1b      	ldrb	r3, [r3, #20]
 800f76c:	2b01      	cmp	r3, #1
 800f76e:	d106      	bne.n	800f77e <tcp_err+0x26>
 800f770:	4b07      	ldr	r3, [pc, #28]	; (800f790 <tcp_err+0x38>)
 800f772:	f640 020d 	movw	r2, #2061	; 0x80d
 800f776:	4907      	ldr	r1, [pc, #28]	; (800f794 <tcp_err+0x3c>)
 800f778:	4807      	ldr	r0, [pc, #28]	; (800f798 <tcp_err+0x40>)
 800f77a:	f008 f887 	bl	801788c <iprintf>
    pcb->errf = err;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	683a      	ldr	r2, [r7, #0]
 800f782:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f786:	bf00      	nop
 800f788:	3708      	adds	r7, #8
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop
 800f790:	0801a1e0 	.word	0x0801a1e0
 800f794:	0801a7cc 	.word	0x0801a7cc
 800f798:	0801a224 	.word	0x0801a224

0800f79c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f79c:	b480      	push	{r7}
 800f79e:	b085      	sub	sp, #20
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
 800f7a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d008      	beq.n	800f7be <tcp_accept+0x22>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	7d1b      	ldrb	r3, [r3, #20]
 800f7b0:	2b01      	cmp	r3, #1
 800f7b2:	d104      	bne.n	800f7be <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	683a      	ldr	r2, [r7, #0]
 800f7bc:	619a      	str	r2, [r3, #24]
  }
}
 800f7be:	bf00      	nop
 800f7c0:	3714      	adds	r7, #20
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c8:	4770      	bx	lr
	...

0800f7cc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	60f8      	str	r0, [r7, #12]
 800f7d4:	60b9      	str	r1, [r7, #8]
 800f7d6:	4613      	mov	r3, r2
 800f7d8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d107      	bne.n	800f7f0 <tcp_poll+0x24>
 800f7e0:	4b0e      	ldr	r3, [pc, #56]	; (800f81c <tcp_poll+0x50>)
 800f7e2:	f640 023d 	movw	r2, #2109	; 0x83d
 800f7e6:	490e      	ldr	r1, [pc, #56]	; (800f820 <tcp_poll+0x54>)
 800f7e8:	480e      	ldr	r0, [pc, #56]	; (800f824 <tcp_poll+0x58>)
 800f7ea:	f008 f84f 	bl	801788c <iprintf>
 800f7ee:	e011      	b.n	800f814 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	7d1b      	ldrb	r3, [r3, #20]
 800f7f4:	2b01      	cmp	r3, #1
 800f7f6:	d106      	bne.n	800f806 <tcp_poll+0x3a>
 800f7f8:	4b08      	ldr	r3, [pc, #32]	; (800f81c <tcp_poll+0x50>)
 800f7fa:	f640 023e 	movw	r2, #2110	; 0x83e
 800f7fe:	490a      	ldr	r1, [pc, #40]	; (800f828 <tcp_poll+0x5c>)
 800f800:	4808      	ldr	r0, [pc, #32]	; (800f824 <tcp_poll+0x58>)
 800f802:	f008 f843 	bl	801788c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	68ba      	ldr	r2, [r7, #8]
 800f80a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	79fa      	ldrb	r2, [r7, #7]
 800f812:	775a      	strb	r2, [r3, #29]
}
 800f814:	3710      	adds	r7, #16
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}
 800f81a:	bf00      	nop
 800f81c:	0801a1e0 	.word	0x0801a1e0
 800f820:	0801a7f4 	.word	0x0801a7f4
 800f824:	0801a224 	.word	0x0801a224
 800f828:	0801a80c 	.word	0x0801a80c

0800f82c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b082      	sub	sp, #8
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d107      	bne.n	800f84a <tcp_pcb_purge+0x1e>
 800f83a:	4b21      	ldr	r3, [pc, #132]	; (800f8c0 <tcp_pcb_purge+0x94>)
 800f83c:	f640 0251 	movw	r2, #2129	; 0x851
 800f840:	4920      	ldr	r1, [pc, #128]	; (800f8c4 <tcp_pcb_purge+0x98>)
 800f842:	4821      	ldr	r0, [pc, #132]	; (800f8c8 <tcp_pcb_purge+0x9c>)
 800f844:	f008 f822 	bl	801788c <iprintf>
 800f848:	e037      	b.n	800f8ba <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	7d1b      	ldrb	r3, [r3, #20]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d033      	beq.n	800f8ba <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f856:	2b0a      	cmp	r3, #10
 800f858:	d02f      	beq.n	800f8ba <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f85e:	2b01      	cmp	r3, #1
 800f860:	d02b      	beq.n	800f8ba <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f866:	2b00      	cmp	r3, #0
 800f868:	d007      	beq.n	800f87a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f86e:	4618      	mov	r0, r3
 800f870:	f7fd fee4 	bl	800d63c <pbuf_free>
      pcb->refused_data = NULL;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2200      	movs	r2, #0
 800f878:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d002      	beq.n	800f888 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f000 f986 	bl	800fb94 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f88e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f894:	4618      	mov	r0, r3
 800f896:	f7ff fcf9 	bl	800f28c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7ff fcf4 	bl	800f28c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	66da      	str	r2, [r3, #108]	; 0x6c
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f8ba:	3708      	adds	r7, #8
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}
 800f8c0:	0801a1e0 	.word	0x0801a1e0
 800f8c4:	0801a82c 	.word	0x0801a82c
 800f8c8:	0801a224 	.word	0x0801a224

0800f8cc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b084      	sub	sp, #16
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
 800f8d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d106      	bne.n	800f8ea <tcp_pcb_remove+0x1e>
 800f8dc:	4b3e      	ldr	r3, [pc, #248]	; (800f9d8 <tcp_pcb_remove+0x10c>)
 800f8de:	f640 0283 	movw	r2, #2179	; 0x883
 800f8e2:	493e      	ldr	r1, [pc, #248]	; (800f9dc <tcp_pcb_remove+0x110>)
 800f8e4:	483e      	ldr	r0, [pc, #248]	; (800f9e0 <tcp_pcb_remove+0x114>)
 800f8e6:	f007 ffd1 	bl	801788c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d106      	bne.n	800f8fe <tcp_pcb_remove+0x32>
 800f8f0:	4b39      	ldr	r3, [pc, #228]	; (800f9d8 <tcp_pcb_remove+0x10c>)
 800f8f2:	f640 0284 	movw	r2, #2180	; 0x884
 800f8f6:	493b      	ldr	r1, [pc, #236]	; (800f9e4 <tcp_pcb_remove+0x118>)
 800f8f8:	4839      	ldr	r0, [pc, #228]	; (800f9e0 <tcp_pcb_remove+0x114>)
 800f8fa:	f007 ffc7 	bl	801788c <iprintf>

  TCP_RMV(pcblist, pcb);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	683a      	ldr	r2, [r7, #0]
 800f904:	429a      	cmp	r2, r3
 800f906:	d105      	bne.n	800f914 <tcp_pcb_remove+0x48>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	68da      	ldr	r2, [r3, #12]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	601a      	str	r2, [r3, #0]
 800f912:	e013      	b.n	800f93c <tcp_pcb_remove+0x70>
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	60fb      	str	r3, [r7, #12]
 800f91a:	e00c      	b.n	800f936 <tcp_pcb_remove+0x6a>
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	68db      	ldr	r3, [r3, #12]
 800f920:	683a      	ldr	r2, [r7, #0]
 800f922:	429a      	cmp	r2, r3
 800f924:	d104      	bne.n	800f930 <tcp_pcb_remove+0x64>
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	68da      	ldr	r2, [r3, #12]
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	60da      	str	r2, [r3, #12]
 800f92e:	e005      	b.n	800f93c <tcp_pcb_remove+0x70>
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	68db      	ldr	r3, [r3, #12]
 800f934:	60fb      	str	r3, [r7, #12]
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d1ef      	bne.n	800f91c <tcp_pcb_remove+0x50>
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	2200      	movs	r2, #0
 800f940:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f942:	6838      	ldr	r0, [r7, #0]
 800f944:	f7ff ff72 	bl	800f82c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	7d1b      	ldrb	r3, [r3, #20]
 800f94c:	2b0a      	cmp	r3, #10
 800f94e:	d013      	beq.n	800f978 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f954:	2b01      	cmp	r3, #1
 800f956:	d00f      	beq.n	800f978 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	8b5b      	ldrh	r3, [r3, #26]
 800f95c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f960:	2b00      	cmp	r3, #0
 800f962:	d009      	beq.n	800f978 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	8b5b      	ldrh	r3, [r3, #26]
 800f968:	f043 0302 	orr.w	r3, r3, #2
 800f96c:	b29a      	uxth	r2, r3
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f972:	6838      	ldr	r0, [r7, #0]
 800f974:	f003 fbc6 	bl	8013104 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	7d1b      	ldrb	r3, [r3, #20]
 800f97c:	2b01      	cmp	r3, #1
 800f97e:	d020      	beq.n	800f9c2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f984:	2b00      	cmp	r3, #0
 800f986:	d006      	beq.n	800f996 <tcp_pcb_remove+0xca>
 800f988:	4b13      	ldr	r3, [pc, #76]	; (800f9d8 <tcp_pcb_remove+0x10c>)
 800f98a:	f640 0293 	movw	r2, #2195	; 0x893
 800f98e:	4916      	ldr	r1, [pc, #88]	; (800f9e8 <tcp_pcb_remove+0x11c>)
 800f990:	4813      	ldr	r0, [pc, #76]	; (800f9e0 <tcp_pcb_remove+0x114>)
 800f992:	f007 ff7b 	bl	801788c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d006      	beq.n	800f9ac <tcp_pcb_remove+0xe0>
 800f99e:	4b0e      	ldr	r3, [pc, #56]	; (800f9d8 <tcp_pcb_remove+0x10c>)
 800f9a0:	f640 0294 	movw	r2, #2196	; 0x894
 800f9a4:	4911      	ldr	r1, [pc, #68]	; (800f9ec <tcp_pcb_remove+0x120>)
 800f9a6:	480e      	ldr	r0, [pc, #56]	; (800f9e0 <tcp_pcb_remove+0x114>)
 800f9a8:	f007 ff70 	bl	801788c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d006      	beq.n	800f9c2 <tcp_pcb_remove+0xf6>
 800f9b4:	4b08      	ldr	r3, [pc, #32]	; (800f9d8 <tcp_pcb_remove+0x10c>)
 800f9b6:	f640 0296 	movw	r2, #2198	; 0x896
 800f9ba:	490d      	ldr	r1, [pc, #52]	; (800f9f0 <tcp_pcb_remove+0x124>)
 800f9bc:	4808      	ldr	r0, [pc, #32]	; (800f9e0 <tcp_pcb_remove+0x114>)
 800f9be:	f007 ff65 	bl	801788c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f9ce:	bf00      	nop
 800f9d0:	3710      	adds	r7, #16
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
 800f9d6:	bf00      	nop
 800f9d8:	0801a1e0 	.word	0x0801a1e0
 800f9dc:	0801a848 	.word	0x0801a848
 800f9e0:	0801a224 	.word	0x0801a224
 800f9e4:	0801a864 	.word	0x0801a864
 800f9e8:	0801a884 	.word	0x0801a884
 800f9ec:	0801a89c 	.word	0x0801a89c
 800f9f0:	0801a8b8 	.word	0x0801a8b8

0800f9f4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d106      	bne.n	800fa10 <tcp_next_iss+0x1c>
 800fa02:	4b0a      	ldr	r3, [pc, #40]	; (800fa2c <tcp_next_iss+0x38>)
 800fa04:	f640 02af 	movw	r2, #2223	; 0x8af
 800fa08:	4909      	ldr	r1, [pc, #36]	; (800fa30 <tcp_next_iss+0x3c>)
 800fa0a:	480a      	ldr	r0, [pc, #40]	; (800fa34 <tcp_next_iss+0x40>)
 800fa0c:	f007 ff3e 	bl	801788c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fa10:	4b09      	ldr	r3, [pc, #36]	; (800fa38 <tcp_next_iss+0x44>)
 800fa12:	681a      	ldr	r2, [r3, #0]
 800fa14:	4b09      	ldr	r3, [pc, #36]	; (800fa3c <tcp_next_iss+0x48>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	4413      	add	r3, r2
 800fa1a:	4a07      	ldr	r2, [pc, #28]	; (800fa38 <tcp_next_iss+0x44>)
 800fa1c:	6013      	str	r3, [r2, #0]
  return iss;
 800fa1e:	4b06      	ldr	r3, [pc, #24]	; (800fa38 <tcp_next_iss+0x44>)
 800fa20:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	3708      	adds	r7, #8
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}
 800fa2a:	bf00      	nop
 800fa2c:	0801a1e0 	.word	0x0801a1e0
 800fa30:	0801a8d0 	.word	0x0801a8d0
 800fa34:	0801a224 	.word	0x0801a224
 800fa38:	20000028 	.word	0x20000028
 800fa3c:	2000d63c 	.word	0x2000d63c

0800fa40 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b086      	sub	sp, #24
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	4603      	mov	r3, r0
 800fa48:	60b9      	str	r1, [r7, #8]
 800fa4a:	607a      	str	r2, [r7, #4]
 800fa4c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d106      	bne.n	800fa62 <tcp_eff_send_mss_netif+0x22>
 800fa54:	4b14      	ldr	r3, [pc, #80]	; (800faa8 <tcp_eff_send_mss_netif+0x68>)
 800fa56:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800fa5a:	4914      	ldr	r1, [pc, #80]	; (800faac <tcp_eff_send_mss_netif+0x6c>)
 800fa5c:	4814      	ldr	r0, [pc, #80]	; (800fab0 <tcp_eff_send_mss_netif+0x70>)
 800fa5e:	f007 ff15 	bl	801788c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d101      	bne.n	800fa6c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fa68:	89fb      	ldrh	r3, [r7, #14]
 800fa6a:	e019      	b.n	800faa0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fa70:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fa72:	8afb      	ldrh	r3, [r7, #22]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d012      	beq.n	800fa9e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fa78:	2328      	movs	r3, #40	; 0x28
 800fa7a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fa7c:	8afa      	ldrh	r2, [r7, #22]
 800fa7e:	8abb      	ldrh	r3, [r7, #20]
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d904      	bls.n	800fa8e <tcp_eff_send_mss_netif+0x4e>
 800fa84:	8afa      	ldrh	r2, [r7, #22]
 800fa86:	8abb      	ldrh	r3, [r7, #20]
 800fa88:	1ad3      	subs	r3, r2, r3
 800fa8a:	b29b      	uxth	r3, r3
 800fa8c:	e000      	b.n	800fa90 <tcp_eff_send_mss_netif+0x50>
 800fa8e:	2300      	movs	r3, #0
 800fa90:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fa92:	8a7a      	ldrh	r2, [r7, #18]
 800fa94:	89fb      	ldrh	r3, [r7, #14]
 800fa96:	4293      	cmp	r3, r2
 800fa98:	bf28      	it	cs
 800fa9a:	4613      	movcs	r3, r2
 800fa9c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fa9e:	89fb      	ldrh	r3, [r7, #14]
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	3718      	adds	r7, #24
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}
 800faa8:	0801a1e0 	.word	0x0801a1e0
 800faac:	0801a8ec 	.word	0x0801a8ec
 800fab0:	0801a224 	.word	0x0801a224

0800fab4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b084      	sub	sp, #16
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d119      	bne.n	800fafc <tcp_netif_ip_addr_changed_pcblist+0x48>
 800fac8:	4b10      	ldr	r3, [pc, #64]	; (800fb0c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800faca:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800face:	4910      	ldr	r1, [pc, #64]	; (800fb10 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fad0:	4810      	ldr	r0, [pc, #64]	; (800fb14 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fad2:	f007 fedb 	bl	801788c <iprintf>

  while (pcb != NULL) {
 800fad6:	e011      	b.n	800fafc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	681a      	ldr	r2, [r3, #0]
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	429a      	cmp	r2, r3
 800fae2:	d108      	bne.n	800faf6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	68db      	ldr	r3, [r3, #12]
 800fae8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800faea:	68f8      	ldr	r0, [r7, #12]
 800faec:	f7fe fc38 	bl	800e360 <tcp_abort>
      pcb = next;
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	60fb      	str	r3, [r7, #12]
 800faf4:	e002      	b.n	800fafc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	68db      	ldr	r3, [r3, #12]
 800fafa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d1ea      	bne.n	800fad8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fb02:	bf00      	nop
 800fb04:	bf00      	nop
 800fb06:	3710      	adds	r7, #16
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}
 800fb0c:	0801a1e0 	.word	0x0801a1e0
 800fb10:	0801a914 	.word	0x0801a914
 800fb14:	0801a224 	.word	0x0801a224

0800fb18 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b084      	sub	sp, #16
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d02a      	beq.n	800fb7e <tcp_netif_ip_addr_changed+0x66>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d026      	beq.n	800fb7e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800fb30:	4b15      	ldr	r3, [pc, #84]	; (800fb88 <tcp_netif_ip_addr_changed+0x70>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	4619      	mov	r1, r3
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f7ff ffbc 	bl	800fab4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800fb3c:	4b13      	ldr	r3, [pc, #76]	; (800fb8c <tcp_netif_ip_addr_changed+0x74>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	4619      	mov	r1, r3
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f7ff ffb6 	bl	800fab4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d017      	beq.n	800fb7e <tcp_netif_ip_addr_changed+0x66>
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d013      	beq.n	800fb7e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fb56:	4b0e      	ldr	r3, [pc, #56]	; (800fb90 <tcp_netif_ip_addr_changed+0x78>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	60fb      	str	r3, [r7, #12]
 800fb5c:	e00c      	b.n	800fb78 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	681a      	ldr	r2, [r3, #0]
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d103      	bne.n	800fb72 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	681a      	ldr	r2, [r3, #0]
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	68db      	ldr	r3, [r3, #12]
 800fb76:	60fb      	str	r3, [r7, #12]
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d1ef      	bne.n	800fb5e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800fb7e:	bf00      	nop
 800fb80:	3710      	adds	r7, #16
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	2000d648 	.word	0x2000d648
 800fb8c:	2000d640 	.word	0x2000d640
 800fb90:	2000d644 	.word	0x2000d644

0800fb94 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b082      	sub	sp, #8
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d007      	beq.n	800fbb4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f7ff fb6f 	bl	800f28c <tcp_segs_free>
    pcb->ooseq = NULL;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800fbb4:	bf00      	nop
 800fbb6:	3708      	adds	r7, #8
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}

0800fbbc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800fbbc:	b590      	push	{r4, r7, lr}
 800fbbe:	b08d      	sub	sp, #52	; 0x34
 800fbc0:	af04      	add	r7, sp, #16
 800fbc2:	6078      	str	r0, [r7, #4]
 800fbc4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d105      	bne.n	800fbd8 <tcp_input+0x1c>
 800fbcc:	4b9b      	ldr	r3, [pc, #620]	; (800fe3c <tcp_input+0x280>)
 800fbce:	2283      	movs	r2, #131	; 0x83
 800fbd0:	499b      	ldr	r1, [pc, #620]	; (800fe40 <tcp_input+0x284>)
 800fbd2:	489c      	ldr	r0, [pc, #624]	; (800fe44 <tcp_input+0x288>)
 800fbd4:	f007 fe5a 	bl	801788c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	685b      	ldr	r3, [r3, #4]
 800fbdc:	4a9a      	ldr	r2, [pc, #616]	; (800fe48 <tcp_input+0x28c>)
 800fbde:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	895b      	ldrh	r3, [r3, #10]
 800fbe4:	2b13      	cmp	r3, #19
 800fbe6:	f240 83d1 	bls.w	801038c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fbea:	4b98      	ldr	r3, [pc, #608]	; (800fe4c <tcp_input+0x290>)
 800fbec:	695b      	ldr	r3, [r3, #20]
 800fbee:	4a97      	ldr	r2, [pc, #604]	; (800fe4c <tcp_input+0x290>)
 800fbf0:	6812      	ldr	r2, [r2, #0]
 800fbf2:	4611      	mov	r1, r2
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f006 fc3d 	bl	8016474 <ip4_addr_isbroadcast_u32>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	f040 83c7 	bne.w	8010390 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fc02:	4b92      	ldr	r3, [pc, #584]	; (800fe4c <tcp_input+0x290>)
 800fc04:	695b      	ldr	r3, [r3, #20]
 800fc06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fc0a:	2be0      	cmp	r3, #224	; 0xe0
 800fc0c:	f000 83c0 	beq.w	8010390 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800fc10:	4b8d      	ldr	r3, [pc, #564]	; (800fe48 <tcp_input+0x28c>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	899b      	ldrh	r3, [r3, #12]
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7fc f91d 	bl	800be58 <lwip_htons>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	0b1b      	lsrs	r3, r3, #12
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	b2db      	uxtb	r3, r3
 800fc26:	009b      	lsls	r3, r3, #2
 800fc28:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800fc2a:	7cbb      	ldrb	r3, [r7, #18]
 800fc2c:	2b13      	cmp	r3, #19
 800fc2e:	f240 83b1 	bls.w	8010394 <tcp_input+0x7d8>
 800fc32:	7cbb      	ldrb	r3, [r7, #18]
 800fc34:	b29a      	uxth	r2, r3
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	891b      	ldrh	r3, [r3, #8]
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	f200 83aa 	bhi.w	8010394 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fc40:	7cbb      	ldrb	r3, [r7, #18]
 800fc42:	b29b      	uxth	r3, r3
 800fc44:	3b14      	subs	r3, #20
 800fc46:	b29a      	uxth	r2, r3
 800fc48:	4b81      	ldr	r3, [pc, #516]	; (800fe50 <tcp_input+0x294>)
 800fc4a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800fc4c:	4b81      	ldr	r3, [pc, #516]	; (800fe54 <tcp_input+0x298>)
 800fc4e:	2200      	movs	r2, #0
 800fc50:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	895a      	ldrh	r2, [r3, #10]
 800fc56:	7cbb      	ldrb	r3, [r7, #18]
 800fc58:	b29b      	uxth	r3, r3
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d309      	bcc.n	800fc72 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800fc5e:	4b7c      	ldr	r3, [pc, #496]	; (800fe50 <tcp_input+0x294>)
 800fc60:	881a      	ldrh	r2, [r3, #0]
 800fc62:	4b7d      	ldr	r3, [pc, #500]	; (800fe58 <tcp_input+0x29c>)
 800fc64:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fc66:	7cbb      	ldrb	r3, [r7, #18]
 800fc68:	4619      	mov	r1, r3
 800fc6a:	6878      	ldr	r0, [r7, #4]
 800fc6c:	f7fd fc60 	bl	800d530 <pbuf_remove_header>
 800fc70:	e04e      	b.n	800fd10 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d105      	bne.n	800fc86 <tcp_input+0xca>
 800fc7a:	4b70      	ldr	r3, [pc, #448]	; (800fe3c <tcp_input+0x280>)
 800fc7c:	22c2      	movs	r2, #194	; 0xc2
 800fc7e:	4977      	ldr	r1, [pc, #476]	; (800fe5c <tcp_input+0x2a0>)
 800fc80:	4870      	ldr	r0, [pc, #448]	; (800fe44 <tcp_input+0x288>)
 800fc82:	f007 fe03 	bl	801788c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fc86:	2114      	movs	r1, #20
 800fc88:	6878      	ldr	r0, [r7, #4]
 800fc8a:	f7fd fc51 	bl	800d530 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	895a      	ldrh	r2, [r3, #10]
 800fc92:	4b71      	ldr	r3, [pc, #452]	; (800fe58 <tcp_input+0x29c>)
 800fc94:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fc96:	4b6e      	ldr	r3, [pc, #440]	; (800fe50 <tcp_input+0x294>)
 800fc98:	881a      	ldrh	r2, [r3, #0]
 800fc9a:	4b6f      	ldr	r3, [pc, #444]	; (800fe58 <tcp_input+0x29c>)
 800fc9c:	881b      	ldrh	r3, [r3, #0]
 800fc9e:	1ad3      	subs	r3, r2, r3
 800fca0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800fca2:	4b6d      	ldr	r3, [pc, #436]	; (800fe58 <tcp_input+0x29c>)
 800fca4:	881b      	ldrh	r3, [r3, #0]
 800fca6:	4619      	mov	r1, r3
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f7fd fc41 	bl	800d530 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	895b      	ldrh	r3, [r3, #10]
 800fcb4:	8a3a      	ldrh	r2, [r7, #16]
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	f200 836e 	bhi.w	8010398 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	685b      	ldr	r3, [r3, #4]
 800fcc2:	4a64      	ldr	r2, [pc, #400]	; (800fe54 <tcp_input+0x298>)
 800fcc4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	8a3a      	ldrh	r2, [r7, #16]
 800fccc:	4611      	mov	r1, r2
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7fd fc2e 	bl	800d530 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	891a      	ldrh	r2, [r3, #8]
 800fcd8:	8a3b      	ldrh	r3, [r7, #16]
 800fcda:	1ad3      	subs	r3, r2, r3
 800fcdc:	b29a      	uxth	r2, r3
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	895b      	ldrh	r3, [r3, #10]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d005      	beq.n	800fcf6 <tcp_input+0x13a>
 800fcea:	4b54      	ldr	r3, [pc, #336]	; (800fe3c <tcp_input+0x280>)
 800fcec:	22df      	movs	r2, #223	; 0xdf
 800fcee:	495c      	ldr	r1, [pc, #368]	; (800fe60 <tcp_input+0x2a4>)
 800fcf0:	4854      	ldr	r0, [pc, #336]	; (800fe44 <tcp_input+0x288>)
 800fcf2:	f007 fdcb 	bl	801788c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	891a      	ldrh	r2, [r3, #8]
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	891b      	ldrh	r3, [r3, #8]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d005      	beq.n	800fd10 <tcp_input+0x154>
 800fd04:	4b4d      	ldr	r3, [pc, #308]	; (800fe3c <tcp_input+0x280>)
 800fd06:	22e0      	movs	r2, #224	; 0xe0
 800fd08:	4956      	ldr	r1, [pc, #344]	; (800fe64 <tcp_input+0x2a8>)
 800fd0a:	484e      	ldr	r0, [pc, #312]	; (800fe44 <tcp_input+0x288>)
 800fd0c:	f007 fdbe 	bl	801788c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800fd10:	4b4d      	ldr	r3, [pc, #308]	; (800fe48 <tcp_input+0x28c>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	881b      	ldrh	r3, [r3, #0]
 800fd16:	b29b      	uxth	r3, r3
 800fd18:	4a4b      	ldr	r2, [pc, #300]	; (800fe48 <tcp_input+0x28c>)
 800fd1a:	6814      	ldr	r4, [r2, #0]
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f7fc f89b 	bl	800be58 <lwip_htons>
 800fd22:	4603      	mov	r3, r0
 800fd24:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800fd26:	4b48      	ldr	r3, [pc, #288]	; (800fe48 <tcp_input+0x28c>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	885b      	ldrh	r3, [r3, #2]
 800fd2c:	b29b      	uxth	r3, r3
 800fd2e:	4a46      	ldr	r2, [pc, #280]	; (800fe48 <tcp_input+0x28c>)
 800fd30:	6814      	ldr	r4, [r2, #0]
 800fd32:	4618      	mov	r0, r3
 800fd34:	f7fc f890 	bl	800be58 <lwip_htons>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fd3c:	4b42      	ldr	r3, [pc, #264]	; (800fe48 <tcp_input+0x28c>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	685b      	ldr	r3, [r3, #4]
 800fd42:	4a41      	ldr	r2, [pc, #260]	; (800fe48 <tcp_input+0x28c>)
 800fd44:	6814      	ldr	r4, [r2, #0]
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7fc f89b 	bl	800be82 <lwip_htonl>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	6063      	str	r3, [r4, #4]
 800fd50:	6863      	ldr	r3, [r4, #4]
 800fd52:	4a45      	ldr	r2, [pc, #276]	; (800fe68 <tcp_input+0x2ac>)
 800fd54:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fd56:	4b3c      	ldr	r3, [pc, #240]	; (800fe48 <tcp_input+0x28c>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	689b      	ldr	r3, [r3, #8]
 800fd5c:	4a3a      	ldr	r2, [pc, #232]	; (800fe48 <tcp_input+0x28c>)
 800fd5e:	6814      	ldr	r4, [r2, #0]
 800fd60:	4618      	mov	r0, r3
 800fd62:	f7fc f88e 	bl	800be82 <lwip_htonl>
 800fd66:	4603      	mov	r3, r0
 800fd68:	60a3      	str	r3, [r4, #8]
 800fd6a:	68a3      	ldr	r3, [r4, #8]
 800fd6c:	4a3f      	ldr	r2, [pc, #252]	; (800fe6c <tcp_input+0x2b0>)
 800fd6e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fd70:	4b35      	ldr	r3, [pc, #212]	; (800fe48 <tcp_input+0x28c>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	89db      	ldrh	r3, [r3, #14]
 800fd76:	b29b      	uxth	r3, r3
 800fd78:	4a33      	ldr	r2, [pc, #204]	; (800fe48 <tcp_input+0x28c>)
 800fd7a:	6814      	ldr	r4, [r2, #0]
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7fc f86b 	bl	800be58 <lwip_htons>
 800fd82:	4603      	mov	r3, r0
 800fd84:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800fd86:	4b30      	ldr	r3, [pc, #192]	; (800fe48 <tcp_input+0x28c>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	899b      	ldrh	r3, [r3, #12]
 800fd8c:	b29b      	uxth	r3, r3
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f7fc f862 	bl	800be58 <lwip_htons>
 800fd94:	4603      	mov	r3, r0
 800fd96:	b2db      	uxtb	r3, r3
 800fd98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd9c:	b2da      	uxtb	r2, r3
 800fd9e:	4b34      	ldr	r3, [pc, #208]	; (800fe70 <tcp_input+0x2b4>)
 800fda0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	891a      	ldrh	r2, [r3, #8]
 800fda6:	4b33      	ldr	r3, [pc, #204]	; (800fe74 <tcp_input+0x2b8>)
 800fda8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800fdaa:	4b31      	ldr	r3, [pc, #196]	; (800fe70 <tcp_input+0x2b4>)
 800fdac:	781b      	ldrb	r3, [r3, #0]
 800fdae:	f003 0303 	and.w	r3, r3, #3
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d00c      	beq.n	800fdd0 <tcp_input+0x214>
    tcplen++;
 800fdb6:	4b2f      	ldr	r3, [pc, #188]	; (800fe74 <tcp_input+0x2b8>)
 800fdb8:	881b      	ldrh	r3, [r3, #0]
 800fdba:	3301      	adds	r3, #1
 800fdbc:	b29a      	uxth	r2, r3
 800fdbe:	4b2d      	ldr	r3, [pc, #180]	; (800fe74 <tcp_input+0x2b8>)
 800fdc0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	891a      	ldrh	r2, [r3, #8]
 800fdc6:	4b2b      	ldr	r3, [pc, #172]	; (800fe74 <tcp_input+0x2b8>)
 800fdc8:	881b      	ldrh	r3, [r3, #0]
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	f200 82e6 	bhi.w	801039c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fdd4:	4b28      	ldr	r3, [pc, #160]	; (800fe78 <tcp_input+0x2bc>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	61fb      	str	r3, [r7, #28]
 800fdda:	e09d      	b.n	800ff18 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800fddc:	69fb      	ldr	r3, [r7, #28]
 800fdde:	7d1b      	ldrb	r3, [r3, #20]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d105      	bne.n	800fdf0 <tcp_input+0x234>
 800fde4:	4b15      	ldr	r3, [pc, #84]	; (800fe3c <tcp_input+0x280>)
 800fde6:	22fb      	movs	r2, #251	; 0xfb
 800fde8:	4924      	ldr	r1, [pc, #144]	; (800fe7c <tcp_input+0x2c0>)
 800fdea:	4816      	ldr	r0, [pc, #88]	; (800fe44 <tcp_input+0x288>)
 800fdec:	f007 fd4e 	bl	801788c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800fdf0:	69fb      	ldr	r3, [r7, #28]
 800fdf2:	7d1b      	ldrb	r3, [r3, #20]
 800fdf4:	2b0a      	cmp	r3, #10
 800fdf6:	d105      	bne.n	800fe04 <tcp_input+0x248>
 800fdf8:	4b10      	ldr	r3, [pc, #64]	; (800fe3c <tcp_input+0x280>)
 800fdfa:	22fc      	movs	r2, #252	; 0xfc
 800fdfc:	4920      	ldr	r1, [pc, #128]	; (800fe80 <tcp_input+0x2c4>)
 800fdfe:	4811      	ldr	r0, [pc, #68]	; (800fe44 <tcp_input+0x288>)
 800fe00:	f007 fd44 	bl	801788c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fe04:	69fb      	ldr	r3, [r7, #28]
 800fe06:	7d1b      	ldrb	r3, [r3, #20]
 800fe08:	2b01      	cmp	r3, #1
 800fe0a:	d105      	bne.n	800fe18 <tcp_input+0x25c>
 800fe0c:	4b0b      	ldr	r3, [pc, #44]	; (800fe3c <tcp_input+0x280>)
 800fe0e:	22fd      	movs	r2, #253	; 0xfd
 800fe10:	491c      	ldr	r1, [pc, #112]	; (800fe84 <tcp_input+0x2c8>)
 800fe12:	480c      	ldr	r0, [pc, #48]	; (800fe44 <tcp_input+0x288>)
 800fe14:	f007 fd3a 	bl	801788c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fe18:	69fb      	ldr	r3, [r7, #28]
 800fe1a:	7a1b      	ldrb	r3, [r3, #8]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d033      	beq.n	800fe88 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fe20:	69fb      	ldr	r3, [r7, #28]
 800fe22:	7a1a      	ldrb	r2, [r3, #8]
 800fe24:	4b09      	ldr	r3, [pc, #36]	; (800fe4c <tcp_input+0x290>)
 800fe26:	685b      	ldr	r3, [r3, #4]
 800fe28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fe2c:	3301      	adds	r3, #1
 800fe2e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d029      	beq.n	800fe88 <tcp_input+0x2cc>
      prev = pcb;
 800fe34:	69fb      	ldr	r3, [r7, #28]
 800fe36:	61bb      	str	r3, [r7, #24]
      continue;
 800fe38:	e06b      	b.n	800ff12 <tcp_input+0x356>
 800fe3a:	bf00      	nop
 800fe3c:	0801a948 	.word	0x0801a948
 800fe40:	0801a97c 	.word	0x0801a97c
 800fe44:	0801a994 	.word	0x0801a994
 800fe48:	2000d664 	.word	0x2000d664
 800fe4c:	20009ee8 	.word	0x20009ee8
 800fe50:	2000d668 	.word	0x2000d668
 800fe54:	2000d66c 	.word	0x2000d66c
 800fe58:	2000d66a 	.word	0x2000d66a
 800fe5c:	0801a9bc 	.word	0x0801a9bc
 800fe60:	0801a9cc 	.word	0x0801a9cc
 800fe64:	0801a9d8 	.word	0x0801a9d8
 800fe68:	2000d674 	.word	0x2000d674
 800fe6c:	2000d678 	.word	0x2000d678
 800fe70:	2000d680 	.word	0x2000d680
 800fe74:	2000d67e 	.word	0x2000d67e
 800fe78:	2000d648 	.word	0x2000d648
 800fe7c:	0801a9f8 	.word	0x0801a9f8
 800fe80:	0801aa20 	.word	0x0801aa20
 800fe84:	0801aa4c 	.word	0x0801aa4c
    }

    if (pcb->remote_port == tcphdr->src &&
 800fe88:	69fb      	ldr	r3, [r7, #28]
 800fe8a:	8b1a      	ldrh	r2, [r3, #24]
 800fe8c:	4b72      	ldr	r3, [pc, #456]	; (8010058 <tcp_input+0x49c>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	881b      	ldrh	r3, [r3, #0]
 800fe92:	b29b      	uxth	r3, r3
 800fe94:	429a      	cmp	r2, r3
 800fe96:	d13a      	bne.n	800ff0e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800fe98:	69fb      	ldr	r3, [r7, #28]
 800fe9a:	8ada      	ldrh	r2, [r3, #22]
 800fe9c:	4b6e      	ldr	r3, [pc, #440]	; (8010058 <tcp_input+0x49c>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	885b      	ldrh	r3, [r3, #2]
 800fea2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800fea4:	429a      	cmp	r2, r3
 800fea6:	d132      	bne.n	800ff0e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fea8:	69fb      	ldr	r3, [r7, #28]
 800feaa:	685a      	ldr	r2, [r3, #4]
 800feac:	4b6b      	ldr	r3, [pc, #428]	; (801005c <tcp_input+0x4a0>)
 800feae:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800feb0:	429a      	cmp	r2, r3
 800feb2:	d12c      	bne.n	800ff0e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800feb4:	69fb      	ldr	r3, [r7, #28]
 800feb6:	681a      	ldr	r2, [r3, #0]
 800feb8:	4b68      	ldr	r3, [pc, #416]	; (801005c <tcp_input+0x4a0>)
 800feba:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800febc:	429a      	cmp	r2, r3
 800febe:	d126      	bne.n	800ff0e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fec0:	69fb      	ldr	r3, [r7, #28]
 800fec2:	68db      	ldr	r3, [r3, #12]
 800fec4:	69fa      	ldr	r2, [r7, #28]
 800fec6:	429a      	cmp	r2, r3
 800fec8:	d106      	bne.n	800fed8 <tcp_input+0x31c>
 800feca:	4b65      	ldr	r3, [pc, #404]	; (8010060 <tcp_input+0x4a4>)
 800fecc:	f240 120d 	movw	r2, #269	; 0x10d
 800fed0:	4964      	ldr	r1, [pc, #400]	; (8010064 <tcp_input+0x4a8>)
 800fed2:	4865      	ldr	r0, [pc, #404]	; (8010068 <tcp_input+0x4ac>)
 800fed4:	f007 fcda 	bl	801788c <iprintf>
      if (prev != NULL) {
 800fed8:	69bb      	ldr	r3, [r7, #24]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d00a      	beq.n	800fef4 <tcp_input+0x338>
        prev->next = pcb->next;
 800fede:	69fb      	ldr	r3, [r7, #28]
 800fee0:	68da      	ldr	r2, [r3, #12]
 800fee2:	69bb      	ldr	r3, [r7, #24]
 800fee4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800fee6:	4b61      	ldr	r3, [pc, #388]	; (801006c <tcp_input+0x4b0>)
 800fee8:	681a      	ldr	r2, [r3, #0]
 800feea:	69fb      	ldr	r3, [r7, #28]
 800feec:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800feee:	4a5f      	ldr	r2, [pc, #380]	; (801006c <tcp_input+0x4b0>)
 800fef0:	69fb      	ldr	r3, [r7, #28]
 800fef2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fef4:	69fb      	ldr	r3, [r7, #28]
 800fef6:	68db      	ldr	r3, [r3, #12]
 800fef8:	69fa      	ldr	r2, [r7, #28]
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d111      	bne.n	800ff22 <tcp_input+0x366>
 800fefe:	4b58      	ldr	r3, [pc, #352]	; (8010060 <tcp_input+0x4a4>)
 800ff00:	f240 1215 	movw	r2, #277	; 0x115
 800ff04:	495a      	ldr	r1, [pc, #360]	; (8010070 <tcp_input+0x4b4>)
 800ff06:	4858      	ldr	r0, [pc, #352]	; (8010068 <tcp_input+0x4ac>)
 800ff08:	f007 fcc0 	bl	801788c <iprintf>
      break;
 800ff0c:	e009      	b.n	800ff22 <tcp_input+0x366>
    }
    prev = pcb;
 800ff0e:	69fb      	ldr	r3, [r7, #28]
 800ff10:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ff12:	69fb      	ldr	r3, [r7, #28]
 800ff14:	68db      	ldr	r3, [r3, #12]
 800ff16:	61fb      	str	r3, [r7, #28]
 800ff18:	69fb      	ldr	r3, [r7, #28]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	f47f af5e 	bne.w	800fddc <tcp_input+0x220>
 800ff20:	e000      	b.n	800ff24 <tcp_input+0x368>
      break;
 800ff22:	bf00      	nop
  }

  if (pcb == NULL) {
 800ff24:	69fb      	ldr	r3, [r7, #28]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	f040 80aa 	bne.w	8010080 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ff2c:	4b51      	ldr	r3, [pc, #324]	; (8010074 <tcp_input+0x4b8>)
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	61fb      	str	r3, [r7, #28]
 800ff32:	e03f      	b.n	800ffb4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ff34:	69fb      	ldr	r3, [r7, #28]
 800ff36:	7d1b      	ldrb	r3, [r3, #20]
 800ff38:	2b0a      	cmp	r3, #10
 800ff3a:	d006      	beq.n	800ff4a <tcp_input+0x38e>
 800ff3c:	4b48      	ldr	r3, [pc, #288]	; (8010060 <tcp_input+0x4a4>)
 800ff3e:	f240 121f 	movw	r2, #287	; 0x11f
 800ff42:	494d      	ldr	r1, [pc, #308]	; (8010078 <tcp_input+0x4bc>)
 800ff44:	4848      	ldr	r0, [pc, #288]	; (8010068 <tcp_input+0x4ac>)
 800ff46:	f007 fca1 	bl	801788c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ff4a:	69fb      	ldr	r3, [r7, #28]
 800ff4c:	7a1b      	ldrb	r3, [r3, #8]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d009      	beq.n	800ff66 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ff52:	69fb      	ldr	r3, [r7, #28]
 800ff54:	7a1a      	ldrb	r2, [r3, #8]
 800ff56:	4b41      	ldr	r3, [pc, #260]	; (801005c <tcp_input+0x4a0>)
 800ff58:	685b      	ldr	r3, [r3, #4]
 800ff5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff5e:	3301      	adds	r3, #1
 800ff60:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ff62:	429a      	cmp	r2, r3
 800ff64:	d122      	bne.n	800ffac <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ff66:	69fb      	ldr	r3, [r7, #28]
 800ff68:	8b1a      	ldrh	r2, [r3, #24]
 800ff6a:	4b3b      	ldr	r3, [pc, #236]	; (8010058 <tcp_input+0x49c>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	881b      	ldrh	r3, [r3, #0]
 800ff70:	b29b      	uxth	r3, r3
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d11b      	bne.n	800ffae <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ff76:	69fb      	ldr	r3, [r7, #28]
 800ff78:	8ada      	ldrh	r2, [r3, #22]
 800ff7a:	4b37      	ldr	r3, [pc, #220]	; (8010058 <tcp_input+0x49c>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	885b      	ldrh	r3, [r3, #2]
 800ff80:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ff82:	429a      	cmp	r2, r3
 800ff84:	d113      	bne.n	800ffae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ff86:	69fb      	ldr	r3, [r7, #28]
 800ff88:	685a      	ldr	r2, [r3, #4]
 800ff8a:	4b34      	ldr	r3, [pc, #208]	; (801005c <tcp_input+0x4a0>)
 800ff8c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d10d      	bne.n	800ffae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ff92:	69fb      	ldr	r3, [r7, #28]
 800ff94:	681a      	ldr	r2, [r3, #0]
 800ff96:	4b31      	ldr	r3, [pc, #196]	; (801005c <tcp_input+0x4a0>)
 800ff98:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d107      	bne.n	800ffae <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ff9e:	69f8      	ldr	r0, [r7, #28]
 800ffa0:	f000 fb56 	bl	8010650 <tcp_timewait_input>
        }
        pbuf_free(p);
 800ffa4:	6878      	ldr	r0, [r7, #4]
 800ffa6:	f7fd fb49 	bl	800d63c <pbuf_free>
        return;
 800ffaa:	e1fd      	b.n	80103a8 <tcp_input+0x7ec>
        continue;
 800ffac:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ffae:	69fb      	ldr	r3, [r7, #28]
 800ffb0:	68db      	ldr	r3, [r3, #12]
 800ffb2:	61fb      	str	r3, [r7, #28]
 800ffb4:	69fb      	ldr	r3, [r7, #28]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d1bc      	bne.n	800ff34 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ffbe:	4b2f      	ldr	r3, [pc, #188]	; (801007c <tcp_input+0x4c0>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	617b      	str	r3, [r7, #20]
 800ffc4:	e02a      	b.n	801001c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	7a1b      	ldrb	r3, [r3, #8]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d00c      	beq.n	800ffe8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ffce:	697b      	ldr	r3, [r7, #20]
 800ffd0:	7a1a      	ldrb	r2, [r3, #8]
 800ffd2:	4b22      	ldr	r3, [pc, #136]	; (801005c <tcp_input+0x4a0>)
 800ffd4:	685b      	ldr	r3, [r3, #4]
 800ffd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ffda:	3301      	adds	r3, #1
 800ffdc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	d002      	beq.n	800ffe8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	61bb      	str	r3, [r7, #24]
        continue;
 800ffe6:	e016      	b.n	8010016 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	8ada      	ldrh	r2, [r3, #22]
 800ffec:	4b1a      	ldr	r3, [pc, #104]	; (8010058 <tcp_input+0x49c>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	885b      	ldrh	r3, [r3, #2]
 800fff2:	b29b      	uxth	r3, r3
 800fff4:	429a      	cmp	r2, r3
 800fff6:	d10c      	bne.n	8010012 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fff8:	697b      	ldr	r3, [r7, #20]
 800fffa:	681a      	ldr	r2, [r3, #0]
 800fffc:	4b17      	ldr	r3, [pc, #92]	; (801005c <tcp_input+0x4a0>)
 800fffe:	695b      	ldr	r3, [r3, #20]
 8010000:	429a      	cmp	r2, r3
 8010002:	d00f      	beq.n	8010024 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d00d      	beq.n	8010026 <tcp_input+0x46a>
 801000a:	697b      	ldr	r3, [r7, #20]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d009      	beq.n	8010026 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	68db      	ldr	r3, [r3, #12]
 801001a:	617b      	str	r3, [r7, #20]
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d1d1      	bne.n	800ffc6 <tcp_input+0x40a>
 8010022:	e000      	b.n	8010026 <tcp_input+0x46a>
            break;
 8010024:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d029      	beq.n	8010080 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801002c:	69bb      	ldr	r3, [r7, #24]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d00a      	beq.n	8010048 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	68da      	ldr	r2, [r3, #12]
 8010036:	69bb      	ldr	r3, [r7, #24]
 8010038:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801003a:	4b10      	ldr	r3, [pc, #64]	; (801007c <tcp_input+0x4c0>)
 801003c:	681a      	ldr	r2, [r3, #0]
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010042:	4a0e      	ldr	r2, [pc, #56]	; (801007c <tcp_input+0x4c0>)
 8010044:	697b      	ldr	r3, [r7, #20]
 8010046:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010048:	6978      	ldr	r0, [r7, #20]
 801004a:	f000 fa03 	bl	8010454 <tcp_listen_input>
      }
      pbuf_free(p);
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f7fd faf4 	bl	800d63c <pbuf_free>
      return;
 8010054:	e1a8      	b.n	80103a8 <tcp_input+0x7ec>
 8010056:	bf00      	nop
 8010058:	2000d664 	.word	0x2000d664
 801005c:	20009ee8 	.word	0x20009ee8
 8010060:	0801a948 	.word	0x0801a948
 8010064:	0801aa74 	.word	0x0801aa74
 8010068:	0801a994 	.word	0x0801a994
 801006c:	2000d648 	.word	0x2000d648
 8010070:	0801aaa0 	.word	0x0801aaa0
 8010074:	2000d64c 	.word	0x2000d64c
 8010078:	0801aacc 	.word	0x0801aacc
 801007c:	2000d644 	.word	0x2000d644
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010080:	69fb      	ldr	r3, [r7, #28]
 8010082:	2b00      	cmp	r3, #0
 8010084:	f000 8158 	beq.w	8010338 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010088:	4b95      	ldr	r3, [pc, #596]	; (80102e0 <tcp_input+0x724>)
 801008a:	2200      	movs	r2, #0
 801008c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	891a      	ldrh	r2, [r3, #8]
 8010092:	4b93      	ldr	r3, [pc, #588]	; (80102e0 <tcp_input+0x724>)
 8010094:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010096:	4a92      	ldr	r2, [pc, #584]	; (80102e0 <tcp_input+0x724>)
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801009c:	4b91      	ldr	r3, [pc, #580]	; (80102e4 <tcp_input+0x728>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	4a8f      	ldr	r2, [pc, #572]	; (80102e0 <tcp_input+0x724>)
 80100a2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80100a4:	4b90      	ldr	r3, [pc, #576]	; (80102e8 <tcp_input+0x72c>)
 80100a6:	2200      	movs	r2, #0
 80100a8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80100aa:	4b90      	ldr	r3, [pc, #576]	; (80102ec <tcp_input+0x730>)
 80100ac:	2200      	movs	r2, #0
 80100ae:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80100b0:	4b8f      	ldr	r3, [pc, #572]	; (80102f0 <tcp_input+0x734>)
 80100b2:	2200      	movs	r2, #0
 80100b4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80100b6:	4b8f      	ldr	r3, [pc, #572]	; (80102f4 <tcp_input+0x738>)
 80100b8:	781b      	ldrb	r3, [r3, #0]
 80100ba:	f003 0308 	and.w	r3, r3, #8
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d006      	beq.n	80100d0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	7b5b      	ldrb	r3, [r3, #13]
 80100c6:	f043 0301 	orr.w	r3, r3, #1
 80100ca:	b2da      	uxtb	r2, r3
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80100d0:	69fb      	ldr	r3, [r7, #28]
 80100d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d017      	beq.n	8010108 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80100d8:	69f8      	ldr	r0, [r7, #28]
 80100da:	f7ff f85b 	bl	800f194 <tcp_process_refused_data>
 80100de:	4603      	mov	r3, r0
 80100e0:	f113 0f0d 	cmn.w	r3, #13
 80100e4:	d007      	beq.n	80100f6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80100e6:	69fb      	ldr	r3, [r7, #28]
 80100e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d00c      	beq.n	8010108 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80100ee:	4b82      	ldr	r3, [pc, #520]	; (80102f8 <tcp_input+0x73c>)
 80100f0:	881b      	ldrh	r3, [r3, #0]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d008      	beq.n	8010108 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80100f6:	69fb      	ldr	r3, [r7, #28]
 80100f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	f040 80e3 	bne.w	80102c6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010100:	69f8      	ldr	r0, [r7, #28]
 8010102:	f003 fe05 	bl	8013d10 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010106:	e0de      	b.n	80102c6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8010108:	4a7c      	ldr	r2, [pc, #496]	; (80102fc <tcp_input+0x740>)
 801010a:	69fb      	ldr	r3, [r7, #28]
 801010c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801010e:	69f8      	ldr	r0, [r7, #28]
 8010110:	f000 fb18 	bl	8010744 <tcp_process>
 8010114:	4603      	mov	r3, r0
 8010116:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010118:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801011c:	f113 0f0d 	cmn.w	r3, #13
 8010120:	f000 80d3 	beq.w	80102ca <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8010124:	4b71      	ldr	r3, [pc, #452]	; (80102ec <tcp_input+0x730>)
 8010126:	781b      	ldrb	r3, [r3, #0]
 8010128:	f003 0308 	and.w	r3, r3, #8
 801012c:	2b00      	cmp	r3, #0
 801012e:	d015      	beq.n	801015c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010130:	69fb      	ldr	r3, [r7, #28]
 8010132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010136:	2b00      	cmp	r3, #0
 8010138:	d008      	beq.n	801014c <tcp_input+0x590>
 801013a:	69fb      	ldr	r3, [r7, #28]
 801013c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010140:	69fa      	ldr	r2, [r7, #28]
 8010142:	6912      	ldr	r2, [r2, #16]
 8010144:	f06f 010d 	mvn.w	r1, #13
 8010148:	4610      	mov	r0, r2
 801014a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801014c:	69f9      	ldr	r1, [r7, #28]
 801014e:	486c      	ldr	r0, [pc, #432]	; (8010300 <tcp_input+0x744>)
 8010150:	f7ff fbbc 	bl	800f8cc <tcp_pcb_remove>
        tcp_free(pcb);
 8010154:	69f8      	ldr	r0, [r7, #28]
 8010156:	f7fd fdbf 	bl	800dcd8 <tcp_free>
 801015a:	e0da      	b.n	8010312 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801015c:	2300      	movs	r3, #0
 801015e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010160:	4b63      	ldr	r3, [pc, #396]	; (80102f0 <tcp_input+0x734>)
 8010162:	881b      	ldrh	r3, [r3, #0]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d01d      	beq.n	80101a4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010168:	4b61      	ldr	r3, [pc, #388]	; (80102f0 <tcp_input+0x734>)
 801016a:	881b      	ldrh	r3, [r3, #0]
 801016c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801016e:	69fb      	ldr	r3, [r7, #28]
 8010170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010174:	2b00      	cmp	r3, #0
 8010176:	d00a      	beq.n	801018e <tcp_input+0x5d2>
 8010178:	69fb      	ldr	r3, [r7, #28]
 801017a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801017e:	69fa      	ldr	r2, [r7, #28]
 8010180:	6910      	ldr	r0, [r2, #16]
 8010182:	89fa      	ldrh	r2, [r7, #14]
 8010184:	69f9      	ldr	r1, [r7, #28]
 8010186:	4798      	blx	r3
 8010188:	4603      	mov	r3, r0
 801018a:	74fb      	strb	r3, [r7, #19]
 801018c:	e001      	b.n	8010192 <tcp_input+0x5d6>
 801018e:	2300      	movs	r3, #0
 8010190:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010192:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010196:	f113 0f0d 	cmn.w	r3, #13
 801019a:	f000 8098 	beq.w	80102ce <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801019e:	4b54      	ldr	r3, [pc, #336]	; (80102f0 <tcp_input+0x734>)
 80101a0:	2200      	movs	r2, #0
 80101a2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80101a4:	69f8      	ldr	r0, [r7, #28]
 80101a6:	f000 f915 	bl	80103d4 <tcp_input_delayed_close>
 80101aa:	4603      	mov	r3, r0
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	f040 8090 	bne.w	80102d2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80101b2:	4b4d      	ldr	r3, [pc, #308]	; (80102e8 <tcp_input+0x72c>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d041      	beq.n	801023e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80101ba:	69fb      	ldr	r3, [r7, #28]
 80101bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d006      	beq.n	80101d0 <tcp_input+0x614>
 80101c2:	4b50      	ldr	r3, [pc, #320]	; (8010304 <tcp_input+0x748>)
 80101c4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80101c8:	494f      	ldr	r1, [pc, #316]	; (8010308 <tcp_input+0x74c>)
 80101ca:	4850      	ldr	r0, [pc, #320]	; (801030c <tcp_input+0x750>)
 80101cc:	f007 fb5e 	bl	801788c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80101d0:	69fb      	ldr	r3, [r7, #28]
 80101d2:	8b5b      	ldrh	r3, [r3, #26]
 80101d4:	f003 0310 	and.w	r3, r3, #16
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d008      	beq.n	80101ee <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80101dc:	4b42      	ldr	r3, [pc, #264]	; (80102e8 <tcp_input+0x72c>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7fd fa2b 	bl	800d63c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80101e6:	69f8      	ldr	r0, [r7, #28]
 80101e8:	f7fe f8ba 	bl	800e360 <tcp_abort>
            goto aborted;
 80101ec:	e091      	b.n	8010312 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80101ee:	69fb      	ldr	r3, [r7, #28]
 80101f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d00c      	beq.n	8010212 <tcp_input+0x656>
 80101f8:	69fb      	ldr	r3, [r7, #28]
 80101fa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80101fe:	69fb      	ldr	r3, [r7, #28]
 8010200:	6918      	ldr	r0, [r3, #16]
 8010202:	4b39      	ldr	r3, [pc, #228]	; (80102e8 <tcp_input+0x72c>)
 8010204:	681a      	ldr	r2, [r3, #0]
 8010206:	2300      	movs	r3, #0
 8010208:	69f9      	ldr	r1, [r7, #28]
 801020a:	47a0      	blx	r4
 801020c:	4603      	mov	r3, r0
 801020e:	74fb      	strb	r3, [r7, #19]
 8010210:	e008      	b.n	8010224 <tcp_input+0x668>
 8010212:	4b35      	ldr	r3, [pc, #212]	; (80102e8 <tcp_input+0x72c>)
 8010214:	681a      	ldr	r2, [r3, #0]
 8010216:	2300      	movs	r3, #0
 8010218:	69f9      	ldr	r1, [r7, #28]
 801021a:	2000      	movs	r0, #0
 801021c:	f7ff f890 	bl	800f340 <tcp_recv_null>
 8010220:	4603      	mov	r3, r0
 8010222:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010224:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010228:	f113 0f0d 	cmn.w	r3, #13
 801022c:	d053      	beq.n	80102d6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801022e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d003      	beq.n	801023e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010236:	4b2c      	ldr	r3, [pc, #176]	; (80102e8 <tcp_input+0x72c>)
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	69fb      	ldr	r3, [r7, #28]
 801023c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801023e:	4b2b      	ldr	r3, [pc, #172]	; (80102ec <tcp_input+0x730>)
 8010240:	781b      	ldrb	r3, [r3, #0]
 8010242:	f003 0320 	and.w	r3, r3, #32
 8010246:	2b00      	cmp	r3, #0
 8010248:	d030      	beq.n	80102ac <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801024a:	69fb      	ldr	r3, [r7, #28]
 801024c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801024e:	2b00      	cmp	r3, #0
 8010250:	d009      	beq.n	8010266 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010252:	69fb      	ldr	r3, [r7, #28]
 8010254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010256:	7b5a      	ldrb	r2, [r3, #13]
 8010258:	69fb      	ldr	r3, [r7, #28]
 801025a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801025c:	f042 0220 	orr.w	r2, r2, #32
 8010260:	b2d2      	uxtb	r2, r2
 8010262:	735a      	strb	r2, [r3, #13]
 8010264:	e022      	b.n	80102ac <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010266:	69fb      	ldr	r3, [r7, #28]
 8010268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801026a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801026e:	d005      	beq.n	801027c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8010270:	69fb      	ldr	r3, [r7, #28]
 8010272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010274:	3301      	adds	r3, #1
 8010276:	b29a      	uxth	r2, r3
 8010278:	69fb      	ldr	r3, [r7, #28]
 801027a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801027c:	69fb      	ldr	r3, [r7, #28]
 801027e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010282:	2b00      	cmp	r3, #0
 8010284:	d00b      	beq.n	801029e <tcp_input+0x6e2>
 8010286:	69fb      	ldr	r3, [r7, #28]
 8010288:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801028c:	69fb      	ldr	r3, [r7, #28]
 801028e:	6918      	ldr	r0, [r3, #16]
 8010290:	2300      	movs	r3, #0
 8010292:	2200      	movs	r2, #0
 8010294:	69f9      	ldr	r1, [r7, #28]
 8010296:	47a0      	blx	r4
 8010298:	4603      	mov	r3, r0
 801029a:	74fb      	strb	r3, [r7, #19]
 801029c:	e001      	b.n	80102a2 <tcp_input+0x6e6>
 801029e:	2300      	movs	r3, #0
 80102a0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80102a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80102a6:	f113 0f0d 	cmn.w	r3, #13
 80102aa:	d016      	beq.n	80102da <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80102ac:	4b13      	ldr	r3, [pc, #76]	; (80102fc <tcp_input+0x740>)
 80102ae:	2200      	movs	r2, #0
 80102b0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80102b2:	69f8      	ldr	r0, [r7, #28]
 80102b4:	f000 f88e 	bl	80103d4 <tcp_input_delayed_close>
 80102b8:	4603      	mov	r3, r0
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d128      	bne.n	8010310 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80102be:	69f8      	ldr	r0, [r7, #28]
 80102c0:	f002 ff20 	bl	8013104 <tcp_output>
 80102c4:	e025      	b.n	8010312 <tcp_input+0x756>
        goto aborted;
 80102c6:	bf00      	nop
 80102c8:	e023      	b.n	8010312 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80102ca:	bf00      	nop
 80102cc:	e021      	b.n	8010312 <tcp_input+0x756>
              goto aborted;
 80102ce:	bf00      	nop
 80102d0:	e01f      	b.n	8010312 <tcp_input+0x756>
          goto aborted;
 80102d2:	bf00      	nop
 80102d4:	e01d      	b.n	8010312 <tcp_input+0x756>
            goto aborted;
 80102d6:	bf00      	nop
 80102d8:	e01b      	b.n	8010312 <tcp_input+0x756>
              goto aborted;
 80102da:	bf00      	nop
 80102dc:	e019      	b.n	8010312 <tcp_input+0x756>
 80102de:	bf00      	nop
 80102e0:	2000d654 	.word	0x2000d654
 80102e4:	2000d664 	.word	0x2000d664
 80102e8:	2000d684 	.word	0x2000d684
 80102ec:	2000d681 	.word	0x2000d681
 80102f0:	2000d67c 	.word	0x2000d67c
 80102f4:	2000d680 	.word	0x2000d680
 80102f8:	2000d67e 	.word	0x2000d67e
 80102fc:	2000d688 	.word	0x2000d688
 8010300:	2000d648 	.word	0x2000d648
 8010304:	0801a948 	.word	0x0801a948
 8010308:	0801aafc 	.word	0x0801aafc
 801030c:	0801a994 	.word	0x0801a994
          goto aborted;
 8010310:	bf00      	nop
    tcp_input_pcb = NULL;
 8010312:	4b27      	ldr	r3, [pc, #156]	; (80103b0 <tcp_input+0x7f4>)
 8010314:	2200      	movs	r2, #0
 8010316:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010318:	4b26      	ldr	r3, [pc, #152]	; (80103b4 <tcp_input+0x7f8>)
 801031a:	2200      	movs	r2, #0
 801031c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801031e:	4b26      	ldr	r3, [pc, #152]	; (80103b8 <tcp_input+0x7fc>)
 8010320:	685b      	ldr	r3, [r3, #4]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d03f      	beq.n	80103a6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8010326:	4b24      	ldr	r3, [pc, #144]	; (80103b8 <tcp_input+0x7fc>)
 8010328:	685b      	ldr	r3, [r3, #4]
 801032a:	4618      	mov	r0, r3
 801032c:	f7fd f986 	bl	800d63c <pbuf_free>
      inseg.p = NULL;
 8010330:	4b21      	ldr	r3, [pc, #132]	; (80103b8 <tcp_input+0x7fc>)
 8010332:	2200      	movs	r2, #0
 8010334:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010336:	e036      	b.n	80103a6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010338:	4b20      	ldr	r3, [pc, #128]	; (80103bc <tcp_input+0x800>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	899b      	ldrh	r3, [r3, #12]
 801033e:	b29b      	uxth	r3, r3
 8010340:	4618      	mov	r0, r3
 8010342:	f7fb fd89 	bl	800be58 <lwip_htons>
 8010346:	4603      	mov	r3, r0
 8010348:	b2db      	uxtb	r3, r3
 801034a:	f003 0304 	and.w	r3, r3, #4
 801034e:	2b00      	cmp	r3, #0
 8010350:	d118      	bne.n	8010384 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010352:	4b1b      	ldr	r3, [pc, #108]	; (80103c0 <tcp_input+0x804>)
 8010354:	6819      	ldr	r1, [r3, #0]
 8010356:	4b1b      	ldr	r3, [pc, #108]	; (80103c4 <tcp_input+0x808>)
 8010358:	881b      	ldrh	r3, [r3, #0]
 801035a:	461a      	mov	r2, r3
 801035c:	4b1a      	ldr	r3, [pc, #104]	; (80103c8 <tcp_input+0x80c>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010362:	4b16      	ldr	r3, [pc, #88]	; (80103bc <tcp_input+0x800>)
 8010364:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010366:	885b      	ldrh	r3, [r3, #2]
 8010368:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801036a:	4a14      	ldr	r2, [pc, #80]	; (80103bc <tcp_input+0x800>)
 801036c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801036e:	8812      	ldrh	r2, [r2, #0]
 8010370:	b292      	uxth	r2, r2
 8010372:	9202      	str	r2, [sp, #8]
 8010374:	9301      	str	r3, [sp, #4]
 8010376:	4b15      	ldr	r3, [pc, #84]	; (80103cc <tcp_input+0x810>)
 8010378:	9300      	str	r3, [sp, #0]
 801037a:	4b15      	ldr	r3, [pc, #84]	; (80103d0 <tcp_input+0x814>)
 801037c:	4602      	mov	r2, r0
 801037e:	2000      	movs	r0, #0
 8010380:	f003 fc74 	bl	8013c6c <tcp_rst>
    pbuf_free(p);
 8010384:	6878      	ldr	r0, [r7, #4]
 8010386:	f7fd f959 	bl	800d63c <pbuf_free>
  return;
 801038a:	e00c      	b.n	80103a6 <tcp_input+0x7ea>
    goto dropped;
 801038c:	bf00      	nop
 801038e:	e006      	b.n	801039e <tcp_input+0x7e2>
    goto dropped;
 8010390:	bf00      	nop
 8010392:	e004      	b.n	801039e <tcp_input+0x7e2>
    goto dropped;
 8010394:	bf00      	nop
 8010396:	e002      	b.n	801039e <tcp_input+0x7e2>
      goto dropped;
 8010398:	bf00      	nop
 801039a:	e000      	b.n	801039e <tcp_input+0x7e2>
      goto dropped;
 801039c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f7fd f94c 	bl	800d63c <pbuf_free>
 80103a4:	e000      	b.n	80103a8 <tcp_input+0x7ec>
  return;
 80103a6:	bf00      	nop
}
 80103a8:	3724      	adds	r7, #36	; 0x24
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd90      	pop	{r4, r7, pc}
 80103ae:	bf00      	nop
 80103b0:	2000d688 	.word	0x2000d688
 80103b4:	2000d684 	.word	0x2000d684
 80103b8:	2000d654 	.word	0x2000d654
 80103bc:	2000d664 	.word	0x2000d664
 80103c0:	2000d678 	.word	0x2000d678
 80103c4:	2000d67e 	.word	0x2000d67e
 80103c8:	2000d674 	.word	0x2000d674
 80103cc:	20009ef8 	.word	0x20009ef8
 80103d0:	20009efc 	.word	0x20009efc

080103d4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b082      	sub	sp, #8
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d106      	bne.n	80103f0 <tcp_input_delayed_close+0x1c>
 80103e2:	4b17      	ldr	r3, [pc, #92]	; (8010440 <tcp_input_delayed_close+0x6c>)
 80103e4:	f240 225a 	movw	r2, #602	; 0x25a
 80103e8:	4916      	ldr	r1, [pc, #88]	; (8010444 <tcp_input_delayed_close+0x70>)
 80103ea:	4817      	ldr	r0, [pc, #92]	; (8010448 <tcp_input_delayed_close+0x74>)
 80103ec:	f007 fa4e 	bl	801788c <iprintf>

  if (recv_flags & TF_CLOSED) {
 80103f0:	4b16      	ldr	r3, [pc, #88]	; (801044c <tcp_input_delayed_close+0x78>)
 80103f2:	781b      	ldrb	r3, [r3, #0]
 80103f4:	f003 0310 	and.w	r3, r3, #16
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d01c      	beq.n	8010436 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	8b5b      	ldrh	r3, [r3, #26]
 8010400:	f003 0310 	and.w	r3, r3, #16
 8010404:	2b00      	cmp	r3, #0
 8010406:	d10d      	bne.n	8010424 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801040e:	2b00      	cmp	r3, #0
 8010410:	d008      	beq.n	8010424 <tcp_input_delayed_close+0x50>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010418:	687a      	ldr	r2, [r7, #4]
 801041a:	6912      	ldr	r2, [r2, #16]
 801041c:	f06f 010e 	mvn.w	r1, #14
 8010420:	4610      	mov	r0, r2
 8010422:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010424:	6879      	ldr	r1, [r7, #4]
 8010426:	480a      	ldr	r0, [pc, #40]	; (8010450 <tcp_input_delayed_close+0x7c>)
 8010428:	f7ff fa50 	bl	800f8cc <tcp_pcb_remove>
    tcp_free(pcb);
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f7fd fc53 	bl	800dcd8 <tcp_free>
    return 1;
 8010432:	2301      	movs	r3, #1
 8010434:	e000      	b.n	8010438 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010436:	2300      	movs	r3, #0
}
 8010438:	4618      	mov	r0, r3
 801043a:	3708      	adds	r7, #8
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}
 8010440:	0801a948 	.word	0x0801a948
 8010444:	0801ab18 	.word	0x0801ab18
 8010448:	0801a994 	.word	0x0801a994
 801044c:	2000d681 	.word	0x2000d681
 8010450:	2000d648 	.word	0x2000d648

08010454 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010454:	b590      	push	{r4, r7, lr}
 8010456:	b08b      	sub	sp, #44	; 0x2c
 8010458:	af04      	add	r7, sp, #16
 801045a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801045c:	4b6f      	ldr	r3, [pc, #444]	; (801061c <tcp_listen_input+0x1c8>)
 801045e:	781b      	ldrb	r3, [r3, #0]
 8010460:	f003 0304 	and.w	r3, r3, #4
 8010464:	2b00      	cmp	r3, #0
 8010466:	f040 80d2 	bne.w	801060e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d106      	bne.n	801047e <tcp_listen_input+0x2a>
 8010470:	4b6b      	ldr	r3, [pc, #428]	; (8010620 <tcp_listen_input+0x1cc>)
 8010472:	f240 2281 	movw	r2, #641	; 0x281
 8010476:	496b      	ldr	r1, [pc, #428]	; (8010624 <tcp_listen_input+0x1d0>)
 8010478:	486b      	ldr	r0, [pc, #428]	; (8010628 <tcp_listen_input+0x1d4>)
 801047a:	f007 fa07 	bl	801788c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801047e:	4b67      	ldr	r3, [pc, #412]	; (801061c <tcp_listen_input+0x1c8>)
 8010480:	781b      	ldrb	r3, [r3, #0]
 8010482:	f003 0310 	and.w	r3, r3, #16
 8010486:	2b00      	cmp	r3, #0
 8010488:	d019      	beq.n	80104be <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801048a:	4b68      	ldr	r3, [pc, #416]	; (801062c <tcp_listen_input+0x1d8>)
 801048c:	6819      	ldr	r1, [r3, #0]
 801048e:	4b68      	ldr	r3, [pc, #416]	; (8010630 <tcp_listen_input+0x1dc>)
 8010490:	881b      	ldrh	r3, [r3, #0]
 8010492:	461a      	mov	r2, r3
 8010494:	4b67      	ldr	r3, [pc, #412]	; (8010634 <tcp_listen_input+0x1e0>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801049a:	4b67      	ldr	r3, [pc, #412]	; (8010638 <tcp_listen_input+0x1e4>)
 801049c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801049e:	885b      	ldrh	r3, [r3, #2]
 80104a0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104a2:	4a65      	ldr	r2, [pc, #404]	; (8010638 <tcp_listen_input+0x1e4>)
 80104a4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104a6:	8812      	ldrh	r2, [r2, #0]
 80104a8:	b292      	uxth	r2, r2
 80104aa:	9202      	str	r2, [sp, #8]
 80104ac:	9301      	str	r3, [sp, #4]
 80104ae:	4b63      	ldr	r3, [pc, #396]	; (801063c <tcp_listen_input+0x1e8>)
 80104b0:	9300      	str	r3, [sp, #0]
 80104b2:	4b63      	ldr	r3, [pc, #396]	; (8010640 <tcp_listen_input+0x1ec>)
 80104b4:	4602      	mov	r2, r0
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f003 fbd8 	bl	8013c6c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80104bc:	e0a9      	b.n	8010612 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80104be:	4b57      	ldr	r3, [pc, #348]	; (801061c <tcp_listen_input+0x1c8>)
 80104c0:	781b      	ldrb	r3, [r3, #0]
 80104c2:	f003 0302 	and.w	r3, r3, #2
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	f000 80a3 	beq.w	8010612 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	7d5b      	ldrb	r3, [r3, #21]
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7ff f859 	bl	800f588 <tcp_alloc>
 80104d6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80104d8:	697b      	ldr	r3, [r7, #20]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d111      	bne.n	8010502 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	699b      	ldr	r3, [r3, #24]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d00a      	beq.n	80104fc <tcp_listen_input+0xa8>
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	699b      	ldr	r3, [r3, #24]
 80104ea:	687a      	ldr	r2, [r7, #4]
 80104ec:	6910      	ldr	r0, [r2, #16]
 80104ee:	f04f 32ff 	mov.w	r2, #4294967295
 80104f2:	2100      	movs	r1, #0
 80104f4:	4798      	blx	r3
 80104f6:	4603      	mov	r3, r0
 80104f8:	73bb      	strb	r3, [r7, #14]
      return;
 80104fa:	e08b      	b.n	8010614 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80104fc:	23f0      	movs	r3, #240	; 0xf0
 80104fe:	73bb      	strb	r3, [r7, #14]
      return;
 8010500:	e088      	b.n	8010614 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010502:	4b50      	ldr	r3, [pc, #320]	; (8010644 <tcp_listen_input+0x1f0>)
 8010504:	695a      	ldr	r2, [r3, #20]
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801050a:	4b4e      	ldr	r3, [pc, #312]	; (8010644 <tcp_listen_input+0x1f0>)
 801050c:	691a      	ldr	r2, [r3, #16]
 801050e:	697b      	ldr	r3, [r7, #20]
 8010510:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	8ada      	ldrh	r2, [r3, #22]
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801051a:	4b47      	ldr	r3, [pc, #284]	; (8010638 <tcp_listen_input+0x1e4>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	881b      	ldrh	r3, [r3, #0]
 8010520:	b29a      	uxth	r2, r3
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	2203      	movs	r2, #3
 801052a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801052c:	4b41      	ldr	r3, [pc, #260]	; (8010634 <tcp_listen_input+0x1e0>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	1c5a      	adds	r2, r3, #1
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801053e:	6978      	ldr	r0, [r7, #20]
 8010540:	f7ff fa58 	bl	800f9f4 <tcp_next_iss>
 8010544:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010546:	697b      	ldr	r3, [r7, #20]
 8010548:	693a      	ldr	r2, [r7, #16]
 801054a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	693a      	ldr	r2, [r7, #16]
 8010550:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010552:	697b      	ldr	r3, [r7, #20]
 8010554:	693a      	ldr	r2, [r7, #16]
 8010556:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	693a      	ldr	r2, [r7, #16]
 801055c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801055e:	4b35      	ldr	r3, [pc, #212]	; (8010634 <tcp_listen_input+0x1e0>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	1e5a      	subs	r2, r3, #1
 8010564:	697b      	ldr	r3, [r7, #20]
 8010566:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	691a      	ldr	r2, [r3, #16]
 801056c:	697b      	ldr	r3, [r7, #20]
 801056e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	687a      	ldr	r2, [r7, #4]
 8010574:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	7a5b      	ldrb	r3, [r3, #9]
 801057a:	f003 030c 	and.w	r3, r3, #12
 801057e:	b2da      	uxtb	r2, r3
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	7a1a      	ldrb	r2, [r3, #8]
 8010588:	697b      	ldr	r3, [r7, #20]
 801058a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801058c:	4b2e      	ldr	r3, [pc, #184]	; (8010648 <tcp_listen_input+0x1f4>)
 801058e:	681a      	ldr	r2, [r3, #0]
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	60da      	str	r2, [r3, #12]
 8010594:	4a2c      	ldr	r2, [pc, #176]	; (8010648 <tcp_listen_input+0x1f4>)
 8010596:	697b      	ldr	r3, [r7, #20]
 8010598:	6013      	str	r3, [r2, #0]
 801059a:	f003 fd29 	bl	8013ff0 <tcp_timer_needed>
 801059e:	4b2b      	ldr	r3, [pc, #172]	; (801064c <tcp_listen_input+0x1f8>)
 80105a0:	2201      	movs	r2, #1
 80105a2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80105a4:	6978      	ldr	r0, [r7, #20]
 80105a6:	f001 fd8f 	bl	80120c8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80105aa:	4b23      	ldr	r3, [pc, #140]	; (8010638 <tcp_listen_input+0x1e4>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	89db      	ldrh	r3, [r3, #14]
 80105b0:	b29a      	uxth	r2, r3
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	3304      	adds	r3, #4
 80105cc:	4618      	mov	r0, r3
 80105ce:	f005 fcbb 	bl	8015f48 <ip4_route>
 80105d2:	4601      	mov	r1, r0
 80105d4:	697b      	ldr	r3, [r7, #20]
 80105d6:	3304      	adds	r3, #4
 80105d8:	461a      	mov	r2, r3
 80105da:	4620      	mov	r0, r4
 80105dc:	f7ff fa30 	bl	800fa40 <tcp_eff_send_mss_netif>
 80105e0:	4603      	mov	r3, r0
 80105e2:	461a      	mov	r2, r3
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80105e8:	2112      	movs	r1, #18
 80105ea:	6978      	ldr	r0, [r7, #20]
 80105ec:	f002 fc9c 	bl	8012f28 <tcp_enqueue_flags>
 80105f0:	4603      	mov	r3, r0
 80105f2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80105f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d004      	beq.n	8010606 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80105fc:	2100      	movs	r1, #0
 80105fe:	6978      	ldr	r0, [r7, #20]
 8010600:	f7fd fdf0 	bl	800e1e4 <tcp_abandon>
      return;
 8010604:	e006      	b.n	8010614 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010606:	6978      	ldr	r0, [r7, #20]
 8010608:	f002 fd7c 	bl	8013104 <tcp_output>
  return;
 801060c:	e001      	b.n	8010612 <tcp_listen_input+0x1be>
    return;
 801060e:	bf00      	nop
 8010610:	e000      	b.n	8010614 <tcp_listen_input+0x1c0>
  return;
 8010612:	bf00      	nop
}
 8010614:	371c      	adds	r7, #28
 8010616:	46bd      	mov	sp, r7
 8010618:	bd90      	pop	{r4, r7, pc}
 801061a:	bf00      	nop
 801061c:	2000d680 	.word	0x2000d680
 8010620:	0801a948 	.word	0x0801a948
 8010624:	0801ab40 	.word	0x0801ab40
 8010628:	0801a994 	.word	0x0801a994
 801062c:	2000d678 	.word	0x2000d678
 8010630:	2000d67e 	.word	0x2000d67e
 8010634:	2000d674 	.word	0x2000d674
 8010638:	2000d664 	.word	0x2000d664
 801063c:	20009ef8 	.word	0x20009ef8
 8010640:	20009efc 	.word	0x20009efc
 8010644:	20009ee8 	.word	0x20009ee8
 8010648:	2000d648 	.word	0x2000d648
 801064c:	2000d650 	.word	0x2000d650

08010650 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b086      	sub	sp, #24
 8010654:	af04      	add	r7, sp, #16
 8010656:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010658:	4b2f      	ldr	r3, [pc, #188]	; (8010718 <tcp_timewait_input+0xc8>)
 801065a:	781b      	ldrb	r3, [r3, #0]
 801065c:	f003 0304 	and.w	r3, r3, #4
 8010660:	2b00      	cmp	r3, #0
 8010662:	d153      	bne.n	801070c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d106      	bne.n	8010678 <tcp_timewait_input+0x28>
 801066a:	4b2c      	ldr	r3, [pc, #176]	; (801071c <tcp_timewait_input+0xcc>)
 801066c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010670:	492b      	ldr	r1, [pc, #172]	; (8010720 <tcp_timewait_input+0xd0>)
 8010672:	482c      	ldr	r0, [pc, #176]	; (8010724 <tcp_timewait_input+0xd4>)
 8010674:	f007 f90a 	bl	801788c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010678:	4b27      	ldr	r3, [pc, #156]	; (8010718 <tcp_timewait_input+0xc8>)
 801067a:	781b      	ldrb	r3, [r3, #0]
 801067c:	f003 0302 	and.w	r3, r3, #2
 8010680:	2b00      	cmp	r3, #0
 8010682:	d02a      	beq.n	80106da <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010684:	4b28      	ldr	r3, [pc, #160]	; (8010728 <tcp_timewait_input+0xd8>)
 8010686:	681a      	ldr	r2, [r3, #0]
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801068c:	1ad3      	subs	r3, r2, r3
 801068e:	2b00      	cmp	r3, #0
 8010690:	db2d      	blt.n	80106ee <tcp_timewait_input+0x9e>
 8010692:	4b25      	ldr	r3, [pc, #148]	; (8010728 <tcp_timewait_input+0xd8>)
 8010694:	681a      	ldr	r2, [r3, #0]
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801069a:	6879      	ldr	r1, [r7, #4]
 801069c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801069e:	440b      	add	r3, r1
 80106a0:	1ad3      	subs	r3, r2, r3
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	dc23      	bgt.n	80106ee <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80106a6:	4b21      	ldr	r3, [pc, #132]	; (801072c <tcp_timewait_input+0xdc>)
 80106a8:	6819      	ldr	r1, [r3, #0]
 80106aa:	4b21      	ldr	r3, [pc, #132]	; (8010730 <tcp_timewait_input+0xe0>)
 80106ac:	881b      	ldrh	r3, [r3, #0]
 80106ae:	461a      	mov	r2, r3
 80106b0:	4b1d      	ldr	r3, [pc, #116]	; (8010728 <tcp_timewait_input+0xd8>)
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80106b6:	4b1f      	ldr	r3, [pc, #124]	; (8010734 <tcp_timewait_input+0xe4>)
 80106b8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80106ba:	885b      	ldrh	r3, [r3, #2]
 80106bc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80106be:	4a1d      	ldr	r2, [pc, #116]	; (8010734 <tcp_timewait_input+0xe4>)
 80106c0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80106c2:	8812      	ldrh	r2, [r2, #0]
 80106c4:	b292      	uxth	r2, r2
 80106c6:	9202      	str	r2, [sp, #8]
 80106c8:	9301      	str	r3, [sp, #4]
 80106ca:	4b1b      	ldr	r3, [pc, #108]	; (8010738 <tcp_timewait_input+0xe8>)
 80106cc:	9300      	str	r3, [sp, #0]
 80106ce:	4b1b      	ldr	r3, [pc, #108]	; (801073c <tcp_timewait_input+0xec>)
 80106d0:	4602      	mov	r2, r0
 80106d2:	6878      	ldr	r0, [r7, #4]
 80106d4:	f003 faca 	bl	8013c6c <tcp_rst>
      return;
 80106d8:	e01b      	b.n	8010712 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80106da:	4b0f      	ldr	r3, [pc, #60]	; (8010718 <tcp_timewait_input+0xc8>)
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	f003 0301 	and.w	r3, r3, #1
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d003      	beq.n	80106ee <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80106e6:	4b16      	ldr	r3, [pc, #88]	; (8010740 <tcp_timewait_input+0xf0>)
 80106e8:	681a      	ldr	r2, [r3, #0]
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80106ee:	4b10      	ldr	r3, [pc, #64]	; (8010730 <tcp_timewait_input+0xe0>)
 80106f0:	881b      	ldrh	r3, [r3, #0]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d00c      	beq.n	8010710 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	8b5b      	ldrh	r3, [r3, #26]
 80106fa:	f043 0302 	orr.w	r3, r3, #2
 80106fe:	b29a      	uxth	r2, r3
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f002 fcfd 	bl	8013104 <tcp_output>
  }
  return;
 801070a:	e001      	b.n	8010710 <tcp_timewait_input+0xc0>
    return;
 801070c:	bf00      	nop
 801070e:	e000      	b.n	8010712 <tcp_timewait_input+0xc2>
  return;
 8010710:	bf00      	nop
}
 8010712:	3708      	adds	r7, #8
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}
 8010718:	2000d680 	.word	0x2000d680
 801071c:	0801a948 	.word	0x0801a948
 8010720:	0801ab60 	.word	0x0801ab60
 8010724:	0801a994 	.word	0x0801a994
 8010728:	2000d674 	.word	0x2000d674
 801072c:	2000d678 	.word	0x2000d678
 8010730:	2000d67e 	.word	0x2000d67e
 8010734:	2000d664 	.word	0x2000d664
 8010738:	20009ef8 	.word	0x20009ef8
 801073c:	20009efc 	.word	0x20009efc
 8010740:	2000d63c 	.word	0x2000d63c

08010744 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010744:	b590      	push	{r4, r7, lr}
 8010746:	b08d      	sub	sp, #52	; 0x34
 8010748:	af04      	add	r7, sp, #16
 801074a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801074c:	2300      	movs	r3, #0
 801074e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010750:	2300      	movs	r3, #0
 8010752:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d106      	bne.n	8010768 <tcp_process+0x24>
 801075a:	4b9d      	ldr	r3, [pc, #628]	; (80109d0 <tcp_process+0x28c>)
 801075c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010760:	499c      	ldr	r1, [pc, #624]	; (80109d4 <tcp_process+0x290>)
 8010762:	489d      	ldr	r0, [pc, #628]	; (80109d8 <tcp_process+0x294>)
 8010764:	f007 f892 	bl	801788c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010768:	4b9c      	ldr	r3, [pc, #624]	; (80109dc <tcp_process+0x298>)
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	f003 0304 	and.w	r3, r3, #4
 8010770:	2b00      	cmp	r3, #0
 8010772:	d04e      	beq.n	8010812 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	7d1b      	ldrb	r3, [r3, #20]
 8010778:	2b02      	cmp	r3, #2
 801077a:	d108      	bne.n	801078e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010780:	4b97      	ldr	r3, [pc, #604]	; (80109e0 <tcp_process+0x29c>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	429a      	cmp	r2, r3
 8010786:	d123      	bne.n	80107d0 <tcp_process+0x8c>
        acceptable = 1;
 8010788:	2301      	movs	r3, #1
 801078a:	76fb      	strb	r3, [r7, #27]
 801078c:	e020      	b.n	80107d0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010792:	4b94      	ldr	r3, [pc, #592]	; (80109e4 <tcp_process+0x2a0>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	429a      	cmp	r2, r3
 8010798:	d102      	bne.n	80107a0 <tcp_process+0x5c>
        acceptable = 1;
 801079a:	2301      	movs	r3, #1
 801079c:	76fb      	strb	r3, [r7, #27]
 801079e:	e017      	b.n	80107d0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80107a0:	4b90      	ldr	r3, [pc, #576]	; (80109e4 <tcp_process+0x2a0>)
 80107a2:	681a      	ldr	r2, [r3, #0]
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107a8:	1ad3      	subs	r3, r2, r3
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	db10      	blt.n	80107d0 <tcp_process+0x8c>
 80107ae:	4b8d      	ldr	r3, [pc, #564]	; (80109e4 <tcp_process+0x2a0>)
 80107b0:	681a      	ldr	r2, [r3, #0]
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107b6:	6879      	ldr	r1, [r7, #4]
 80107b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80107ba:	440b      	add	r3, r1
 80107bc:	1ad3      	subs	r3, r2, r3
 80107be:	2b00      	cmp	r3, #0
 80107c0:	dc06      	bgt.n	80107d0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	8b5b      	ldrh	r3, [r3, #26]
 80107c6:	f043 0302 	orr.w	r3, r3, #2
 80107ca:	b29a      	uxth	r2, r3
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80107d0:	7efb      	ldrb	r3, [r7, #27]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d01b      	beq.n	801080e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	7d1b      	ldrb	r3, [r3, #20]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d106      	bne.n	80107ec <tcp_process+0xa8>
 80107de:	4b7c      	ldr	r3, [pc, #496]	; (80109d0 <tcp_process+0x28c>)
 80107e0:	f44f 724e 	mov.w	r2, #824	; 0x338
 80107e4:	4980      	ldr	r1, [pc, #512]	; (80109e8 <tcp_process+0x2a4>)
 80107e6:	487c      	ldr	r0, [pc, #496]	; (80109d8 <tcp_process+0x294>)
 80107e8:	f007 f850 	bl	801788c <iprintf>
      recv_flags |= TF_RESET;
 80107ec:	4b7f      	ldr	r3, [pc, #508]	; (80109ec <tcp_process+0x2a8>)
 80107ee:	781b      	ldrb	r3, [r3, #0]
 80107f0:	f043 0308 	orr.w	r3, r3, #8
 80107f4:	b2da      	uxtb	r2, r3
 80107f6:	4b7d      	ldr	r3, [pc, #500]	; (80109ec <tcp_process+0x2a8>)
 80107f8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	8b5b      	ldrh	r3, [r3, #26]
 80107fe:	f023 0301 	bic.w	r3, r3, #1
 8010802:	b29a      	uxth	r2, r3
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010808:	f06f 030d 	mvn.w	r3, #13
 801080c:	e37a      	b.n	8010f04 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801080e:	2300      	movs	r3, #0
 8010810:	e378      	b.n	8010f04 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010812:	4b72      	ldr	r3, [pc, #456]	; (80109dc <tcp_process+0x298>)
 8010814:	781b      	ldrb	r3, [r3, #0]
 8010816:	f003 0302 	and.w	r3, r3, #2
 801081a:	2b00      	cmp	r3, #0
 801081c:	d010      	beq.n	8010840 <tcp_process+0xfc>
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	7d1b      	ldrb	r3, [r3, #20]
 8010822:	2b02      	cmp	r3, #2
 8010824:	d00c      	beq.n	8010840 <tcp_process+0xfc>
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	7d1b      	ldrb	r3, [r3, #20]
 801082a:	2b03      	cmp	r3, #3
 801082c:	d008      	beq.n	8010840 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	8b5b      	ldrh	r3, [r3, #26]
 8010832:	f043 0302 	orr.w	r3, r3, #2
 8010836:	b29a      	uxth	r2, r3
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801083c:	2300      	movs	r3, #0
 801083e:	e361      	b.n	8010f04 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	8b5b      	ldrh	r3, [r3, #26]
 8010844:	f003 0310 	and.w	r3, r3, #16
 8010848:	2b00      	cmp	r3, #0
 801084a:	d103      	bne.n	8010854 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801084c:	4b68      	ldr	r3, [pc, #416]	; (80109f0 <tcp_process+0x2ac>)
 801084e:	681a      	ldr	r2, [r3, #0]
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2200      	movs	r2, #0
 8010858:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2200      	movs	r2, #0
 8010860:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f001 fc2f 	bl	80120c8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	7d1b      	ldrb	r3, [r3, #20]
 801086e:	3b02      	subs	r3, #2
 8010870:	2b07      	cmp	r3, #7
 8010872:	f200 8337 	bhi.w	8010ee4 <tcp_process+0x7a0>
 8010876:	a201      	add	r2, pc, #4	; (adr r2, 801087c <tcp_process+0x138>)
 8010878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801087c:	0801089d 	.word	0x0801089d
 8010880:	08010acd 	.word	0x08010acd
 8010884:	08010c45 	.word	0x08010c45
 8010888:	08010c6f 	.word	0x08010c6f
 801088c:	08010d93 	.word	0x08010d93
 8010890:	08010c45 	.word	0x08010c45
 8010894:	08010e1f 	.word	0x08010e1f
 8010898:	08010eaf 	.word	0x08010eaf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801089c:	4b4f      	ldr	r3, [pc, #316]	; (80109dc <tcp_process+0x298>)
 801089e:	781b      	ldrb	r3, [r3, #0]
 80108a0:	f003 0310 	and.w	r3, r3, #16
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	f000 80e4 	beq.w	8010a72 <tcp_process+0x32e>
 80108aa:	4b4c      	ldr	r3, [pc, #304]	; (80109dc <tcp_process+0x298>)
 80108ac:	781b      	ldrb	r3, [r3, #0]
 80108ae:	f003 0302 	and.w	r3, r3, #2
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	f000 80dd 	beq.w	8010a72 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108bc:	1c5a      	adds	r2, r3, #1
 80108be:	4b48      	ldr	r3, [pc, #288]	; (80109e0 <tcp_process+0x29c>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	429a      	cmp	r2, r3
 80108c4:	f040 80d5 	bne.w	8010a72 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80108c8:	4b46      	ldr	r3, [pc, #280]	; (80109e4 <tcp_process+0x2a0>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	1c5a      	adds	r2, r3, #1
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80108da:	4b41      	ldr	r3, [pc, #260]	; (80109e0 <tcp_process+0x29c>)
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80108e2:	4b44      	ldr	r3, [pc, #272]	; (80109f4 <tcp_process+0x2b0>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	89db      	ldrh	r3, [r3, #14]
 80108e8:	b29a      	uxth	r2, r3
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80108fc:	4b39      	ldr	r3, [pc, #228]	; (80109e4 <tcp_process+0x2a0>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	1e5a      	subs	r2, r3, #1
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2204      	movs	r2, #4
 801090a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	3304      	adds	r3, #4
 8010914:	4618      	mov	r0, r3
 8010916:	f005 fb17 	bl	8015f48 <ip4_route>
 801091a:	4601      	mov	r1, r0
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	3304      	adds	r3, #4
 8010920:	461a      	mov	r2, r3
 8010922:	4620      	mov	r0, r4
 8010924:	f7ff f88c 	bl	800fa40 <tcp_eff_send_mss_netif>
 8010928:	4603      	mov	r3, r0
 801092a:	461a      	mov	r2, r3
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010934:	009a      	lsls	r2, r3, #2
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801093a:	005b      	lsls	r3, r3, #1
 801093c:	f241 111c 	movw	r1, #4380	; 0x111c
 8010940:	428b      	cmp	r3, r1
 8010942:	bf38      	it	cc
 8010944:	460b      	movcc	r3, r1
 8010946:	429a      	cmp	r2, r3
 8010948:	d204      	bcs.n	8010954 <tcp_process+0x210>
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801094e:	009b      	lsls	r3, r3, #2
 8010950:	b29b      	uxth	r3, r3
 8010952:	e00d      	b.n	8010970 <tcp_process+0x22c>
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010958:	005b      	lsls	r3, r3, #1
 801095a:	f241 121c 	movw	r2, #4380	; 0x111c
 801095e:	4293      	cmp	r3, r2
 8010960:	d904      	bls.n	801096c <tcp_process+0x228>
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010966:	005b      	lsls	r3, r3, #1
 8010968:	b29b      	uxth	r3, r3
 801096a:	e001      	b.n	8010970 <tcp_process+0x22c>
 801096c:	f241 131c 	movw	r3, #4380	; 0x111c
 8010970:	687a      	ldr	r2, [r7, #4]
 8010972:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801097c:	2b00      	cmp	r3, #0
 801097e:	d106      	bne.n	801098e <tcp_process+0x24a>
 8010980:	4b13      	ldr	r3, [pc, #76]	; (80109d0 <tcp_process+0x28c>)
 8010982:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010986:	491c      	ldr	r1, [pc, #112]	; (80109f8 <tcp_process+0x2b4>)
 8010988:	4813      	ldr	r0, [pc, #76]	; (80109d8 <tcp_process+0x294>)
 801098a:	f006 ff7f 	bl	801788c <iprintf>
        --pcb->snd_queuelen;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010994:	3b01      	subs	r3, #1
 8010996:	b29a      	uxth	r2, r3
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109a2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80109a4:	69fb      	ldr	r3, [r7, #28]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d12a      	bne.n	8010a00 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109ae:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80109b0:	69fb      	ldr	r3, [r7, #28]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d106      	bne.n	80109c4 <tcp_process+0x280>
 80109b6:	4b06      	ldr	r3, [pc, #24]	; (80109d0 <tcp_process+0x28c>)
 80109b8:	f44f 725d 	mov.w	r2, #884	; 0x374
 80109bc:	490f      	ldr	r1, [pc, #60]	; (80109fc <tcp_process+0x2b8>)
 80109be:	4806      	ldr	r0, [pc, #24]	; (80109d8 <tcp_process+0x294>)
 80109c0:	f006 ff64 	bl	801788c <iprintf>
          pcb->unsent = rseg->next;
 80109c4:	69fb      	ldr	r3, [r7, #28]
 80109c6:	681a      	ldr	r2, [r3, #0]
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	66da      	str	r2, [r3, #108]	; 0x6c
 80109cc:	e01c      	b.n	8010a08 <tcp_process+0x2c4>
 80109ce:	bf00      	nop
 80109d0:	0801a948 	.word	0x0801a948
 80109d4:	0801ab80 	.word	0x0801ab80
 80109d8:	0801a994 	.word	0x0801a994
 80109dc:	2000d680 	.word	0x2000d680
 80109e0:	2000d678 	.word	0x2000d678
 80109e4:	2000d674 	.word	0x2000d674
 80109e8:	0801ab9c 	.word	0x0801ab9c
 80109ec:	2000d681 	.word	0x2000d681
 80109f0:	2000d63c 	.word	0x2000d63c
 80109f4:	2000d664 	.word	0x2000d664
 80109f8:	0801abbc 	.word	0x0801abbc
 80109fc:	0801abd4 	.word	0x0801abd4
        } else {
          pcb->unacked = rseg->next;
 8010a00:	69fb      	ldr	r3, [r7, #28]
 8010a02:	681a      	ldr	r2, [r3, #0]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010a08:	69f8      	ldr	r0, [r7, #28]
 8010a0a:	f7fe fc54 	bl	800f2b6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d104      	bne.n	8010a20 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a1c:	861a      	strh	r2, [r3, #48]	; 0x30
 8010a1e:	e006      	b.n	8010a2e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2200      	movs	r2, #0
 8010a24:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2200      	movs	r2, #0
 8010a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d00a      	beq.n	8010a4e <tcp_process+0x30a>
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a3e:	687a      	ldr	r2, [r7, #4]
 8010a40:	6910      	ldr	r0, [r2, #16]
 8010a42:	2200      	movs	r2, #0
 8010a44:	6879      	ldr	r1, [r7, #4]
 8010a46:	4798      	blx	r3
 8010a48:	4603      	mov	r3, r0
 8010a4a:	76bb      	strb	r3, [r7, #26]
 8010a4c:	e001      	b.n	8010a52 <tcp_process+0x30e>
 8010a4e:	2300      	movs	r3, #0
 8010a50:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010a52:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010a56:	f113 0f0d 	cmn.w	r3, #13
 8010a5a:	d102      	bne.n	8010a62 <tcp_process+0x31e>
          return ERR_ABRT;
 8010a5c:	f06f 030c 	mvn.w	r3, #12
 8010a60:	e250      	b.n	8010f04 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	8b5b      	ldrh	r3, [r3, #26]
 8010a66:	f043 0302 	orr.w	r3, r3, #2
 8010a6a:	b29a      	uxth	r2, r3
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010a70:	e23a      	b.n	8010ee8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010a72:	4b98      	ldr	r3, [pc, #608]	; (8010cd4 <tcp_process+0x590>)
 8010a74:	781b      	ldrb	r3, [r3, #0]
 8010a76:	f003 0310 	and.w	r3, r3, #16
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	f000 8234 	beq.w	8010ee8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a80:	4b95      	ldr	r3, [pc, #596]	; (8010cd8 <tcp_process+0x594>)
 8010a82:	6819      	ldr	r1, [r3, #0]
 8010a84:	4b95      	ldr	r3, [pc, #596]	; (8010cdc <tcp_process+0x598>)
 8010a86:	881b      	ldrh	r3, [r3, #0]
 8010a88:	461a      	mov	r2, r3
 8010a8a:	4b95      	ldr	r3, [pc, #596]	; (8010ce0 <tcp_process+0x59c>)
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a90:	4b94      	ldr	r3, [pc, #592]	; (8010ce4 <tcp_process+0x5a0>)
 8010a92:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a94:	885b      	ldrh	r3, [r3, #2]
 8010a96:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a98:	4a92      	ldr	r2, [pc, #584]	; (8010ce4 <tcp_process+0x5a0>)
 8010a9a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a9c:	8812      	ldrh	r2, [r2, #0]
 8010a9e:	b292      	uxth	r2, r2
 8010aa0:	9202      	str	r2, [sp, #8]
 8010aa2:	9301      	str	r3, [sp, #4]
 8010aa4:	4b90      	ldr	r3, [pc, #576]	; (8010ce8 <tcp_process+0x5a4>)
 8010aa6:	9300      	str	r3, [sp, #0]
 8010aa8:	4b90      	ldr	r3, [pc, #576]	; (8010cec <tcp_process+0x5a8>)
 8010aaa:	4602      	mov	r2, r0
 8010aac:	6878      	ldr	r0, [r7, #4]
 8010aae:	f003 f8dd 	bl	8013c6c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010ab8:	2b05      	cmp	r3, #5
 8010aba:	f200 8215 	bhi.w	8010ee8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010ac4:	6878      	ldr	r0, [r7, #4]
 8010ac6:	f002 fea9 	bl	801381c <tcp_rexmit_rto>
      break;
 8010aca:	e20d      	b.n	8010ee8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010acc:	4b81      	ldr	r3, [pc, #516]	; (8010cd4 <tcp_process+0x590>)
 8010ace:	781b      	ldrb	r3, [r3, #0]
 8010ad0:	f003 0310 	and.w	r3, r3, #16
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	f000 80a1 	beq.w	8010c1c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ada:	4b7f      	ldr	r3, [pc, #508]	; (8010cd8 <tcp_process+0x594>)
 8010adc:	681a      	ldr	r2, [r3, #0]
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ae2:	1ad3      	subs	r3, r2, r3
 8010ae4:	3b01      	subs	r3, #1
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	db7e      	blt.n	8010be8 <tcp_process+0x4a4>
 8010aea:	4b7b      	ldr	r3, [pc, #492]	; (8010cd8 <tcp_process+0x594>)
 8010aec:	681a      	ldr	r2, [r3, #0]
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010af2:	1ad3      	subs	r3, r2, r3
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	dc77      	bgt.n	8010be8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2204      	movs	r2, #4
 8010afc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d102      	bne.n	8010b0c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010b06:	23fa      	movs	r3, #250	; 0xfa
 8010b08:	76bb      	strb	r3, [r7, #26]
 8010b0a:	e01d      	b.n	8010b48 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010b10:	699b      	ldr	r3, [r3, #24]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d106      	bne.n	8010b24 <tcp_process+0x3e0>
 8010b16:	4b76      	ldr	r3, [pc, #472]	; (8010cf0 <tcp_process+0x5ac>)
 8010b18:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010b1c:	4975      	ldr	r1, [pc, #468]	; (8010cf4 <tcp_process+0x5b0>)
 8010b1e:	4876      	ldr	r0, [pc, #472]	; (8010cf8 <tcp_process+0x5b4>)
 8010b20:	f006 feb4 	bl	801788c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010b28:	699b      	ldr	r3, [r3, #24]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d00a      	beq.n	8010b44 <tcp_process+0x400>
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010b32:	699b      	ldr	r3, [r3, #24]
 8010b34:	687a      	ldr	r2, [r7, #4]
 8010b36:	6910      	ldr	r0, [r2, #16]
 8010b38:	2200      	movs	r2, #0
 8010b3a:	6879      	ldr	r1, [r7, #4]
 8010b3c:	4798      	blx	r3
 8010b3e:	4603      	mov	r3, r0
 8010b40:	76bb      	strb	r3, [r7, #26]
 8010b42:	e001      	b.n	8010b48 <tcp_process+0x404>
 8010b44:	23f0      	movs	r3, #240	; 0xf0
 8010b46:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010b48:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d00a      	beq.n	8010b66 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010b50:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010b54:	f113 0f0d 	cmn.w	r3, #13
 8010b58:	d002      	beq.n	8010b60 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f7fd fc00 	bl	800e360 <tcp_abort>
            }
            return ERR_ABRT;
 8010b60:	f06f 030c 	mvn.w	r3, #12
 8010b64:	e1ce      	b.n	8010f04 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f000 fae0 	bl	801112c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010b6c:	4b63      	ldr	r3, [pc, #396]	; (8010cfc <tcp_process+0x5b8>)
 8010b6e:	881b      	ldrh	r3, [r3, #0]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d005      	beq.n	8010b80 <tcp_process+0x43c>
            recv_acked--;
 8010b74:	4b61      	ldr	r3, [pc, #388]	; (8010cfc <tcp_process+0x5b8>)
 8010b76:	881b      	ldrh	r3, [r3, #0]
 8010b78:	3b01      	subs	r3, #1
 8010b7a:	b29a      	uxth	r2, r3
 8010b7c:	4b5f      	ldr	r3, [pc, #380]	; (8010cfc <tcp_process+0x5b8>)
 8010b7e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b84:	009a      	lsls	r2, r3, #2
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b8a:	005b      	lsls	r3, r3, #1
 8010b8c:	f241 111c 	movw	r1, #4380	; 0x111c
 8010b90:	428b      	cmp	r3, r1
 8010b92:	bf38      	it	cc
 8010b94:	460b      	movcc	r3, r1
 8010b96:	429a      	cmp	r2, r3
 8010b98:	d204      	bcs.n	8010ba4 <tcp_process+0x460>
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b9e:	009b      	lsls	r3, r3, #2
 8010ba0:	b29b      	uxth	r3, r3
 8010ba2:	e00d      	b.n	8010bc0 <tcp_process+0x47c>
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ba8:	005b      	lsls	r3, r3, #1
 8010baa:	f241 121c 	movw	r2, #4380	; 0x111c
 8010bae:	4293      	cmp	r3, r2
 8010bb0:	d904      	bls.n	8010bbc <tcp_process+0x478>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bb6:	005b      	lsls	r3, r3, #1
 8010bb8:	b29b      	uxth	r3, r3
 8010bba:	e001      	b.n	8010bc0 <tcp_process+0x47c>
 8010bbc:	f241 131c 	movw	r3, #4380	; 0x111c
 8010bc0:	687a      	ldr	r2, [r7, #4]
 8010bc2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010bc6:	4b4e      	ldr	r3, [pc, #312]	; (8010d00 <tcp_process+0x5bc>)
 8010bc8:	781b      	ldrb	r3, [r3, #0]
 8010bca:	f003 0320 	and.w	r3, r3, #32
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d037      	beq.n	8010c42 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	8b5b      	ldrh	r3, [r3, #26]
 8010bd6:	f043 0302 	orr.w	r3, r3, #2
 8010bda:	b29a      	uxth	r2, r3
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2207      	movs	r2, #7
 8010be4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010be6:	e02c      	b.n	8010c42 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010be8:	4b3b      	ldr	r3, [pc, #236]	; (8010cd8 <tcp_process+0x594>)
 8010bea:	6819      	ldr	r1, [r3, #0]
 8010bec:	4b3b      	ldr	r3, [pc, #236]	; (8010cdc <tcp_process+0x598>)
 8010bee:	881b      	ldrh	r3, [r3, #0]
 8010bf0:	461a      	mov	r2, r3
 8010bf2:	4b3b      	ldr	r3, [pc, #236]	; (8010ce0 <tcp_process+0x59c>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010bf8:	4b3a      	ldr	r3, [pc, #232]	; (8010ce4 <tcp_process+0x5a0>)
 8010bfa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010bfc:	885b      	ldrh	r3, [r3, #2]
 8010bfe:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c00:	4a38      	ldr	r2, [pc, #224]	; (8010ce4 <tcp_process+0x5a0>)
 8010c02:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c04:	8812      	ldrh	r2, [r2, #0]
 8010c06:	b292      	uxth	r2, r2
 8010c08:	9202      	str	r2, [sp, #8]
 8010c0a:	9301      	str	r3, [sp, #4]
 8010c0c:	4b36      	ldr	r3, [pc, #216]	; (8010ce8 <tcp_process+0x5a4>)
 8010c0e:	9300      	str	r3, [sp, #0]
 8010c10:	4b36      	ldr	r3, [pc, #216]	; (8010cec <tcp_process+0x5a8>)
 8010c12:	4602      	mov	r2, r0
 8010c14:	6878      	ldr	r0, [r7, #4]
 8010c16:	f003 f829 	bl	8013c6c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010c1a:	e167      	b.n	8010eec <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010c1c:	4b2d      	ldr	r3, [pc, #180]	; (8010cd4 <tcp_process+0x590>)
 8010c1e:	781b      	ldrb	r3, [r3, #0]
 8010c20:	f003 0302 	and.w	r3, r3, #2
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	f000 8161 	beq.w	8010eec <tcp_process+0x7a8>
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c2e:	1e5a      	subs	r2, r3, #1
 8010c30:	4b2b      	ldr	r3, [pc, #172]	; (8010ce0 <tcp_process+0x59c>)
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	429a      	cmp	r2, r3
 8010c36:	f040 8159 	bne.w	8010eec <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010c3a:	6878      	ldr	r0, [r7, #4]
 8010c3c:	f002 fe10 	bl	8013860 <tcp_rexmit>
      break;
 8010c40:	e154      	b.n	8010eec <tcp_process+0x7a8>
 8010c42:	e153      	b.n	8010eec <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f000 fa71 	bl	801112c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010c4a:	4b2d      	ldr	r3, [pc, #180]	; (8010d00 <tcp_process+0x5bc>)
 8010c4c:	781b      	ldrb	r3, [r3, #0]
 8010c4e:	f003 0320 	and.w	r3, r3, #32
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	f000 814c 	beq.w	8010ef0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	8b5b      	ldrh	r3, [r3, #26]
 8010c5c:	f043 0302 	orr.w	r3, r3, #2
 8010c60:	b29a      	uxth	r2, r3
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2207      	movs	r2, #7
 8010c6a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010c6c:	e140      	b.n	8010ef0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f000 fa5c 	bl	801112c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010c74:	4b22      	ldr	r3, [pc, #136]	; (8010d00 <tcp_process+0x5bc>)
 8010c76:	781b      	ldrb	r3, [r3, #0]
 8010c78:	f003 0320 	and.w	r3, r3, #32
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d071      	beq.n	8010d64 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010c80:	4b14      	ldr	r3, [pc, #80]	; (8010cd4 <tcp_process+0x590>)
 8010c82:	781b      	ldrb	r3, [r3, #0]
 8010c84:	f003 0310 	and.w	r3, r3, #16
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d060      	beq.n	8010d4e <tcp_process+0x60a>
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010c90:	4b11      	ldr	r3, [pc, #68]	; (8010cd8 <tcp_process+0x594>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	429a      	cmp	r2, r3
 8010c96:	d15a      	bne.n	8010d4e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d156      	bne.n	8010d4e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	8b5b      	ldrh	r3, [r3, #26]
 8010ca4:	f043 0302 	orr.w	r3, r3, #2
 8010ca8:	b29a      	uxth	r2, r3
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010cae:	6878      	ldr	r0, [r7, #4]
 8010cb0:	f7fe fdbc 	bl	800f82c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010cb4:	4b13      	ldr	r3, [pc, #76]	; (8010d04 <tcp_process+0x5c0>)
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	687a      	ldr	r2, [r7, #4]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d105      	bne.n	8010cca <tcp_process+0x586>
 8010cbe:	4b11      	ldr	r3, [pc, #68]	; (8010d04 <tcp_process+0x5c0>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	68db      	ldr	r3, [r3, #12]
 8010cc4:	4a0f      	ldr	r2, [pc, #60]	; (8010d04 <tcp_process+0x5c0>)
 8010cc6:	6013      	str	r3, [r2, #0]
 8010cc8:	e02e      	b.n	8010d28 <tcp_process+0x5e4>
 8010cca:	4b0e      	ldr	r3, [pc, #56]	; (8010d04 <tcp_process+0x5c0>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	617b      	str	r3, [r7, #20]
 8010cd0:	e027      	b.n	8010d22 <tcp_process+0x5de>
 8010cd2:	bf00      	nop
 8010cd4:	2000d680 	.word	0x2000d680
 8010cd8:	2000d678 	.word	0x2000d678
 8010cdc:	2000d67e 	.word	0x2000d67e
 8010ce0:	2000d674 	.word	0x2000d674
 8010ce4:	2000d664 	.word	0x2000d664
 8010ce8:	20009ef8 	.word	0x20009ef8
 8010cec:	20009efc 	.word	0x20009efc
 8010cf0:	0801a948 	.word	0x0801a948
 8010cf4:	0801abe8 	.word	0x0801abe8
 8010cf8:	0801a994 	.word	0x0801a994
 8010cfc:	2000d67c 	.word	0x2000d67c
 8010d00:	2000d681 	.word	0x2000d681
 8010d04:	2000d648 	.word	0x2000d648
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	68db      	ldr	r3, [r3, #12]
 8010d0c:	687a      	ldr	r2, [r7, #4]
 8010d0e:	429a      	cmp	r2, r3
 8010d10:	d104      	bne.n	8010d1c <tcp_process+0x5d8>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	68da      	ldr	r2, [r3, #12]
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	60da      	str	r2, [r3, #12]
 8010d1a:	e005      	b.n	8010d28 <tcp_process+0x5e4>
 8010d1c:	697b      	ldr	r3, [r7, #20]
 8010d1e:	68db      	ldr	r3, [r3, #12]
 8010d20:	617b      	str	r3, [r7, #20]
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d1ef      	bne.n	8010d08 <tcp_process+0x5c4>
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	60da      	str	r2, [r3, #12]
 8010d2e:	4b77      	ldr	r3, [pc, #476]	; (8010f0c <tcp_process+0x7c8>)
 8010d30:	2201      	movs	r2, #1
 8010d32:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	220a      	movs	r2, #10
 8010d38:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010d3a:	4b75      	ldr	r3, [pc, #468]	; (8010f10 <tcp_process+0x7cc>)
 8010d3c:	681a      	ldr	r2, [r3, #0]
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	60da      	str	r2, [r3, #12]
 8010d42:	4a73      	ldr	r2, [pc, #460]	; (8010f10 <tcp_process+0x7cc>)
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	6013      	str	r3, [r2, #0]
 8010d48:	f003 f952 	bl	8013ff0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010d4c:	e0d2      	b.n	8010ef4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	8b5b      	ldrh	r3, [r3, #26]
 8010d52:	f043 0302 	orr.w	r3, r3, #2
 8010d56:	b29a      	uxth	r2, r3
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2208      	movs	r2, #8
 8010d60:	751a      	strb	r2, [r3, #20]
      break;
 8010d62:	e0c7      	b.n	8010ef4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010d64:	4b6b      	ldr	r3, [pc, #428]	; (8010f14 <tcp_process+0x7d0>)
 8010d66:	781b      	ldrb	r3, [r3, #0]
 8010d68:	f003 0310 	and.w	r3, r3, #16
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	f000 80c1 	beq.w	8010ef4 <tcp_process+0x7b0>
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010d76:	4b68      	ldr	r3, [pc, #416]	; (8010f18 <tcp_process+0x7d4>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	f040 80ba 	bne.w	8010ef4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	f040 80b5 	bne.w	8010ef4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	2206      	movs	r2, #6
 8010d8e:	751a      	strb	r2, [r3, #20]
      break;
 8010d90:	e0b0      	b.n	8010ef4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010d92:	6878      	ldr	r0, [r7, #4]
 8010d94:	f000 f9ca 	bl	801112c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010d98:	4b60      	ldr	r3, [pc, #384]	; (8010f1c <tcp_process+0x7d8>)
 8010d9a:	781b      	ldrb	r3, [r3, #0]
 8010d9c:	f003 0320 	and.w	r3, r3, #32
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	f000 80a9 	beq.w	8010ef8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	8b5b      	ldrh	r3, [r3, #26]
 8010daa:	f043 0302 	orr.w	r3, r3, #2
 8010dae:	b29a      	uxth	r2, r3
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f7fe fd39 	bl	800f82c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010dba:	4b59      	ldr	r3, [pc, #356]	; (8010f20 <tcp_process+0x7dc>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	687a      	ldr	r2, [r7, #4]
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	d105      	bne.n	8010dd0 <tcp_process+0x68c>
 8010dc4:	4b56      	ldr	r3, [pc, #344]	; (8010f20 <tcp_process+0x7dc>)
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	68db      	ldr	r3, [r3, #12]
 8010dca:	4a55      	ldr	r2, [pc, #340]	; (8010f20 <tcp_process+0x7dc>)
 8010dcc:	6013      	str	r3, [r2, #0]
 8010dce:	e013      	b.n	8010df8 <tcp_process+0x6b4>
 8010dd0:	4b53      	ldr	r3, [pc, #332]	; (8010f20 <tcp_process+0x7dc>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	613b      	str	r3, [r7, #16]
 8010dd6:	e00c      	b.n	8010df2 <tcp_process+0x6ae>
 8010dd8:	693b      	ldr	r3, [r7, #16]
 8010dda:	68db      	ldr	r3, [r3, #12]
 8010ddc:	687a      	ldr	r2, [r7, #4]
 8010dde:	429a      	cmp	r2, r3
 8010de0:	d104      	bne.n	8010dec <tcp_process+0x6a8>
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	68da      	ldr	r2, [r3, #12]
 8010de6:	693b      	ldr	r3, [r7, #16]
 8010de8:	60da      	str	r2, [r3, #12]
 8010dea:	e005      	b.n	8010df8 <tcp_process+0x6b4>
 8010dec:	693b      	ldr	r3, [r7, #16]
 8010dee:	68db      	ldr	r3, [r3, #12]
 8010df0:	613b      	str	r3, [r7, #16]
 8010df2:	693b      	ldr	r3, [r7, #16]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d1ef      	bne.n	8010dd8 <tcp_process+0x694>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	60da      	str	r2, [r3, #12]
 8010dfe:	4b43      	ldr	r3, [pc, #268]	; (8010f0c <tcp_process+0x7c8>)
 8010e00:	2201      	movs	r2, #1
 8010e02:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	220a      	movs	r2, #10
 8010e08:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010e0a:	4b41      	ldr	r3, [pc, #260]	; (8010f10 <tcp_process+0x7cc>)
 8010e0c:	681a      	ldr	r2, [r3, #0]
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	60da      	str	r2, [r3, #12]
 8010e12:	4a3f      	ldr	r2, [pc, #252]	; (8010f10 <tcp_process+0x7cc>)
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6013      	str	r3, [r2, #0]
 8010e18:	f003 f8ea 	bl	8013ff0 <tcp_timer_needed>
      }
      break;
 8010e1c:	e06c      	b.n	8010ef8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010e1e:	6878      	ldr	r0, [r7, #4]
 8010e20:	f000 f984 	bl	801112c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010e24:	4b3b      	ldr	r3, [pc, #236]	; (8010f14 <tcp_process+0x7d0>)
 8010e26:	781b      	ldrb	r3, [r3, #0]
 8010e28:	f003 0310 	and.w	r3, r3, #16
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d065      	beq.n	8010efc <tcp_process+0x7b8>
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010e34:	4b38      	ldr	r3, [pc, #224]	; (8010f18 <tcp_process+0x7d4>)
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	429a      	cmp	r2, r3
 8010e3a:	d15f      	bne.n	8010efc <tcp_process+0x7b8>
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d15b      	bne.n	8010efc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010e44:	6878      	ldr	r0, [r7, #4]
 8010e46:	f7fe fcf1 	bl	800f82c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010e4a:	4b35      	ldr	r3, [pc, #212]	; (8010f20 <tcp_process+0x7dc>)
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	687a      	ldr	r2, [r7, #4]
 8010e50:	429a      	cmp	r2, r3
 8010e52:	d105      	bne.n	8010e60 <tcp_process+0x71c>
 8010e54:	4b32      	ldr	r3, [pc, #200]	; (8010f20 <tcp_process+0x7dc>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	68db      	ldr	r3, [r3, #12]
 8010e5a:	4a31      	ldr	r2, [pc, #196]	; (8010f20 <tcp_process+0x7dc>)
 8010e5c:	6013      	str	r3, [r2, #0]
 8010e5e:	e013      	b.n	8010e88 <tcp_process+0x744>
 8010e60:	4b2f      	ldr	r3, [pc, #188]	; (8010f20 <tcp_process+0x7dc>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	60fb      	str	r3, [r7, #12]
 8010e66:	e00c      	b.n	8010e82 <tcp_process+0x73e>
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	68db      	ldr	r3, [r3, #12]
 8010e6c:	687a      	ldr	r2, [r7, #4]
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d104      	bne.n	8010e7c <tcp_process+0x738>
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	68da      	ldr	r2, [r3, #12]
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	60da      	str	r2, [r3, #12]
 8010e7a:	e005      	b.n	8010e88 <tcp_process+0x744>
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	68db      	ldr	r3, [r3, #12]
 8010e80:	60fb      	str	r3, [r7, #12]
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d1ef      	bne.n	8010e68 <tcp_process+0x724>
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	60da      	str	r2, [r3, #12]
 8010e8e:	4b1f      	ldr	r3, [pc, #124]	; (8010f0c <tcp_process+0x7c8>)
 8010e90:	2201      	movs	r2, #1
 8010e92:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	220a      	movs	r2, #10
 8010e98:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010e9a:	4b1d      	ldr	r3, [pc, #116]	; (8010f10 <tcp_process+0x7cc>)
 8010e9c:	681a      	ldr	r2, [r3, #0]
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	60da      	str	r2, [r3, #12]
 8010ea2:	4a1b      	ldr	r2, [pc, #108]	; (8010f10 <tcp_process+0x7cc>)
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	6013      	str	r3, [r2, #0]
 8010ea8:	f003 f8a2 	bl	8013ff0 <tcp_timer_needed>
      }
      break;
 8010eac:	e026      	b.n	8010efc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010eae:	6878      	ldr	r0, [r7, #4]
 8010eb0:	f000 f93c 	bl	801112c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010eb4:	4b17      	ldr	r3, [pc, #92]	; (8010f14 <tcp_process+0x7d0>)
 8010eb6:	781b      	ldrb	r3, [r3, #0]
 8010eb8:	f003 0310 	and.w	r3, r3, #16
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d01f      	beq.n	8010f00 <tcp_process+0x7bc>
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010ec4:	4b14      	ldr	r3, [pc, #80]	; (8010f18 <tcp_process+0x7d4>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	429a      	cmp	r2, r3
 8010eca:	d119      	bne.n	8010f00 <tcp_process+0x7bc>
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d115      	bne.n	8010f00 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010ed4:	4b11      	ldr	r3, [pc, #68]	; (8010f1c <tcp_process+0x7d8>)
 8010ed6:	781b      	ldrb	r3, [r3, #0]
 8010ed8:	f043 0310 	orr.w	r3, r3, #16
 8010edc:	b2da      	uxtb	r2, r3
 8010ede:	4b0f      	ldr	r3, [pc, #60]	; (8010f1c <tcp_process+0x7d8>)
 8010ee0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010ee2:	e00d      	b.n	8010f00 <tcp_process+0x7bc>
    default:
      break;
 8010ee4:	bf00      	nop
 8010ee6:	e00c      	b.n	8010f02 <tcp_process+0x7be>
      break;
 8010ee8:	bf00      	nop
 8010eea:	e00a      	b.n	8010f02 <tcp_process+0x7be>
      break;
 8010eec:	bf00      	nop
 8010eee:	e008      	b.n	8010f02 <tcp_process+0x7be>
      break;
 8010ef0:	bf00      	nop
 8010ef2:	e006      	b.n	8010f02 <tcp_process+0x7be>
      break;
 8010ef4:	bf00      	nop
 8010ef6:	e004      	b.n	8010f02 <tcp_process+0x7be>
      break;
 8010ef8:	bf00      	nop
 8010efa:	e002      	b.n	8010f02 <tcp_process+0x7be>
      break;
 8010efc:	bf00      	nop
 8010efe:	e000      	b.n	8010f02 <tcp_process+0x7be>
      break;
 8010f00:	bf00      	nop
  }
  return ERR_OK;
 8010f02:	2300      	movs	r3, #0
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	3724      	adds	r7, #36	; 0x24
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd90      	pop	{r4, r7, pc}
 8010f0c:	2000d650 	.word	0x2000d650
 8010f10:	2000d64c 	.word	0x2000d64c
 8010f14:	2000d680 	.word	0x2000d680
 8010f18:	2000d678 	.word	0x2000d678
 8010f1c:	2000d681 	.word	0x2000d681
 8010f20:	2000d648 	.word	0x2000d648

08010f24 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010f24:	b590      	push	{r4, r7, lr}
 8010f26:	b085      	sub	sp, #20
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d106      	bne.n	8010f42 <tcp_oos_insert_segment+0x1e>
 8010f34:	4b3b      	ldr	r3, [pc, #236]	; (8011024 <tcp_oos_insert_segment+0x100>)
 8010f36:	f240 421f 	movw	r2, #1055	; 0x41f
 8010f3a:	493b      	ldr	r1, [pc, #236]	; (8011028 <tcp_oos_insert_segment+0x104>)
 8010f3c:	483b      	ldr	r0, [pc, #236]	; (801102c <tcp_oos_insert_segment+0x108>)
 8010f3e:	f006 fca5 	bl	801788c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	68db      	ldr	r3, [r3, #12]
 8010f46:	899b      	ldrh	r3, [r3, #12]
 8010f48:	b29b      	uxth	r3, r3
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f7fa ff84 	bl	800be58 <lwip_htons>
 8010f50:	4603      	mov	r3, r0
 8010f52:	b2db      	uxtb	r3, r3
 8010f54:	f003 0301 	and.w	r3, r3, #1
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d028      	beq.n	8010fae <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010f5c:	6838      	ldr	r0, [r7, #0]
 8010f5e:	f7fe f995 	bl	800f28c <tcp_segs_free>
    next = NULL;
 8010f62:	2300      	movs	r3, #0
 8010f64:	603b      	str	r3, [r7, #0]
 8010f66:	e056      	b.n	8011016 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	68db      	ldr	r3, [r3, #12]
 8010f6c:	899b      	ldrh	r3, [r3, #12]
 8010f6e:	b29b      	uxth	r3, r3
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7fa ff71 	bl	800be58 <lwip_htons>
 8010f76:	4603      	mov	r3, r0
 8010f78:	b2db      	uxtb	r3, r3
 8010f7a:	f003 0301 	and.w	r3, r3, #1
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d00d      	beq.n	8010f9e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	68db      	ldr	r3, [r3, #12]
 8010f86:	899b      	ldrh	r3, [r3, #12]
 8010f88:	b29c      	uxth	r4, r3
 8010f8a:	2001      	movs	r0, #1
 8010f8c:	f7fa ff64 	bl	800be58 <lwip_htons>
 8010f90:	4603      	mov	r3, r0
 8010f92:	461a      	mov	r2, r3
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	68db      	ldr	r3, [r3, #12]
 8010f98:	4322      	orrs	r2, r4
 8010f9a:	b292      	uxth	r2, r2
 8010f9c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010fa8:	68f8      	ldr	r0, [r7, #12]
 8010faa:	f7fe f984 	bl	800f2b6 <tcp_seg_free>
    while (next &&
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d00e      	beq.n	8010fd2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	891b      	ldrh	r3, [r3, #8]
 8010fb8:	461a      	mov	r2, r3
 8010fba:	4b1d      	ldr	r3, [pc, #116]	; (8011030 <tcp_oos_insert_segment+0x10c>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	441a      	add	r2, r3
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	68db      	ldr	r3, [r3, #12]
 8010fc4:	685b      	ldr	r3, [r3, #4]
 8010fc6:	6839      	ldr	r1, [r7, #0]
 8010fc8:	8909      	ldrh	r1, [r1, #8]
 8010fca:	440b      	add	r3, r1
 8010fcc:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	daca      	bge.n	8010f68 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d01e      	beq.n	8011016 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	891b      	ldrh	r3, [r3, #8]
 8010fdc:	461a      	mov	r2, r3
 8010fde:	4b14      	ldr	r3, [pc, #80]	; (8011030 <tcp_oos_insert_segment+0x10c>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	441a      	add	r2, r3
 8010fe4:	683b      	ldr	r3, [r7, #0]
 8010fe6:	68db      	ldr	r3, [r3, #12]
 8010fe8:	685b      	ldr	r3, [r3, #4]
 8010fea:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	dd12      	ble.n	8011016 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	68db      	ldr	r3, [r3, #12]
 8010ff4:	685b      	ldr	r3, [r3, #4]
 8010ff6:	b29a      	uxth	r2, r3
 8010ff8:	4b0d      	ldr	r3, [pc, #52]	; (8011030 <tcp_oos_insert_segment+0x10c>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	b29b      	uxth	r3, r3
 8010ffe:	1ad3      	subs	r3, r2, r3
 8011000:	b29a      	uxth	r2, r3
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	685a      	ldr	r2, [r3, #4]
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	891b      	ldrh	r3, [r3, #8]
 801100e:	4619      	mov	r1, r3
 8011010:	4610      	mov	r0, r2
 8011012:	f7fc f98d 	bl	800d330 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	683a      	ldr	r2, [r7, #0]
 801101a:	601a      	str	r2, [r3, #0]
}
 801101c:	bf00      	nop
 801101e:	3714      	adds	r7, #20
 8011020:	46bd      	mov	sp, r7
 8011022:	bd90      	pop	{r4, r7, pc}
 8011024:	0801a948 	.word	0x0801a948
 8011028:	0801ac08 	.word	0x0801ac08
 801102c:	0801a994 	.word	0x0801a994
 8011030:	2000d674 	.word	0x2000d674

08011034 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011034:	b5b0      	push	{r4, r5, r7, lr}
 8011036:	b086      	sub	sp, #24
 8011038:	af00      	add	r7, sp, #0
 801103a:	60f8      	str	r0, [r7, #12]
 801103c:	60b9      	str	r1, [r7, #8]
 801103e:	607a      	str	r2, [r7, #4]
 8011040:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011042:	e03e      	b.n	80110c2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011048:	68bb      	ldr	r3, [r7, #8]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801104e:	697b      	ldr	r3, [r7, #20]
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	4618      	mov	r0, r3
 8011054:	f7fc fb80 	bl	800d758 <pbuf_clen>
 8011058:	4603      	mov	r3, r0
 801105a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011062:	8a7a      	ldrh	r2, [r7, #18]
 8011064:	429a      	cmp	r2, r3
 8011066:	d906      	bls.n	8011076 <tcp_free_acked_segments+0x42>
 8011068:	4b2a      	ldr	r3, [pc, #168]	; (8011114 <tcp_free_acked_segments+0xe0>)
 801106a:	f240 4257 	movw	r2, #1111	; 0x457
 801106e:	492a      	ldr	r1, [pc, #168]	; (8011118 <tcp_free_acked_segments+0xe4>)
 8011070:	482a      	ldr	r0, [pc, #168]	; (801111c <tcp_free_acked_segments+0xe8>)
 8011072:	f006 fc0b 	bl	801788c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801107c:	8a7b      	ldrh	r3, [r7, #18]
 801107e:	1ad3      	subs	r3, r2, r3
 8011080:	b29a      	uxth	r2, r3
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011088:	697b      	ldr	r3, [r7, #20]
 801108a:	891a      	ldrh	r2, [r3, #8]
 801108c:	4b24      	ldr	r3, [pc, #144]	; (8011120 <tcp_free_acked_segments+0xec>)
 801108e:	881b      	ldrh	r3, [r3, #0]
 8011090:	4413      	add	r3, r2
 8011092:	b29a      	uxth	r2, r3
 8011094:	4b22      	ldr	r3, [pc, #136]	; (8011120 <tcp_free_acked_segments+0xec>)
 8011096:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011098:	6978      	ldr	r0, [r7, #20]
 801109a:	f7fe f90c 	bl	800f2b6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d00c      	beq.n	80110c2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d109      	bne.n	80110c2 <tcp_free_acked_segments+0x8e>
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d106      	bne.n	80110c2 <tcp_free_acked_segments+0x8e>
 80110b4:	4b17      	ldr	r3, [pc, #92]	; (8011114 <tcp_free_acked_segments+0xe0>)
 80110b6:	f240 4261 	movw	r2, #1121	; 0x461
 80110ba:	491a      	ldr	r1, [pc, #104]	; (8011124 <tcp_free_acked_segments+0xf0>)
 80110bc:	4817      	ldr	r0, [pc, #92]	; (801111c <tcp_free_acked_segments+0xe8>)
 80110be:	f006 fbe5 	bl	801788c <iprintf>
  while (seg_list != NULL &&
 80110c2:	68bb      	ldr	r3, [r7, #8]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d020      	beq.n	801110a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	68db      	ldr	r3, [r3, #12]
 80110cc:	685b      	ldr	r3, [r3, #4]
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7fa fed7 	bl	800be82 <lwip_htonl>
 80110d4:	4604      	mov	r4, r0
 80110d6:	68bb      	ldr	r3, [r7, #8]
 80110d8:	891b      	ldrh	r3, [r3, #8]
 80110da:	461d      	mov	r5, r3
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	68db      	ldr	r3, [r3, #12]
 80110e0:	899b      	ldrh	r3, [r3, #12]
 80110e2:	b29b      	uxth	r3, r3
 80110e4:	4618      	mov	r0, r3
 80110e6:	f7fa feb7 	bl	800be58 <lwip_htons>
 80110ea:	4603      	mov	r3, r0
 80110ec:	b2db      	uxtb	r3, r3
 80110ee:	f003 0303 	and.w	r3, r3, #3
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d001      	beq.n	80110fa <tcp_free_acked_segments+0xc6>
 80110f6:	2301      	movs	r3, #1
 80110f8:	e000      	b.n	80110fc <tcp_free_acked_segments+0xc8>
 80110fa:	2300      	movs	r3, #0
 80110fc:	442b      	add	r3, r5
 80110fe:	18e2      	adds	r2, r4, r3
 8011100:	4b09      	ldr	r3, [pc, #36]	; (8011128 <tcp_free_acked_segments+0xf4>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011106:	2b00      	cmp	r3, #0
 8011108:	dd9c      	ble.n	8011044 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801110a:	68bb      	ldr	r3, [r7, #8]
}
 801110c:	4618      	mov	r0, r3
 801110e:	3718      	adds	r7, #24
 8011110:	46bd      	mov	sp, r7
 8011112:	bdb0      	pop	{r4, r5, r7, pc}
 8011114:	0801a948 	.word	0x0801a948
 8011118:	0801ac30 	.word	0x0801ac30
 801111c:	0801a994 	.word	0x0801a994
 8011120:	2000d67c 	.word	0x2000d67c
 8011124:	0801ac58 	.word	0x0801ac58
 8011128:	2000d678 	.word	0x2000d678

0801112c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801112c:	b5b0      	push	{r4, r5, r7, lr}
 801112e:	b094      	sub	sp, #80	; 0x50
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011134:	2300      	movs	r3, #0
 8011136:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d106      	bne.n	801114c <tcp_receive+0x20>
 801113e:	4b91      	ldr	r3, [pc, #580]	; (8011384 <tcp_receive+0x258>)
 8011140:	f240 427b 	movw	r2, #1147	; 0x47b
 8011144:	4990      	ldr	r1, [pc, #576]	; (8011388 <tcp_receive+0x25c>)
 8011146:	4891      	ldr	r0, [pc, #580]	; (801138c <tcp_receive+0x260>)
 8011148:	f006 fba0 	bl	801788c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	7d1b      	ldrb	r3, [r3, #20]
 8011150:	2b03      	cmp	r3, #3
 8011152:	d806      	bhi.n	8011162 <tcp_receive+0x36>
 8011154:	4b8b      	ldr	r3, [pc, #556]	; (8011384 <tcp_receive+0x258>)
 8011156:	f240 427c 	movw	r2, #1148	; 0x47c
 801115a:	498d      	ldr	r1, [pc, #564]	; (8011390 <tcp_receive+0x264>)
 801115c:	488b      	ldr	r0, [pc, #556]	; (801138c <tcp_receive+0x260>)
 801115e:	f006 fb95 	bl	801788c <iprintf>

  if (flags & TCP_ACK) {
 8011162:	4b8c      	ldr	r3, [pc, #560]	; (8011394 <tcp_receive+0x268>)
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	f003 0310 	and.w	r3, r3, #16
 801116a:	2b00      	cmp	r3, #0
 801116c:	f000 8264 	beq.w	8011638 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011176:	461a      	mov	r2, r3
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801117c:	4413      	add	r3, r2
 801117e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011184:	4b84      	ldr	r3, [pc, #528]	; (8011398 <tcp_receive+0x26c>)
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	1ad3      	subs	r3, r2, r3
 801118a:	2b00      	cmp	r3, #0
 801118c:	db1b      	blt.n	80111c6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011192:	4b81      	ldr	r3, [pc, #516]	; (8011398 <tcp_receive+0x26c>)
 8011194:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011196:	429a      	cmp	r2, r3
 8011198:	d106      	bne.n	80111a8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801119e:	4b7f      	ldr	r3, [pc, #508]	; (801139c <tcp_receive+0x270>)
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	1ad3      	subs	r3, r2, r3
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	db0e      	blt.n	80111c6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80111ac:	4b7b      	ldr	r3, [pc, #492]	; (801139c <tcp_receive+0x270>)
 80111ae:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80111b0:	429a      	cmp	r2, r3
 80111b2:	d125      	bne.n	8011200 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80111b4:	4b7a      	ldr	r3, [pc, #488]	; (80113a0 <tcp_receive+0x274>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	89db      	ldrh	r3, [r3, #14]
 80111ba:	b29a      	uxth	r2, r3
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d91c      	bls.n	8011200 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80111c6:	4b76      	ldr	r3, [pc, #472]	; (80113a0 <tcp_receive+0x274>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	89db      	ldrh	r3, [r3, #14]
 80111cc:	b29a      	uxth	r2, r3
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80111e0:	429a      	cmp	r2, r3
 80111e2:	d205      	bcs.n	80111f0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80111f0:	4b69      	ldr	r3, [pc, #420]	; (8011398 <tcp_receive+0x26c>)
 80111f2:	681a      	ldr	r2, [r3, #0]
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80111f8:	4b68      	ldr	r3, [pc, #416]	; (801139c <tcp_receive+0x270>)
 80111fa:	681a      	ldr	r2, [r3, #0]
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011200:	4b66      	ldr	r3, [pc, #408]	; (801139c <tcp_receive+0x270>)
 8011202:	681a      	ldr	r2, [r3, #0]
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011208:	1ad3      	subs	r3, r2, r3
 801120a:	2b00      	cmp	r3, #0
 801120c:	dc58      	bgt.n	80112c0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801120e:	4b65      	ldr	r3, [pc, #404]	; (80113a4 <tcp_receive+0x278>)
 8011210:	881b      	ldrh	r3, [r3, #0]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d14b      	bne.n	80112ae <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801121a:	687a      	ldr	r2, [r7, #4]
 801121c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011220:	4413      	add	r3, r2
 8011222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011224:	429a      	cmp	r2, r3
 8011226:	d142      	bne.n	80112ae <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801122e:	2b00      	cmp	r3, #0
 8011230:	db3d      	blt.n	80112ae <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011236:	4b59      	ldr	r3, [pc, #356]	; (801139c <tcp_receive+0x270>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	429a      	cmp	r2, r3
 801123c:	d137      	bne.n	80112ae <tcp_receive+0x182>
              found_dupack = 1;
 801123e:	2301      	movs	r3, #1
 8011240:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011248:	2bff      	cmp	r3, #255	; 0xff
 801124a:	d007      	beq.n	801125c <tcp_receive+0x130>
                ++pcb->dupacks;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011252:	3301      	adds	r3, #1
 8011254:	b2da      	uxtb	r2, r3
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011262:	2b03      	cmp	r3, #3
 8011264:	d91b      	bls.n	801129e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011270:	4413      	add	r3, r2
 8011272:	b29a      	uxth	r2, r3
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801127a:	429a      	cmp	r2, r3
 801127c:	d30a      	bcc.n	8011294 <tcp_receive+0x168>
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011288:	4413      	add	r3, r2
 801128a:	b29a      	uxth	r2, r3
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011292:	e004      	b.n	801129e <tcp_receive+0x172>
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801129a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80112a4:	2b02      	cmp	r3, #2
 80112a6:	d902      	bls.n	80112ae <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80112a8:	6878      	ldr	r0, [r7, #4]
 80112aa:	f002 fb45 	bl	8013938 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80112ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	f040 8161 	bne.w	8011578 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2200      	movs	r2, #0
 80112ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80112be:	e15b      	b.n	8011578 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80112c0:	4b36      	ldr	r3, [pc, #216]	; (801139c <tcp_receive+0x270>)
 80112c2:	681a      	ldr	r2, [r3, #0]
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112c8:	1ad3      	subs	r3, r2, r3
 80112ca:	3b01      	subs	r3, #1
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	f2c0 814e 	blt.w	801156e <tcp_receive+0x442>
 80112d2:	4b32      	ldr	r3, [pc, #200]	; (801139c <tcp_receive+0x270>)
 80112d4:	681a      	ldr	r2, [r3, #0]
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80112da:	1ad3      	subs	r3, r2, r3
 80112dc:	2b00      	cmp	r3, #0
 80112de:	f300 8146 	bgt.w	801156e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	8b5b      	ldrh	r3, [r3, #26]
 80112e6:	f003 0304 	and.w	r3, r3, #4
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d010      	beq.n	8011310 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	8b5b      	ldrh	r3, [r3, #26]
 80112f2:	f023 0304 	bic.w	r3, r3, #4
 80112f6:	b29a      	uxth	r2, r3
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2200      	movs	r2, #0
 801130c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2200      	movs	r2, #0
 8011314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801131e:	10db      	asrs	r3, r3, #3
 8011320:	b21b      	sxth	r3, r3
 8011322:	b29a      	uxth	r2, r3
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801132a:	b29b      	uxth	r3, r3
 801132c:	4413      	add	r3, r2
 801132e:	b29b      	uxth	r3, r3
 8011330:	b21a      	sxth	r2, r3
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011338:	4b18      	ldr	r3, [pc, #96]	; (801139c <tcp_receive+0x270>)
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	b29a      	uxth	r2, r3
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011342:	b29b      	uxth	r3, r3
 8011344:	1ad3      	subs	r3, r2, r3
 8011346:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2200      	movs	r2, #0
 801134c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011350:	4b12      	ldr	r3, [pc, #72]	; (801139c <tcp_receive+0x270>)
 8011352:	681a      	ldr	r2, [r3, #0]
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	7d1b      	ldrb	r3, [r3, #20]
 801135c:	2b03      	cmp	r3, #3
 801135e:	f240 8097 	bls.w	8011490 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801136e:	429a      	cmp	r2, r3
 8011370:	d245      	bcs.n	80113fe <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	8b5b      	ldrh	r3, [r3, #26]
 8011376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801137a:	2b00      	cmp	r3, #0
 801137c:	d014      	beq.n	80113a8 <tcp_receive+0x27c>
 801137e:	2301      	movs	r3, #1
 8011380:	e013      	b.n	80113aa <tcp_receive+0x27e>
 8011382:	bf00      	nop
 8011384:	0801a948 	.word	0x0801a948
 8011388:	0801ac78 	.word	0x0801ac78
 801138c:	0801a994 	.word	0x0801a994
 8011390:	0801ac94 	.word	0x0801ac94
 8011394:	2000d680 	.word	0x2000d680
 8011398:	2000d674 	.word	0x2000d674
 801139c:	2000d678 	.word	0x2000d678
 80113a0:	2000d664 	.word	0x2000d664
 80113a4:	2000d67e 	.word	0x2000d67e
 80113a8:	2302      	movs	r3, #2
 80113aa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80113ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80113b2:	b29a      	uxth	r2, r3
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80113b8:	fb12 f303 	smulbb	r3, r2, r3
 80113bc:	b29b      	uxth	r3, r3
 80113be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80113c0:	4293      	cmp	r3, r2
 80113c2:	bf28      	it	cs
 80113c4:	4613      	movcs	r3, r2
 80113c6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80113ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80113d0:	4413      	add	r3, r2
 80113d2:	b29a      	uxth	r2, r3
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80113da:	429a      	cmp	r2, r3
 80113dc:	d309      	bcc.n	80113f2 <tcp_receive+0x2c6>
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80113e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80113e6:	4413      	add	r3, r2
 80113e8:	b29a      	uxth	r2, r3
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80113f0:	e04e      	b.n	8011490 <tcp_receive+0x364>
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80113f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80113fc:	e048      	b.n	8011490 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011404:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011406:	4413      	add	r3, r2
 8011408:	b29a      	uxth	r2, r3
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011410:	429a      	cmp	r2, r3
 8011412:	d309      	bcc.n	8011428 <tcp_receive+0x2fc>
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801141a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801141c:	4413      	add	r3, r2
 801141e:	b29a      	uxth	r2, r3
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011426:	e004      	b.n	8011432 <tcp_receive+0x306>
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801142e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801143e:	429a      	cmp	r2, r3
 8011440:	d326      	bcc.n	8011490 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801144e:	1ad3      	subs	r3, r2, r3
 8011450:	b29a      	uxth	r2, r3
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011462:	4413      	add	r3, r2
 8011464:	b29a      	uxth	r2, r3
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801146c:	429a      	cmp	r2, r3
 801146e:	d30a      	bcc.n	8011486 <tcp_receive+0x35a>
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801147a:	4413      	add	r3, r2
 801147c:	b29a      	uxth	r2, r3
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011484:	e004      	b.n	8011490 <tcp_receive+0x364>
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801148c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011498:	4a98      	ldr	r2, [pc, #608]	; (80116fc <tcp_receive+0x5d0>)
 801149a:	6878      	ldr	r0, [r7, #4]
 801149c:	f7ff fdca 	bl	8011034 <tcp_free_acked_segments>
 80114a0:	4602      	mov	r2, r0
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114ae:	4a94      	ldr	r2, [pc, #592]	; (8011700 <tcp_receive+0x5d4>)
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	f7ff fdbf 	bl	8011034 <tcp_free_acked_segments>
 80114b6:	4602      	mov	r2, r0
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d104      	bne.n	80114ce <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80114ca:	861a      	strh	r2, [r3, #48]	; 0x30
 80114cc:	e002      	b.n	80114d4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	2200      	movs	r2, #0
 80114d2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2200      	movs	r2, #0
 80114d8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d103      	bne.n	80114ea <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	2200      	movs	r2, #0
 80114e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80114f0:	4b84      	ldr	r3, [pc, #528]	; (8011704 <tcp_receive+0x5d8>)
 80114f2:	881b      	ldrh	r3, [r3, #0]
 80114f4:	4413      	add	r3, r2
 80114f6:	b29a      	uxth	r2, r3
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	8b5b      	ldrh	r3, [r3, #26]
 8011502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011506:	2b00      	cmp	r3, #0
 8011508:	d035      	beq.n	8011576 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801150e:	2b00      	cmp	r3, #0
 8011510:	d118      	bne.n	8011544 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011516:	2b00      	cmp	r3, #0
 8011518:	d00c      	beq.n	8011534 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011522:	68db      	ldr	r3, [r3, #12]
 8011524:	685b      	ldr	r3, [r3, #4]
 8011526:	4618      	mov	r0, r3
 8011528:	f7fa fcab 	bl	800be82 <lwip_htonl>
 801152c:	4603      	mov	r3, r0
 801152e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011530:	2b00      	cmp	r3, #0
 8011532:	dc20      	bgt.n	8011576 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	8b5b      	ldrh	r3, [r3, #26]
 8011538:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801153c:	b29a      	uxth	r2, r3
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011542:	e018      	b.n	8011576 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801154c:	68db      	ldr	r3, [r3, #12]
 801154e:	685b      	ldr	r3, [r3, #4]
 8011550:	4618      	mov	r0, r3
 8011552:	f7fa fc96 	bl	800be82 <lwip_htonl>
 8011556:	4603      	mov	r3, r0
 8011558:	1ae3      	subs	r3, r4, r3
 801155a:	2b00      	cmp	r3, #0
 801155c:	dc0b      	bgt.n	8011576 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	8b5b      	ldrh	r3, [r3, #26]
 8011562:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011566:	b29a      	uxth	r2, r3
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801156c:	e003      	b.n	8011576 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f002 fbce 	bl	8013d10 <tcp_send_empty_ack>
 8011574:	e000      	b.n	8011578 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011576:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801157c:	2b00      	cmp	r3, #0
 801157e:	d05b      	beq.n	8011638 <tcp_receive+0x50c>
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011584:	4b60      	ldr	r3, [pc, #384]	; (8011708 <tcp_receive+0x5dc>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	1ad3      	subs	r3, r2, r3
 801158a:	2b00      	cmp	r3, #0
 801158c:	da54      	bge.n	8011638 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801158e:	4b5f      	ldr	r3, [pc, #380]	; (801170c <tcp_receive+0x5e0>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	b29a      	uxth	r2, r3
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011598:	b29b      	uxth	r3, r3
 801159a:	1ad3      	subs	r3, r2, r3
 801159c:	b29b      	uxth	r3, r3
 801159e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80115a2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80115ac:	10db      	asrs	r3, r3, #3
 80115ae:	b21b      	sxth	r3, r3
 80115b0:	b29b      	uxth	r3, r3
 80115b2:	1ad3      	subs	r3, r2, r3
 80115b4:	b29b      	uxth	r3, r3
 80115b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80115c0:	b29a      	uxth	r2, r3
 80115c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80115c6:	4413      	add	r3, r2
 80115c8:	b29b      	uxth	r3, r3
 80115ca:	b21a      	sxth	r2, r3
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80115d0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	da05      	bge.n	80115e4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80115d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80115dc:	425b      	negs	r3, r3
 80115de:	b29b      	uxth	r3, r3
 80115e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80115e4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80115ee:	109b      	asrs	r3, r3, #2
 80115f0:	b21b      	sxth	r3, r3
 80115f2:	b29b      	uxth	r3, r3
 80115f4:	1ad3      	subs	r3, r2, r3
 80115f6:	b29b      	uxth	r3, r3
 80115f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011602:	b29a      	uxth	r2, r3
 8011604:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011608:	4413      	add	r3, r2
 801160a:	b29b      	uxth	r3, r3
 801160c:	b21a      	sxth	r2, r3
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011618:	10db      	asrs	r3, r3, #3
 801161a:	b21b      	sxth	r3, r3
 801161c:	b29a      	uxth	r2, r3
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011624:	b29b      	uxth	r3, r3
 8011626:	4413      	add	r3, r2
 8011628:	b29b      	uxth	r3, r3
 801162a:	b21a      	sxth	r2, r3
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2200      	movs	r2, #0
 8011636:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011638:	4b35      	ldr	r3, [pc, #212]	; (8011710 <tcp_receive+0x5e4>)
 801163a:	881b      	ldrh	r3, [r3, #0]
 801163c:	2b00      	cmp	r3, #0
 801163e:	f000 84e2 	beq.w	8012006 <tcp_receive+0xeda>
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	7d1b      	ldrb	r3, [r3, #20]
 8011646:	2b06      	cmp	r3, #6
 8011648:	f200 84dd 	bhi.w	8012006 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011650:	4b30      	ldr	r3, [pc, #192]	; (8011714 <tcp_receive+0x5e8>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	1ad3      	subs	r3, r2, r3
 8011656:	3b01      	subs	r3, #1
 8011658:	2b00      	cmp	r3, #0
 801165a:	f2c0 808f 	blt.w	801177c <tcp_receive+0x650>
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011662:	4b2b      	ldr	r3, [pc, #172]	; (8011710 <tcp_receive+0x5e4>)
 8011664:	881b      	ldrh	r3, [r3, #0]
 8011666:	4619      	mov	r1, r3
 8011668:	4b2a      	ldr	r3, [pc, #168]	; (8011714 <tcp_receive+0x5e8>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	440b      	add	r3, r1
 801166e:	1ad3      	subs	r3, r2, r3
 8011670:	3301      	adds	r3, #1
 8011672:	2b00      	cmp	r3, #0
 8011674:	f300 8082 	bgt.w	801177c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011678:	4b27      	ldr	r3, [pc, #156]	; (8011718 <tcp_receive+0x5ec>)
 801167a:	685b      	ldr	r3, [r3, #4]
 801167c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011682:	4b24      	ldr	r3, [pc, #144]	; (8011714 <tcp_receive+0x5e8>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	1ad3      	subs	r3, r2, r3
 8011688:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801168a:	4b23      	ldr	r3, [pc, #140]	; (8011718 <tcp_receive+0x5ec>)
 801168c:	685b      	ldr	r3, [r3, #4]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d106      	bne.n	80116a0 <tcp_receive+0x574>
 8011692:	4b22      	ldr	r3, [pc, #136]	; (801171c <tcp_receive+0x5f0>)
 8011694:	f240 5294 	movw	r2, #1428	; 0x594
 8011698:	4921      	ldr	r1, [pc, #132]	; (8011720 <tcp_receive+0x5f4>)
 801169a:	4822      	ldr	r0, [pc, #136]	; (8011724 <tcp_receive+0x5f8>)
 801169c:	f006 f8f6 	bl	801788c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80116a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80116a6:	4293      	cmp	r3, r2
 80116a8:	d906      	bls.n	80116b8 <tcp_receive+0x58c>
 80116aa:	4b1c      	ldr	r3, [pc, #112]	; (801171c <tcp_receive+0x5f0>)
 80116ac:	f240 5295 	movw	r2, #1429	; 0x595
 80116b0:	491d      	ldr	r1, [pc, #116]	; (8011728 <tcp_receive+0x5fc>)
 80116b2:	481c      	ldr	r0, [pc, #112]	; (8011724 <tcp_receive+0x5f8>)
 80116b4:	f006 f8ea 	bl	801788c <iprintf>
      off = (u16_t)off32;
 80116b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80116be:	4b16      	ldr	r3, [pc, #88]	; (8011718 <tcp_receive+0x5ec>)
 80116c0:	685b      	ldr	r3, [r3, #4]
 80116c2:	891b      	ldrh	r3, [r3, #8]
 80116c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80116c8:	429a      	cmp	r2, r3
 80116ca:	d906      	bls.n	80116da <tcp_receive+0x5ae>
 80116cc:	4b13      	ldr	r3, [pc, #76]	; (801171c <tcp_receive+0x5f0>)
 80116ce:	f240 5297 	movw	r2, #1431	; 0x597
 80116d2:	4916      	ldr	r1, [pc, #88]	; (801172c <tcp_receive+0x600>)
 80116d4:	4813      	ldr	r0, [pc, #76]	; (8011724 <tcp_receive+0x5f8>)
 80116d6:	f006 f8d9 	bl	801788c <iprintf>
      inseg.len -= off;
 80116da:	4b0f      	ldr	r3, [pc, #60]	; (8011718 <tcp_receive+0x5ec>)
 80116dc:	891a      	ldrh	r2, [r3, #8]
 80116de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80116e2:	1ad3      	subs	r3, r2, r3
 80116e4:	b29a      	uxth	r2, r3
 80116e6:	4b0c      	ldr	r3, [pc, #48]	; (8011718 <tcp_receive+0x5ec>)
 80116e8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80116ea:	4b0b      	ldr	r3, [pc, #44]	; (8011718 <tcp_receive+0x5ec>)
 80116ec:	685b      	ldr	r3, [r3, #4]
 80116ee:	891a      	ldrh	r2, [r3, #8]
 80116f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80116f4:	1ad3      	subs	r3, r2, r3
 80116f6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80116f8:	e02a      	b.n	8011750 <tcp_receive+0x624>
 80116fa:	bf00      	nop
 80116fc:	0801acb0 	.word	0x0801acb0
 8011700:	0801acb8 	.word	0x0801acb8
 8011704:	2000d67c 	.word	0x2000d67c
 8011708:	2000d678 	.word	0x2000d678
 801170c:	2000d63c 	.word	0x2000d63c
 8011710:	2000d67e 	.word	0x2000d67e
 8011714:	2000d674 	.word	0x2000d674
 8011718:	2000d654 	.word	0x2000d654
 801171c:	0801a948 	.word	0x0801a948
 8011720:	0801acc0 	.word	0x0801acc0
 8011724:	0801a994 	.word	0x0801a994
 8011728:	0801acd0 	.word	0x0801acd0
 801172c:	0801ace0 	.word	0x0801ace0
        off -= p->len;
 8011730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011732:	895b      	ldrh	r3, [r3, #10]
 8011734:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011738:	1ad3      	subs	r3, r2, r3
 801173a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801173e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011740:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011742:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011746:	2200      	movs	r2, #0
 8011748:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801174a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011752:	895b      	ldrh	r3, [r3, #10]
 8011754:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011758:	429a      	cmp	r2, r3
 801175a:	d8e9      	bhi.n	8011730 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801175c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011760:	4619      	mov	r1, r3
 8011762:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011764:	f7fb fee4 	bl	800d530 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801176c:	4a91      	ldr	r2, [pc, #580]	; (80119b4 <tcp_receive+0x888>)
 801176e:	6013      	str	r3, [r2, #0]
 8011770:	4b91      	ldr	r3, [pc, #580]	; (80119b8 <tcp_receive+0x88c>)
 8011772:	68db      	ldr	r3, [r3, #12]
 8011774:	4a8f      	ldr	r2, [pc, #572]	; (80119b4 <tcp_receive+0x888>)
 8011776:	6812      	ldr	r2, [r2, #0]
 8011778:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801177a:	e00d      	b.n	8011798 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801177c:	4b8d      	ldr	r3, [pc, #564]	; (80119b4 <tcp_receive+0x888>)
 801177e:	681a      	ldr	r2, [r3, #0]
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011784:	1ad3      	subs	r3, r2, r3
 8011786:	2b00      	cmp	r3, #0
 8011788:	da06      	bge.n	8011798 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	8b5b      	ldrh	r3, [r3, #26]
 801178e:	f043 0302 	orr.w	r3, r3, #2
 8011792:	b29a      	uxth	r2, r3
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011798:	4b86      	ldr	r3, [pc, #536]	; (80119b4 <tcp_receive+0x888>)
 801179a:	681a      	ldr	r2, [r3, #0]
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117a0:	1ad3      	subs	r3, r2, r3
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	f2c0 842a 	blt.w	8011ffc <tcp_receive+0xed0>
 80117a8:	4b82      	ldr	r3, [pc, #520]	; (80119b4 <tcp_receive+0x888>)
 80117aa:	681a      	ldr	r2, [r3, #0]
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117b0:	6879      	ldr	r1, [r7, #4]
 80117b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80117b4:	440b      	add	r3, r1
 80117b6:	1ad3      	subs	r3, r2, r3
 80117b8:	3301      	adds	r3, #1
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	f300 841e 	bgt.w	8011ffc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117c4:	4b7b      	ldr	r3, [pc, #492]	; (80119b4 <tcp_receive+0x888>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	429a      	cmp	r2, r3
 80117ca:	f040 829a 	bne.w	8011d02 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80117ce:	4b7a      	ldr	r3, [pc, #488]	; (80119b8 <tcp_receive+0x88c>)
 80117d0:	891c      	ldrh	r4, [r3, #8]
 80117d2:	4b79      	ldr	r3, [pc, #484]	; (80119b8 <tcp_receive+0x88c>)
 80117d4:	68db      	ldr	r3, [r3, #12]
 80117d6:	899b      	ldrh	r3, [r3, #12]
 80117d8:	b29b      	uxth	r3, r3
 80117da:	4618      	mov	r0, r3
 80117dc:	f7fa fb3c 	bl	800be58 <lwip_htons>
 80117e0:	4603      	mov	r3, r0
 80117e2:	b2db      	uxtb	r3, r3
 80117e4:	f003 0303 	and.w	r3, r3, #3
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d001      	beq.n	80117f0 <tcp_receive+0x6c4>
 80117ec:	2301      	movs	r3, #1
 80117ee:	e000      	b.n	80117f2 <tcp_receive+0x6c6>
 80117f0:	2300      	movs	r3, #0
 80117f2:	4423      	add	r3, r4
 80117f4:	b29a      	uxth	r2, r3
 80117f6:	4b71      	ldr	r3, [pc, #452]	; (80119bc <tcp_receive+0x890>)
 80117f8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80117fe:	4b6f      	ldr	r3, [pc, #444]	; (80119bc <tcp_receive+0x890>)
 8011800:	881b      	ldrh	r3, [r3, #0]
 8011802:	429a      	cmp	r2, r3
 8011804:	d275      	bcs.n	80118f2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011806:	4b6c      	ldr	r3, [pc, #432]	; (80119b8 <tcp_receive+0x88c>)
 8011808:	68db      	ldr	r3, [r3, #12]
 801180a:	899b      	ldrh	r3, [r3, #12]
 801180c:	b29b      	uxth	r3, r3
 801180e:	4618      	mov	r0, r3
 8011810:	f7fa fb22 	bl	800be58 <lwip_htons>
 8011814:	4603      	mov	r3, r0
 8011816:	b2db      	uxtb	r3, r3
 8011818:	f003 0301 	and.w	r3, r3, #1
 801181c:	2b00      	cmp	r3, #0
 801181e:	d01f      	beq.n	8011860 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011820:	4b65      	ldr	r3, [pc, #404]	; (80119b8 <tcp_receive+0x88c>)
 8011822:	68db      	ldr	r3, [r3, #12]
 8011824:	899b      	ldrh	r3, [r3, #12]
 8011826:	b29b      	uxth	r3, r3
 8011828:	b21b      	sxth	r3, r3
 801182a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801182e:	b21c      	sxth	r4, r3
 8011830:	4b61      	ldr	r3, [pc, #388]	; (80119b8 <tcp_receive+0x88c>)
 8011832:	68db      	ldr	r3, [r3, #12]
 8011834:	899b      	ldrh	r3, [r3, #12]
 8011836:	b29b      	uxth	r3, r3
 8011838:	4618      	mov	r0, r3
 801183a:	f7fa fb0d 	bl	800be58 <lwip_htons>
 801183e:	4603      	mov	r3, r0
 8011840:	b2db      	uxtb	r3, r3
 8011842:	b29b      	uxth	r3, r3
 8011844:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011848:	b29b      	uxth	r3, r3
 801184a:	4618      	mov	r0, r3
 801184c:	f7fa fb04 	bl	800be58 <lwip_htons>
 8011850:	4603      	mov	r3, r0
 8011852:	b21b      	sxth	r3, r3
 8011854:	4323      	orrs	r3, r4
 8011856:	b21a      	sxth	r2, r3
 8011858:	4b57      	ldr	r3, [pc, #348]	; (80119b8 <tcp_receive+0x88c>)
 801185a:	68db      	ldr	r3, [r3, #12]
 801185c:	b292      	uxth	r2, r2
 801185e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011864:	4b54      	ldr	r3, [pc, #336]	; (80119b8 <tcp_receive+0x88c>)
 8011866:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011868:	4b53      	ldr	r3, [pc, #332]	; (80119b8 <tcp_receive+0x88c>)
 801186a:	68db      	ldr	r3, [r3, #12]
 801186c:	899b      	ldrh	r3, [r3, #12]
 801186e:	b29b      	uxth	r3, r3
 8011870:	4618      	mov	r0, r3
 8011872:	f7fa faf1 	bl	800be58 <lwip_htons>
 8011876:	4603      	mov	r3, r0
 8011878:	b2db      	uxtb	r3, r3
 801187a:	f003 0302 	and.w	r3, r3, #2
 801187e:	2b00      	cmp	r3, #0
 8011880:	d005      	beq.n	801188e <tcp_receive+0x762>
            inseg.len -= 1;
 8011882:	4b4d      	ldr	r3, [pc, #308]	; (80119b8 <tcp_receive+0x88c>)
 8011884:	891b      	ldrh	r3, [r3, #8]
 8011886:	3b01      	subs	r3, #1
 8011888:	b29a      	uxth	r2, r3
 801188a:	4b4b      	ldr	r3, [pc, #300]	; (80119b8 <tcp_receive+0x88c>)
 801188c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801188e:	4b4a      	ldr	r3, [pc, #296]	; (80119b8 <tcp_receive+0x88c>)
 8011890:	685b      	ldr	r3, [r3, #4]
 8011892:	4a49      	ldr	r2, [pc, #292]	; (80119b8 <tcp_receive+0x88c>)
 8011894:	8912      	ldrh	r2, [r2, #8]
 8011896:	4611      	mov	r1, r2
 8011898:	4618      	mov	r0, r3
 801189a:	f7fb fd49 	bl	800d330 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801189e:	4b46      	ldr	r3, [pc, #280]	; (80119b8 <tcp_receive+0x88c>)
 80118a0:	891c      	ldrh	r4, [r3, #8]
 80118a2:	4b45      	ldr	r3, [pc, #276]	; (80119b8 <tcp_receive+0x88c>)
 80118a4:	68db      	ldr	r3, [r3, #12]
 80118a6:	899b      	ldrh	r3, [r3, #12]
 80118a8:	b29b      	uxth	r3, r3
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7fa fad4 	bl	800be58 <lwip_htons>
 80118b0:	4603      	mov	r3, r0
 80118b2:	b2db      	uxtb	r3, r3
 80118b4:	f003 0303 	and.w	r3, r3, #3
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d001      	beq.n	80118c0 <tcp_receive+0x794>
 80118bc:	2301      	movs	r3, #1
 80118be:	e000      	b.n	80118c2 <tcp_receive+0x796>
 80118c0:	2300      	movs	r3, #0
 80118c2:	4423      	add	r3, r4
 80118c4:	b29a      	uxth	r2, r3
 80118c6:	4b3d      	ldr	r3, [pc, #244]	; (80119bc <tcp_receive+0x890>)
 80118c8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80118ca:	4b3c      	ldr	r3, [pc, #240]	; (80119bc <tcp_receive+0x890>)
 80118cc:	881b      	ldrh	r3, [r3, #0]
 80118ce:	461a      	mov	r2, r3
 80118d0:	4b38      	ldr	r3, [pc, #224]	; (80119b4 <tcp_receive+0x888>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	441a      	add	r2, r3
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118da:	6879      	ldr	r1, [r7, #4]
 80118dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80118de:	440b      	add	r3, r1
 80118e0:	429a      	cmp	r2, r3
 80118e2:	d006      	beq.n	80118f2 <tcp_receive+0x7c6>
 80118e4:	4b36      	ldr	r3, [pc, #216]	; (80119c0 <tcp_receive+0x894>)
 80118e6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80118ea:	4936      	ldr	r1, [pc, #216]	; (80119c4 <tcp_receive+0x898>)
 80118ec:	4836      	ldr	r0, [pc, #216]	; (80119c8 <tcp_receive+0x89c>)
 80118ee:	f005 ffcd 	bl	801788c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	f000 80e7 	beq.w	8011aca <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80118fc:	4b2e      	ldr	r3, [pc, #184]	; (80119b8 <tcp_receive+0x88c>)
 80118fe:	68db      	ldr	r3, [r3, #12]
 8011900:	899b      	ldrh	r3, [r3, #12]
 8011902:	b29b      	uxth	r3, r3
 8011904:	4618      	mov	r0, r3
 8011906:	f7fa faa7 	bl	800be58 <lwip_htons>
 801190a:	4603      	mov	r3, r0
 801190c:	b2db      	uxtb	r3, r3
 801190e:	f003 0301 	and.w	r3, r3, #1
 8011912:	2b00      	cmp	r3, #0
 8011914:	d010      	beq.n	8011938 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011916:	e00a      	b.n	801192e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801191c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011922:	681a      	ldr	r2, [r3, #0]
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011928:	68f8      	ldr	r0, [r7, #12]
 801192a:	f7fd fcc4 	bl	800f2b6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011932:	2b00      	cmp	r3, #0
 8011934:	d1f0      	bne.n	8011918 <tcp_receive+0x7ec>
 8011936:	e0c8      	b.n	8011aca <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801193c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801193e:	e052      	b.n	80119e6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011942:	68db      	ldr	r3, [r3, #12]
 8011944:	899b      	ldrh	r3, [r3, #12]
 8011946:	b29b      	uxth	r3, r3
 8011948:	4618      	mov	r0, r3
 801194a:	f7fa fa85 	bl	800be58 <lwip_htons>
 801194e:	4603      	mov	r3, r0
 8011950:	b2db      	uxtb	r3, r3
 8011952:	f003 0301 	and.w	r3, r3, #1
 8011956:	2b00      	cmp	r3, #0
 8011958:	d03d      	beq.n	80119d6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801195a:	4b17      	ldr	r3, [pc, #92]	; (80119b8 <tcp_receive+0x88c>)
 801195c:	68db      	ldr	r3, [r3, #12]
 801195e:	899b      	ldrh	r3, [r3, #12]
 8011960:	b29b      	uxth	r3, r3
 8011962:	4618      	mov	r0, r3
 8011964:	f7fa fa78 	bl	800be58 <lwip_htons>
 8011968:	4603      	mov	r3, r0
 801196a:	b2db      	uxtb	r3, r3
 801196c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011970:	2b00      	cmp	r3, #0
 8011972:	d130      	bne.n	80119d6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011974:	4b10      	ldr	r3, [pc, #64]	; (80119b8 <tcp_receive+0x88c>)
 8011976:	68db      	ldr	r3, [r3, #12]
 8011978:	899b      	ldrh	r3, [r3, #12]
 801197a:	b29c      	uxth	r4, r3
 801197c:	2001      	movs	r0, #1
 801197e:	f7fa fa6b 	bl	800be58 <lwip_htons>
 8011982:	4603      	mov	r3, r0
 8011984:	461a      	mov	r2, r3
 8011986:	4b0c      	ldr	r3, [pc, #48]	; (80119b8 <tcp_receive+0x88c>)
 8011988:	68db      	ldr	r3, [r3, #12]
 801198a:	4322      	orrs	r2, r4
 801198c:	b292      	uxth	r2, r2
 801198e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011990:	4b09      	ldr	r3, [pc, #36]	; (80119b8 <tcp_receive+0x88c>)
 8011992:	891c      	ldrh	r4, [r3, #8]
 8011994:	4b08      	ldr	r3, [pc, #32]	; (80119b8 <tcp_receive+0x88c>)
 8011996:	68db      	ldr	r3, [r3, #12]
 8011998:	899b      	ldrh	r3, [r3, #12]
 801199a:	b29b      	uxth	r3, r3
 801199c:	4618      	mov	r0, r3
 801199e:	f7fa fa5b 	bl	800be58 <lwip_htons>
 80119a2:	4603      	mov	r3, r0
 80119a4:	b2db      	uxtb	r3, r3
 80119a6:	f003 0303 	and.w	r3, r3, #3
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d00e      	beq.n	80119cc <tcp_receive+0x8a0>
 80119ae:	2301      	movs	r3, #1
 80119b0:	e00d      	b.n	80119ce <tcp_receive+0x8a2>
 80119b2:	bf00      	nop
 80119b4:	2000d674 	.word	0x2000d674
 80119b8:	2000d654 	.word	0x2000d654
 80119bc:	2000d67e 	.word	0x2000d67e
 80119c0:	0801a948 	.word	0x0801a948
 80119c4:	0801acf0 	.word	0x0801acf0
 80119c8:	0801a994 	.word	0x0801a994
 80119cc:	2300      	movs	r3, #0
 80119ce:	4423      	add	r3, r4
 80119d0:	b29a      	uxth	r2, r3
 80119d2:	4b98      	ldr	r3, [pc, #608]	; (8011c34 <tcp_receive+0xb08>)
 80119d4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80119d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119d8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80119da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80119e0:	6938      	ldr	r0, [r7, #16]
 80119e2:	f7fd fc68 	bl	800f2b6 <tcp_seg_free>
            while (next &&
 80119e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d00e      	beq.n	8011a0a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80119ec:	4b91      	ldr	r3, [pc, #580]	; (8011c34 <tcp_receive+0xb08>)
 80119ee:	881b      	ldrh	r3, [r3, #0]
 80119f0:	461a      	mov	r2, r3
 80119f2:	4b91      	ldr	r3, [pc, #580]	; (8011c38 <tcp_receive+0xb0c>)
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	441a      	add	r2, r3
 80119f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119fa:	68db      	ldr	r3, [r3, #12]
 80119fc:	685b      	ldr	r3, [r3, #4]
 80119fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011a00:	8909      	ldrh	r1, [r1, #8]
 8011a02:	440b      	add	r3, r1
 8011a04:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	da9a      	bge.n	8011940 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d059      	beq.n	8011ac4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011a10:	4b88      	ldr	r3, [pc, #544]	; (8011c34 <tcp_receive+0xb08>)
 8011a12:	881b      	ldrh	r3, [r3, #0]
 8011a14:	461a      	mov	r2, r3
 8011a16:	4b88      	ldr	r3, [pc, #544]	; (8011c38 <tcp_receive+0xb0c>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	441a      	add	r2, r3
 8011a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a1e:	68db      	ldr	r3, [r3, #12]
 8011a20:	685b      	ldr	r3, [r3, #4]
 8011a22:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	dd4d      	ble.n	8011ac4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a2a:	68db      	ldr	r3, [r3, #12]
 8011a2c:	685b      	ldr	r3, [r3, #4]
 8011a2e:	b29a      	uxth	r2, r3
 8011a30:	4b81      	ldr	r3, [pc, #516]	; (8011c38 <tcp_receive+0xb0c>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	b29b      	uxth	r3, r3
 8011a36:	1ad3      	subs	r3, r2, r3
 8011a38:	b29a      	uxth	r2, r3
 8011a3a:	4b80      	ldr	r3, [pc, #512]	; (8011c3c <tcp_receive+0xb10>)
 8011a3c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011a3e:	4b7f      	ldr	r3, [pc, #508]	; (8011c3c <tcp_receive+0xb10>)
 8011a40:	68db      	ldr	r3, [r3, #12]
 8011a42:	899b      	ldrh	r3, [r3, #12]
 8011a44:	b29b      	uxth	r3, r3
 8011a46:	4618      	mov	r0, r3
 8011a48:	f7fa fa06 	bl	800be58 <lwip_htons>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	b2db      	uxtb	r3, r3
 8011a50:	f003 0302 	and.w	r3, r3, #2
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d005      	beq.n	8011a64 <tcp_receive+0x938>
                inseg.len -= 1;
 8011a58:	4b78      	ldr	r3, [pc, #480]	; (8011c3c <tcp_receive+0xb10>)
 8011a5a:	891b      	ldrh	r3, [r3, #8]
 8011a5c:	3b01      	subs	r3, #1
 8011a5e:	b29a      	uxth	r2, r3
 8011a60:	4b76      	ldr	r3, [pc, #472]	; (8011c3c <tcp_receive+0xb10>)
 8011a62:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011a64:	4b75      	ldr	r3, [pc, #468]	; (8011c3c <tcp_receive+0xb10>)
 8011a66:	685b      	ldr	r3, [r3, #4]
 8011a68:	4a74      	ldr	r2, [pc, #464]	; (8011c3c <tcp_receive+0xb10>)
 8011a6a:	8912      	ldrh	r2, [r2, #8]
 8011a6c:	4611      	mov	r1, r2
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7fb fc5e 	bl	800d330 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011a74:	4b71      	ldr	r3, [pc, #452]	; (8011c3c <tcp_receive+0xb10>)
 8011a76:	891c      	ldrh	r4, [r3, #8]
 8011a78:	4b70      	ldr	r3, [pc, #448]	; (8011c3c <tcp_receive+0xb10>)
 8011a7a:	68db      	ldr	r3, [r3, #12]
 8011a7c:	899b      	ldrh	r3, [r3, #12]
 8011a7e:	b29b      	uxth	r3, r3
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7fa f9e9 	bl	800be58 <lwip_htons>
 8011a86:	4603      	mov	r3, r0
 8011a88:	b2db      	uxtb	r3, r3
 8011a8a:	f003 0303 	and.w	r3, r3, #3
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d001      	beq.n	8011a96 <tcp_receive+0x96a>
 8011a92:	2301      	movs	r3, #1
 8011a94:	e000      	b.n	8011a98 <tcp_receive+0x96c>
 8011a96:	2300      	movs	r3, #0
 8011a98:	4423      	add	r3, r4
 8011a9a:	b29a      	uxth	r2, r3
 8011a9c:	4b65      	ldr	r3, [pc, #404]	; (8011c34 <tcp_receive+0xb08>)
 8011a9e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011aa0:	4b64      	ldr	r3, [pc, #400]	; (8011c34 <tcp_receive+0xb08>)
 8011aa2:	881b      	ldrh	r3, [r3, #0]
 8011aa4:	461a      	mov	r2, r3
 8011aa6:	4b64      	ldr	r3, [pc, #400]	; (8011c38 <tcp_receive+0xb0c>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	441a      	add	r2, r3
 8011aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011aae:	68db      	ldr	r3, [r3, #12]
 8011ab0:	685b      	ldr	r3, [r3, #4]
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d006      	beq.n	8011ac4 <tcp_receive+0x998>
 8011ab6:	4b62      	ldr	r3, [pc, #392]	; (8011c40 <tcp_receive+0xb14>)
 8011ab8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011abc:	4961      	ldr	r1, [pc, #388]	; (8011c44 <tcp_receive+0xb18>)
 8011abe:	4862      	ldr	r0, [pc, #392]	; (8011c48 <tcp_receive+0xb1c>)
 8011ac0:	f005 fee4 	bl	801788c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011ac8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011aca:	4b5a      	ldr	r3, [pc, #360]	; (8011c34 <tcp_receive+0xb08>)
 8011acc:	881b      	ldrh	r3, [r3, #0]
 8011ace:	461a      	mov	r2, r3
 8011ad0:	4b59      	ldr	r3, [pc, #356]	; (8011c38 <tcp_receive+0xb0c>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	441a      	add	r2, r3
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011ade:	4b55      	ldr	r3, [pc, #340]	; (8011c34 <tcp_receive+0xb08>)
 8011ae0:	881b      	ldrh	r3, [r3, #0]
 8011ae2:	429a      	cmp	r2, r3
 8011ae4:	d206      	bcs.n	8011af4 <tcp_receive+0x9c8>
 8011ae6:	4b56      	ldr	r3, [pc, #344]	; (8011c40 <tcp_receive+0xb14>)
 8011ae8:	f240 6207 	movw	r2, #1543	; 0x607
 8011aec:	4957      	ldr	r1, [pc, #348]	; (8011c4c <tcp_receive+0xb20>)
 8011aee:	4856      	ldr	r0, [pc, #344]	; (8011c48 <tcp_receive+0xb1c>)
 8011af0:	f005 fecc 	bl	801788c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011af8:	4b4e      	ldr	r3, [pc, #312]	; (8011c34 <tcp_receive+0xb08>)
 8011afa:	881b      	ldrh	r3, [r3, #0]
 8011afc:	1ad3      	subs	r3, r2, r3
 8011afe:	b29a      	uxth	r2, r3
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011b04:	6878      	ldr	r0, [r7, #4]
 8011b06:	f7fc fd99 	bl	800e63c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011b0a:	4b4c      	ldr	r3, [pc, #304]	; (8011c3c <tcp_receive+0xb10>)
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	891b      	ldrh	r3, [r3, #8]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d006      	beq.n	8011b22 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8011b14:	4b49      	ldr	r3, [pc, #292]	; (8011c3c <tcp_receive+0xb10>)
 8011b16:	685b      	ldr	r3, [r3, #4]
 8011b18:	4a4d      	ldr	r2, [pc, #308]	; (8011c50 <tcp_receive+0xb24>)
 8011b1a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011b1c:	4b47      	ldr	r3, [pc, #284]	; (8011c3c <tcp_receive+0xb10>)
 8011b1e:	2200      	movs	r2, #0
 8011b20:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011b22:	4b46      	ldr	r3, [pc, #280]	; (8011c3c <tcp_receive+0xb10>)
 8011b24:	68db      	ldr	r3, [r3, #12]
 8011b26:	899b      	ldrh	r3, [r3, #12]
 8011b28:	b29b      	uxth	r3, r3
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f7fa f994 	bl	800be58 <lwip_htons>
 8011b30:	4603      	mov	r3, r0
 8011b32:	b2db      	uxtb	r3, r3
 8011b34:	f003 0301 	and.w	r3, r3, #1
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	f000 80b8 	beq.w	8011cae <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011b3e:	4b45      	ldr	r3, [pc, #276]	; (8011c54 <tcp_receive+0xb28>)
 8011b40:	781b      	ldrb	r3, [r3, #0]
 8011b42:	f043 0320 	orr.w	r3, r3, #32
 8011b46:	b2da      	uxtb	r2, r3
 8011b48:	4b42      	ldr	r3, [pc, #264]	; (8011c54 <tcp_receive+0xb28>)
 8011b4a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011b4c:	e0af      	b.n	8011cae <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b52:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b58:	68db      	ldr	r3, [r3, #12]
 8011b5a:	685b      	ldr	r3, [r3, #4]
 8011b5c:	4a36      	ldr	r2, [pc, #216]	; (8011c38 <tcp_receive+0xb0c>)
 8011b5e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011b60:	68bb      	ldr	r3, [r7, #8]
 8011b62:	891b      	ldrh	r3, [r3, #8]
 8011b64:	461c      	mov	r4, r3
 8011b66:	68bb      	ldr	r3, [r7, #8]
 8011b68:	68db      	ldr	r3, [r3, #12]
 8011b6a:	899b      	ldrh	r3, [r3, #12]
 8011b6c:	b29b      	uxth	r3, r3
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f7fa f972 	bl	800be58 <lwip_htons>
 8011b74:	4603      	mov	r3, r0
 8011b76:	b2db      	uxtb	r3, r3
 8011b78:	f003 0303 	and.w	r3, r3, #3
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d001      	beq.n	8011b84 <tcp_receive+0xa58>
 8011b80:	2301      	movs	r3, #1
 8011b82:	e000      	b.n	8011b86 <tcp_receive+0xa5a>
 8011b84:	2300      	movs	r3, #0
 8011b86:	191a      	adds	r2, r3, r4
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b8c:	441a      	add	r2, r3
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b96:	461c      	mov	r4, r3
 8011b98:	68bb      	ldr	r3, [r7, #8]
 8011b9a:	891b      	ldrh	r3, [r3, #8]
 8011b9c:	461d      	mov	r5, r3
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	68db      	ldr	r3, [r3, #12]
 8011ba2:	899b      	ldrh	r3, [r3, #12]
 8011ba4:	b29b      	uxth	r3, r3
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f7fa f956 	bl	800be58 <lwip_htons>
 8011bac:	4603      	mov	r3, r0
 8011bae:	b2db      	uxtb	r3, r3
 8011bb0:	f003 0303 	and.w	r3, r3, #3
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d001      	beq.n	8011bbc <tcp_receive+0xa90>
 8011bb8:	2301      	movs	r3, #1
 8011bba:	e000      	b.n	8011bbe <tcp_receive+0xa92>
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	442b      	add	r3, r5
 8011bc0:	429c      	cmp	r4, r3
 8011bc2:	d206      	bcs.n	8011bd2 <tcp_receive+0xaa6>
 8011bc4:	4b1e      	ldr	r3, [pc, #120]	; (8011c40 <tcp_receive+0xb14>)
 8011bc6:	f240 622b 	movw	r2, #1579	; 0x62b
 8011bca:	4923      	ldr	r1, [pc, #140]	; (8011c58 <tcp_receive+0xb2c>)
 8011bcc:	481e      	ldr	r0, [pc, #120]	; (8011c48 <tcp_receive+0xb1c>)
 8011bce:	f005 fe5d 	bl	801788c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011bd2:	68bb      	ldr	r3, [r7, #8]
 8011bd4:	891b      	ldrh	r3, [r3, #8]
 8011bd6:	461c      	mov	r4, r3
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	68db      	ldr	r3, [r3, #12]
 8011bdc:	899b      	ldrh	r3, [r3, #12]
 8011bde:	b29b      	uxth	r3, r3
 8011be0:	4618      	mov	r0, r3
 8011be2:	f7fa f939 	bl	800be58 <lwip_htons>
 8011be6:	4603      	mov	r3, r0
 8011be8:	b2db      	uxtb	r3, r3
 8011bea:	f003 0303 	and.w	r3, r3, #3
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d001      	beq.n	8011bf6 <tcp_receive+0xaca>
 8011bf2:	2301      	movs	r3, #1
 8011bf4:	e000      	b.n	8011bf8 <tcp_receive+0xacc>
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	1919      	adds	r1, r3, r4
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011bfe:	b28b      	uxth	r3, r1
 8011c00:	1ad3      	subs	r3, r2, r3
 8011c02:	b29a      	uxth	r2, r3
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f7fc fd17 	bl	800e63c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	685b      	ldr	r3, [r3, #4]
 8011c12:	891b      	ldrh	r3, [r3, #8]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d028      	beq.n	8011c6a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011c18:	4b0d      	ldr	r3, [pc, #52]	; (8011c50 <tcp_receive+0xb24>)
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d01d      	beq.n	8011c5c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011c20:	4b0b      	ldr	r3, [pc, #44]	; (8011c50 <tcp_receive+0xb24>)
 8011c22:	681a      	ldr	r2, [r3, #0]
 8011c24:	68bb      	ldr	r3, [r7, #8]
 8011c26:	685b      	ldr	r3, [r3, #4]
 8011c28:	4619      	mov	r1, r3
 8011c2a:	4610      	mov	r0, r2
 8011c2c:	f7fb fdd4 	bl	800d7d8 <pbuf_cat>
 8011c30:	e018      	b.n	8011c64 <tcp_receive+0xb38>
 8011c32:	bf00      	nop
 8011c34:	2000d67e 	.word	0x2000d67e
 8011c38:	2000d674 	.word	0x2000d674
 8011c3c:	2000d654 	.word	0x2000d654
 8011c40:	0801a948 	.word	0x0801a948
 8011c44:	0801ad28 	.word	0x0801ad28
 8011c48:	0801a994 	.word	0x0801a994
 8011c4c:	0801ad64 	.word	0x0801ad64
 8011c50:	2000d684 	.word	0x2000d684
 8011c54:	2000d681 	.word	0x2000d681
 8011c58:	0801ad84 	.word	0x0801ad84
            } else {
              recv_data = cseg->p;
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	685b      	ldr	r3, [r3, #4]
 8011c60:	4a70      	ldr	r2, [pc, #448]	; (8011e24 <tcp_receive+0xcf8>)
 8011c62:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011c64:	68bb      	ldr	r3, [r7, #8]
 8011c66:	2200      	movs	r2, #0
 8011c68:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	68db      	ldr	r3, [r3, #12]
 8011c6e:	899b      	ldrh	r3, [r3, #12]
 8011c70:	b29b      	uxth	r3, r3
 8011c72:	4618      	mov	r0, r3
 8011c74:	f7fa f8f0 	bl	800be58 <lwip_htons>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	b2db      	uxtb	r3, r3
 8011c7c:	f003 0301 	and.w	r3, r3, #1
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d00d      	beq.n	8011ca0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011c84:	4b68      	ldr	r3, [pc, #416]	; (8011e28 <tcp_receive+0xcfc>)
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	f043 0320 	orr.w	r3, r3, #32
 8011c8c:	b2da      	uxtb	r2, r3
 8011c8e:	4b66      	ldr	r3, [pc, #408]	; (8011e28 <tcp_receive+0xcfc>)
 8011c90:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	7d1b      	ldrb	r3, [r3, #20]
 8011c96:	2b04      	cmp	r3, #4
 8011c98:	d102      	bne.n	8011ca0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	2207      	movs	r2, #7
 8011c9e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011ca0:	68bb      	ldr	r3, [r7, #8]
 8011ca2:	681a      	ldr	r2, [r3, #0]
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011ca8:	68b8      	ldr	r0, [r7, #8]
 8011caa:	f7fd fb04 	bl	800f2b6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d008      	beq.n	8011cc8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cba:	68db      	ldr	r3, [r3, #12]
 8011cbc:	685a      	ldr	r2, [r3, #4]
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	f43f af43 	beq.w	8011b4e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	8b5b      	ldrh	r3, [r3, #26]
 8011ccc:	f003 0301 	and.w	r3, r3, #1
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d00e      	beq.n	8011cf2 <tcp_receive+0xbc6>
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	8b5b      	ldrh	r3, [r3, #26]
 8011cd8:	f023 0301 	bic.w	r3, r3, #1
 8011cdc:	b29a      	uxth	r2, r3
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	835a      	strh	r2, [r3, #26]
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	8b5b      	ldrh	r3, [r3, #26]
 8011ce6:	f043 0302 	orr.w	r3, r3, #2
 8011cea:	b29a      	uxth	r2, r3
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011cf0:	e188      	b.n	8012004 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	8b5b      	ldrh	r3, [r3, #26]
 8011cf6:	f043 0301 	orr.w	r3, r3, #1
 8011cfa:	b29a      	uxth	r2, r3
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011d00:	e180      	b.n	8012004 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d106      	bne.n	8011d18 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011d0a:	4848      	ldr	r0, [pc, #288]	; (8011e2c <tcp_receive+0xd00>)
 8011d0c:	f7fd faec 	bl	800f2e8 <tcp_seg_copy>
 8011d10:	4602      	mov	r2, r0
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	675a      	str	r2, [r3, #116]	; 0x74
 8011d16:	e16d      	b.n	8011ff4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011d18:	2300      	movs	r3, #0
 8011d1a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d20:	63bb      	str	r3, [r7, #56]	; 0x38
 8011d22:	e157      	b.n	8011fd4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8011d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d26:	68db      	ldr	r3, [r3, #12]
 8011d28:	685a      	ldr	r2, [r3, #4]
 8011d2a:	4b41      	ldr	r3, [pc, #260]	; (8011e30 <tcp_receive+0xd04>)
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	d11d      	bne.n	8011d6e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011d32:	4b3e      	ldr	r3, [pc, #248]	; (8011e2c <tcp_receive+0xd00>)
 8011d34:	891a      	ldrh	r2, [r3, #8]
 8011d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d38:	891b      	ldrh	r3, [r3, #8]
 8011d3a:	429a      	cmp	r2, r3
 8011d3c:	f240 814f 	bls.w	8011fde <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011d40:	483a      	ldr	r0, [pc, #232]	; (8011e2c <tcp_receive+0xd00>)
 8011d42:	f7fd fad1 	bl	800f2e8 <tcp_seg_copy>
 8011d46:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011d48:	697b      	ldr	r3, [r7, #20]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	f000 8149 	beq.w	8011fe2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d003      	beq.n	8011d5e <tcp_receive+0xc32>
                    prev->next = cseg;
 8011d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d58:	697a      	ldr	r2, [r7, #20]
 8011d5a:	601a      	str	r2, [r3, #0]
 8011d5c:	e002      	b.n	8011d64 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	697a      	ldr	r2, [r7, #20]
 8011d62:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011d64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011d66:	6978      	ldr	r0, [r7, #20]
 8011d68:	f7ff f8dc 	bl	8010f24 <tcp_oos_insert_segment>
                }
                break;
 8011d6c:	e139      	b.n	8011fe2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d117      	bne.n	8011da4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011d74:	4b2e      	ldr	r3, [pc, #184]	; (8011e30 <tcp_receive+0xd04>)
 8011d76:	681a      	ldr	r2, [r3, #0]
 8011d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d7a:	68db      	ldr	r3, [r3, #12]
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	1ad3      	subs	r3, r2, r3
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	da57      	bge.n	8011e34 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011d84:	4829      	ldr	r0, [pc, #164]	; (8011e2c <tcp_receive+0xd00>)
 8011d86:	f7fd faaf 	bl	800f2e8 <tcp_seg_copy>
 8011d8a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011d8c:	69bb      	ldr	r3, [r7, #24]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	f000 8129 	beq.w	8011fe6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	69ba      	ldr	r2, [r7, #24]
 8011d98:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011d9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011d9c:	69b8      	ldr	r0, [r7, #24]
 8011d9e:	f7ff f8c1 	bl	8010f24 <tcp_oos_insert_segment>
                  }
                  break;
 8011da2:	e120      	b.n	8011fe6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011da4:	4b22      	ldr	r3, [pc, #136]	; (8011e30 <tcp_receive+0xd04>)
 8011da6:	681a      	ldr	r2, [r3, #0]
 8011da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011daa:	68db      	ldr	r3, [r3, #12]
 8011dac:	685b      	ldr	r3, [r3, #4]
 8011dae:	1ad3      	subs	r3, r2, r3
 8011db0:	3b01      	subs	r3, #1
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	db3e      	blt.n	8011e34 <tcp_receive+0xd08>
 8011db6:	4b1e      	ldr	r3, [pc, #120]	; (8011e30 <tcp_receive+0xd04>)
 8011db8:	681a      	ldr	r2, [r3, #0]
 8011dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dbc:	68db      	ldr	r3, [r3, #12]
 8011dbe:	685b      	ldr	r3, [r3, #4]
 8011dc0:	1ad3      	subs	r3, r2, r3
 8011dc2:	3301      	adds	r3, #1
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	dc35      	bgt.n	8011e34 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011dc8:	4818      	ldr	r0, [pc, #96]	; (8011e2c <tcp_receive+0xd00>)
 8011dca:	f7fd fa8d 	bl	800f2e8 <tcp_seg_copy>
 8011dce:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011dd0:	69fb      	ldr	r3, [r7, #28]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	f000 8109 	beq.w	8011fea <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dda:	68db      	ldr	r3, [r3, #12]
 8011ddc:	685b      	ldr	r3, [r3, #4]
 8011dde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011de0:	8912      	ldrh	r2, [r2, #8]
 8011de2:	441a      	add	r2, r3
 8011de4:	4b12      	ldr	r3, [pc, #72]	; (8011e30 <tcp_receive+0xd04>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	1ad3      	subs	r3, r2, r3
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	dd12      	ble.n	8011e14 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011dee:	4b10      	ldr	r3, [pc, #64]	; (8011e30 <tcp_receive+0xd04>)
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	b29a      	uxth	r2, r3
 8011df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011df6:	68db      	ldr	r3, [r3, #12]
 8011df8:	685b      	ldr	r3, [r3, #4]
 8011dfa:	b29b      	uxth	r3, r3
 8011dfc:	1ad3      	subs	r3, r2, r3
 8011dfe:	b29a      	uxth	r2, r3
 8011e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e02:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e06:	685a      	ldr	r2, [r3, #4]
 8011e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e0a:	891b      	ldrh	r3, [r3, #8]
 8011e0c:	4619      	mov	r1, r3
 8011e0e:	4610      	mov	r0, r2
 8011e10:	f7fb fa8e 	bl	800d330 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e16:	69fa      	ldr	r2, [r7, #28]
 8011e18:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011e1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011e1c:	69f8      	ldr	r0, [r7, #28]
 8011e1e:	f7ff f881 	bl	8010f24 <tcp_oos_insert_segment>
                  }
                  break;
 8011e22:	e0e2      	b.n	8011fea <tcp_receive+0xebe>
 8011e24:	2000d684 	.word	0x2000d684
 8011e28:	2000d681 	.word	0x2000d681
 8011e2c:	2000d654 	.word	0x2000d654
 8011e30:	2000d674 	.word	0x2000d674
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e36:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	f040 80c6 	bne.w	8011fce <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011e42:	4b80      	ldr	r3, [pc, #512]	; (8012044 <tcp_receive+0xf18>)
 8011e44:	681a      	ldr	r2, [r3, #0]
 8011e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e48:	68db      	ldr	r3, [r3, #12]
 8011e4a:	685b      	ldr	r3, [r3, #4]
 8011e4c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	f340 80bd 	ble.w	8011fce <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e56:	68db      	ldr	r3, [r3, #12]
 8011e58:	899b      	ldrh	r3, [r3, #12]
 8011e5a:	b29b      	uxth	r3, r3
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	f7f9 fffb 	bl	800be58 <lwip_htons>
 8011e62:	4603      	mov	r3, r0
 8011e64:	b2db      	uxtb	r3, r3
 8011e66:	f003 0301 	and.w	r3, r3, #1
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	f040 80bf 	bne.w	8011fee <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011e70:	4875      	ldr	r0, [pc, #468]	; (8012048 <tcp_receive+0xf1c>)
 8011e72:	f7fd fa39 	bl	800f2e8 <tcp_seg_copy>
 8011e76:	4602      	mov	r2, r0
 8011e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e7a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	f000 80b6 	beq.w	8011ff2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e88:	68db      	ldr	r3, [r3, #12]
 8011e8a:	685b      	ldr	r3, [r3, #4]
 8011e8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e8e:	8912      	ldrh	r2, [r2, #8]
 8011e90:	441a      	add	r2, r3
 8011e92:	4b6c      	ldr	r3, [pc, #432]	; (8012044 <tcp_receive+0xf18>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	1ad3      	subs	r3, r2, r3
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	dd12      	ble.n	8011ec2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011e9c:	4b69      	ldr	r3, [pc, #420]	; (8012044 <tcp_receive+0xf18>)
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	b29a      	uxth	r2, r3
 8011ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ea4:	68db      	ldr	r3, [r3, #12]
 8011ea6:	685b      	ldr	r3, [r3, #4]
 8011ea8:	b29b      	uxth	r3, r3
 8011eaa:	1ad3      	subs	r3, r2, r3
 8011eac:	b29a      	uxth	r2, r3
 8011eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eb0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eb4:	685a      	ldr	r2, [r3, #4]
 8011eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eb8:	891b      	ldrh	r3, [r3, #8]
 8011eba:	4619      	mov	r1, r3
 8011ebc:	4610      	mov	r0, r2
 8011ebe:	f7fb fa37 	bl	800d330 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011ec2:	4b62      	ldr	r3, [pc, #392]	; (801204c <tcp_receive+0xf20>)
 8011ec4:	881b      	ldrh	r3, [r3, #0]
 8011ec6:	461a      	mov	r2, r3
 8011ec8:	4b5e      	ldr	r3, [pc, #376]	; (8012044 <tcp_receive+0xf18>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	441a      	add	r2, r3
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ed2:	6879      	ldr	r1, [r7, #4]
 8011ed4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011ed6:	440b      	add	r3, r1
 8011ed8:	1ad3      	subs	r3, r2, r3
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	f340 8089 	ble.w	8011ff2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	68db      	ldr	r3, [r3, #12]
 8011ee6:	899b      	ldrh	r3, [r3, #12]
 8011ee8:	b29b      	uxth	r3, r3
 8011eea:	4618      	mov	r0, r3
 8011eec:	f7f9 ffb4 	bl	800be58 <lwip_htons>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	b2db      	uxtb	r3, r3
 8011ef4:	f003 0301 	and.w	r3, r3, #1
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d022      	beq.n	8011f42 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	68db      	ldr	r3, [r3, #12]
 8011f02:	899b      	ldrh	r3, [r3, #12]
 8011f04:	b29b      	uxth	r3, r3
 8011f06:	b21b      	sxth	r3, r3
 8011f08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011f0c:	b21c      	sxth	r4, r3
 8011f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	68db      	ldr	r3, [r3, #12]
 8011f14:	899b      	ldrh	r3, [r3, #12]
 8011f16:	b29b      	uxth	r3, r3
 8011f18:	4618      	mov	r0, r3
 8011f1a:	f7f9 ff9d 	bl	800be58 <lwip_htons>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	b2db      	uxtb	r3, r3
 8011f22:	b29b      	uxth	r3, r3
 8011f24:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011f28:	b29b      	uxth	r3, r3
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f7f9 ff94 	bl	800be58 <lwip_htons>
 8011f30:	4603      	mov	r3, r0
 8011f32:	b21b      	sxth	r3, r3
 8011f34:	4323      	orrs	r3, r4
 8011f36:	b21a      	sxth	r2, r3
 8011f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	68db      	ldr	r3, [r3, #12]
 8011f3e:	b292      	uxth	r2, r2
 8011f40:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f46:	b29a      	uxth	r2, r3
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f4c:	4413      	add	r3, r2
 8011f4e:	b299      	uxth	r1, r3
 8011f50:	4b3c      	ldr	r3, [pc, #240]	; (8012044 <tcp_receive+0xf18>)
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	b29a      	uxth	r2, r3
 8011f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	1a8a      	subs	r2, r1, r2
 8011f5c:	b292      	uxth	r2, r2
 8011f5e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	685a      	ldr	r2, [r3, #4]
 8011f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	891b      	ldrh	r3, [r3, #8]
 8011f6c:	4619      	mov	r1, r3
 8011f6e:	4610      	mov	r0, r2
 8011f70:	f7fb f9de 	bl	800d330 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	891c      	ldrh	r4, [r3, #8]
 8011f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	68db      	ldr	r3, [r3, #12]
 8011f80:	899b      	ldrh	r3, [r3, #12]
 8011f82:	b29b      	uxth	r3, r3
 8011f84:	4618      	mov	r0, r3
 8011f86:	f7f9 ff67 	bl	800be58 <lwip_htons>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	b2db      	uxtb	r3, r3
 8011f8e:	f003 0303 	and.w	r3, r3, #3
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d001      	beq.n	8011f9a <tcp_receive+0xe6e>
 8011f96:	2301      	movs	r3, #1
 8011f98:	e000      	b.n	8011f9c <tcp_receive+0xe70>
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	4423      	add	r3, r4
 8011f9e:	b29a      	uxth	r2, r3
 8011fa0:	4b2a      	ldr	r3, [pc, #168]	; (801204c <tcp_receive+0xf20>)
 8011fa2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011fa4:	4b29      	ldr	r3, [pc, #164]	; (801204c <tcp_receive+0xf20>)
 8011fa6:	881b      	ldrh	r3, [r3, #0]
 8011fa8:	461a      	mov	r2, r3
 8011faa:	4b26      	ldr	r3, [pc, #152]	; (8012044 <tcp_receive+0xf18>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	441a      	add	r2, r3
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fb4:	6879      	ldr	r1, [r7, #4]
 8011fb6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011fb8:	440b      	add	r3, r1
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d019      	beq.n	8011ff2 <tcp_receive+0xec6>
 8011fbe:	4b24      	ldr	r3, [pc, #144]	; (8012050 <tcp_receive+0xf24>)
 8011fc0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011fc4:	4923      	ldr	r1, [pc, #140]	; (8012054 <tcp_receive+0xf28>)
 8011fc6:	4824      	ldr	r0, [pc, #144]	; (8012058 <tcp_receive+0xf2c>)
 8011fc8:	f005 fc60 	bl	801788c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011fcc:	e011      	b.n	8011ff2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8011fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	f47f aea4 	bne.w	8011d24 <tcp_receive+0xbf8>
 8011fdc:	e00a      	b.n	8011ff4 <tcp_receive+0xec8>
                break;
 8011fde:	bf00      	nop
 8011fe0:	e008      	b.n	8011ff4 <tcp_receive+0xec8>
                break;
 8011fe2:	bf00      	nop
 8011fe4:	e006      	b.n	8011ff4 <tcp_receive+0xec8>
                  break;
 8011fe6:	bf00      	nop
 8011fe8:	e004      	b.n	8011ff4 <tcp_receive+0xec8>
                  break;
 8011fea:	bf00      	nop
 8011fec:	e002      	b.n	8011ff4 <tcp_receive+0xec8>
                  break;
 8011fee:	bf00      	nop
 8011ff0:	e000      	b.n	8011ff4 <tcp_receive+0xec8>
                break;
 8011ff2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011ff4:	6878      	ldr	r0, [r7, #4]
 8011ff6:	f001 fe8b 	bl	8013d10 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011ffa:	e003      	b.n	8012004 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011ffc:	6878      	ldr	r0, [r7, #4]
 8011ffe:	f001 fe87 	bl	8013d10 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012002:	e01a      	b.n	801203a <tcp_receive+0xf0e>
 8012004:	e019      	b.n	801203a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012006:	4b0f      	ldr	r3, [pc, #60]	; (8012044 <tcp_receive+0xf18>)
 8012008:	681a      	ldr	r2, [r3, #0]
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801200e:	1ad3      	subs	r3, r2, r3
 8012010:	2b00      	cmp	r3, #0
 8012012:	db0a      	blt.n	801202a <tcp_receive+0xefe>
 8012014:	4b0b      	ldr	r3, [pc, #44]	; (8012044 <tcp_receive+0xf18>)
 8012016:	681a      	ldr	r2, [r3, #0]
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801201c:	6879      	ldr	r1, [r7, #4]
 801201e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012020:	440b      	add	r3, r1
 8012022:	1ad3      	subs	r3, r2, r3
 8012024:	3301      	adds	r3, #1
 8012026:	2b00      	cmp	r3, #0
 8012028:	dd07      	ble.n	801203a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	8b5b      	ldrh	r3, [r3, #26]
 801202e:	f043 0302 	orr.w	r3, r3, #2
 8012032:	b29a      	uxth	r2, r3
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012038:	e7ff      	b.n	801203a <tcp_receive+0xf0e>
 801203a:	bf00      	nop
 801203c:	3750      	adds	r7, #80	; 0x50
 801203e:	46bd      	mov	sp, r7
 8012040:	bdb0      	pop	{r4, r5, r7, pc}
 8012042:	bf00      	nop
 8012044:	2000d674 	.word	0x2000d674
 8012048:	2000d654 	.word	0x2000d654
 801204c:	2000d67e 	.word	0x2000d67e
 8012050:	0801a948 	.word	0x0801a948
 8012054:	0801acf0 	.word	0x0801acf0
 8012058:	0801a994 	.word	0x0801a994

0801205c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801205c:	b480      	push	{r7}
 801205e:	b083      	sub	sp, #12
 8012060:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012062:	4b15      	ldr	r3, [pc, #84]	; (80120b8 <tcp_get_next_optbyte+0x5c>)
 8012064:	881b      	ldrh	r3, [r3, #0]
 8012066:	1c5a      	adds	r2, r3, #1
 8012068:	b291      	uxth	r1, r2
 801206a:	4a13      	ldr	r2, [pc, #76]	; (80120b8 <tcp_get_next_optbyte+0x5c>)
 801206c:	8011      	strh	r1, [r2, #0]
 801206e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012070:	4b12      	ldr	r3, [pc, #72]	; (80120bc <tcp_get_next_optbyte+0x60>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d004      	beq.n	8012082 <tcp_get_next_optbyte+0x26>
 8012078:	4b11      	ldr	r3, [pc, #68]	; (80120c0 <tcp_get_next_optbyte+0x64>)
 801207a:	881b      	ldrh	r3, [r3, #0]
 801207c:	88fa      	ldrh	r2, [r7, #6]
 801207e:	429a      	cmp	r2, r3
 8012080:	d208      	bcs.n	8012094 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012082:	4b10      	ldr	r3, [pc, #64]	; (80120c4 <tcp_get_next_optbyte+0x68>)
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	3314      	adds	r3, #20
 8012088:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801208a:	88fb      	ldrh	r3, [r7, #6]
 801208c:	683a      	ldr	r2, [r7, #0]
 801208e:	4413      	add	r3, r2
 8012090:	781b      	ldrb	r3, [r3, #0]
 8012092:	e00b      	b.n	80120ac <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012094:	88fb      	ldrh	r3, [r7, #6]
 8012096:	b2da      	uxtb	r2, r3
 8012098:	4b09      	ldr	r3, [pc, #36]	; (80120c0 <tcp_get_next_optbyte+0x64>)
 801209a:	881b      	ldrh	r3, [r3, #0]
 801209c:	b2db      	uxtb	r3, r3
 801209e:	1ad3      	subs	r3, r2, r3
 80120a0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80120a2:	4b06      	ldr	r3, [pc, #24]	; (80120bc <tcp_get_next_optbyte+0x60>)
 80120a4:	681a      	ldr	r2, [r3, #0]
 80120a6:	797b      	ldrb	r3, [r7, #5]
 80120a8:	4413      	add	r3, r2
 80120aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80120ac:	4618      	mov	r0, r3
 80120ae:	370c      	adds	r7, #12
 80120b0:	46bd      	mov	sp, r7
 80120b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b6:	4770      	bx	lr
 80120b8:	2000d670 	.word	0x2000d670
 80120bc:	2000d66c 	.word	0x2000d66c
 80120c0:	2000d66a 	.word	0x2000d66a
 80120c4:	2000d664 	.word	0x2000d664

080120c8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b084      	sub	sp, #16
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d106      	bne.n	80120e4 <tcp_parseopt+0x1c>
 80120d6:	4b32      	ldr	r3, [pc, #200]	; (80121a0 <tcp_parseopt+0xd8>)
 80120d8:	f240 727d 	movw	r2, #1917	; 0x77d
 80120dc:	4931      	ldr	r1, [pc, #196]	; (80121a4 <tcp_parseopt+0xdc>)
 80120de:	4832      	ldr	r0, [pc, #200]	; (80121a8 <tcp_parseopt+0xe0>)
 80120e0:	f005 fbd4 	bl	801788c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80120e4:	4b31      	ldr	r3, [pc, #196]	; (80121ac <tcp_parseopt+0xe4>)
 80120e6:	881b      	ldrh	r3, [r3, #0]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d055      	beq.n	8012198 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80120ec:	4b30      	ldr	r3, [pc, #192]	; (80121b0 <tcp_parseopt+0xe8>)
 80120ee:	2200      	movs	r2, #0
 80120f0:	801a      	strh	r2, [r3, #0]
 80120f2:	e045      	b.n	8012180 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80120f4:	f7ff ffb2 	bl	801205c <tcp_get_next_optbyte>
 80120f8:	4603      	mov	r3, r0
 80120fa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80120fc:	7bfb      	ldrb	r3, [r7, #15]
 80120fe:	2b02      	cmp	r3, #2
 8012100:	d006      	beq.n	8012110 <tcp_parseopt+0x48>
 8012102:	2b02      	cmp	r3, #2
 8012104:	dc2b      	bgt.n	801215e <tcp_parseopt+0x96>
 8012106:	2b00      	cmp	r3, #0
 8012108:	d041      	beq.n	801218e <tcp_parseopt+0xc6>
 801210a:	2b01      	cmp	r3, #1
 801210c:	d127      	bne.n	801215e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801210e:	e037      	b.n	8012180 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012110:	f7ff ffa4 	bl	801205c <tcp_get_next_optbyte>
 8012114:	4603      	mov	r3, r0
 8012116:	2b04      	cmp	r3, #4
 8012118:	d13b      	bne.n	8012192 <tcp_parseopt+0xca>
 801211a:	4b25      	ldr	r3, [pc, #148]	; (80121b0 <tcp_parseopt+0xe8>)
 801211c:	881b      	ldrh	r3, [r3, #0]
 801211e:	3301      	adds	r3, #1
 8012120:	4a22      	ldr	r2, [pc, #136]	; (80121ac <tcp_parseopt+0xe4>)
 8012122:	8812      	ldrh	r2, [r2, #0]
 8012124:	4293      	cmp	r3, r2
 8012126:	da34      	bge.n	8012192 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012128:	f7ff ff98 	bl	801205c <tcp_get_next_optbyte>
 801212c:	4603      	mov	r3, r0
 801212e:	b29b      	uxth	r3, r3
 8012130:	021b      	lsls	r3, r3, #8
 8012132:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012134:	f7ff ff92 	bl	801205c <tcp_get_next_optbyte>
 8012138:	4603      	mov	r3, r0
 801213a:	b29a      	uxth	r2, r3
 801213c:	89bb      	ldrh	r3, [r7, #12]
 801213e:	4313      	orrs	r3, r2
 8012140:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012142:	89bb      	ldrh	r3, [r7, #12]
 8012144:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012148:	d804      	bhi.n	8012154 <tcp_parseopt+0x8c>
 801214a:	89bb      	ldrh	r3, [r7, #12]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d001      	beq.n	8012154 <tcp_parseopt+0x8c>
 8012150:	89ba      	ldrh	r2, [r7, #12]
 8012152:	e001      	b.n	8012158 <tcp_parseopt+0x90>
 8012154:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801215c:	e010      	b.n	8012180 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801215e:	f7ff ff7d 	bl	801205c <tcp_get_next_optbyte>
 8012162:	4603      	mov	r3, r0
 8012164:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012166:	7afb      	ldrb	r3, [r7, #11]
 8012168:	2b01      	cmp	r3, #1
 801216a:	d914      	bls.n	8012196 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801216c:	7afb      	ldrb	r3, [r7, #11]
 801216e:	b29a      	uxth	r2, r3
 8012170:	4b0f      	ldr	r3, [pc, #60]	; (80121b0 <tcp_parseopt+0xe8>)
 8012172:	881b      	ldrh	r3, [r3, #0]
 8012174:	4413      	add	r3, r2
 8012176:	b29b      	uxth	r3, r3
 8012178:	3b02      	subs	r3, #2
 801217a:	b29a      	uxth	r2, r3
 801217c:	4b0c      	ldr	r3, [pc, #48]	; (80121b0 <tcp_parseopt+0xe8>)
 801217e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012180:	4b0b      	ldr	r3, [pc, #44]	; (80121b0 <tcp_parseopt+0xe8>)
 8012182:	881a      	ldrh	r2, [r3, #0]
 8012184:	4b09      	ldr	r3, [pc, #36]	; (80121ac <tcp_parseopt+0xe4>)
 8012186:	881b      	ldrh	r3, [r3, #0]
 8012188:	429a      	cmp	r2, r3
 801218a:	d3b3      	bcc.n	80120f4 <tcp_parseopt+0x2c>
 801218c:	e004      	b.n	8012198 <tcp_parseopt+0xd0>
          return;
 801218e:	bf00      	nop
 8012190:	e002      	b.n	8012198 <tcp_parseopt+0xd0>
            return;
 8012192:	bf00      	nop
 8012194:	e000      	b.n	8012198 <tcp_parseopt+0xd0>
            return;
 8012196:	bf00      	nop
      }
    }
  }
}
 8012198:	3710      	adds	r7, #16
 801219a:	46bd      	mov	sp, r7
 801219c:	bd80      	pop	{r7, pc}
 801219e:	bf00      	nop
 80121a0:	0801a948 	.word	0x0801a948
 80121a4:	0801adac 	.word	0x0801adac
 80121a8:	0801a994 	.word	0x0801a994
 80121ac:	2000d668 	.word	0x2000d668
 80121b0:	2000d670 	.word	0x2000d670

080121b4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80121b4:	b480      	push	{r7}
 80121b6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80121b8:	4b05      	ldr	r3, [pc, #20]	; (80121d0 <tcp_trigger_input_pcb_close+0x1c>)
 80121ba:	781b      	ldrb	r3, [r3, #0]
 80121bc:	f043 0310 	orr.w	r3, r3, #16
 80121c0:	b2da      	uxtb	r2, r3
 80121c2:	4b03      	ldr	r3, [pc, #12]	; (80121d0 <tcp_trigger_input_pcb_close+0x1c>)
 80121c4:	701a      	strb	r2, [r3, #0]
}
 80121c6:	bf00      	nop
 80121c8:	46bd      	mov	sp, r7
 80121ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ce:	4770      	bx	lr
 80121d0:	2000d681 	.word	0x2000d681

080121d4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b084      	sub	sp, #16
 80121d8:	af00      	add	r7, sp, #0
 80121da:	60f8      	str	r0, [r7, #12]
 80121dc:	60b9      	str	r1, [r7, #8]
 80121de:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d00a      	beq.n	80121fc <tcp_route+0x28>
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	7a1b      	ldrb	r3, [r3, #8]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d006      	beq.n	80121fc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	7a1b      	ldrb	r3, [r3, #8]
 80121f2:	4618      	mov	r0, r3
 80121f4:	f7fa fe94 	bl	800cf20 <netif_get_by_index>
 80121f8:	4603      	mov	r3, r0
 80121fa:	e003      	b.n	8012204 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80121fc:	6878      	ldr	r0, [r7, #4]
 80121fe:	f003 fea3 	bl	8015f48 <ip4_route>
 8012202:	4603      	mov	r3, r0
  }
}
 8012204:	4618      	mov	r0, r3
 8012206:	3710      	adds	r7, #16
 8012208:	46bd      	mov	sp, r7
 801220a:	bd80      	pop	{r7, pc}

0801220c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801220c:	b590      	push	{r4, r7, lr}
 801220e:	b087      	sub	sp, #28
 8012210:	af00      	add	r7, sp, #0
 8012212:	60f8      	str	r0, [r7, #12]
 8012214:	60b9      	str	r1, [r7, #8]
 8012216:	603b      	str	r3, [r7, #0]
 8012218:	4613      	mov	r3, r2
 801221a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d105      	bne.n	801222e <tcp_create_segment+0x22>
 8012222:	4b44      	ldr	r3, [pc, #272]	; (8012334 <tcp_create_segment+0x128>)
 8012224:	22a3      	movs	r2, #163	; 0xa3
 8012226:	4944      	ldr	r1, [pc, #272]	; (8012338 <tcp_create_segment+0x12c>)
 8012228:	4844      	ldr	r0, [pc, #272]	; (801233c <tcp_create_segment+0x130>)
 801222a:	f005 fb2f 	bl	801788c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801222e:	68bb      	ldr	r3, [r7, #8]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d105      	bne.n	8012240 <tcp_create_segment+0x34>
 8012234:	4b3f      	ldr	r3, [pc, #252]	; (8012334 <tcp_create_segment+0x128>)
 8012236:	22a4      	movs	r2, #164	; 0xa4
 8012238:	4941      	ldr	r1, [pc, #260]	; (8012340 <tcp_create_segment+0x134>)
 801223a:	4840      	ldr	r0, [pc, #256]	; (801233c <tcp_create_segment+0x130>)
 801223c:	f005 fb26 	bl	801788c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012240:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012244:	009b      	lsls	r3, r3, #2
 8012246:	b2db      	uxtb	r3, r3
 8012248:	f003 0304 	and.w	r3, r3, #4
 801224c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801224e:	2003      	movs	r0, #3
 8012250:	f7fa fada 	bl	800c808 <memp_malloc>
 8012254:	6138      	str	r0, [r7, #16]
 8012256:	693b      	ldr	r3, [r7, #16]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d104      	bne.n	8012266 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801225c:	68b8      	ldr	r0, [r7, #8]
 801225e:	f7fb f9ed 	bl	800d63c <pbuf_free>
    return NULL;
 8012262:	2300      	movs	r3, #0
 8012264:	e061      	b.n	801232a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012266:	693b      	ldr	r3, [r7, #16]
 8012268:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801226c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801226e:	693b      	ldr	r3, [r7, #16]
 8012270:	2200      	movs	r2, #0
 8012272:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012274:	693b      	ldr	r3, [r7, #16]
 8012276:	68ba      	ldr	r2, [r7, #8]
 8012278:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801227a:	68bb      	ldr	r3, [r7, #8]
 801227c:	891a      	ldrh	r2, [r3, #8]
 801227e:	7dfb      	ldrb	r3, [r7, #23]
 8012280:	b29b      	uxth	r3, r3
 8012282:	429a      	cmp	r2, r3
 8012284:	d205      	bcs.n	8012292 <tcp_create_segment+0x86>
 8012286:	4b2b      	ldr	r3, [pc, #172]	; (8012334 <tcp_create_segment+0x128>)
 8012288:	22b0      	movs	r2, #176	; 0xb0
 801228a:	492e      	ldr	r1, [pc, #184]	; (8012344 <tcp_create_segment+0x138>)
 801228c:	482b      	ldr	r0, [pc, #172]	; (801233c <tcp_create_segment+0x130>)
 801228e:	f005 fafd 	bl	801788c <iprintf>
  seg->len = p->tot_len - optlen;
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	891a      	ldrh	r2, [r3, #8]
 8012296:	7dfb      	ldrb	r3, [r7, #23]
 8012298:	b29b      	uxth	r3, r3
 801229a:	1ad3      	subs	r3, r2, r3
 801229c:	b29a      	uxth	r2, r3
 801229e:	693b      	ldr	r3, [r7, #16]
 80122a0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80122a2:	2114      	movs	r1, #20
 80122a4:	68b8      	ldr	r0, [r7, #8]
 80122a6:	f7fb f933 	bl	800d510 <pbuf_add_header>
 80122aa:	4603      	mov	r3, r0
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d004      	beq.n	80122ba <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80122b0:	6938      	ldr	r0, [r7, #16]
 80122b2:	f7fd f800 	bl	800f2b6 <tcp_seg_free>
    return NULL;
 80122b6:	2300      	movs	r3, #0
 80122b8:	e037      	b.n	801232a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80122ba:	693b      	ldr	r3, [r7, #16]
 80122bc:	685b      	ldr	r3, [r3, #4]
 80122be:	685a      	ldr	r2, [r3, #4]
 80122c0:	693b      	ldr	r3, [r7, #16]
 80122c2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	8ada      	ldrh	r2, [r3, #22]
 80122c8:	693b      	ldr	r3, [r7, #16]
 80122ca:	68dc      	ldr	r4, [r3, #12]
 80122cc:	4610      	mov	r0, r2
 80122ce:	f7f9 fdc3 	bl	800be58 <lwip_htons>
 80122d2:	4603      	mov	r3, r0
 80122d4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	8b1a      	ldrh	r2, [r3, #24]
 80122da:	693b      	ldr	r3, [r7, #16]
 80122dc:	68dc      	ldr	r4, [r3, #12]
 80122de:	4610      	mov	r0, r2
 80122e0:	f7f9 fdba 	bl	800be58 <lwip_htons>
 80122e4:	4603      	mov	r3, r0
 80122e6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80122e8:	693b      	ldr	r3, [r7, #16]
 80122ea:	68dc      	ldr	r4, [r3, #12]
 80122ec:	6838      	ldr	r0, [r7, #0]
 80122ee:	f7f9 fdc8 	bl	800be82 <lwip_htonl>
 80122f2:	4603      	mov	r3, r0
 80122f4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80122f6:	7dfb      	ldrb	r3, [r7, #23]
 80122f8:	089b      	lsrs	r3, r3, #2
 80122fa:	b2db      	uxtb	r3, r3
 80122fc:	b29b      	uxth	r3, r3
 80122fe:	3305      	adds	r3, #5
 8012300:	b29b      	uxth	r3, r3
 8012302:	031b      	lsls	r3, r3, #12
 8012304:	b29a      	uxth	r2, r3
 8012306:	79fb      	ldrb	r3, [r7, #7]
 8012308:	b29b      	uxth	r3, r3
 801230a:	4313      	orrs	r3, r2
 801230c:	b29a      	uxth	r2, r3
 801230e:	693b      	ldr	r3, [r7, #16]
 8012310:	68dc      	ldr	r4, [r3, #12]
 8012312:	4610      	mov	r0, r2
 8012314:	f7f9 fda0 	bl	800be58 <lwip_htons>
 8012318:	4603      	mov	r3, r0
 801231a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801231c:	693b      	ldr	r3, [r7, #16]
 801231e:	68db      	ldr	r3, [r3, #12]
 8012320:	2200      	movs	r2, #0
 8012322:	749a      	strb	r2, [r3, #18]
 8012324:	2200      	movs	r2, #0
 8012326:	74da      	strb	r2, [r3, #19]
  return seg;
 8012328:	693b      	ldr	r3, [r7, #16]
}
 801232a:	4618      	mov	r0, r3
 801232c:	371c      	adds	r7, #28
 801232e:	46bd      	mov	sp, r7
 8012330:	bd90      	pop	{r4, r7, pc}
 8012332:	bf00      	nop
 8012334:	0801adc8 	.word	0x0801adc8
 8012338:	0801adfc 	.word	0x0801adfc
 801233c:	0801ae1c 	.word	0x0801ae1c
 8012340:	0801ae44 	.word	0x0801ae44
 8012344:	0801ae68 	.word	0x0801ae68

08012348 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b086      	sub	sp, #24
 801234c:	af00      	add	r7, sp, #0
 801234e:	607b      	str	r3, [r7, #4]
 8012350:	4603      	mov	r3, r0
 8012352:	73fb      	strb	r3, [r7, #15]
 8012354:	460b      	mov	r3, r1
 8012356:	81bb      	strh	r3, [r7, #12]
 8012358:	4613      	mov	r3, r2
 801235a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801235c:	89bb      	ldrh	r3, [r7, #12]
 801235e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d105      	bne.n	8012372 <tcp_pbuf_prealloc+0x2a>
 8012366:	4b30      	ldr	r3, [pc, #192]	; (8012428 <tcp_pbuf_prealloc+0xe0>)
 8012368:	22e8      	movs	r2, #232	; 0xe8
 801236a:	4930      	ldr	r1, [pc, #192]	; (801242c <tcp_pbuf_prealloc+0xe4>)
 801236c:	4830      	ldr	r0, [pc, #192]	; (8012430 <tcp_pbuf_prealloc+0xe8>)
 801236e:	f005 fa8d 	bl	801788c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8012372:	6a3b      	ldr	r3, [r7, #32]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d105      	bne.n	8012384 <tcp_pbuf_prealloc+0x3c>
 8012378:	4b2b      	ldr	r3, [pc, #172]	; (8012428 <tcp_pbuf_prealloc+0xe0>)
 801237a:	22e9      	movs	r2, #233	; 0xe9
 801237c:	492d      	ldr	r1, [pc, #180]	; (8012434 <tcp_pbuf_prealloc+0xec>)
 801237e:	482c      	ldr	r0, [pc, #176]	; (8012430 <tcp_pbuf_prealloc+0xe8>)
 8012380:	f005 fa84 	bl	801788c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012384:	89ba      	ldrh	r2, [r7, #12]
 8012386:	897b      	ldrh	r3, [r7, #10]
 8012388:	429a      	cmp	r2, r3
 801238a:	d221      	bcs.n	80123d0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801238c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012390:	f003 0302 	and.w	r3, r3, #2
 8012394:	2b00      	cmp	r3, #0
 8012396:	d111      	bne.n	80123bc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012398:	6a3b      	ldr	r3, [r7, #32]
 801239a:	8b5b      	ldrh	r3, [r3, #26]
 801239c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d115      	bne.n	80123d0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80123a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d007      	beq.n	80123bc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80123ac:	6a3b      	ldr	r3, [r7, #32]
 80123ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d103      	bne.n	80123bc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80123b4:	6a3b      	ldr	r3, [r7, #32]
 80123b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d009      	beq.n	80123d0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80123bc:	89bb      	ldrh	r3, [r7, #12]
 80123be:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80123c2:	f023 0203 	bic.w	r2, r3, #3
 80123c6:	897b      	ldrh	r3, [r7, #10]
 80123c8:	4293      	cmp	r3, r2
 80123ca:	bf28      	it	cs
 80123cc:	4613      	movcs	r3, r2
 80123ce:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80123d0:	8af9      	ldrh	r1, [r7, #22]
 80123d2:	7bfb      	ldrb	r3, [r7, #15]
 80123d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80123d8:	4618      	mov	r0, r3
 80123da:	f7fa fe4b 	bl	800d074 <pbuf_alloc>
 80123de:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80123e0:	693b      	ldr	r3, [r7, #16]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d101      	bne.n	80123ea <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80123e6:	2300      	movs	r3, #0
 80123e8:	e019      	b.n	801241e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80123ea:	693b      	ldr	r3, [r7, #16]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d006      	beq.n	8012400 <tcp_pbuf_prealloc+0xb8>
 80123f2:	4b0d      	ldr	r3, [pc, #52]	; (8012428 <tcp_pbuf_prealloc+0xe0>)
 80123f4:	f240 120b 	movw	r2, #267	; 0x10b
 80123f8:	490f      	ldr	r1, [pc, #60]	; (8012438 <tcp_pbuf_prealloc+0xf0>)
 80123fa:	480d      	ldr	r0, [pc, #52]	; (8012430 <tcp_pbuf_prealloc+0xe8>)
 80123fc:	f005 fa46 	bl	801788c <iprintf>
  *oversize = p->len - length;
 8012400:	693b      	ldr	r3, [r7, #16]
 8012402:	895a      	ldrh	r2, [r3, #10]
 8012404:	89bb      	ldrh	r3, [r7, #12]
 8012406:	1ad3      	subs	r3, r2, r3
 8012408:	b29a      	uxth	r2, r3
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801240e:	693b      	ldr	r3, [r7, #16]
 8012410:	89ba      	ldrh	r2, [r7, #12]
 8012412:	811a      	strh	r2, [r3, #8]
 8012414:	693b      	ldr	r3, [r7, #16]
 8012416:	891a      	ldrh	r2, [r3, #8]
 8012418:	693b      	ldr	r3, [r7, #16]
 801241a:	815a      	strh	r2, [r3, #10]
  return p;
 801241c:	693b      	ldr	r3, [r7, #16]
}
 801241e:	4618      	mov	r0, r3
 8012420:	3718      	adds	r7, #24
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}
 8012426:	bf00      	nop
 8012428:	0801adc8 	.word	0x0801adc8
 801242c:	0801ae80 	.word	0x0801ae80
 8012430:	0801ae1c 	.word	0x0801ae1c
 8012434:	0801aea4 	.word	0x0801aea4
 8012438:	0801aec4 	.word	0x0801aec4

0801243c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b082      	sub	sp, #8
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
 8012444:	460b      	mov	r3, r1
 8012446:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d106      	bne.n	801245c <tcp_write_checks+0x20>
 801244e:	4b33      	ldr	r3, [pc, #204]	; (801251c <tcp_write_checks+0xe0>)
 8012450:	f240 1233 	movw	r2, #307	; 0x133
 8012454:	4932      	ldr	r1, [pc, #200]	; (8012520 <tcp_write_checks+0xe4>)
 8012456:	4833      	ldr	r0, [pc, #204]	; (8012524 <tcp_write_checks+0xe8>)
 8012458:	f005 fa18 	bl	801788c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	7d1b      	ldrb	r3, [r3, #20]
 8012460:	2b04      	cmp	r3, #4
 8012462:	d00e      	beq.n	8012482 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012468:	2b07      	cmp	r3, #7
 801246a:	d00a      	beq.n	8012482 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012470:	2b02      	cmp	r3, #2
 8012472:	d006      	beq.n	8012482 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012478:	2b03      	cmp	r3, #3
 801247a:	d002      	beq.n	8012482 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801247c:	f06f 030a 	mvn.w	r3, #10
 8012480:	e048      	b.n	8012514 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8012482:	887b      	ldrh	r3, [r7, #2]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d101      	bne.n	801248c <tcp_write_checks+0x50>
    return ERR_OK;
 8012488:	2300      	movs	r3, #0
 801248a:	e043      	b.n	8012514 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012492:	887a      	ldrh	r2, [r7, #2]
 8012494:	429a      	cmp	r2, r3
 8012496:	d909      	bls.n	80124ac <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	8b5b      	ldrh	r3, [r3, #26]
 801249c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80124a0:	b29a      	uxth	r2, r3
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80124a6:	f04f 33ff 	mov.w	r3, #4294967295
 80124aa:	e033      	b.n	8012514 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80124b2:	2b08      	cmp	r3, #8
 80124b4:	d909      	bls.n	80124ca <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	8b5b      	ldrh	r3, [r3, #26]
 80124ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80124be:	b29a      	uxth	r2, r3
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80124c4:	f04f 33ff 	mov.w	r3, #4294967295
 80124c8:	e024      	b.n	8012514 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d00f      	beq.n	80124f4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d11a      	bne.n	8012512 <tcp_write_checks+0xd6>
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d116      	bne.n	8012512 <tcp_write_checks+0xd6>
 80124e4:	4b0d      	ldr	r3, [pc, #52]	; (801251c <tcp_write_checks+0xe0>)
 80124e6:	f240 1255 	movw	r2, #341	; 0x155
 80124ea:	490f      	ldr	r1, [pc, #60]	; (8012528 <tcp_write_checks+0xec>)
 80124ec:	480d      	ldr	r0, [pc, #52]	; (8012524 <tcp_write_checks+0xe8>)
 80124ee:	f005 f9cd 	bl	801788c <iprintf>
 80124f2:	e00e      	b.n	8012512 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d103      	bne.n	8012504 <tcp_write_checks+0xc8>
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012500:	2b00      	cmp	r3, #0
 8012502:	d006      	beq.n	8012512 <tcp_write_checks+0xd6>
 8012504:	4b05      	ldr	r3, [pc, #20]	; (801251c <tcp_write_checks+0xe0>)
 8012506:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801250a:	4908      	ldr	r1, [pc, #32]	; (801252c <tcp_write_checks+0xf0>)
 801250c:	4805      	ldr	r0, [pc, #20]	; (8012524 <tcp_write_checks+0xe8>)
 801250e:	f005 f9bd 	bl	801788c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012512:	2300      	movs	r3, #0
}
 8012514:	4618      	mov	r0, r3
 8012516:	3708      	adds	r7, #8
 8012518:	46bd      	mov	sp, r7
 801251a:	bd80      	pop	{r7, pc}
 801251c:	0801adc8 	.word	0x0801adc8
 8012520:	0801aed8 	.word	0x0801aed8
 8012524:	0801ae1c 	.word	0x0801ae1c
 8012528:	0801aef8 	.word	0x0801aef8
 801252c:	0801af34 	.word	0x0801af34

08012530 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012530:	b590      	push	{r4, r7, lr}
 8012532:	b09b      	sub	sp, #108	; 0x6c
 8012534:	af04      	add	r7, sp, #16
 8012536:	60f8      	str	r0, [r7, #12]
 8012538:	60b9      	str	r1, [r7, #8]
 801253a:	4611      	mov	r1, r2
 801253c:	461a      	mov	r2, r3
 801253e:	460b      	mov	r3, r1
 8012540:	80fb      	strh	r3, [r7, #6]
 8012542:	4613      	mov	r3, r2
 8012544:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8012546:	2300      	movs	r3, #0
 8012548:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801254a:	2300      	movs	r3, #0
 801254c:	653b      	str	r3, [r7, #80]	; 0x50
 801254e:	2300      	movs	r3, #0
 8012550:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012552:	2300      	movs	r3, #0
 8012554:	64bb      	str	r3, [r7, #72]	; 0x48
 8012556:	2300      	movs	r3, #0
 8012558:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801255a:	2300      	movs	r3, #0
 801255c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012560:	2300      	movs	r3, #0
 8012562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8012566:	2300      	movs	r3, #0
 8012568:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801256a:	2300      	movs	r3, #0
 801256c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801256e:	2300      	movs	r3, #0
 8012570:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d109      	bne.n	801258c <tcp_write+0x5c>
 8012578:	4ba4      	ldr	r3, [pc, #656]	; (801280c <tcp_write+0x2dc>)
 801257a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801257e:	49a4      	ldr	r1, [pc, #656]	; (8012810 <tcp_write+0x2e0>)
 8012580:	48a4      	ldr	r0, [pc, #656]	; (8012814 <tcp_write+0x2e4>)
 8012582:	f005 f983 	bl	801788c <iprintf>
 8012586:	f06f 030f 	mvn.w	r3, #15
 801258a:	e32a      	b.n	8012be2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012592:	085b      	lsrs	r3, r3, #1
 8012594:	b29a      	uxth	r2, r3
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801259a:	4293      	cmp	r3, r2
 801259c:	bf28      	it	cs
 801259e:	4613      	movcs	r3, r2
 80125a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80125a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d102      	bne.n	80125ae <tcp_write+0x7e>
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80125ac:	e000      	b.n	80125b0 <tcp_write+0x80>
 80125ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80125b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80125b2:	68bb      	ldr	r3, [r7, #8]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d109      	bne.n	80125cc <tcp_write+0x9c>
 80125b8:	4b94      	ldr	r3, [pc, #592]	; (801280c <tcp_write+0x2dc>)
 80125ba:	f240 12ad 	movw	r2, #429	; 0x1ad
 80125be:	4996      	ldr	r1, [pc, #600]	; (8012818 <tcp_write+0x2e8>)
 80125c0:	4894      	ldr	r0, [pc, #592]	; (8012814 <tcp_write+0x2e4>)
 80125c2:	f005 f963 	bl	801788c <iprintf>
 80125c6:	f06f 030f 	mvn.w	r3, #15
 80125ca:	e30a      	b.n	8012be2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80125cc:	88fb      	ldrh	r3, [r7, #6]
 80125ce:	4619      	mov	r1, r3
 80125d0:	68f8      	ldr	r0, [r7, #12]
 80125d2:	f7ff ff33 	bl	801243c <tcp_write_checks>
 80125d6:	4603      	mov	r3, r0
 80125d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80125dc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d002      	beq.n	80125ea <tcp_write+0xba>
    return err;
 80125e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80125e8:	e2fb      	b.n	8012be2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80125f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80125f4:	2300      	movs	r3, #0
 80125f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125fe:	2b00      	cmp	r3, #0
 8012600:	f000 80f6 	beq.w	80127f0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012608:	653b      	str	r3, [r7, #80]	; 0x50
 801260a:	e002      	b.n	8012612 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801260c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d1f8      	bne.n	801260c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801261a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801261c:	7a9b      	ldrb	r3, [r3, #10]
 801261e:	009b      	lsls	r3, r3, #2
 8012620:	b29b      	uxth	r3, r3
 8012622:	f003 0304 	and.w	r3, r3, #4
 8012626:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012628:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801262a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801262c:	891b      	ldrh	r3, [r3, #8]
 801262e:	4619      	mov	r1, r3
 8012630:	8c3b      	ldrh	r3, [r7, #32]
 8012632:	440b      	add	r3, r1
 8012634:	429a      	cmp	r2, r3
 8012636:	da06      	bge.n	8012646 <tcp_write+0x116>
 8012638:	4b74      	ldr	r3, [pc, #464]	; (801280c <tcp_write+0x2dc>)
 801263a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801263e:	4977      	ldr	r1, [pc, #476]	; (801281c <tcp_write+0x2ec>)
 8012640:	4874      	ldr	r0, [pc, #464]	; (8012814 <tcp_write+0x2e4>)
 8012642:	f005 f923 	bl	801788c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012648:	891a      	ldrh	r2, [r3, #8]
 801264a:	8c3b      	ldrh	r3, [r7, #32]
 801264c:	4413      	add	r3, r2
 801264e:	b29b      	uxth	r3, r3
 8012650:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012652:	1ad3      	subs	r3, r2, r3
 8012654:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801265c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801265e:	8a7b      	ldrh	r3, [r7, #18]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d026      	beq.n	80126b2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012664:	8a7b      	ldrh	r3, [r7, #18]
 8012666:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012668:	429a      	cmp	r2, r3
 801266a:	d206      	bcs.n	801267a <tcp_write+0x14a>
 801266c:	4b67      	ldr	r3, [pc, #412]	; (801280c <tcp_write+0x2dc>)
 801266e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012672:	496b      	ldr	r1, [pc, #428]	; (8012820 <tcp_write+0x2f0>)
 8012674:	4867      	ldr	r0, [pc, #412]	; (8012814 <tcp_write+0x2e4>)
 8012676:	f005 f909 	bl	801788c <iprintf>
      seg = last_unsent;
 801267a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801267c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801267e:	8a7b      	ldrh	r3, [r7, #18]
 8012680:	88fa      	ldrh	r2, [r7, #6]
 8012682:	4293      	cmp	r3, r2
 8012684:	bf28      	it	cs
 8012686:	4613      	movcs	r3, r2
 8012688:	b29b      	uxth	r3, r3
 801268a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801268c:	4293      	cmp	r3, r2
 801268e:	bf28      	it	cs
 8012690:	4613      	movcs	r3, r2
 8012692:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012694:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012698:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801269a:	4413      	add	r3, r2
 801269c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80126a0:	8a7a      	ldrh	r2, [r7, #18]
 80126a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80126a4:	1ad3      	subs	r3, r2, r3
 80126a6:	b29b      	uxth	r3, r3
 80126a8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80126aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80126ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80126ae:	1ad3      	subs	r3, r2, r3
 80126b0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80126b2:	8a7b      	ldrh	r3, [r7, #18]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d00b      	beq.n	80126d0 <tcp_write+0x1a0>
 80126b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80126bc:	88fb      	ldrh	r3, [r7, #6]
 80126be:	429a      	cmp	r2, r3
 80126c0:	d006      	beq.n	80126d0 <tcp_write+0x1a0>
 80126c2:	4b52      	ldr	r3, [pc, #328]	; (801280c <tcp_write+0x2dc>)
 80126c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80126c8:	4956      	ldr	r1, [pc, #344]	; (8012824 <tcp_write+0x2f4>)
 80126ca:	4852      	ldr	r0, [pc, #328]	; (8012814 <tcp_write+0x2e4>)
 80126cc:	f005 f8de 	bl	801788c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80126d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80126d4:	88fb      	ldrh	r3, [r7, #6]
 80126d6:	429a      	cmp	r2, r3
 80126d8:	f080 8167 	bcs.w	80129aa <tcp_write+0x47a>
 80126dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80126de:	2b00      	cmp	r3, #0
 80126e0:	f000 8163 	beq.w	80129aa <tcp_write+0x47a>
 80126e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126e6:	891b      	ldrh	r3, [r3, #8]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	f000 815e 	beq.w	80129aa <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80126ee:	88fa      	ldrh	r2, [r7, #6]
 80126f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80126f4:	1ad2      	subs	r2, r2, r3
 80126f6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80126f8:	4293      	cmp	r3, r2
 80126fa:	bfa8      	it	ge
 80126fc:	4613      	movge	r3, r2
 80126fe:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012702:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012704:	797b      	ldrb	r3, [r7, #5]
 8012706:	f003 0301 	and.w	r3, r3, #1
 801270a:	2b00      	cmp	r3, #0
 801270c:	d027      	beq.n	801275e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801270e:	f107 0012 	add.w	r0, r7, #18
 8012712:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012714:	8bf9      	ldrh	r1, [r7, #30]
 8012716:	2301      	movs	r3, #1
 8012718:	9302      	str	r3, [sp, #8]
 801271a:	797b      	ldrb	r3, [r7, #5]
 801271c:	9301      	str	r3, [sp, #4]
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	9300      	str	r3, [sp, #0]
 8012722:	4603      	mov	r3, r0
 8012724:	2000      	movs	r0, #0
 8012726:	f7ff fe0f 	bl	8012348 <tcp_pbuf_prealloc>
 801272a:	6578      	str	r0, [r7, #84]	; 0x54
 801272c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801272e:	2b00      	cmp	r3, #0
 8012730:	f000 8225 	beq.w	8012b7e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012736:	6858      	ldr	r0, [r3, #4]
 8012738:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801273c:	68ba      	ldr	r2, [r7, #8]
 801273e:	4413      	add	r3, r2
 8012740:	8bfa      	ldrh	r2, [r7, #30]
 8012742:	4619      	mov	r1, r3
 8012744:	f005 fa27 	bl	8017b96 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012748:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801274a:	f7fb f805 	bl	800d758 <pbuf_clen>
 801274e:	4603      	mov	r3, r0
 8012750:	461a      	mov	r2, r3
 8012752:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012756:	4413      	add	r3, r2
 8012758:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801275c:	e041      	b.n	80127e2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801275e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012760:	685b      	ldr	r3, [r3, #4]
 8012762:	637b      	str	r3, [r7, #52]	; 0x34
 8012764:	e002      	b.n	801276c <tcp_write+0x23c>
 8012766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	637b      	str	r3, [r7, #52]	; 0x34
 801276c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d1f8      	bne.n	8012766 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012776:	7b1b      	ldrb	r3, [r3, #12]
 8012778:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801277c:	2b00      	cmp	r3, #0
 801277e:	d115      	bne.n	80127ac <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012782:	685b      	ldr	r3, [r3, #4]
 8012784:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012786:	8952      	ldrh	r2, [r2, #10]
 8012788:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801278a:	68ba      	ldr	r2, [r7, #8]
 801278c:	429a      	cmp	r2, r3
 801278e:	d10d      	bne.n	80127ac <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012790:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012794:	2b00      	cmp	r3, #0
 8012796:	d006      	beq.n	80127a6 <tcp_write+0x276>
 8012798:	4b1c      	ldr	r3, [pc, #112]	; (801280c <tcp_write+0x2dc>)
 801279a:	f240 2231 	movw	r2, #561	; 0x231
 801279e:	4922      	ldr	r1, [pc, #136]	; (8012828 <tcp_write+0x2f8>)
 80127a0:	481c      	ldr	r0, [pc, #112]	; (8012814 <tcp_write+0x2e4>)
 80127a2:	f005 f873 	bl	801788c <iprintf>
          extendlen = seglen;
 80127a6:	8bfb      	ldrh	r3, [r7, #30]
 80127a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80127aa:	e01a      	b.n	80127e2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80127ac:	8bfb      	ldrh	r3, [r7, #30]
 80127ae:	2201      	movs	r2, #1
 80127b0:	4619      	mov	r1, r3
 80127b2:	2000      	movs	r0, #0
 80127b4:	f7fa fc5e 	bl	800d074 <pbuf_alloc>
 80127b8:	6578      	str	r0, [r7, #84]	; 0x54
 80127ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80127bc:	2b00      	cmp	r3, #0
 80127be:	f000 81e0 	beq.w	8012b82 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80127c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80127c6:	68ba      	ldr	r2, [r7, #8]
 80127c8:	441a      	add	r2, r3
 80127ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80127cc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80127ce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80127d0:	f7fa ffc2 	bl	800d758 <pbuf_clen>
 80127d4:	4603      	mov	r3, r0
 80127d6:	461a      	mov	r2, r3
 80127d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80127dc:	4413      	add	r3, r2
 80127de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80127e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80127e6:	8bfb      	ldrh	r3, [r7, #30]
 80127e8:	4413      	add	r3, r2
 80127ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80127ee:	e0dc      	b.n	80129aa <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	f000 80d7 	beq.w	80129aa <tcp_write+0x47a>
 80127fc:	4b03      	ldr	r3, [pc, #12]	; (801280c <tcp_write+0x2dc>)
 80127fe:	f240 224a 	movw	r2, #586	; 0x24a
 8012802:	490a      	ldr	r1, [pc, #40]	; (801282c <tcp_write+0x2fc>)
 8012804:	4803      	ldr	r0, [pc, #12]	; (8012814 <tcp_write+0x2e4>)
 8012806:	f005 f841 	bl	801788c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801280a:	e0ce      	b.n	80129aa <tcp_write+0x47a>
 801280c:	0801adc8 	.word	0x0801adc8
 8012810:	0801af68 	.word	0x0801af68
 8012814:	0801ae1c 	.word	0x0801ae1c
 8012818:	0801af80 	.word	0x0801af80
 801281c:	0801afb4 	.word	0x0801afb4
 8012820:	0801afcc 	.word	0x0801afcc
 8012824:	0801afec 	.word	0x0801afec
 8012828:	0801b00c 	.word	0x0801b00c
 801282c:	0801b038 	.word	0x0801b038
    struct pbuf *p;
    u16_t left = len - pos;
 8012830:	88fa      	ldrh	r2, [r7, #6]
 8012832:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012836:	1ad3      	subs	r3, r2, r3
 8012838:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801283a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801283e:	b29b      	uxth	r3, r3
 8012840:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012842:	1ad3      	subs	r3, r2, r3
 8012844:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012846:	8b7a      	ldrh	r2, [r7, #26]
 8012848:	8bbb      	ldrh	r3, [r7, #28]
 801284a:	4293      	cmp	r3, r2
 801284c:	bf28      	it	cs
 801284e:	4613      	movcs	r3, r2
 8012850:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012852:	797b      	ldrb	r3, [r7, #5]
 8012854:	f003 0301 	and.w	r3, r3, #1
 8012858:	2b00      	cmp	r3, #0
 801285a:	d036      	beq.n	80128ca <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801285c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012860:	b29a      	uxth	r2, r3
 8012862:	8b3b      	ldrh	r3, [r7, #24]
 8012864:	4413      	add	r3, r2
 8012866:	b299      	uxth	r1, r3
 8012868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801286a:	2b00      	cmp	r3, #0
 801286c:	bf0c      	ite	eq
 801286e:	2301      	moveq	r3, #1
 8012870:	2300      	movne	r3, #0
 8012872:	b2db      	uxtb	r3, r3
 8012874:	f107 0012 	add.w	r0, r7, #18
 8012878:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801287a:	9302      	str	r3, [sp, #8]
 801287c:	797b      	ldrb	r3, [r7, #5]
 801287e:	9301      	str	r3, [sp, #4]
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	9300      	str	r3, [sp, #0]
 8012884:	4603      	mov	r3, r0
 8012886:	2036      	movs	r0, #54	; 0x36
 8012888:	f7ff fd5e 	bl	8012348 <tcp_pbuf_prealloc>
 801288c:	6338      	str	r0, [r7, #48]	; 0x30
 801288e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012890:	2b00      	cmp	r3, #0
 8012892:	f000 8178 	beq.w	8012b86 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012898:	895b      	ldrh	r3, [r3, #10]
 801289a:	8b3a      	ldrh	r2, [r7, #24]
 801289c:	429a      	cmp	r2, r3
 801289e:	d906      	bls.n	80128ae <tcp_write+0x37e>
 80128a0:	4b8c      	ldr	r3, [pc, #560]	; (8012ad4 <tcp_write+0x5a4>)
 80128a2:	f240 2266 	movw	r2, #614	; 0x266
 80128a6:	498c      	ldr	r1, [pc, #560]	; (8012ad8 <tcp_write+0x5a8>)
 80128a8:	488c      	ldr	r0, [pc, #560]	; (8012adc <tcp_write+0x5ac>)
 80128aa:	f004 ffef 	bl	801788c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80128ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128b0:	685a      	ldr	r2, [r3, #4]
 80128b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80128b6:	18d0      	adds	r0, r2, r3
 80128b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80128bc:	68ba      	ldr	r2, [r7, #8]
 80128be:	4413      	add	r3, r2
 80128c0:	8b3a      	ldrh	r2, [r7, #24]
 80128c2:	4619      	mov	r1, r3
 80128c4:	f005 f967 	bl	8017b96 <memcpy>
 80128c8:	e02f      	b.n	801292a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80128ca:	8a7b      	ldrh	r3, [r7, #18]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d006      	beq.n	80128de <tcp_write+0x3ae>
 80128d0:	4b80      	ldr	r3, [pc, #512]	; (8012ad4 <tcp_write+0x5a4>)
 80128d2:	f240 2271 	movw	r2, #625	; 0x271
 80128d6:	4982      	ldr	r1, [pc, #520]	; (8012ae0 <tcp_write+0x5b0>)
 80128d8:	4880      	ldr	r0, [pc, #512]	; (8012adc <tcp_write+0x5ac>)
 80128da:	f004 ffd7 	bl	801788c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80128de:	8b3b      	ldrh	r3, [r7, #24]
 80128e0:	2201      	movs	r2, #1
 80128e2:	4619      	mov	r1, r3
 80128e4:	2036      	movs	r0, #54	; 0x36
 80128e6:	f7fa fbc5 	bl	800d074 <pbuf_alloc>
 80128ea:	6178      	str	r0, [r7, #20]
 80128ec:	697b      	ldr	r3, [r7, #20]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	f000 814b 	beq.w	8012b8a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80128f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80128f8:	68ba      	ldr	r2, [r7, #8]
 80128fa:	441a      	add	r2, r3
 80128fc:	697b      	ldr	r3, [r7, #20]
 80128fe:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012900:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012904:	b29b      	uxth	r3, r3
 8012906:	f44f 7220 	mov.w	r2, #640	; 0x280
 801290a:	4619      	mov	r1, r3
 801290c:	2036      	movs	r0, #54	; 0x36
 801290e:	f7fa fbb1 	bl	800d074 <pbuf_alloc>
 8012912:	6338      	str	r0, [r7, #48]	; 0x30
 8012914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012916:	2b00      	cmp	r3, #0
 8012918:	d103      	bne.n	8012922 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801291a:	6978      	ldr	r0, [r7, #20]
 801291c:	f7fa fe8e 	bl	800d63c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012920:	e136      	b.n	8012b90 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012922:	6979      	ldr	r1, [r7, #20]
 8012924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012926:	f7fa ff57 	bl	800d7d8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801292a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801292c:	f7fa ff14 	bl	800d758 <pbuf_clen>
 8012930:	4603      	mov	r3, r0
 8012932:	461a      	mov	r2, r3
 8012934:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012938:	4413      	add	r3, r2
 801293a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801293e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012942:	2b09      	cmp	r3, #9
 8012944:	d903      	bls.n	801294e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012946:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012948:	f7fa fe78 	bl	800d63c <pbuf_free>
      goto memerr;
 801294c:	e120      	b.n	8012b90 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012952:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012956:	441a      	add	r2, r3
 8012958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801295c:	9300      	str	r3, [sp, #0]
 801295e:	4613      	mov	r3, r2
 8012960:	2200      	movs	r2, #0
 8012962:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012964:	68f8      	ldr	r0, [r7, #12]
 8012966:	f7ff fc51 	bl	801220c <tcp_create_segment>
 801296a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801296c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801296e:	2b00      	cmp	r3, #0
 8012970:	f000 810d 	beq.w	8012b8e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012976:	2b00      	cmp	r3, #0
 8012978:	d102      	bne.n	8012980 <tcp_write+0x450>
      queue = seg;
 801297a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801297c:	647b      	str	r3, [r7, #68]	; 0x44
 801297e:	e00c      	b.n	801299a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012982:	2b00      	cmp	r3, #0
 8012984:	d106      	bne.n	8012994 <tcp_write+0x464>
 8012986:	4b53      	ldr	r3, [pc, #332]	; (8012ad4 <tcp_write+0x5a4>)
 8012988:	f240 22ab 	movw	r2, #683	; 0x2ab
 801298c:	4955      	ldr	r1, [pc, #340]	; (8012ae4 <tcp_write+0x5b4>)
 801298e:	4853      	ldr	r0, [pc, #332]	; (8012adc <tcp_write+0x5ac>)
 8012990:	f004 ff7c 	bl	801788c <iprintf>
      prev_seg->next = seg;
 8012994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012996:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012998:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801299a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801299c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801299e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80129a2:	8b3b      	ldrh	r3, [r7, #24]
 80129a4:	4413      	add	r3, r2
 80129a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80129aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80129ae:	88fb      	ldrh	r3, [r7, #6]
 80129b0:	429a      	cmp	r2, r3
 80129b2:	f4ff af3d 	bcc.w	8012830 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80129b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d02c      	beq.n	8012a16 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80129bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129be:	685b      	ldr	r3, [r3, #4]
 80129c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80129c2:	e01e      	b.n	8012a02 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80129c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129c6:	891a      	ldrh	r2, [r3, #8]
 80129c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80129ca:	4413      	add	r3, r2
 80129cc:	b29a      	uxth	r2, r3
 80129ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80129d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d110      	bne.n	80129fc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80129da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129dc:	685b      	ldr	r3, [r3, #4]
 80129de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129e0:	8952      	ldrh	r2, [r2, #10]
 80129e2:	4413      	add	r3, r2
 80129e4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80129e6:	68b9      	ldr	r1, [r7, #8]
 80129e8:	4618      	mov	r0, r3
 80129ea:	f005 f8d4 	bl	8017b96 <memcpy>
        p->len += oversize_used;
 80129ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129f0:	895a      	ldrh	r2, [r3, #10]
 80129f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80129f4:	4413      	add	r3, r2
 80129f6:	b29a      	uxth	r2, r3
 80129f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129fa:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80129fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d1dd      	bne.n	80129c4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a0a:	891a      	ldrh	r2, [r3, #8]
 8012a0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a0e:	4413      	add	r3, r2
 8012a10:	b29a      	uxth	r2, r3
 8012a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a14:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012a16:	8a7a      	ldrh	r2, [r7, #18]
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d018      	beq.n	8012a56 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d106      	bne.n	8012a38 <tcp_write+0x508>
 8012a2a:	4b2a      	ldr	r3, [pc, #168]	; (8012ad4 <tcp_write+0x5a4>)
 8012a2c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012a30:	492d      	ldr	r1, [pc, #180]	; (8012ae8 <tcp_write+0x5b8>)
 8012a32:	482a      	ldr	r0, [pc, #168]	; (8012adc <tcp_write+0x5ac>)
 8012a34:	f004 ff2a 	bl	801788c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a3a:	685b      	ldr	r3, [r3, #4]
 8012a3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f7fa feca 	bl	800d7d8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a46:	891a      	ldrh	r2, [r3, #8]
 8012a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a4a:	891b      	ldrh	r3, [r3, #8]
 8012a4c:	4413      	add	r3, r2
 8012a4e:	b29a      	uxth	r2, r3
 8012a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a52:	811a      	strh	r2, [r3, #8]
 8012a54:	e037      	b.n	8012ac6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012a56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d034      	beq.n	8012ac6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d003      	beq.n	8012a6a <tcp_write+0x53a>
 8012a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a64:	685b      	ldr	r3, [r3, #4]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d106      	bne.n	8012a78 <tcp_write+0x548>
 8012a6a:	4b1a      	ldr	r3, [pc, #104]	; (8012ad4 <tcp_write+0x5a4>)
 8012a6c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012a70:	491e      	ldr	r1, [pc, #120]	; (8012aec <tcp_write+0x5bc>)
 8012a72:	481a      	ldr	r0, [pc, #104]	; (8012adc <tcp_write+0x5ac>)
 8012a74:	f004 ff0a 	bl	801788c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a7a:	685b      	ldr	r3, [r3, #4]
 8012a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8012a7e:	e009      	b.n	8012a94 <tcp_write+0x564>
      p->tot_len += extendlen;
 8012a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a82:	891a      	ldrh	r2, [r3, #8]
 8012a84:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012a86:	4413      	add	r3, r2
 8012a88:	b29a      	uxth	r2, r3
 8012a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a8c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	62bb      	str	r3, [r7, #40]	; 0x28
 8012a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d1f1      	bne.n	8012a80 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a9e:	891a      	ldrh	r2, [r3, #8]
 8012aa0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012aa2:	4413      	add	r3, r2
 8012aa4:	b29a      	uxth	r2, r3
 8012aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aa8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aac:	895a      	ldrh	r2, [r3, #10]
 8012aae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ab0:	4413      	add	r3, r2
 8012ab2:	b29a      	uxth	r2, r3
 8012ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ab6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012aba:	891a      	ldrh	r2, [r3, #8]
 8012abc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012abe:	4413      	add	r3, r2
 8012ac0:	b29a      	uxth	r2, r3
 8012ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ac4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d111      	bne.n	8012af0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012ad0:	66da      	str	r2, [r3, #108]	; 0x6c
 8012ad2:	e010      	b.n	8012af6 <tcp_write+0x5c6>
 8012ad4:	0801adc8 	.word	0x0801adc8
 8012ad8:	0801b068 	.word	0x0801b068
 8012adc:	0801ae1c 	.word	0x0801ae1c
 8012ae0:	0801b0a8 	.word	0x0801b0a8
 8012ae4:	0801b0b8 	.word	0x0801b0b8
 8012ae8:	0801b0cc 	.word	0x0801b0cc
 8012aec:	0801b104 	.word	0x0801b104
  } else {
    last_unsent->next = queue;
 8012af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012af4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012afa:	88fb      	ldrh	r3, [r7, #6]
 8012afc:	441a      	add	r2, r3
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012b08:	88fb      	ldrh	r3, [r7, #6]
 8012b0a:	1ad3      	subs	r3, r2, r3
 8012b0c:	b29a      	uxth	r2, r3
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012b1a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d00e      	beq.n	8012b46 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d10a      	bne.n	8012b46 <tcp_write+0x616>
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d106      	bne.n	8012b46 <tcp_write+0x616>
 8012b38:	4b2c      	ldr	r3, [pc, #176]	; (8012bec <tcp_write+0x6bc>)
 8012b3a:	f240 3212 	movw	r2, #786	; 0x312
 8012b3e:	492c      	ldr	r1, [pc, #176]	; (8012bf0 <tcp_write+0x6c0>)
 8012b40:	482c      	ldr	r0, [pc, #176]	; (8012bf4 <tcp_write+0x6c4>)
 8012b42:	f004 fea3 	bl	801788c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d016      	beq.n	8012b7a <tcp_write+0x64a>
 8012b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b4e:	68db      	ldr	r3, [r3, #12]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d012      	beq.n	8012b7a <tcp_write+0x64a>
 8012b54:	797b      	ldrb	r3, [r7, #5]
 8012b56:	f003 0302 	and.w	r3, r3, #2
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d10d      	bne.n	8012b7a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b60:	68db      	ldr	r3, [r3, #12]
 8012b62:	899b      	ldrh	r3, [r3, #12]
 8012b64:	b29c      	uxth	r4, r3
 8012b66:	2008      	movs	r0, #8
 8012b68:	f7f9 f976 	bl	800be58 <lwip_htons>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	461a      	mov	r2, r3
 8012b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b72:	68db      	ldr	r3, [r3, #12]
 8012b74:	4322      	orrs	r2, r4
 8012b76:	b292      	uxth	r2, r2
 8012b78:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	e031      	b.n	8012be2 <tcp_write+0x6b2>
          goto memerr;
 8012b7e:	bf00      	nop
 8012b80:	e006      	b.n	8012b90 <tcp_write+0x660>
            goto memerr;
 8012b82:	bf00      	nop
 8012b84:	e004      	b.n	8012b90 <tcp_write+0x660>
        goto memerr;
 8012b86:	bf00      	nop
 8012b88:	e002      	b.n	8012b90 <tcp_write+0x660>
        goto memerr;
 8012b8a:	bf00      	nop
 8012b8c:	e000      	b.n	8012b90 <tcp_write+0x660>
      goto memerr;
 8012b8e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	8b5b      	ldrh	r3, [r3, #26]
 8012b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b98:	b29a      	uxth	r2, r3
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d002      	beq.n	8012baa <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012ba4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012ba6:	f7fa fd49 	bl	800d63c <pbuf_free>
  }
  if (queue != NULL) {
 8012baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d002      	beq.n	8012bb6 <tcp_write+0x686>
    tcp_segs_free(queue);
 8012bb0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012bb2:	f7fc fb6b 	bl	800f28c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d00e      	beq.n	8012bde <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d10a      	bne.n	8012bde <tcp_write+0x6ae>
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d106      	bne.n	8012bde <tcp_write+0x6ae>
 8012bd0:	4b06      	ldr	r3, [pc, #24]	; (8012bec <tcp_write+0x6bc>)
 8012bd2:	f240 3227 	movw	r2, #807	; 0x327
 8012bd6:	4906      	ldr	r1, [pc, #24]	; (8012bf0 <tcp_write+0x6c0>)
 8012bd8:	4806      	ldr	r0, [pc, #24]	; (8012bf4 <tcp_write+0x6c4>)
 8012bda:	f004 fe57 	bl	801788c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012bde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012be2:	4618      	mov	r0, r3
 8012be4:	375c      	adds	r7, #92	; 0x5c
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bd90      	pop	{r4, r7, pc}
 8012bea:	bf00      	nop
 8012bec:	0801adc8 	.word	0x0801adc8
 8012bf0:	0801b13c 	.word	0x0801b13c
 8012bf4:	0801ae1c 	.word	0x0801ae1c

08012bf8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012bf8:	b590      	push	{r4, r7, lr}
 8012bfa:	b08b      	sub	sp, #44	; 0x2c
 8012bfc:	af02      	add	r7, sp, #8
 8012bfe:	6078      	str	r0, [r7, #4]
 8012c00:	460b      	mov	r3, r1
 8012c02:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012c04:	2300      	movs	r3, #0
 8012c06:	61fb      	str	r3, [r7, #28]
 8012c08:	2300      	movs	r3, #0
 8012c0a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d106      	bne.n	8012c24 <tcp_split_unsent_seg+0x2c>
 8012c16:	4b95      	ldr	r3, [pc, #596]	; (8012e6c <tcp_split_unsent_seg+0x274>)
 8012c18:	f240 324b 	movw	r2, #843	; 0x34b
 8012c1c:	4994      	ldr	r1, [pc, #592]	; (8012e70 <tcp_split_unsent_seg+0x278>)
 8012c1e:	4895      	ldr	r0, [pc, #596]	; (8012e74 <tcp_split_unsent_seg+0x27c>)
 8012c20:	f004 fe34 	bl	801788c <iprintf>

  useg = pcb->unsent;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c28:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012c2a:	697b      	ldr	r3, [r7, #20]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d102      	bne.n	8012c36 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012c30:	f04f 33ff 	mov.w	r3, #4294967295
 8012c34:	e116      	b.n	8012e64 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012c36:	887b      	ldrh	r3, [r7, #2]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d109      	bne.n	8012c50 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012c3c:	4b8b      	ldr	r3, [pc, #556]	; (8012e6c <tcp_split_unsent_seg+0x274>)
 8012c3e:	f240 3253 	movw	r2, #851	; 0x353
 8012c42:	498d      	ldr	r1, [pc, #564]	; (8012e78 <tcp_split_unsent_seg+0x280>)
 8012c44:	488b      	ldr	r0, [pc, #556]	; (8012e74 <tcp_split_unsent_seg+0x27c>)
 8012c46:	f004 fe21 	bl	801788c <iprintf>
    return ERR_VAL;
 8012c4a:	f06f 0305 	mvn.w	r3, #5
 8012c4e:	e109      	b.n	8012e64 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012c50:	697b      	ldr	r3, [r7, #20]
 8012c52:	891b      	ldrh	r3, [r3, #8]
 8012c54:	887a      	ldrh	r2, [r7, #2]
 8012c56:	429a      	cmp	r2, r3
 8012c58:	d301      	bcc.n	8012c5e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	e102      	b.n	8012e64 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c62:	887a      	ldrh	r2, [r7, #2]
 8012c64:	429a      	cmp	r2, r3
 8012c66:	d906      	bls.n	8012c76 <tcp_split_unsent_seg+0x7e>
 8012c68:	4b80      	ldr	r3, [pc, #512]	; (8012e6c <tcp_split_unsent_seg+0x274>)
 8012c6a:	f240 325b 	movw	r2, #859	; 0x35b
 8012c6e:	4983      	ldr	r1, [pc, #524]	; (8012e7c <tcp_split_unsent_seg+0x284>)
 8012c70:	4880      	ldr	r0, [pc, #512]	; (8012e74 <tcp_split_unsent_seg+0x27c>)
 8012c72:	f004 fe0b 	bl	801788c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012c76:	697b      	ldr	r3, [r7, #20]
 8012c78:	891b      	ldrh	r3, [r3, #8]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d106      	bne.n	8012c8c <tcp_split_unsent_seg+0x94>
 8012c7e:	4b7b      	ldr	r3, [pc, #492]	; (8012e6c <tcp_split_unsent_seg+0x274>)
 8012c80:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012c84:	497e      	ldr	r1, [pc, #504]	; (8012e80 <tcp_split_unsent_seg+0x288>)
 8012c86:	487b      	ldr	r0, [pc, #492]	; (8012e74 <tcp_split_unsent_seg+0x27c>)
 8012c88:	f004 fe00 	bl	801788c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012c8c:	697b      	ldr	r3, [r7, #20]
 8012c8e:	7a9b      	ldrb	r3, [r3, #10]
 8012c90:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012c92:	7bfb      	ldrb	r3, [r7, #15]
 8012c94:	009b      	lsls	r3, r3, #2
 8012c96:	b2db      	uxtb	r3, r3
 8012c98:	f003 0304 	and.w	r3, r3, #4
 8012c9c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012c9e:	697b      	ldr	r3, [r7, #20]
 8012ca0:	891a      	ldrh	r2, [r3, #8]
 8012ca2:	887b      	ldrh	r3, [r7, #2]
 8012ca4:	1ad3      	subs	r3, r2, r3
 8012ca6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012ca8:	7bbb      	ldrb	r3, [r7, #14]
 8012caa:	b29a      	uxth	r2, r3
 8012cac:	89bb      	ldrh	r3, [r7, #12]
 8012cae:	4413      	add	r3, r2
 8012cb0:	b29b      	uxth	r3, r3
 8012cb2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012cb6:	4619      	mov	r1, r3
 8012cb8:	2036      	movs	r0, #54	; 0x36
 8012cba:	f7fa f9db 	bl	800d074 <pbuf_alloc>
 8012cbe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012cc0:	693b      	ldr	r3, [r7, #16]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	f000 80b7 	beq.w	8012e36 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012cc8:	697b      	ldr	r3, [r7, #20]
 8012cca:	685b      	ldr	r3, [r3, #4]
 8012ccc:	891a      	ldrh	r2, [r3, #8]
 8012cce:	697b      	ldr	r3, [r7, #20]
 8012cd0:	891b      	ldrh	r3, [r3, #8]
 8012cd2:	1ad3      	subs	r3, r2, r3
 8012cd4:	b29a      	uxth	r2, r3
 8012cd6:	887b      	ldrh	r3, [r7, #2]
 8012cd8:	4413      	add	r3, r2
 8012cda:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012cdc:	697b      	ldr	r3, [r7, #20]
 8012cde:	6858      	ldr	r0, [r3, #4]
 8012ce0:	693b      	ldr	r3, [r7, #16]
 8012ce2:	685a      	ldr	r2, [r3, #4]
 8012ce4:	7bbb      	ldrb	r3, [r7, #14]
 8012ce6:	18d1      	adds	r1, r2, r3
 8012ce8:	897b      	ldrh	r3, [r7, #10]
 8012cea:	89ba      	ldrh	r2, [r7, #12]
 8012cec:	f7fa feac 	bl	800da48 <pbuf_copy_partial>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	461a      	mov	r2, r3
 8012cf4:	89bb      	ldrh	r3, [r7, #12]
 8012cf6:	4293      	cmp	r3, r2
 8012cf8:	f040 809f 	bne.w	8012e3a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012cfc:	697b      	ldr	r3, [r7, #20]
 8012cfe:	68db      	ldr	r3, [r3, #12]
 8012d00:	899b      	ldrh	r3, [r3, #12]
 8012d02:	b29b      	uxth	r3, r3
 8012d04:	4618      	mov	r0, r3
 8012d06:	f7f9 f8a7 	bl	800be58 <lwip_htons>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	b2db      	uxtb	r3, r3
 8012d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012d12:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012d14:	2300      	movs	r3, #0
 8012d16:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012d18:	7efb      	ldrb	r3, [r7, #27]
 8012d1a:	f003 0308 	and.w	r3, r3, #8
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d007      	beq.n	8012d32 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012d22:	7efb      	ldrb	r3, [r7, #27]
 8012d24:	f023 0308 	bic.w	r3, r3, #8
 8012d28:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012d2a:	7ebb      	ldrb	r3, [r7, #26]
 8012d2c:	f043 0308 	orr.w	r3, r3, #8
 8012d30:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012d32:	7efb      	ldrb	r3, [r7, #27]
 8012d34:	f003 0301 	and.w	r3, r3, #1
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d007      	beq.n	8012d4c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012d3c:	7efb      	ldrb	r3, [r7, #27]
 8012d3e:	f023 0301 	bic.w	r3, r3, #1
 8012d42:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012d44:	7ebb      	ldrb	r3, [r7, #26]
 8012d46:	f043 0301 	orr.w	r3, r3, #1
 8012d4a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012d4c:	697b      	ldr	r3, [r7, #20]
 8012d4e:	68db      	ldr	r3, [r3, #12]
 8012d50:	685b      	ldr	r3, [r3, #4]
 8012d52:	4618      	mov	r0, r3
 8012d54:	f7f9 f895 	bl	800be82 <lwip_htonl>
 8012d58:	4602      	mov	r2, r0
 8012d5a:	887b      	ldrh	r3, [r7, #2]
 8012d5c:	18d1      	adds	r1, r2, r3
 8012d5e:	7eba      	ldrb	r2, [r7, #26]
 8012d60:	7bfb      	ldrb	r3, [r7, #15]
 8012d62:	9300      	str	r3, [sp, #0]
 8012d64:	460b      	mov	r3, r1
 8012d66:	6939      	ldr	r1, [r7, #16]
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	f7ff fa4f 	bl	801220c <tcp_create_segment>
 8012d6e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012d70:	69fb      	ldr	r3, [r7, #28]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d063      	beq.n	8012e3e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012d76:	697b      	ldr	r3, [r7, #20]
 8012d78:	685b      	ldr	r3, [r3, #4]
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f7fa fcec 	bl	800d758 <pbuf_clen>
 8012d80:	4603      	mov	r3, r0
 8012d82:	461a      	mov	r2, r3
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012d8a:	1a9b      	subs	r3, r3, r2
 8012d8c:	b29a      	uxth	r2, r3
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012d94:	697b      	ldr	r3, [r7, #20]
 8012d96:	6858      	ldr	r0, [r3, #4]
 8012d98:	697b      	ldr	r3, [r7, #20]
 8012d9a:	685b      	ldr	r3, [r3, #4]
 8012d9c:	891a      	ldrh	r2, [r3, #8]
 8012d9e:	89bb      	ldrh	r3, [r7, #12]
 8012da0:	1ad3      	subs	r3, r2, r3
 8012da2:	b29b      	uxth	r3, r3
 8012da4:	4619      	mov	r1, r3
 8012da6:	f7fa fac3 	bl	800d330 <pbuf_realloc>
  useg->len -= remainder;
 8012daa:	697b      	ldr	r3, [r7, #20]
 8012dac:	891a      	ldrh	r2, [r3, #8]
 8012dae:	89bb      	ldrh	r3, [r7, #12]
 8012db0:	1ad3      	subs	r3, r2, r3
 8012db2:	b29a      	uxth	r2, r3
 8012db4:	697b      	ldr	r3, [r7, #20]
 8012db6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012db8:	697b      	ldr	r3, [r7, #20]
 8012dba:	68db      	ldr	r3, [r3, #12]
 8012dbc:	899b      	ldrh	r3, [r3, #12]
 8012dbe:	b29c      	uxth	r4, r3
 8012dc0:	7efb      	ldrb	r3, [r7, #27]
 8012dc2:	b29b      	uxth	r3, r3
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f7f9 f847 	bl	800be58 <lwip_htons>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	461a      	mov	r2, r3
 8012dce:	697b      	ldr	r3, [r7, #20]
 8012dd0:	68db      	ldr	r3, [r3, #12]
 8012dd2:	4322      	orrs	r2, r4
 8012dd4:	b292      	uxth	r2, r2
 8012dd6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012dd8:	697b      	ldr	r3, [r7, #20]
 8012dda:	685b      	ldr	r3, [r3, #4]
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f7fa fcbb 	bl	800d758 <pbuf_clen>
 8012de2:	4603      	mov	r3, r0
 8012de4:	461a      	mov	r2, r3
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012dec:	4413      	add	r3, r2
 8012dee:	b29a      	uxth	r2, r3
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012df6:	69fb      	ldr	r3, [r7, #28]
 8012df8:	685b      	ldr	r3, [r3, #4]
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f7fa fcac 	bl	800d758 <pbuf_clen>
 8012e00:	4603      	mov	r3, r0
 8012e02:	461a      	mov	r2, r3
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012e0a:	4413      	add	r3, r2
 8012e0c:	b29a      	uxth	r2, r3
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	681a      	ldr	r2, [r3, #0]
 8012e18:	69fb      	ldr	r3, [r7, #28]
 8012e1a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012e1c:	697b      	ldr	r3, [r7, #20]
 8012e1e:	69fa      	ldr	r2, [r7, #28]
 8012e20:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012e22:	69fb      	ldr	r3, [r7, #28]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d103      	bne.n	8012e32 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012e32:	2300      	movs	r3, #0
 8012e34:	e016      	b.n	8012e64 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012e36:	bf00      	nop
 8012e38:	e002      	b.n	8012e40 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012e3a:	bf00      	nop
 8012e3c:	e000      	b.n	8012e40 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012e3e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012e40:	69fb      	ldr	r3, [r7, #28]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d006      	beq.n	8012e54 <tcp_split_unsent_seg+0x25c>
 8012e46:	4b09      	ldr	r3, [pc, #36]	; (8012e6c <tcp_split_unsent_seg+0x274>)
 8012e48:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012e4c:	490d      	ldr	r1, [pc, #52]	; (8012e84 <tcp_split_unsent_seg+0x28c>)
 8012e4e:	4809      	ldr	r0, [pc, #36]	; (8012e74 <tcp_split_unsent_seg+0x27c>)
 8012e50:	f004 fd1c 	bl	801788c <iprintf>
  if (p != NULL) {
 8012e54:	693b      	ldr	r3, [r7, #16]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d002      	beq.n	8012e60 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012e5a:	6938      	ldr	r0, [r7, #16]
 8012e5c:	f7fa fbee 	bl	800d63c <pbuf_free>
  }

  return ERR_MEM;
 8012e60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012e64:	4618      	mov	r0, r3
 8012e66:	3724      	adds	r7, #36	; 0x24
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	bd90      	pop	{r4, r7, pc}
 8012e6c:	0801adc8 	.word	0x0801adc8
 8012e70:	0801b15c 	.word	0x0801b15c
 8012e74:	0801ae1c 	.word	0x0801ae1c
 8012e78:	0801b180 	.word	0x0801b180
 8012e7c:	0801b1a4 	.word	0x0801b1a4
 8012e80:	0801b1b4 	.word	0x0801b1b4
 8012e84:	0801b1c4 	.word	0x0801b1c4

08012e88 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012e88:	b590      	push	{r4, r7, lr}
 8012e8a:	b085      	sub	sp, #20
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d106      	bne.n	8012ea4 <tcp_send_fin+0x1c>
 8012e96:	4b21      	ldr	r3, [pc, #132]	; (8012f1c <tcp_send_fin+0x94>)
 8012e98:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012e9c:	4920      	ldr	r1, [pc, #128]	; (8012f20 <tcp_send_fin+0x98>)
 8012e9e:	4821      	ldr	r0, [pc, #132]	; (8012f24 <tcp_send_fin+0x9c>)
 8012ea0:	f004 fcf4 	bl	801788c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d02e      	beq.n	8012f0a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012eb0:	60fb      	str	r3, [r7, #12]
 8012eb2:	e002      	b.n	8012eba <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d1f8      	bne.n	8012eb4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	68db      	ldr	r3, [r3, #12]
 8012ec6:	899b      	ldrh	r3, [r3, #12]
 8012ec8:	b29b      	uxth	r3, r3
 8012eca:	4618      	mov	r0, r3
 8012ecc:	f7f8 ffc4 	bl	800be58 <lwip_htons>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	b2db      	uxtb	r3, r3
 8012ed4:	f003 0307 	and.w	r3, r3, #7
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d116      	bne.n	8012f0a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	68db      	ldr	r3, [r3, #12]
 8012ee0:	899b      	ldrh	r3, [r3, #12]
 8012ee2:	b29c      	uxth	r4, r3
 8012ee4:	2001      	movs	r0, #1
 8012ee6:	f7f8 ffb7 	bl	800be58 <lwip_htons>
 8012eea:	4603      	mov	r3, r0
 8012eec:	461a      	mov	r2, r3
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	68db      	ldr	r3, [r3, #12]
 8012ef2:	4322      	orrs	r2, r4
 8012ef4:	b292      	uxth	r2, r2
 8012ef6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	8b5b      	ldrh	r3, [r3, #26]
 8012efc:	f043 0320 	orr.w	r3, r3, #32
 8012f00:	b29a      	uxth	r2, r3
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012f06:	2300      	movs	r3, #0
 8012f08:	e004      	b.n	8012f14 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012f0a:	2101      	movs	r1, #1
 8012f0c:	6878      	ldr	r0, [r7, #4]
 8012f0e:	f000 f80b 	bl	8012f28 <tcp_enqueue_flags>
 8012f12:	4603      	mov	r3, r0
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3714      	adds	r7, #20
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd90      	pop	{r4, r7, pc}
 8012f1c:	0801adc8 	.word	0x0801adc8
 8012f20:	0801b1d0 	.word	0x0801b1d0
 8012f24:	0801ae1c 	.word	0x0801ae1c

08012f28 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b08a      	sub	sp, #40	; 0x28
 8012f2c:	af02      	add	r7, sp, #8
 8012f2e:	6078      	str	r0, [r7, #4]
 8012f30:	460b      	mov	r3, r1
 8012f32:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012f34:	2300      	movs	r3, #0
 8012f36:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012f38:	2300      	movs	r3, #0
 8012f3a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012f3c:	78fb      	ldrb	r3, [r7, #3]
 8012f3e:	f003 0303 	and.w	r3, r3, #3
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d106      	bne.n	8012f54 <tcp_enqueue_flags+0x2c>
 8012f46:	4b67      	ldr	r3, [pc, #412]	; (80130e4 <tcp_enqueue_flags+0x1bc>)
 8012f48:	f240 4211 	movw	r2, #1041	; 0x411
 8012f4c:	4966      	ldr	r1, [pc, #408]	; (80130e8 <tcp_enqueue_flags+0x1c0>)
 8012f4e:	4867      	ldr	r0, [pc, #412]	; (80130ec <tcp_enqueue_flags+0x1c4>)
 8012f50:	f004 fc9c 	bl	801788c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d106      	bne.n	8012f68 <tcp_enqueue_flags+0x40>
 8012f5a:	4b62      	ldr	r3, [pc, #392]	; (80130e4 <tcp_enqueue_flags+0x1bc>)
 8012f5c:	f240 4213 	movw	r2, #1043	; 0x413
 8012f60:	4963      	ldr	r1, [pc, #396]	; (80130f0 <tcp_enqueue_flags+0x1c8>)
 8012f62:	4862      	ldr	r0, [pc, #392]	; (80130ec <tcp_enqueue_flags+0x1c4>)
 8012f64:	f004 fc92 	bl	801788c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012f68:	78fb      	ldrb	r3, [r7, #3]
 8012f6a:	f003 0302 	and.w	r3, r3, #2
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d001      	beq.n	8012f76 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012f72:	2301      	movs	r3, #1
 8012f74:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012f76:	7ffb      	ldrb	r3, [r7, #31]
 8012f78:	009b      	lsls	r3, r3, #2
 8012f7a:	b2db      	uxtb	r3, r3
 8012f7c:	f003 0304 	and.w	r3, r3, #4
 8012f80:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012f82:	7dfb      	ldrb	r3, [r7, #23]
 8012f84:	b29b      	uxth	r3, r3
 8012f86:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012f8a:	4619      	mov	r1, r3
 8012f8c:	2036      	movs	r0, #54	; 0x36
 8012f8e:	f7fa f871 	bl	800d074 <pbuf_alloc>
 8012f92:	6138      	str	r0, [r7, #16]
 8012f94:	693b      	ldr	r3, [r7, #16]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d109      	bne.n	8012fae <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	8b5b      	ldrh	r3, [r3, #26]
 8012f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012fa2:	b29a      	uxth	r2, r3
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8012fac:	e095      	b.n	80130da <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012fae:	693b      	ldr	r3, [r7, #16]
 8012fb0:	895a      	ldrh	r2, [r3, #10]
 8012fb2:	7dfb      	ldrb	r3, [r7, #23]
 8012fb4:	b29b      	uxth	r3, r3
 8012fb6:	429a      	cmp	r2, r3
 8012fb8:	d206      	bcs.n	8012fc8 <tcp_enqueue_flags+0xa0>
 8012fba:	4b4a      	ldr	r3, [pc, #296]	; (80130e4 <tcp_enqueue_flags+0x1bc>)
 8012fbc:	f240 4239 	movw	r2, #1081	; 0x439
 8012fc0:	494c      	ldr	r1, [pc, #304]	; (80130f4 <tcp_enqueue_flags+0x1cc>)
 8012fc2:	484a      	ldr	r0, [pc, #296]	; (80130ec <tcp_enqueue_flags+0x1c4>)
 8012fc4:	f004 fc62 	bl	801788c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012fcc:	78fa      	ldrb	r2, [r7, #3]
 8012fce:	7ffb      	ldrb	r3, [r7, #31]
 8012fd0:	9300      	str	r3, [sp, #0]
 8012fd2:	460b      	mov	r3, r1
 8012fd4:	6939      	ldr	r1, [r7, #16]
 8012fd6:	6878      	ldr	r0, [r7, #4]
 8012fd8:	f7ff f918 	bl	801220c <tcp_create_segment>
 8012fdc:	60f8      	str	r0, [r7, #12]
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d109      	bne.n	8012ff8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	8b5b      	ldrh	r3, [r3, #26]
 8012fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012fec:	b29a      	uxth	r2, r3
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8012ff6:	e070      	b.n	80130da <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	68db      	ldr	r3, [r3, #12]
 8012ffc:	f003 0303 	and.w	r3, r3, #3
 8013000:	2b00      	cmp	r3, #0
 8013002:	d006      	beq.n	8013012 <tcp_enqueue_flags+0xea>
 8013004:	4b37      	ldr	r3, [pc, #220]	; (80130e4 <tcp_enqueue_flags+0x1bc>)
 8013006:	f240 4242 	movw	r2, #1090	; 0x442
 801300a:	493b      	ldr	r1, [pc, #236]	; (80130f8 <tcp_enqueue_flags+0x1d0>)
 801300c:	4837      	ldr	r0, [pc, #220]	; (80130ec <tcp_enqueue_flags+0x1c4>)
 801300e:	f004 fc3d 	bl	801788c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	891b      	ldrh	r3, [r3, #8]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d006      	beq.n	8013028 <tcp_enqueue_flags+0x100>
 801301a:	4b32      	ldr	r3, [pc, #200]	; (80130e4 <tcp_enqueue_flags+0x1bc>)
 801301c:	f240 4243 	movw	r2, #1091	; 0x443
 8013020:	4936      	ldr	r1, [pc, #216]	; (80130fc <tcp_enqueue_flags+0x1d4>)
 8013022:	4832      	ldr	r0, [pc, #200]	; (80130ec <tcp_enqueue_flags+0x1c4>)
 8013024:	f004 fc32 	bl	801788c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801302c:	2b00      	cmp	r3, #0
 801302e:	d103      	bne.n	8013038 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	68fa      	ldr	r2, [r7, #12]
 8013034:	66da      	str	r2, [r3, #108]	; 0x6c
 8013036:	e00d      	b.n	8013054 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801303c:	61bb      	str	r3, [r7, #24]
 801303e:	e002      	b.n	8013046 <tcp_enqueue_flags+0x11e>
 8013040:	69bb      	ldr	r3, [r7, #24]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	61bb      	str	r3, [r7, #24]
 8013046:	69bb      	ldr	r3, [r7, #24]
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d1f8      	bne.n	8013040 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801304e:	69bb      	ldr	r3, [r7, #24]
 8013050:	68fa      	ldr	r2, [r7, #12]
 8013052:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	2200      	movs	r2, #0
 8013058:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801305c:	78fb      	ldrb	r3, [r7, #3]
 801305e:	f003 0302 	and.w	r3, r3, #2
 8013062:	2b00      	cmp	r3, #0
 8013064:	d104      	bne.n	8013070 <tcp_enqueue_flags+0x148>
 8013066:	78fb      	ldrb	r3, [r7, #3]
 8013068:	f003 0301 	and.w	r3, r3, #1
 801306c:	2b00      	cmp	r3, #0
 801306e:	d004      	beq.n	801307a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013074:	1c5a      	adds	r2, r3, #1
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801307a:	78fb      	ldrb	r3, [r7, #3]
 801307c:	f003 0301 	and.w	r3, r3, #1
 8013080:	2b00      	cmp	r3, #0
 8013082:	d006      	beq.n	8013092 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	8b5b      	ldrh	r3, [r3, #26]
 8013088:	f043 0320 	orr.w	r3, r3, #32
 801308c:	b29a      	uxth	r2, r3
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	685b      	ldr	r3, [r3, #4]
 8013096:	4618      	mov	r0, r3
 8013098:	f7fa fb5e 	bl	800d758 <pbuf_clen>
 801309c:	4603      	mov	r3, r0
 801309e:	461a      	mov	r2, r3
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80130a6:	4413      	add	r3, r2
 80130a8:	b29a      	uxth	r2, r3
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d00e      	beq.n	80130d8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d10a      	bne.n	80130d8 <tcp_enqueue_flags+0x1b0>
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d106      	bne.n	80130d8 <tcp_enqueue_flags+0x1b0>
 80130ca:	4b06      	ldr	r3, [pc, #24]	; (80130e4 <tcp_enqueue_flags+0x1bc>)
 80130cc:	f240 4265 	movw	r2, #1125	; 0x465
 80130d0:	490b      	ldr	r1, [pc, #44]	; (8013100 <tcp_enqueue_flags+0x1d8>)
 80130d2:	4806      	ldr	r0, [pc, #24]	; (80130ec <tcp_enqueue_flags+0x1c4>)
 80130d4:	f004 fbda 	bl	801788c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80130d8:	2300      	movs	r3, #0
}
 80130da:	4618      	mov	r0, r3
 80130dc:	3720      	adds	r7, #32
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}
 80130e2:	bf00      	nop
 80130e4:	0801adc8 	.word	0x0801adc8
 80130e8:	0801b1ec 	.word	0x0801b1ec
 80130ec:	0801ae1c 	.word	0x0801ae1c
 80130f0:	0801b244 	.word	0x0801b244
 80130f4:	0801b264 	.word	0x0801b264
 80130f8:	0801b2a0 	.word	0x0801b2a0
 80130fc:	0801b2b8 	.word	0x0801b2b8
 8013100:	0801b2e4 	.word	0x0801b2e4

08013104 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013104:	b5b0      	push	{r4, r5, r7, lr}
 8013106:	b08a      	sub	sp, #40	; 0x28
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d106      	bne.n	8013120 <tcp_output+0x1c>
 8013112:	4b8a      	ldr	r3, [pc, #552]	; (801333c <tcp_output+0x238>)
 8013114:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013118:	4989      	ldr	r1, [pc, #548]	; (8013340 <tcp_output+0x23c>)
 801311a:	488a      	ldr	r0, [pc, #552]	; (8013344 <tcp_output+0x240>)
 801311c:	f004 fbb6 	bl	801788c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	7d1b      	ldrb	r3, [r3, #20]
 8013124:	2b01      	cmp	r3, #1
 8013126:	d106      	bne.n	8013136 <tcp_output+0x32>
 8013128:	4b84      	ldr	r3, [pc, #528]	; (801333c <tcp_output+0x238>)
 801312a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801312e:	4986      	ldr	r1, [pc, #536]	; (8013348 <tcp_output+0x244>)
 8013130:	4884      	ldr	r0, [pc, #528]	; (8013344 <tcp_output+0x240>)
 8013132:	f004 fbab 	bl	801788c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013136:	4b85      	ldr	r3, [pc, #532]	; (801334c <tcp_output+0x248>)
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	687a      	ldr	r2, [r7, #4]
 801313c:	429a      	cmp	r2, r3
 801313e:	d101      	bne.n	8013144 <tcp_output+0x40>
    return ERR_OK;
 8013140:	2300      	movs	r3, #0
 8013142:	e1ce      	b.n	80134e2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013150:	4293      	cmp	r3, r2
 8013152:	bf28      	it	cs
 8013154:	4613      	movcs	r3, r2
 8013156:	b29b      	uxth	r3, r3
 8013158:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801315e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013162:	2b00      	cmp	r3, #0
 8013164:	d10b      	bne.n	801317e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	8b5b      	ldrh	r3, [r3, #26]
 801316a:	f003 0302 	and.w	r3, r3, #2
 801316e:	2b00      	cmp	r3, #0
 8013170:	f000 81aa 	beq.w	80134c8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013174:	6878      	ldr	r0, [r7, #4]
 8013176:	f000 fdcb 	bl	8013d10 <tcp_send_empty_ack>
 801317a:	4603      	mov	r3, r0
 801317c:	e1b1      	b.n	80134e2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801317e:	6879      	ldr	r1, [r7, #4]
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	3304      	adds	r3, #4
 8013184:	461a      	mov	r2, r3
 8013186:	6878      	ldr	r0, [r7, #4]
 8013188:	f7ff f824 	bl	80121d4 <tcp_route>
 801318c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801318e:	697b      	ldr	r3, [r7, #20]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d102      	bne.n	801319a <tcp_output+0x96>
    return ERR_RTE;
 8013194:	f06f 0303 	mvn.w	r3, #3
 8013198:	e1a3      	b.n	80134e2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d003      	beq.n	80131a8 <tcp_output+0xa4>
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d111      	bne.n	80131cc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80131a8:	697b      	ldr	r3, [r7, #20]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d002      	beq.n	80131b4 <tcp_output+0xb0>
 80131ae:	697b      	ldr	r3, [r7, #20]
 80131b0:	3304      	adds	r3, #4
 80131b2:	e000      	b.n	80131b6 <tcp_output+0xb2>
 80131b4:	2300      	movs	r3, #0
 80131b6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80131b8:	693b      	ldr	r3, [r7, #16]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d102      	bne.n	80131c4 <tcp_output+0xc0>
      return ERR_RTE;
 80131be:	f06f 0303 	mvn.w	r3, #3
 80131c2:	e18e      	b.n	80134e2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80131c4:	693b      	ldr	r3, [r7, #16]
 80131c6:	681a      	ldr	r2, [r3, #0]
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80131cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ce:	68db      	ldr	r3, [r3, #12]
 80131d0:	685b      	ldr	r3, [r3, #4]
 80131d2:	4618      	mov	r0, r3
 80131d4:	f7f8 fe55 	bl	800be82 <lwip_htonl>
 80131d8:	4602      	mov	r2, r0
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80131de:	1ad3      	subs	r3, r2, r3
 80131e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131e2:	8912      	ldrh	r2, [r2, #8]
 80131e4:	4413      	add	r3, r2
 80131e6:	69ba      	ldr	r2, [r7, #24]
 80131e8:	429a      	cmp	r2, r3
 80131ea:	d227      	bcs.n	801323c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80131f2:	461a      	mov	r2, r3
 80131f4:	69bb      	ldr	r3, [r7, #24]
 80131f6:	4293      	cmp	r3, r2
 80131f8:	d114      	bne.n	8013224 <tcp_output+0x120>
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d110      	bne.n	8013224 <tcp_output+0x120>
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013208:	2b00      	cmp	r3, #0
 801320a:	d10b      	bne.n	8013224 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2200      	movs	r2, #0
 8013210:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	2201      	movs	r2, #1
 8013218:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2200      	movs	r2, #0
 8013220:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	8b5b      	ldrh	r3, [r3, #26]
 8013228:	f003 0302 	and.w	r3, r3, #2
 801322c:	2b00      	cmp	r3, #0
 801322e:	f000 814d 	beq.w	80134cc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013232:	6878      	ldr	r0, [r7, #4]
 8013234:	f000 fd6c 	bl	8013d10 <tcp_send_empty_ack>
 8013238:	4603      	mov	r3, r0
 801323a:	e152      	b.n	80134e2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2200      	movs	r2, #0
 8013240:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013248:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801324a:	6a3b      	ldr	r3, [r7, #32]
 801324c:	2b00      	cmp	r3, #0
 801324e:	f000 811c 	beq.w	801348a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013252:	e002      	b.n	801325a <tcp_output+0x156>
 8013254:	6a3b      	ldr	r3, [r7, #32]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	623b      	str	r3, [r7, #32]
 801325a:	6a3b      	ldr	r3, [r7, #32]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d1f8      	bne.n	8013254 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013262:	e112      	b.n	801348a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013266:	68db      	ldr	r3, [r3, #12]
 8013268:	899b      	ldrh	r3, [r3, #12]
 801326a:	b29b      	uxth	r3, r3
 801326c:	4618      	mov	r0, r3
 801326e:	f7f8 fdf3 	bl	800be58 <lwip_htons>
 8013272:	4603      	mov	r3, r0
 8013274:	b2db      	uxtb	r3, r3
 8013276:	f003 0304 	and.w	r3, r3, #4
 801327a:	2b00      	cmp	r3, #0
 801327c:	d006      	beq.n	801328c <tcp_output+0x188>
 801327e:	4b2f      	ldr	r3, [pc, #188]	; (801333c <tcp_output+0x238>)
 8013280:	f240 5236 	movw	r2, #1334	; 0x536
 8013284:	4932      	ldr	r1, [pc, #200]	; (8013350 <tcp_output+0x24c>)
 8013286:	482f      	ldr	r0, [pc, #188]	; (8013344 <tcp_output+0x240>)
 8013288:	f004 fb00 	bl	801788c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013290:	2b00      	cmp	r3, #0
 8013292:	d01f      	beq.n	80132d4 <tcp_output+0x1d0>
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	8b5b      	ldrh	r3, [r3, #26]
 8013298:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801329c:	2b00      	cmp	r3, #0
 801329e:	d119      	bne.n	80132d4 <tcp_output+0x1d0>
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d00b      	beq.n	80132c0 <tcp_output+0x1bc>
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d110      	bne.n	80132d4 <tcp_output+0x1d0>
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132b6:	891a      	ldrh	r2, [r3, #8]
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80132bc:	429a      	cmp	r2, r3
 80132be:	d209      	bcs.n	80132d4 <tcp_output+0x1d0>
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d004      	beq.n	80132d4 <tcp_output+0x1d0>
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80132d0:	2b08      	cmp	r3, #8
 80132d2:	d901      	bls.n	80132d8 <tcp_output+0x1d4>
 80132d4:	2301      	movs	r3, #1
 80132d6:	e000      	b.n	80132da <tcp_output+0x1d6>
 80132d8:	2300      	movs	r3, #0
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d106      	bne.n	80132ec <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	8b5b      	ldrh	r3, [r3, #26]
 80132e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	f000 80e4 	beq.w	80134b4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	7d1b      	ldrb	r3, [r3, #20]
 80132f0:	2b02      	cmp	r3, #2
 80132f2:	d00d      	beq.n	8013310 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80132f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132f6:	68db      	ldr	r3, [r3, #12]
 80132f8:	899b      	ldrh	r3, [r3, #12]
 80132fa:	b29c      	uxth	r4, r3
 80132fc:	2010      	movs	r0, #16
 80132fe:	f7f8 fdab 	bl	800be58 <lwip_htons>
 8013302:	4603      	mov	r3, r0
 8013304:	461a      	mov	r2, r3
 8013306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013308:	68db      	ldr	r3, [r3, #12]
 801330a:	4322      	orrs	r2, r4
 801330c:	b292      	uxth	r2, r2
 801330e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013310:	697a      	ldr	r2, [r7, #20]
 8013312:	6879      	ldr	r1, [r7, #4]
 8013314:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013316:	f000 f909 	bl	801352c <tcp_output_segment>
 801331a:	4603      	mov	r3, r0
 801331c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801331e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d016      	beq.n	8013354 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	8b5b      	ldrh	r3, [r3, #26]
 801332a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801332e:	b29a      	uxth	r2, r3
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	835a      	strh	r2, [r3, #26]
      return err;
 8013334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013338:	e0d3      	b.n	80134e2 <tcp_output+0x3de>
 801333a:	bf00      	nop
 801333c:	0801adc8 	.word	0x0801adc8
 8013340:	0801b30c 	.word	0x0801b30c
 8013344:	0801ae1c 	.word	0x0801ae1c
 8013348:	0801b324 	.word	0x0801b324
 801334c:	2000d688 	.word	0x2000d688
 8013350:	0801b34c 	.word	0x0801b34c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013356:	681a      	ldr	r2, [r3, #0]
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	7d1b      	ldrb	r3, [r3, #20]
 8013360:	2b02      	cmp	r3, #2
 8013362:	d006      	beq.n	8013372 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	8b5b      	ldrh	r3, [r3, #26]
 8013368:	f023 0303 	bic.w	r3, r3, #3
 801336c:	b29a      	uxth	r2, r3
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013374:	68db      	ldr	r3, [r3, #12]
 8013376:	685b      	ldr	r3, [r3, #4]
 8013378:	4618      	mov	r0, r3
 801337a:	f7f8 fd82 	bl	800be82 <lwip_htonl>
 801337e:	4604      	mov	r4, r0
 8013380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013382:	891b      	ldrh	r3, [r3, #8]
 8013384:	461d      	mov	r5, r3
 8013386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013388:	68db      	ldr	r3, [r3, #12]
 801338a:	899b      	ldrh	r3, [r3, #12]
 801338c:	b29b      	uxth	r3, r3
 801338e:	4618      	mov	r0, r3
 8013390:	f7f8 fd62 	bl	800be58 <lwip_htons>
 8013394:	4603      	mov	r3, r0
 8013396:	b2db      	uxtb	r3, r3
 8013398:	f003 0303 	and.w	r3, r3, #3
 801339c:	2b00      	cmp	r3, #0
 801339e:	d001      	beq.n	80133a4 <tcp_output+0x2a0>
 80133a0:	2301      	movs	r3, #1
 80133a2:	e000      	b.n	80133a6 <tcp_output+0x2a2>
 80133a4:	2300      	movs	r3, #0
 80133a6:	442b      	add	r3, r5
 80133a8:	4423      	add	r3, r4
 80133aa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80133b0:	68bb      	ldr	r3, [r7, #8]
 80133b2:	1ad3      	subs	r3, r2, r3
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	da02      	bge.n	80133be <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	68ba      	ldr	r2, [r7, #8]
 80133bc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80133be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c0:	891b      	ldrh	r3, [r3, #8]
 80133c2:	461c      	mov	r4, r3
 80133c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c6:	68db      	ldr	r3, [r3, #12]
 80133c8:	899b      	ldrh	r3, [r3, #12]
 80133ca:	b29b      	uxth	r3, r3
 80133cc:	4618      	mov	r0, r3
 80133ce:	f7f8 fd43 	bl	800be58 <lwip_htons>
 80133d2:	4603      	mov	r3, r0
 80133d4:	b2db      	uxtb	r3, r3
 80133d6:	f003 0303 	and.w	r3, r3, #3
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d001      	beq.n	80133e2 <tcp_output+0x2de>
 80133de:	2301      	movs	r3, #1
 80133e0:	e000      	b.n	80133e4 <tcp_output+0x2e0>
 80133e2:	2300      	movs	r3, #0
 80133e4:	4423      	add	r3, r4
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d049      	beq.n	801347e <tcp_output+0x37a>
      seg->next = NULL;
 80133ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ec:	2200      	movs	r2, #0
 80133ee:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d105      	bne.n	8013404 <tcp_output+0x300>
        pcb->unacked = seg;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80133fc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80133fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013400:	623b      	str	r3, [r7, #32]
 8013402:	e03f      	b.n	8013484 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013406:	68db      	ldr	r3, [r3, #12]
 8013408:	685b      	ldr	r3, [r3, #4]
 801340a:	4618      	mov	r0, r3
 801340c:	f7f8 fd39 	bl	800be82 <lwip_htonl>
 8013410:	4604      	mov	r4, r0
 8013412:	6a3b      	ldr	r3, [r7, #32]
 8013414:	68db      	ldr	r3, [r3, #12]
 8013416:	685b      	ldr	r3, [r3, #4]
 8013418:	4618      	mov	r0, r3
 801341a:	f7f8 fd32 	bl	800be82 <lwip_htonl>
 801341e:	4603      	mov	r3, r0
 8013420:	1ae3      	subs	r3, r4, r3
 8013422:	2b00      	cmp	r3, #0
 8013424:	da24      	bge.n	8013470 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	3370      	adds	r3, #112	; 0x70
 801342a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801342c:	e002      	b.n	8013434 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801342e:	69fb      	ldr	r3, [r7, #28]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013434:	69fb      	ldr	r3, [r7, #28]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d011      	beq.n	8013460 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801343c:	69fb      	ldr	r3, [r7, #28]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	68db      	ldr	r3, [r3, #12]
 8013442:	685b      	ldr	r3, [r3, #4]
 8013444:	4618      	mov	r0, r3
 8013446:	f7f8 fd1c 	bl	800be82 <lwip_htonl>
 801344a:	4604      	mov	r4, r0
 801344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801344e:	68db      	ldr	r3, [r3, #12]
 8013450:	685b      	ldr	r3, [r3, #4]
 8013452:	4618      	mov	r0, r3
 8013454:	f7f8 fd15 	bl	800be82 <lwip_htonl>
 8013458:	4603      	mov	r3, r0
 801345a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801345c:	2b00      	cmp	r3, #0
 801345e:	dbe6      	blt.n	801342e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013460:	69fb      	ldr	r3, [r7, #28]
 8013462:	681a      	ldr	r2, [r3, #0]
 8013464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013466:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013468:	69fb      	ldr	r3, [r7, #28]
 801346a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801346c:	601a      	str	r2, [r3, #0]
 801346e:	e009      	b.n	8013484 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013470:	6a3b      	ldr	r3, [r7, #32]
 8013472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013474:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013476:	6a3b      	ldr	r3, [r7, #32]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	623b      	str	r3, [r7, #32]
 801347c:	e002      	b.n	8013484 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801347e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013480:	f7fb ff19 	bl	800f2b6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013488:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801348c:	2b00      	cmp	r3, #0
 801348e:	d012      	beq.n	80134b6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013492:	68db      	ldr	r3, [r3, #12]
 8013494:	685b      	ldr	r3, [r3, #4]
 8013496:	4618      	mov	r0, r3
 8013498:	f7f8 fcf3 	bl	800be82 <lwip_htonl>
 801349c:	4602      	mov	r2, r0
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80134a2:	1ad3      	subs	r3, r2, r3
 80134a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134a6:	8912      	ldrh	r2, [r2, #8]
 80134a8:	4413      	add	r3, r2
  while (seg != NULL &&
 80134aa:	69ba      	ldr	r2, [r7, #24]
 80134ac:	429a      	cmp	r2, r3
 80134ae:	f4bf aed9 	bcs.w	8013264 <tcp_output+0x160>
 80134b2:	e000      	b.n	80134b6 <tcp_output+0x3b2>
      break;
 80134b4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d108      	bne.n	80134d0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	2200      	movs	r2, #0
 80134c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80134c6:	e004      	b.n	80134d2 <tcp_output+0x3ce>
    goto output_done;
 80134c8:	bf00      	nop
 80134ca:	e002      	b.n	80134d2 <tcp_output+0x3ce>
    goto output_done;
 80134cc:	bf00      	nop
 80134ce:	e000      	b.n	80134d2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80134d0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	8b5b      	ldrh	r3, [r3, #26]
 80134d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80134da:	b29a      	uxth	r2, r3
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80134e0:	2300      	movs	r3, #0
}
 80134e2:	4618      	mov	r0, r3
 80134e4:	3728      	adds	r7, #40	; 0x28
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bdb0      	pop	{r4, r5, r7, pc}
 80134ea:	bf00      	nop

080134ec <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b082      	sub	sp, #8
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d106      	bne.n	8013508 <tcp_output_segment_busy+0x1c>
 80134fa:	4b09      	ldr	r3, [pc, #36]	; (8013520 <tcp_output_segment_busy+0x34>)
 80134fc:	f240 529a 	movw	r2, #1434	; 0x59a
 8013500:	4908      	ldr	r1, [pc, #32]	; (8013524 <tcp_output_segment_busy+0x38>)
 8013502:	4809      	ldr	r0, [pc, #36]	; (8013528 <tcp_output_segment_busy+0x3c>)
 8013504:	f004 f9c2 	bl	801788c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	685b      	ldr	r3, [r3, #4]
 801350c:	7b9b      	ldrb	r3, [r3, #14]
 801350e:	2b01      	cmp	r3, #1
 8013510:	d001      	beq.n	8013516 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013512:	2301      	movs	r3, #1
 8013514:	e000      	b.n	8013518 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013516:	2300      	movs	r3, #0
}
 8013518:	4618      	mov	r0, r3
 801351a:	3708      	adds	r7, #8
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}
 8013520:	0801adc8 	.word	0x0801adc8
 8013524:	0801b364 	.word	0x0801b364
 8013528:	0801ae1c 	.word	0x0801ae1c

0801352c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801352c:	b5b0      	push	{r4, r5, r7, lr}
 801352e:	b08c      	sub	sp, #48	; 0x30
 8013530:	af04      	add	r7, sp, #16
 8013532:	60f8      	str	r0, [r7, #12]
 8013534:	60b9      	str	r1, [r7, #8]
 8013536:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d106      	bne.n	801354c <tcp_output_segment+0x20>
 801353e:	4b64      	ldr	r3, [pc, #400]	; (80136d0 <tcp_output_segment+0x1a4>)
 8013540:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013544:	4963      	ldr	r1, [pc, #396]	; (80136d4 <tcp_output_segment+0x1a8>)
 8013546:	4864      	ldr	r0, [pc, #400]	; (80136d8 <tcp_output_segment+0x1ac>)
 8013548:	f004 f9a0 	bl	801788c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d106      	bne.n	8013560 <tcp_output_segment+0x34>
 8013552:	4b5f      	ldr	r3, [pc, #380]	; (80136d0 <tcp_output_segment+0x1a4>)
 8013554:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013558:	4960      	ldr	r1, [pc, #384]	; (80136dc <tcp_output_segment+0x1b0>)
 801355a:	485f      	ldr	r0, [pc, #380]	; (80136d8 <tcp_output_segment+0x1ac>)
 801355c:	f004 f996 	bl	801788c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d106      	bne.n	8013574 <tcp_output_segment+0x48>
 8013566:	4b5a      	ldr	r3, [pc, #360]	; (80136d0 <tcp_output_segment+0x1a4>)
 8013568:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801356c:	495c      	ldr	r1, [pc, #368]	; (80136e0 <tcp_output_segment+0x1b4>)
 801356e:	485a      	ldr	r0, [pc, #360]	; (80136d8 <tcp_output_segment+0x1ac>)
 8013570:	f004 f98c 	bl	801788c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013574:	68f8      	ldr	r0, [r7, #12]
 8013576:	f7ff ffb9 	bl	80134ec <tcp_output_segment_busy>
 801357a:	4603      	mov	r3, r0
 801357c:	2b00      	cmp	r3, #0
 801357e:	d001      	beq.n	8013584 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013580:	2300      	movs	r3, #0
 8013582:	e0a1      	b.n	80136c8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013584:	68bb      	ldr	r3, [r7, #8]
 8013586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	68dc      	ldr	r4, [r3, #12]
 801358c:	4610      	mov	r0, r2
 801358e:	f7f8 fc78 	bl	800be82 <lwip_htonl>
 8013592:	4603      	mov	r3, r0
 8013594:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013596:	68bb      	ldr	r3, [r7, #8]
 8013598:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	68dc      	ldr	r4, [r3, #12]
 801359e:	4610      	mov	r0, r2
 80135a0:	f7f8 fc5a 	bl	800be58 <lwip_htons>
 80135a4:	4603      	mov	r3, r0
 80135a6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135ac:	68ba      	ldr	r2, [r7, #8]
 80135ae:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80135b0:	441a      	add	r2, r3
 80135b2:	68bb      	ldr	r3, [r7, #8]
 80135b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	68db      	ldr	r3, [r3, #12]
 80135ba:	3314      	adds	r3, #20
 80135bc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	7a9b      	ldrb	r3, [r3, #10]
 80135c2:	f003 0301 	and.w	r3, r3, #1
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d015      	beq.n	80135f6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80135ca:	68bb      	ldr	r3, [r7, #8]
 80135cc:	3304      	adds	r3, #4
 80135ce:	461a      	mov	r2, r3
 80135d0:	6879      	ldr	r1, [r7, #4]
 80135d2:	f44f 7006 	mov.w	r0, #536	; 0x218
 80135d6:	f7fc fa33 	bl	800fa40 <tcp_eff_send_mss_netif>
 80135da:	4603      	mov	r3, r0
 80135dc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80135de:	8b7b      	ldrh	r3, [r7, #26]
 80135e0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80135e4:	4618      	mov	r0, r3
 80135e6:	f7f8 fc4c 	bl	800be82 <lwip_htonl>
 80135ea:	4602      	mov	r2, r0
 80135ec:	69fb      	ldr	r3, [r7, #28]
 80135ee:	601a      	str	r2, [r3, #0]
    opts += 1;
 80135f0:	69fb      	ldr	r3, [r7, #28]
 80135f2:	3304      	adds	r3, #4
 80135f4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80135f6:	68bb      	ldr	r3, [r7, #8]
 80135f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	da02      	bge.n	8013606 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	2200      	movs	r2, #0
 8013604:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013606:	68bb      	ldr	r3, [r7, #8]
 8013608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801360a:	2b00      	cmp	r3, #0
 801360c:	d10c      	bne.n	8013628 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801360e:	4b35      	ldr	r3, [pc, #212]	; (80136e4 <tcp_output_segment+0x1b8>)
 8013610:	681a      	ldr	r2, [r3, #0]
 8013612:	68bb      	ldr	r3, [r7, #8]
 8013614:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	68db      	ldr	r3, [r3, #12]
 801361a:	685b      	ldr	r3, [r3, #4]
 801361c:	4618      	mov	r0, r3
 801361e:	f7f8 fc30 	bl	800be82 <lwip_htonl>
 8013622:	4602      	mov	r2, r0
 8013624:	68bb      	ldr	r3, [r7, #8]
 8013626:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	68da      	ldr	r2, [r3, #12]
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	685b      	ldr	r3, [r3, #4]
 8013630:	685b      	ldr	r3, [r3, #4]
 8013632:	1ad3      	subs	r3, r2, r3
 8013634:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	685b      	ldr	r3, [r3, #4]
 801363a:	8959      	ldrh	r1, [r3, #10]
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	685b      	ldr	r3, [r3, #4]
 8013640:	8b3a      	ldrh	r2, [r7, #24]
 8013642:	1a8a      	subs	r2, r1, r2
 8013644:	b292      	uxth	r2, r2
 8013646:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	685b      	ldr	r3, [r3, #4]
 801364c:	8919      	ldrh	r1, [r3, #8]
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	685b      	ldr	r3, [r3, #4]
 8013652:	8b3a      	ldrh	r2, [r7, #24]
 8013654:	1a8a      	subs	r2, r1, r2
 8013656:	b292      	uxth	r2, r2
 8013658:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	685b      	ldr	r3, [r3, #4]
 801365e:	68fa      	ldr	r2, [r7, #12]
 8013660:	68d2      	ldr	r2, [r2, #12]
 8013662:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	68db      	ldr	r3, [r3, #12]
 8013668:	2200      	movs	r2, #0
 801366a:	741a      	strb	r2, [r3, #16]
 801366c:	2200      	movs	r2, #0
 801366e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	68da      	ldr	r2, [r3, #12]
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	7a9b      	ldrb	r3, [r3, #10]
 8013678:	f003 0301 	and.w	r3, r3, #1
 801367c:	2b00      	cmp	r3, #0
 801367e:	d001      	beq.n	8013684 <tcp_output_segment+0x158>
 8013680:	2318      	movs	r3, #24
 8013682:	e000      	b.n	8013686 <tcp_output_segment+0x15a>
 8013684:	2314      	movs	r3, #20
 8013686:	4413      	add	r3, r2
 8013688:	69fa      	ldr	r2, [r7, #28]
 801368a:	429a      	cmp	r2, r3
 801368c:	d006      	beq.n	801369c <tcp_output_segment+0x170>
 801368e:	4b10      	ldr	r3, [pc, #64]	; (80136d0 <tcp_output_segment+0x1a4>)
 8013690:	f240 621c 	movw	r2, #1564	; 0x61c
 8013694:	4914      	ldr	r1, [pc, #80]	; (80136e8 <tcp_output_segment+0x1bc>)
 8013696:	4810      	ldr	r0, [pc, #64]	; (80136d8 <tcp_output_segment+0x1ac>)
 8013698:	f004 f8f8 	bl	801788c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	6858      	ldr	r0, [r3, #4]
 80136a0:	68b9      	ldr	r1, [r7, #8]
 80136a2:	68bb      	ldr	r3, [r7, #8]
 80136a4:	1d1c      	adds	r4, r3, #4
 80136a6:	68bb      	ldr	r3, [r7, #8]
 80136a8:	7add      	ldrb	r5, [r3, #11]
 80136aa:	68bb      	ldr	r3, [r7, #8]
 80136ac:	7a9b      	ldrb	r3, [r3, #10]
 80136ae:	687a      	ldr	r2, [r7, #4]
 80136b0:	9202      	str	r2, [sp, #8]
 80136b2:	2206      	movs	r2, #6
 80136b4:	9201      	str	r2, [sp, #4]
 80136b6:	9300      	str	r3, [sp, #0]
 80136b8:	462b      	mov	r3, r5
 80136ba:	4622      	mov	r2, r4
 80136bc:	f002 fe02 	bl	80162c4 <ip4_output_if>
 80136c0:	4603      	mov	r3, r0
 80136c2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80136c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80136c8:	4618      	mov	r0, r3
 80136ca:	3720      	adds	r7, #32
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bdb0      	pop	{r4, r5, r7, pc}
 80136d0:	0801adc8 	.word	0x0801adc8
 80136d4:	0801b38c 	.word	0x0801b38c
 80136d8:	0801ae1c 	.word	0x0801ae1c
 80136dc:	0801b3ac 	.word	0x0801b3ac
 80136e0:	0801b3cc 	.word	0x0801b3cc
 80136e4:	2000d63c 	.word	0x2000d63c
 80136e8:	0801b3f0 	.word	0x0801b3f0

080136ec <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80136ec:	b5b0      	push	{r4, r5, r7, lr}
 80136ee:	b084      	sub	sp, #16
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d106      	bne.n	8013708 <tcp_rexmit_rto_prepare+0x1c>
 80136fa:	4b31      	ldr	r3, [pc, #196]	; (80137c0 <tcp_rexmit_rto_prepare+0xd4>)
 80136fc:	f240 6263 	movw	r2, #1635	; 0x663
 8013700:	4930      	ldr	r1, [pc, #192]	; (80137c4 <tcp_rexmit_rto_prepare+0xd8>)
 8013702:	4831      	ldr	r0, [pc, #196]	; (80137c8 <tcp_rexmit_rto_prepare+0xdc>)
 8013704:	f004 f8c2 	bl	801788c <iprintf>

  if (pcb->unacked == NULL) {
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801370c:	2b00      	cmp	r3, #0
 801370e:	d102      	bne.n	8013716 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013710:	f06f 0305 	mvn.w	r3, #5
 8013714:	e050      	b.n	80137b8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801371a:	60fb      	str	r3, [r7, #12]
 801371c:	e00b      	b.n	8013736 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801371e:	68f8      	ldr	r0, [r7, #12]
 8013720:	f7ff fee4 	bl	80134ec <tcp_output_segment_busy>
 8013724:	4603      	mov	r3, r0
 8013726:	2b00      	cmp	r3, #0
 8013728:	d002      	beq.n	8013730 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801372a:	f06f 0305 	mvn.w	r3, #5
 801372e:	e043      	b.n	80137b8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	60fb      	str	r3, [r7, #12]
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d1ef      	bne.n	801371e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801373e:	68f8      	ldr	r0, [r7, #12]
 8013740:	f7ff fed4 	bl	80134ec <tcp_output_segment_busy>
 8013744:	4603      	mov	r3, r0
 8013746:	2b00      	cmp	r3, #0
 8013748:	d002      	beq.n	8013750 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801374a:	f06f 0305 	mvn.w	r3, #5
 801374e:	e033      	b.n	80137b8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	2200      	movs	r2, #0
 8013764:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	8b5b      	ldrh	r3, [r3, #26]
 801376a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801376e:	b29a      	uxth	r2, r3
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	68db      	ldr	r3, [r3, #12]
 8013778:	685b      	ldr	r3, [r3, #4]
 801377a:	4618      	mov	r0, r3
 801377c:	f7f8 fb81 	bl	800be82 <lwip_htonl>
 8013780:	4604      	mov	r4, r0
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	891b      	ldrh	r3, [r3, #8]
 8013786:	461d      	mov	r5, r3
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	68db      	ldr	r3, [r3, #12]
 801378c:	899b      	ldrh	r3, [r3, #12]
 801378e:	b29b      	uxth	r3, r3
 8013790:	4618      	mov	r0, r3
 8013792:	f7f8 fb61 	bl	800be58 <lwip_htons>
 8013796:	4603      	mov	r3, r0
 8013798:	b2db      	uxtb	r3, r3
 801379a:	f003 0303 	and.w	r3, r3, #3
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d001      	beq.n	80137a6 <tcp_rexmit_rto_prepare+0xba>
 80137a2:	2301      	movs	r3, #1
 80137a4:	e000      	b.n	80137a8 <tcp_rexmit_rto_prepare+0xbc>
 80137a6:	2300      	movs	r3, #0
 80137a8:	442b      	add	r3, r5
 80137aa:	18e2      	adds	r2, r4, r3
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	2200      	movs	r2, #0
 80137b4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80137b6:	2300      	movs	r3, #0
}
 80137b8:	4618      	mov	r0, r3
 80137ba:	3710      	adds	r7, #16
 80137bc:	46bd      	mov	sp, r7
 80137be:	bdb0      	pop	{r4, r5, r7, pc}
 80137c0:	0801adc8 	.word	0x0801adc8
 80137c4:	0801b404 	.word	0x0801b404
 80137c8:	0801ae1c 	.word	0x0801ae1c

080137cc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b082      	sub	sp, #8
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d106      	bne.n	80137e8 <tcp_rexmit_rto_commit+0x1c>
 80137da:	4b0d      	ldr	r3, [pc, #52]	; (8013810 <tcp_rexmit_rto_commit+0x44>)
 80137dc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80137e0:	490c      	ldr	r1, [pc, #48]	; (8013814 <tcp_rexmit_rto_commit+0x48>)
 80137e2:	480d      	ldr	r0, [pc, #52]	; (8013818 <tcp_rexmit_rto_commit+0x4c>)
 80137e4:	f004 f852 	bl	801788c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80137ee:	2bff      	cmp	r3, #255	; 0xff
 80137f0:	d007      	beq.n	8013802 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80137f8:	3301      	adds	r3, #1
 80137fa:	b2da      	uxtb	r2, r3
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013802:	6878      	ldr	r0, [r7, #4]
 8013804:	f7ff fc7e 	bl	8013104 <tcp_output>
}
 8013808:	bf00      	nop
 801380a:	3708      	adds	r7, #8
 801380c:	46bd      	mov	sp, r7
 801380e:	bd80      	pop	{r7, pc}
 8013810:	0801adc8 	.word	0x0801adc8
 8013814:	0801b428 	.word	0x0801b428
 8013818:	0801ae1c 	.word	0x0801ae1c

0801381c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801381c:	b580      	push	{r7, lr}
 801381e:	b082      	sub	sp, #8
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d106      	bne.n	8013838 <tcp_rexmit_rto+0x1c>
 801382a:	4b0a      	ldr	r3, [pc, #40]	; (8013854 <tcp_rexmit_rto+0x38>)
 801382c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013830:	4909      	ldr	r1, [pc, #36]	; (8013858 <tcp_rexmit_rto+0x3c>)
 8013832:	480a      	ldr	r0, [pc, #40]	; (801385c <tcp_rexmit_rto+0x40>)
 8013834:	f004 f82a 	bl	801788c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013838:	6878      	ldr	r0, [r7, #4]
 801383a:	f7ff ff57 	bl	80136ec <tcp_rexmit_rto_prepare>
 801383e:	4603      	mov	r3, r0
 8013840:	2b00      	cmp	r3, #0
 8013842:	d102      	bne.n	801384a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013844:	6878      	ldr	r0, [r7, #4]
 8013846:	f7ff ffc1 	bl	80137cc <tcp_rexmit_rto_commit>
  }
}
 801384a:	bf00      	nop
 801384c:	3708      	adds	r7, #8
 801384e:	46bd      	mov	sp, r7
 8013850:	bd80      	pop	{r7, pc}
 8013852:	bf00      	nop
 8013854:	0801adc8 	.word	0x0801adc8
 8013858:	0801b44c 	.word	0x0801b44c
 801385c:	0801ae1c 	.word	0x0801ae1c

08013860 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013860:	b590      	push	{r4, r7, lr}
 8013862:	b085      	sub	sp, #20
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d106      	bne.n	801387c <tcp_rexmit+0x1c>
 801386e:	4b2f      	ldr	r3, [pc, #188]	; (801392c <tcp_rexmit+0xcc>)
 8013870:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013874:	492e      	ldr	r1, [pc, #184]	; (8013930 <tcp_rexmit+0xd0>)
 8013876:	482f      	ldr	r0, [pc, #188]	; (8013934 <tcp_rexmit+0xd4>)
 8013878:	f004 f808 	bl	801788c <iprintf>

  if (pcb->unacked == NULL) {
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013880:	2b00      	cmp	r3, #0
 8013882:	d102      	bne.n	801388a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013884:	f06f 0305 	mvn.w	r3, #5
 8013888:	e04c      	b.n	8013924 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801388e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013890:	68b8      	ldr	r0, [r7, #8]
 8013892:	f7ff fe2b 	bl	80134ec <tcp_output_segment_busy>
 8013896:	4603      	mov	r3, r0
 8013898:	2b00      	cmp	r3, #0
 801389a:	d002      	beq.n	80138a2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801389c:	f06f 0305 	mvn.w	r3, #5
 80138a0:	e040      	b.n	8013924 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80138a2:	68bb      	ldr	r3, [r7, #8]
 80138a4:	681a      	ldr	r2, [r3, #0]
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	336c      	adds	r3, #108	; 0x6c
 80138ae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80138b0:	e002      	b.n	80138b8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d011      	beq.n	80138e4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	68db      	ldr	r3, [r3, #12]
 80138c6:	685b      	ldr	r3, [r3, #4]
 80138c8:	4618      	mov	r0, r3
 80138ca:	f7f8 fada 	bl	800be82 <lwip_htonl>
 80138ce:	4604      	mov	r4, r0
 80138d0:	68bb      	ldr	r3, [r7, #8]
 80138d2:	68db      	ldr	r3, [r3, #12]
 80138d4:	685b      	ldr	r3, [r3, #4]
 80138d6:	4618      	mov	r0, r3
 80138d8:	f7f8 fad3 	bl	800be82 <lwip_htonl>
 80138dc:	4603      	mov	r3, r0
 80138de:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	dbe6      	blt.n	80138b2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	681a      	ldr	r2, [r3, #0]
 80138e8:	68bb      	ldr	r3, [r7, #8]
 80138ea:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	68ba      	ldr	r2, [r7, #8]
 80138f0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80138f2:	68bb      	ldr	r3, [r7, #8]
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d103      	bne.n	8013902 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	2200      	movs	r2, #0
 80138fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013908:	2bff      	cmp	r3, #255	; 0xff
 801390a:	d007      	beq.n	801391c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013912:	3301      	adds	r3, #1
 8013914:	b2da      	uxtb	r2, r3
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	2200      	movs	r2, #0
 8013920:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013922:	2300      	movs	r3, #0
}
 8013924:	4618      	mov	r0, r3
 8013926:	3714      	adds	r7, #20
 8013928:	46bd      	mov	sp, r7
 801392a:	bd90      	pop	{r4, r7, pc}
 801392c:	0801adc8 	.word	0x0801adc8
 8013930:	0801b468 	.word	0x0801b468
 8013934:	0801ae1c 	.word	0x0801ae1c

08013938 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013938:	b580      	push	{r7, lr}
 801393a:	b082      	sub	sp, #8
 801393c:	af00      	add	r7, sp, #0
 801393e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d106      	bne.n	8013954 <tcp_rexmit_fast+0x1c>
 8013946:	4b2a      	ldr	r3, [pc, #168]	; (80139f0 <tcp_rexmit_fast+0xb8>)
 8013948:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801394c:	4929      	ldr	r1, [pc, #164]	; (80139f4 <tcp_rexmit_fast+0xbc>)
 801394e:	482a      	ldr	r0, [pc, #168]	; (80139f8 <tcp_rexmit_fast+0xc0>)
 8013950:	f003 ff9c 	bl	801788c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013958:	2b00      	cmp	r3, #0
 801395a:	d044      	beq.n	80139e6 <tcp_rexmit_fast+0xae>
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	8b5b      	ldrh	r3, [r3, #26]
 8013960:	f003 0304 	and.w	r3, r3, #4
 8013964:	2b00      	cmp	r3, #0
 8013966:	d13e      	bne.n	80139e6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013968:	6878      	ldr	r0, [r7, #4]
 801396a:	f7ff ff79 	bl	8013860 <tcp_rexmit>
 801396e:	4603      	mov	r3, r0
 8013970:	2b00      	cmp	r3, #0
 8013972:	d138      	bne.n	80139e6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013980:	4293      	cmp	r3, r2
 8013982:	bf28      	it	cs
 8013984:	4613      	movcs	r3, r2
 8013986:	b29b      	uxth	r3, r3
 8013988:	0fda      	lsrs	r2, r3, #31
 801398a:	4413      	add	r3, r2
 801398c:	105b      	asrs	r3, r3, #1
 801398e:	b29a      	uxth	r2, r3
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801399c:	461a      	mov	r2, r3
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139a2:	005b      	lsls	r3, r3, #1
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d206      	bcs.n	80139b6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139ac:	005b      	lsls	r3, r3, #1
 80139ae:	b29a      	uxth	r2, r3
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139c0:	4619      	mov	r1, r3
 80139c2:	0049      	lsls	r1, r1, #1
 80139c4:	440b      	add	r3, r1
 80139c6:	b29b      	uxth	r3, r3
 80139c8:	4413      	add	r3, r2
 80139ca:	b29a      	uxth	r2, r3
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	8b5b      	ldrh	r3, [r3, #26]
 80139d6:	f043 0304 	orr.w	r3, r3, #4
 80139da:	b29a      	uxth	r2, r3
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	2200      	movs	r2, #0
 80139e4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80139e6:	bf00      	nop
 80139e8:	3708      	adds	r7, #8
 80139ea:	46bd      	mov	sp, r7
 80139ec:	bd80      	pop	{r7, pc}
 80139ee:	bf00      	nop
 80139f0:	0801adc8 	.word	0x0801adc8
 80139f4:	0801b480 	.word	0x0801b480
 80139f8:	0801ae1c 	.word	0x0801ae1c

080139fc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b086      	sub	sp, #24
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	60f8      	str	r0, [r7, #12]
 8013a04:	607b      	str	r3, [r7, #4]
 8013a06:	460b      	mov	r3, r1
 8013a08:	817b      	strh	r3, [r7, #10]
 8013a0a:	4613      	mov	r3, r2
 8013a0c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013a0e:	897a      	ldrh	r2, [r7, #10]
 8013a10:	893b      	ldrh	r3, [r7, #8]
 8013a12:	4413      	add	r3, r2
 8013a14:	b29b      	uxth	r3, r3
 8013a16:	3314      	adds	r3, #20
 8013a18:	b29b      	uxth	r3, r3
 8013a1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013a1e:	4619      	mov	r1, r3
 8013a20:	2022      	movs	r0, #34	; 0x22
 8013a22:	f7f9 fb27 	bl	800d074 <pbuf_alloc>
 8013a26:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013a28:	697b      	ldr	r3, [r7, #20]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d04d      	beq.n	8013aca <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013a2e:	897b      	ldrh	r3, [r7, #10]
 8013a30:	3313      	adds	r3, #19
 8013a32:	697a      	ldr	r2, [r7, #20]
 8013a34:	8952      	ldrh	r2, [r2, #10]
 8013a36:	4293      	cmp	r3, r2
 8013a38:	db06      	blt.n	8013a48 <tcp_output_alloc_header_common+0x4c>
 8013a3a:	4b26      	ldr	r3, [pc, #152]	; (8013ad4 <tcp_output_alloc_header_common+0xd8>)
 8013a3c:	f240 7223 	movw	r2, #1827	; 0x723
 8013a40:	4925      	ldr	r1, [pc, #148]	; (8013ad8 <tcp_output_alloc_header_common+0xdc>)
 8013a42:	4826      	ldr	r0, [pc, #152]	; (8013adc <tcp_output_alloc_header_common+0xe0>)
 8013a44:	f003 ff22 	bl	801788c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013a48:	697b      	ldr	r3, [r7, #20]
 8013a4a:	685b      	ldr	r3, [r3, #4]
 8013a4c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013a4e:	8c3b      	ldrh	r3, [r7, #32]
 8013a50:	4618      	mov	r0, r3
 8013a52:	f7f8 fa01 	bl	800be58 <lwip_htons>
 8013a56:	4603      	mov	r3, r0
 8013a58:	461a      	mov	r2, r3
 8013a5a:	693b      	ldr	r3, [r7, #16]
 8013a5c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013a5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013a60:	4618      	mov	r0, r3
 8013a62:	f7f8 f9f9 	bl	800be58 <lwip_htons>
 8013a66:	4603      	mov	r3, r0
 8013a68:	461a      	mov	r2, r3
 8013a6a:	693b      	ldr	r3, [r7, #16]
 8013a6c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013a6e:	693b      	ldr	r3, [r7, #16]
 8013a70:	687a      	ldr	r2, [r7, #4]
 8013a72:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013a74:	68f8      	ldr	r0, [r7, #12]
 8013a76:	f7f8 fa04 	bl	800be82 <lwip_htonl>
 8013a7a:	4602      	mov	r2, r0
 8013a7c:	693b      	ldr	r3, [r7, #16]
 8013a7e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013a80:	897b      	ldrh	r3, [r7, #10]
 8013a82:	089b      	lsrs	r3, r3, #2
 8013a84:	b29b      	uxth	r3, r3
 8013a86:	3305      	adds	r3, #5
 8013a88:	b29b      	uxth	r3, r3
 8013a8a:	031b      	lsls	r3, r3, #12
 8013a8c:	b29a      	uxth	r2, r3
 8013a8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013a92:	b29b      	uxth	r3, r3
 8013a94:	4313      	orrs	r3, r2
 8013a96:	b29b      	uxth	r3, r3
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f7f8 f9dd 	bl	800be58 <lwip_htons>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	461a      	mov	r2, r3
 8013aa2:	693b      	ldr	r3, [r7, #16]
 8013aa4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013aa6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f7f8 f9d5 	bl	800be58 <lwip_htons>
 8013aae:	4603      	mov	r3, r0
 8013ab0:	461a      	mov	r2, r3
 8013ab2:	693b      	ldr	r3, [r7, #16]
 8013ab4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013ab6:	693b      	ldr	r3, [r7, #16]
 8013ab8:	2200      	movs	r2, #0
 8013aba:	741a      	strb	r2, [r3, #16]
 8013abc:	2200      	movs	r2, #0
 8013abe:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013ac0:	693b      	ldr	r3, [r7, #16]
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	749a      	strb	r2, [r3, #18]
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013aca:	697b      	ldr	r3, [r7, #20]
}
 8013acc:	4618      	mov	r0, r3
 8013ace:	3718      	adds	r7, #24
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd80      	pop	{r7, pc}
 8013ad4:	0801adc8 	.word	0x0801adc8
 8013ad8:	0801b4a0 	.word	0x0801b4a0
 8013adc:	0801ae1c 	.word	0x0801ae1c

08013ae0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013ae0:	b5b0      	push	{r4, r5, r7, lr}
 8013ae2:	b08a      	sub	sp, #40	; 0x28
 8013ae4:	af04      	add	r7, sp, #16
 8013ae6:	60f8      	str	r0, [r7, #12]
 8013ae8:	607b      	str	r3, [r7, #4]
 8013aea:	460b      	mov	r3, r1
 8013aec:	817b      	strh	r3, [r7, #10]
 8013aee:	4613      	mov	r3, r2
 8013af0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d106      	bne.n	8013b06 <tcp_output_alloc_header+0x26>
 8013af8:	4b15      	ldr	r3, [pc, #84]	; (8013b50 <tcp_output_alloc_header+0x70>)
 8013afa:	f240 7242 	movw	r2, #1858	; 0x742
 8013afe:	4915      	ldr	r1, [pc, #84]	; (8013b54 <tcp_output_alloc_header+0x74>)
 8013b00:	4815      	ldr	r0, [pc, #84]	; (8013b58 <tcp_output_alloc_header+0x78>)
 8013b02:	f003 fec3 	bl	801788c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	8adb      	ldrh	r3, [r3, #22]
 8013b0e:	68fa      	ldr	r2, [r7, #12]
 8013b10:	8b12      	ldrh	r2, [r2, #24]
 8013b12:	68f9      	ldr	r1, [r7, #12]
 8013b14:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013b16:	893d      	ldrh	r5, [r7, #8]
 8013b18:	897c      	ldrh	r4, [r7, #10]
 8013b1a:	9103      	str	r1, [sp, #12]
 8013b1c:	2110      	movs	r1, #16
 8013b1e:	9102      	str	r1, [sp, #8]
 8013b20:	9201      	str	r2, [sp, #4]
 8013b22:	9300      	str	r3, [sp, #0]
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	462a      	mov	r2, r5
 8013b28:	4621      	mov	r1, r4
 8013b2a:	f7ff ff67 	bl	80139fc <tcp_output_alloc_header_common>
 8013b2e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013b30:	697b      	ldr	r3, [r7, #20]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d006      	beq.n	8013b44 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b3a:	68fa      	ldr	r2, [r7, #12]
 8013b3c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013b3e:	441a      	add	r2, r3
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013b44:	697b      	ldr	r3, [r7, #20]
}
 8013b46:	4618      	mov	r0, r3
 8013b48:	3718      	adds	r7, #24
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8013b4e:	bf00      	nop
 8013b50:	0801adc8 	.word	0x0801adc8
 8013b54:	0801b4d0 	.word	0x0801b4d0
 8013b58:	0801ae1c 	.word	0x0801ae1c

08013b5c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b088      	sub	sp, #32
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	60f8      	str	r0, [r7, #12]
 8013b64:	60b9      	str	r1, [r7, #8]
 8013b66:	4611      	mov	r1, r2
 8013b68:	461a      	mov	r2, r3
 8013b6a:	460b      	mov	r3, r1
 8013b6c:	71fb      	strb	r3, [r7, #7]
 8013b6e:	4613      	mov	r3, r2
 8013b70:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013b72:	2300      	movs	r3, #0
 8013b74:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013b76:	68bb      	ldr	r3, [r7, #8]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d106      	bne.n	8013b8a <tcp_output_fill_options+0x2e>
 8013b7c:	4b12      	ldr	r3, [pc, #72]	; (8013bc8 <tcp_output_fill_options+0x6c>)
 8013b7e:	f240 7256 	movw	r2, #1878	; 0x756
 8013b82:	4912      	ldr	r1, [pc, #72]	; (8013bcc <tcp_output_fill_options+0x70>)
 8013b84:	4812      	ldr	r0, [pc, #72]	; (8013bd0 <tcp_output_fill_options+0x74>)
 8013b86:	f003 fe81 	bl	801788c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013b8a:	68bb      	ldr	r3, [r7, #8]
 8013b8c:	685b      	ldr	r3, [r3, #4]
 8013b8e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013b90:	69bb      	ldr	r3, [r7, #24]
 8013b92:	3314      	adds	r3, #20
 8013b94:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013b96:	8bfb      	ldrh	r3, [r7, #30]
 8013b98:	009b      	lsls	r3, r3, #2
 8013b9a:	461a      	mov	r2, r3
 8013b9c:	79fb      	ldrb	r3, [r7, #7]
 8013b9e:	009b      	lsls	r3, r3, #2
 8013ba0:	f003 0304 	and.w	r3, r3, #4
 8013ba4:	4413      	add	r3, r2
 8013ba6:	3314      	adds	r3, #20
 8013ba8:	69ba      	ldr	r2, [r7, #24]
 8013baa:	4413      	add	r3, r2
 8013bac:	697a      	ldr	r2, [r7, #20]
 8013bae:	429a      	cmp	r2, r3
 8013bb0:	d006      	beq.n	8013bc0 <tcp_output_fill_options+0x64>
 8013bb2:	4b05      	ldr	r3, [pc, #20]	; (8013bc8 <tcp_output_fill_options+0x6c>)
 8013bb4:	f240 7275 	movw	r2, #1909	; 0x775
 8013bb8:	4906      	ldr	r1, [pc, #24]	; (8013bd4 <tcp_output_fill_options+0x78>)
 8013bba:	4805      	ldr	r0, [pc, #20]	; (8013bd0 <tcp_output_fill_options+0x74>)
 8013bbc:	f003 fe66 	bl	801788c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013bc0:	bf00      	nop
 8013bc2:	3720      	adds	r7, #32
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	bd80      	pop	{r7, pc}
 8013bc8:	0801adc8 	.word	0x0801adc8
 8013bcc:	0801b4f8 	.word	0x0801b4f8
 8013bd0:	0801ae1c 	.word	0x0801ae1c
 8013bd4:	0801b3f0 	.word	0x0801b3f0

08013bd8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b08a      	sub	sp, #40	; 0x28
 8013bdc:	af04      	add	r7, sp, #16
 8013bde:	60f8      	str	r0, [r7, #12]
 8013be0:	60b9      	str	r1, [r7, #8]
 8013be2:	607a      	str	r2, [r7, #4]
 8013be4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013be6:	68bb      	ldr	r3, [r7, #8]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d106      	bne.n	8013bfa <tcp_output_control_segment+0x22>
 8013bec:	4b1c      	ldr	r3, [pc, #112]	; (8013c60 <tcp_output_control_segment+0x88>)
 8013bee:	f240 7287 	movw	r2, #1927	; 0x787
 8013bf2:	491c      	ldr	r1, [pc, #112]	; (8013c64 <tcp_output_control_segment+0x8c>)
 8013bf4:	481c      	ldr	r0, [pc, #112]	; (8013c68 <tcp_output_control_segment+0x90>)
 8013bf6:	f003 fe49 	bl	801788c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013bfa:	683a      	ldr	r2, [r7, #0]
 8013bfc:	6879      	ldr	r1, [r7, #4]
 8013bfe:	68f8      	ldr	r0, [r7, #12]
 8013c00:	f7fe fae8 	bl	80121d4 <tcp_route>
 8013c04:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013c06:	693b      	ldr	r3, [r7, #16]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d102      	bne.n	8013c12 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013c0c:	23fc      	movs	r3, #252	; 0xfc
 8013c0e:	75fb      	strb	r3, [r7, #23]
 8013c10:	e01c      	b.n	8013c4c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d006      	beq.n	8013c26 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	7adb      	ldrb	r3, [r3, #11]
 8013c1c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	7a9b      	ldrb	r3, [r3, #10]
 8013c22:	757b      	strb	r3, [r7, #21]
 8013c24:	e003      	b.n	8013c2e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013c26:	23ff      	movs	r3, #255	; 0xff
 8013c28:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013c2e:	7dba      	ldrb	r2, [r7, #22]
 8013c30:	693b      	ldr	r3, [r7, #16]
 8013c32:	9302      	str	r3, [sp, #8]
 8013c34:	2306      	movs	r3, #6
 8013c36:	9301      	str	r3, [sp, #4]
 8013c38:	7d7b      	ldrb	r3, [r7, #21]
 8013c3a:	9300      	str	r3, [sp, #0]
 8013c3c:	4613      	mov	r3, r2
 8013c3e:	683a      	ldr	r2, [r7, #0]
 8013c40:	6879      	ldr	r1, [r7, #4]
 8013c42:	68b8      	ldr	r0, [r7, #8]
 8013c44:	f002 fb3e 	bl	80162c4 <ip4_output_if>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013c4c:	68b8      	ldr	r0, [r7, #8]
 8013c4e:	f7f9 fcf5 	bl	800d63c <pbuf_free>
  return err;
 8013c52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013c56:	4618      	mov	r0, r3
 8013c58:	3718      	adds	r7, #24
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	bd80      	pop	{r7, pc}
 8013c5e:	bf00      	nop
 8013c60:	0801adc8 	.word	0x0801adc8
 8013c64:	0801b520 	.word	0x0801b520
 8013c68:	0801ae1c 	.word	0x0801ae1c

08013c6c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013c6c:	b590      	push	{r4, r7, lr}
 8013c6e:	b08b      	sub	sp, #44	; 0x2c
 8013c70:	af04      	add	r7, sp, #16
 8013c72:	60f8      	str	r0, [r7, #12]
 8013c74:	60b9      	str	r1, [r7, #8]
 8013c76:	607a      	str	r2, [r7, #4]
 8013c78:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d106      	bne.n	8013c8e <tcp_rst+0x22>
 8013c80:	4b1f      	ldr	r3, [pc, #124]	; (8013d00 <tcp_rst+0x94>)
 8013c82:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013c86:	491f      	ldr	r1, [pc, #124]	; (8013d04 <tcp_rst+0x98>)
 8013c88:	481f      	ldr	r0, [pc, #124]	; (8013d08 <tcp_rst+0x9c>)
 8013c8a:	f003 fdff 	bl	801788c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d106      	bne.n	8013ca2 <tcp_rst+0x36>
 8013c94:	4b1a      	ldr	r3, [pc, #104]	; (8013d00 <tcp_rst+0x94>)
 8013c96:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013c9a:	491c      	ldr	r1, [pc, #112]	; (8013d0c <tcp_rst+0xa0>)
 8013c9c:	481a      	ldr	r0, [pc, #104]	; (8013d08 <tcp_rst+0x9c>)
 8013c9e:	f003 fdf5 	bl	801788c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013ca6:	f246 0308 	movw	r3, #24584	; 0x6008
 8013caa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013cac:	7dfb      	ldrb	r3, [r7, #23]
 8013cae:	b29c      	uxth	r4, r3
 8013cb0:	68b8      	ldr	r0, [r7, #8]
 8013cb2:	f7f8 f8e6 	bl	800be82 <lwip_htonl>
 8013cb6:	4602      	mov	r2, r0
 8013cb8:	8abb      	ldrh	r3, [r7, #20]
 8013cba:	9303      	str	r3, [sp, #12]
 8013cbc:	2314      	movs	r3, #20
 8013cbe:	9302      	str	r3, [sp, #8]
 8013cc0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013cc2:	9301      	str	r3, [sp, #4]
 8013cc4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013cc6:	9300      	str	r3, [sp, #0]
 8013cc8:	4613      	mov	r3, r2
 8013cca:	2200      	movs	r2, #0
 8013ccc:	4621      	mov	r1, r4
 8013cce:	6878      	ldr	r0, [r7, #4]
 8013cd0:	f7ff fe94 	bl	80139fc <tcp_output_alloc_header_common>
 8013cd4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013cd6:	693b      	ldr	r3, [r7, #16]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d00c      	beq.n	8013cf6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013cdc:	7dfb      	ldrb	r3, [r7, #23]
 8013cde:	2200      	movs	r2, #0
 8013ce0:	6939      	ldr	r1, [r7, #16]
 8013ce2:	68f8      	ldr	r0, [r7, #12]
 8013ce4:	f7ff ff3a 	bl	8013b5c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cea:	683a      	ldr	r2, [r7, #0]
 8013cec:	6939      	ldr	r1, [r7, #16]
 8013cee:	68f8      	ldr	r0, [r7, #12]
 8013cf0:	f7ff ff72 	bl	8013bd8 <tcp_output_control_segment>
 8013cf4:	e000      	b.n	8013cf8 <tcp_rst+0x8c>
    return;
 8013cf6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013cf8:	371c      	adds	r7, #28
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	bd90      	pop	{r4, r7, pc}
 8013cfe:	bf00      	nop
 8013d00:	0801adc8 	.word	0x0801adc8
 8013d04:	0801b54c 	.word	0x0801b54c
 8013d08:	0801ae1c 	.word	0x0801ae1c
 8013d0c:	0801b568 	.word	0x0801b568

08013d10 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013d10:	b590      	push	{r4, r7, lr}
 8013d12:	b087      	sub	sp, #28
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013d18:	2300      	movs	r3, #0
 8013d1a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d106      	bne.n	8013d34 <tcp_send_empty_ack+0x24>
 8013d26:	4b28      	ldr	r3, [pc, #160]	; (8013dc8 <tcp_send_empty_ack+0xb8>)
 8013d28:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013d2c:	4927      	ldr	r1, [pc, #156]	; (8013dcc <tcp_send_empty_ack+0xbc>)
 8013d2e:	4828      	ldr	r0, [pc, #160]	; (8013dd0 <tcp_send_empty_ack+0xc0>)
 8013d30:	f003 fdac 	bl	801788c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013d34:	7dfb      	ldrb	r3, [r7, #23]
 8013d36:	009b      	lsls	r3, r3, #2
 8013d38:	b2db      	uxtb	r3, r3
 8013d3a:	f003 0304 	and.w	r3, r3, #4
 8013d3e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013d40:	7d7b      	ldrb	r3, [r7, #21]
 8013d42:	b29c      	uxth	r4, r3
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7f8 f89a 	bl	800be82 <lwip_htonl>
 8013d4e:	4603      	mov	r3, r0
 8013d50:	2200      	movs	r2, #0
 8013d52:	4621      	mov	r1, r4
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f7ff fec3 	bl	8013ae0 <tcp_output_alloc_header>
 8013d5a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013d5c:	693b      	ldr	r3, [r7, #16]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d109      	bne.n	8013d76 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	8b5b      	ldrh	r3, [r3, #26]
 8013d66:	f043 0303 	orr.w	r3, r3, #3
 8013d6a:	b29a      	uxth	r2, r3
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013d70:	f06f 0301 	mvn.w	r3, #1
 8013d74:	e023      	b.n	8013dbe <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013d76:	7dbb      	ldrb	r3, [r7, #22]
 8013d78:	7dfa      	ldrb	r2, [r7, #23]
 8013d7a:	6939      	ldr	r1, [r7, #16]
 8013d7c:	6878      	ldr	r0, [r7, #4]
 8013d7e:	f7ff feed 	bl	8013b5c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013d82:	687a      	ldr	r2, [r7, #4]
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	3304      	adds	r3, #4
 8013d88:	6939      	ldr	r1, [r7, #16]
 8013d8a:	6878      	ldr	r0, [r7, #4]
 8013d8c:	f7ff ff24 	bl	8013bd8 <tcp_output_control_segment>
 8013d90:	4603      	mov	r3, r0
 8013d92:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d007      	beq.n	8013dac <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	8b5b      	ldrh	r3, [r3, #26]
 8013da0:	f043 0303 	orr.w	r3, r3, #3
 8013da4:	b29a      	uxth	r2, r3
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	835a      	strh	r2, [r3, #26]
 8013daa:	e006      	b.n	8013dba <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	8b5b      	ldrh	r3, [r3, #26]
 8013db0:	f023 0303 	bic.w	r3, r3, #3
 8013db4:	b29a      	uxth	r2, r3
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	371c      	adds	r7, #28
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	bd90      	pop	{r4, r7, pc}
 8013dc6:	bf00      	nop
 8013dc8:	0801adc8 	.word	0x0801adc8
 8013dcc:	0801b584 	.word	0x0801b584
 8013dd0:	0801ae1c 	.word	0x0801ae1c

08013dd4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013dd4:	b590      	push	{r4, r7, lr}
 8013dd6:	b087      	sub	sp, #28
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013ddc:	2300      	movs	r3, #0
 8013dde:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d106      	bne.n	8013df4 <tcp_keepalive+0x20>
 8013de6:	4b18      	ldr	r3, [pc, #96]	; (8013e48 <tcp_keepalive+0x74>)
 8013de8:	f640 0224 	movw	r2, #2084	; 0x824
 8013dec:	4917      	ldr	r1, [pc, #92]	; (8013e4c <tcp_keepalive+0x78>)
 8013dee:	4818      	ldr	r0, [pc, #96]	; (8013e50 <tcp_keepalive+0x7c>)
 8013df0:	f003 fd4c 	bl	801788c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013df4:	7dfb      	ldrb	r3, [r7, #23]
 8013df6:	b29c      	uxth	r4, r3
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013dfc:	3b01      	subs	r3, #1
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7f8 f83f 	bl	800be82 <lwip_htonl>
 8013e04:	4603      	mov	r3, r0
 8013e06:	2200      	movs	r2, #0
 8013e08:	4621      	mov	r1, r4
 8013e0a:	6878      	ldr	r0, [r7, #4]
 8013e0c:	f7ff fe68 	bl	8013ae0 <tcp_output_alloc_header>
 8013e10:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013e12:	693b      	ldr	r3, [r7, #16]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d102      	bne.n	8013e1e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013e18:	f04f 33ff 	mov.w	r3, #4294967295
 8013e1c:	e010      	b.n	8013e40 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013e1e:	7dfb      	ldrb	r3, [r7, #23]
 8013e20:	2200      	movs	r2, #0
 8013e22:	6939      	ldr	r1, [r7, #16]
 8013e24:	6878      	ldr	r0, [r7, #4]
 8013e26:	f7ff fe99 	bl	8013b5c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013e2a:	687a      	ldr	r2, [r7, #4]
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	3304      	adds	r3, #4
 8013e30:	6939      	ldr	r1, [r7, #16]
 8013e32:	6878      	ldr	r0, [r7, #4]
 8013e34:	f7ff fed0 	bl	8013bd8 <tcp_output_control_segment>
 8013e38:	4603      	mov	r3, r0
 8013e3a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013e40:	4618      	mov	r0, r3
 8013e42:	371c      	adds	r7, #28
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd90      	pop	{r4, r7, pc}
 8013e48:	0801adc8 	.word	0x0801adc8
 8013e4c:	0801b5a4 	.word	0x0801b5a4
 8013e50:	0801ae1c 	.word	0x0801ae1c

08013e54 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013e54:	b590      	push	{r4, r7, lr}
 8013e56:	b08b      	sub	sp, #44	; 0x2c
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d106      	bne.n	8013e76 <tcp_zero_window_probe+0x22>
 8013e68:	4b4c      	ldr	r3, [pc, #304]	; (8013f9c <tcp_zero_window_probe+0x148>)
 8013e6a:	f640 024f 	movw	r2, #2127	; 0x84f
 8013e6e:	494c      	ldr	r1, [pc, #304]	; (8013fa0 <tcp_zero_window_probe+0x14c>)
 8013e70:	484c      	ldr	r0, [pc, #304]	; (8013fa4 <tcp_zero_window_probe+0x150>)
 8013e72:	f003 fd0b 	bl	801788c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e7a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013e7c:	6a3b      	ldr	r3, [r7, #32]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d101      	bne.n	8013e86 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013e82:	2300      	movs	r3, #0
 8013e84:	e086      	b.n	8013f94 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013e8c:	2bff      	cmp	r3, #255	; 0xff
 8013e8e:	d007      	beq.n	8013ea0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013e96:	3301      	adds	r3, #1
 8013e98:	b2da      	uxtb	r2, r3
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013ea0:	6a3b      	ldr	r3, [r7, #32]
 8013ea2:	68db      	ldr	r3, [r3, #12]
 8013ea4:	899b      	ldrh	r3, [r3, #12]
 8013ea6:	b29b      	uxth	r3, r3
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f7f7 ffd5 	bl	800be58 <lwip_htons>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	b2db      	uxtb	r3, r3
 8013eb2:	f003 0301 	and.w	r3, r3, #1
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d005      	beq.n	8013ec6 <tcp_zero_window_probe+0x72>
 8013eba:	6a3b      	ldr	r3, [r7, #32]
 8013ebc:	891b      	ldrh	r3, [r3, #8]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d101      	bne.n	8013ec6 <tcp_zero_window_probe+0x72>
 8013ec2:	2301      	movs	r3, #1
 8013ec4:	e000      	b.n	8013ec8 <tcp_zero_window_probe+0x74>
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013eca:	7ffb      	ldrb	r3, [r7, #31]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	bf0c      	ite	eq
 8013ed0:	2301      	moveq	r3, #1
 8013ed2:	2300      	movne	r3, #0
 8013ed4:	b2db      	uxtb	r3, r3
 8013ed6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013edc:	b299      	uxth	r1, r3
 8013ede:	6a3b      	ldr	r3, [r7, #32]
 8013ee0:	68db      	ldr	r3, [r3, #12]
 8013ee2:	685b      	ldr	r3, [r3, #4]
 8013ee4:	8bba      	ldrh	r2, [r7, #28]
 8013ee6:	6878      	ldr	r0, [r7, #4]
 8013ee8:	f7ff fdfa 	bl	8013ae0 <tcp_output_alloc_header>
 8013eec:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013eee:	69bb      	ldr	r3, [r7, #24]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d102      	bne.n	8013efa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8013ef8:	e04c      	b.n	8013f94 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013efa:	69bb      	ldr	r3, [r7, #24]
 8013efc:	685b      	ldr	r3, [r3, #4]
 8013efe:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013f00:	7ffb      	ldrb	r3, [r7, #31]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d011      	beq.n	8013f2a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013f06:	697b      	ldr	r3, [r7, #20]
 8013f08:	899b      	ldrh	r3, [r3, #12]
 8013f0a:	b29b      	uxth	r3, r3
 8013f0c:	b21b      	sxth	r3, r3
 8013f0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013f12:	b21c      	sxth	r4, r3
 8013f14:	2011      	movs	r0, #17
 8013f16:	f7f7 ff9f 	bl	800be58 <lwip_htons>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	b21b      	sxth	r3, r3
 8013f1e:	4323      	orrs	r3, r4
 8013f20:	b21b      	sxth	r3, r3
 8013f22:	b29a      	uxth	r2, r3
 8013f24:	697b      	ldr	r3, [r7, #20]
 8013f26:	819a      	strh	r2, [r3, #12]
 8013f28:	e010      	b.n	8013f4c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013f2a:	69bb      	ldr	r3, [r7, #24]
 8013f2c:	685b      	ldr	r3, [r3, #4]
 8013f2e:	3314      	adds	r3, #20
 8013f30:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013f32:	6a3b      	ldr	r3, [r7, #32]
 8013f34:	6858      	ldr	r0, [r3, #4]
 8013f36:	6a3b      	ldr	r3, [r7, #32]
 8013f38:	685b      	ldr	r3, [r3, #4]
 8013f3a:	891a      	ldrh	r2, [r3, #8]
 8013f3c:	6a3b      	ldr	r3, [r7, #32]
 8013f3e:	891b      	ldrh	r3, [r3, #8]
 8013f40:	1ad3      	subs	r3, r2, r3
 8013f42:	b29b      	uxth	r3, r3
 8013f44:	2201      	movs	r2, #1
 8013f46:	6939      	ldr	r1, [r7, #16]
 8013f48:	f7f9 fd7e 	bl	800da48 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013f4c:	6a3b      	ldr	r3, [r7, #32]
 8013f4e:	68db      	ldr	r3, [r3, #12]
 8013f50:	685b      	ldr	r3, [r3, #4]
 8013f52:	4618      	mov	r0, r3
 8013f54:	f7f7 ff95 	bl	800be82 <lwip_htonl>
 8013f58:	4603      	mov	r3, r0
 8013f5a:	3301      	adds	r3, #1
 8013f5c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	1ad3      	subs	r3, r2, r3
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	da02      	bge.n	8013f70 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	68fa      	ldr	r2, [r7, #12]
 8013f6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013f70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f74:	2200      	movs	r2, #0
 8013f76:	69b9      	ldr	r1, [r7, #24]
 8013f78:	6878      	ldr	r0, [r7, #4]
 8013f7a:	f7ff fdef 	bl	8013b5c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013f7e:	687a      	ldr	r2, [r7, #4]
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	3304      	adds	r3, #4
 8013f84:	69b9      	ldr	r1, [r7, #24]
 8013f86:	6878      	ldr	r0, [r7, #4]
 8013f88:	f7ff fe26 	bl	8013bd8 <tcp_output_control_segment>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013f90:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013f94:	4618      	mov	r0, r3
 8013f96:	372c      	adds	r7, #44	; 0x2c
 8013f98:	46bd      	mov	sp, r7
 8013f9a:	bd90      	pop	{r4, r7, pc}
 8013f9c:	0801adc8 	.word	0x0801adc8
 8013fa0:	0801b5c0 	.word	0x0801b5c0
 8013fa4:	0801ae1c 	.word	0x0801ae1c

08013fa8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b082      	sub	sp, #8
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013fb0:	f7f9 feca 	bl	800dd48 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013fb4:	4b0a      	ldr	r3, [pc, #40]	; (8013fe0 <tcpip_tcp_timer+0x38>)
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d103      	bne.n	8013fc4 <tcpip_tcp_timer+0x1c>
 8013fbc:	4b09      	ldr	r3, [pc, #36]	; (8013fe4 <tcpip_tcp_timer+0x3c>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d005      	beq.n	8013fd0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	4908      	ldr	r1, [pc, #32]	; (8013fe8 <tcpip_tcp_timer+0x40>)
 8013fc8:	20fa      	movs	r0, #250	; 0xfa
 8013fca:	f000 f8f3 	bl	80141b4 <sys_timeout>
 8013fce:	e003      	b.n	8013fd8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013fd0:	4b06      	ldr	r3, [pc, #24]	; (8013fec <tcpip_tcp_timer+0x44>)
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	601a      	str	r2, [r3, #0]
  }
}
 8013fd6:	bf00      	nop
 8013fd8:	bf00      	nop
 8013fda:	3708      	adds	r7, #8
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	bd80      	pop	{r7, pc}
 8013fe0:	2000d648 	.word	0x2000d648
 8013fe4:	2000d64c 	.word	0x2000d64c
 8013fe8:	08013fa9 	.word	0x08013fa9
 8013fec:	2000d694 	.word	0x2000d694

08013ff0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013ff4:	4b0a      	ldr	r3, [pc, #40]	; (8014020 <tcp_timer_needed+0x30>)
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d10f      	bne.n	801401c <tcp_timer_needed+0x2c>
 8013ffc:	4b09      	ldr	r3, [pc, #36]	; (8014024 <tcp_timer_needed+0x34>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d103      	bne.n	801400c <tcp_timer_needed+0x1c>
 8014004:	4b08      	ldr	r3, [pc, #32]	; (8014028 <tcp_timer_needed+0x38>)
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d007      	beq.n	801401c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801400c:	4b04      	ldr	r3, [pc, #16]	; (8014020 <tcp_timer_needed+0x30>)
 801400e:	2201      	movs	r2, #1
 8014010:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014012:	2200      	movs	r2, #0
 8014014:	4905      	ldr	r1, [pc, #20]	; (801402c <tcp_timer_needed+0x3c>)
 8014016:	20fa      	movs	r0, #250	; 0xfa
 8014018:	f000 f8cc 	bl	80141b4 <sys_timeout>
  }
}
 801401c:	bf00      	nop
 801401e:	bd80      	pop	{r7, pc}
 8014020:	2000d694 	.word	0x2000d694
 8014024:	2000d648 	.word	0x2000d648
 8014028:	2000d64c 	.word	0x2000d64c
 801402c:	08013fa9 	.word	0x08013fa9

08014030 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b086      	sub	sp, #24
 8014034:	af00      	add	r7, sp, #0
 8014036:	60f8      	str	r0, [r7, #12]
 8014038:	60b9      	str	r1, [r7, #8]
 801403a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801403c:	200a      	movs	r0, #10
 801403e:	f7f8 fbe3 	bl	800c808 <memp_malloc>
 8014042:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014044:	693b      	ldr	r3, [r7, #16]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d109      	bne.n	801405e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801404a:	693b      	ldr	r3, [r7, #16]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d151      	bne.n	80140f4 <sys_timeout_abs+0xc4>
 8014050:	4b2a      	ldr	r3, [pc, #168]	; (80140fc <sys_timeout_abs+0xcc>)
 8014052:	22be      	movs	r2, #190	; 0xbe
 8014054:	492a      	ldr	r1, [pc, #168]	; (8014100 <sys_timeout_abs+0xd0>)
 8014056:	482b      	ldr	r0, [pc, #172]	; (8014104 <sys_timeout_abs+0xd4>)
 8014058:	f003 fc18 	bl	801788c <iprintf>
    return;
 801405c:	e04a      	b.n	80140f4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801405e:	693b      	ldr	r3, [r7, #16]
 8014060:	2200      	movs	r2, #0
 8014062:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014064:	693b      	ldr	r3, [r7, #16]
 8014066:	68ba      	ldr	r2, [r7, #8]
 8014068:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801406a:	693b      	ldr	r3, [r7, #16]
 801406c:	687a      	ldr	r2, [r7, #4]
 801406e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014070:	693b      	ldr	r3, [r7, #16]
 8014072:	68fa      	ldr	r2, [r7, #12]
 8014074:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014076:	4b24      	ldr	r3, [pc, #144]	; (8014108 <sys_timeout_abs+0xd8>)
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d103      	bne.n	8014086 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801407e:	4a22      	ldr	r2, [pc, #136]	; (8014108 <sys_timeout_abs+0xd8>)
 8014080:	693b      	ldr	r3, [r7, #16]
 8014082:	6013      	str	r3, [r2, #0]
    return;
 8014084:	e037      	b.n	80140f6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014086:	693b      	ldr	r3, [r7, #16]
 8014088:	685a      	ldr	r2, [r3, #4]
 801408a:	4b1f      	ldr	r3, [pc, #124]	; (8014108 <sys_timeout_abs+0xd8>)
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	685b      	ldr	r3, [r3, #4]
 8014090:	1ad3      	subs	r3, r2, r3
 8014092:	0fdb      	lsrs	r3, r3, #31
 8014094:	f003 0301 	and.w	r3, r3, #1
 8014098:	b2db      	uxtb	r3, r3
 801409a:	2b00      	cmp	r3, #0
 801409c:	d007      	beq.n	80140ae <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801409e:	4b1a      	ldr	r3, [pc, #104]	; (8014108 <sys_timeout_abs+0xd8>)
 80140a0:	681a      	ldr	r2, [r3, #0]
 80140a2:	693b      	ldr	r3, [r7, #16]
 80140a4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80140a6:	4a18      	ldr	r2, [pc, #96]	; (8014108 <sys_timeout_abs+0xd8>)
 80140a8:	693b      	ldr	r3, [r7, #16]
 80140aa:	6013      	str	r3, [r2, #0]
 80140ac:	e023      	b.n	80140f6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80140ae:	4b16      	ldr	r3, [pc, #88]	; (8014108 <sys_timeout_abs+0xd8>)
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	617b      	str	r3, [r7, #20]
 80140b4:	e01a      	b.n	80140ec <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80140b6:	697b      	ldr	r3, [r7, #20]
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d00b      	beq.n	80140d6 <sys_timeout_abs+0xa6>
 80140be:	693b      	ldr	r3, [r7, #16]
 80140c0:	685a      	ldr	r2, [r3, #4]
 80140c2:	697b      	ldr	r3, [r7, #20]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	685b      	ldr	r3, [r3, #4]
 80140c8:	1ad3      	subs	r3, r2, r3
 80140ca:	0fdb      	lsrs	r3, r3, #31
 80140cc:	f003 0301 	and.w	r3, r3, #1
 80140d0:	b2db      	uxtb	r3, r3
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d007      	beq.n	80140e6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80140d6:	697b      	ldr	r3, [r7, #20]
 80140d8:	681a      	ldr	r2, [r3, #0]
 80140da:	693b      	ldr	r3, [r7, #16]
 80140dc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80140de:	697b      	ldr	r3, [r7, #20]
 80140e0:	693a      	ldr	r2, [r7, #16]
 80140e2:	601a      	str	r2, [r3, #0]
        break;
 80140e4:	e007      	b.n	80140f6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80140e6:	697b      	ldr	r3, [r7, #20]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	617b      	str	r3, [r7, #20]
 80140ec:	697b      	ldr	r3, [r7, #20]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d1e1      	bne.n	80140b6 <sys_timeout_abs+0x86>
 80140f2:	e000      	b.n	80140f6 <sys_timeout_abs+0xc6>
    return;
 80140f4:	bf00      	nop
      }
    }
  }
}
 80140f6:	3718      	adds	r7, #24
 80140f8:	46bd      	mov	sp, r7
 80140fa:	bd80      	pop	{r7, pc}
 80140fc:	0801b5e4 	.word	0x0801b5e4
 8014100:	0801b618 	.word	0x0801b618
 8014104:	0801b658 	.word	0x0801b658
 8014108:	2000d68c 	.word	0x2000d68c

0801410c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801410c:	b580      	push	{r7, lr}
 801410e:	b086      	sub	sp, #24
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014118:	697b      	ldr	r3, [r7, #20]
 801411a:	685b      	ldr	r3, [r3, #4]
 801411c:	4798      	blx	r3

  now = sys_now();
 801411e:	f7f1 f8d5 	bl	80052cc <sys_now>
 8014122:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014124:	697b      	ldr	r3, [r7, #20]
 8014126:	681a      	ldr	r2, [r3, #0]
 8014128:	4b0f      	ldr	r3, [pc, #60]	; (8014168 <lwip_cyclic_timer+0x5c>)
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	4413      	add	r3, r2
 801412e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014130:	68fa      	ldr	r2, [r7, #12]
 8014132:	693b      	ldr	r3, [r7, #16]
 8014134:	1ad3      	subs	r3, r2, r3
 8014136:	0fdb      	lsrs	r3, r3, #31
 8014138:	f003 0301 	and.w	r3, r3, #1
 801413c:	b2db      	uxtb	r3, r3
 801413e:	2b00      	cmp	r3, #0
 8014140:	d009      	beq.n	8014156 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014142:	697b      	ldr	r3, [r7, #20]
 8014144:	681a      	ldr	r2, [r3, #0]
 8014146:	693b      	ldr	r3, [r7, #16]
 8014148:	4413      	add	r3, r2
 801414a:	687a      	ldr	r2, [r7, #4]
 801414c:	4907      	ldr	r1, [pc, #28]	; (801416c <lwip_cyclic_timer+0x60>)
 801414e:	4618      	mov	r0, r3
 8014150:	f7ff ff6e 	bl	8014030 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014154:	e004      	b.n	8014160 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014156:	687a      	ldr	r2, [r7, #4]
 8014158:	4904      	ldr	r1, [pc, #16]	; (801416c <lwip_cyclic_timer+0x60>)
 801415a:	68f8      	ldr	r0, [r7, #12]
 801415c:	f7ff ff68 	bl	8014030 <sys_timeout_abs>
}
 8014160:	bf00      	nop
 8014162:	3718      	adds	r7, #24
 8014164:	46bd      	mov	sp, r7
 8014166:	bd80      	pop	{r7, pc}
 8014168:	2000d690 	.word	0x2000d690
 801416c:	0801410d 	.word	0x0801410d

08014170 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b082      	sub	sp, #8
 8014174:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014176:	2301      	movs	r3, #1
 8014178:	607b      	str	r3, [r7, #4]
 801417a:	e00e      	b.n	801419a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801417c:	4a0b      	ldr	r2, [pc, #44]	; (80141ac <sys_timeouts_init+0x3c>)
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	00db      	lsls	r3, r3, #3
 8014188:	4a08      	ldr	r2, [pc, #32]	; (80141ac <sys_timeouts_init+0x3c>)
 801418a:	4413      	add	r3, r2
 801418c:	461a      	mov	r2, r3
 801418e:	4908      	ldr	r1, [pc, #32]	; (80141b0 <sys_timeouts_init+0x40>)
 8014190:	f000 f810 	bl	80141b4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	3301      	adds	r3, #1
 8014198:	607b      	str	r3, [r7, #4]
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	2b02      	cmp	r3, #2
 801419e:	d9ed      	bls.n	801417c <sys_timeouts_init+0xc>
  }
}
 80141a0:	bf00      	nop
 80141a2:	bf00      	nop
 80141a4:	3708      	adds	r7, #8
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd80      	pop	{r7, pc}
 80141aa:	bf00      	nop
 80141ac:	0801c280 	.word	0x0801c280
 80141b0:	0801410d 	.word	0x0801410d

080141b4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80141b4:	b580      	push	{r7, lr}
 80141b6:	b086      	sub	sp, #24
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	60f8      	str	r0, [r7, #12]
 80141bc:	60b9      	str	r1, [r7, #8]
 80141be:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80141c6:	d306      	bcc.n	80141d6 <sys_timeout+0x22>
 80141c8:	4b0a      	ldr	r3, [pc, #40]	; (80141f4 <sys_timeout+0x40>)
 80141ca:	f240 1229 	movw	r2, #297	; 0x129
 80141ce:	490a      	ldr	r1, [pc, #40]	; (80141f8 <sys_timeout+0x44>)
 80141d0:	480a      	ldr	r0, [pc, #40]	; (80141fc <sys_timeout+0x48>)
 80141d2:	f003 fb5b 	bl	801788c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80141d6:	f7f1 f879 	bl	80052cc <sys_now>
 80141da:	4602      	mov	r2, r0
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	4413      	add	r3, r2
 80141e0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80141e2:	687a      	ldr	r2, [r7, #4]
 80141e4:	68b9      	ldr	r1, [r7, #8]
 80141e6:	6978      	ldr	r0, [r7, #20]
 80141e8:	f7ff ff22 	bl	8014030 <sys_timeout_abs>
#endif
}
 80141ec:	bf00      	nop
 80141ee:	3718      	adds	r7, #24
 80141f0:	46bd      	mov	sp, r7
 80141f2:	bd80      	pop	{r7, pc}
 80141f4:	0801b5e4 	.word	0x0801b5e4
 80141f8:	0801b680 	.word	0x0801b680
 80141fc:	0801b658 	.word	0x0801b658

08014200 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014200:	b580      	push	{r7, lr}
 8014202:	b084      	sub	sp, #16
 8014204:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014206:	f7f1 f861 	bl	80052cc <sys_now>
 801420a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801420c:	4b17      	ldr	r3, [pc, #92]	; (801426c <sys_check_timeouts+0x6c>)
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014212:	68bb      	ldr	r3, [r7, #8]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d022      	beq.n	801425e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014218:	68bb      	ldr	r3, [r7, #8]
 801421a:	685b      	ldr	r3, [r3, #4]
 801421c:	68fa      	ldr	r2, [r7, #12]
 801421e:	1ad3      	subs	r3, r2, r3
 8014220:	0fdb      	lsrs	r3, r3, #31
 8014222:	f003 0301 	and.w	r3, r3, #1
 8014226:	b2db      	uxtb	r3, r3
 8014228:	2b00      	cmp	r3, #0
 801422a:	d11a      	bne.n	8014262 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801422c:	68bb      	ldr	r3, [r7, #8]
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	4a0e      	ldr	r2, [pc, #56]	; (801426c <sys_check_timeouts+0x6c>)
 8014232:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014234:	68bb      	ldr	r3, [r7, #8]
 8014236:	689b      	ldr	r3, [r3, #8]
 8014238:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801423a:	68bb      	ldr	r3, [r7, #8]
 801423c:	68db      	ldr	r3, [r3, #12]
 801423e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014240:	68bb      	ldr	r3, [r7, #8]
 8014242:	685b      	ldr	r3, [r3, #4]
 8014244:	4a0a      	ldr	r2, [pc, #40]	; (8014270 <sys_check_timeouts+0x70>)
 8014246:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014248:	68b9      	ldr	r1, [r7, #8]
 801424a:	200a      	movs	r0, #10
 801424c:	f7f8 fb52 	bl	800c8f4 <memp_free>
    if (handler != NULL) {
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d0da      	beq.n	801420c <sys_check_timeouts+0xc>
      handler(arg);
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	6838      	ldr	r0, [r7, #0]
 801425a:	4798      	blx	r3
  do {
 801425c:	e7d6      	b.n	801420c <sys_check_timeouts+0xc>
      return;
 801425e:	bf00      	nop
 8014260:	e000      	b.n	8014264 <sys_check_timeouts+0x64>
      return;
 8014262:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014264:	3710      	adds	r7, #16
 8014266:	46bd      	mov	sp, r7
 8014268:	bd80      	pop	{r7, pc}
 801426a:	bf00      	nop
 801426c:	2000d68c 	.word	0x2000d68c
 8014270:	2000d690 	.word	0x2000d690

08014274 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b082      	sub	sp, #8
 8014278:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801427a:	4b16      	ldr	r3, [pc, #88]	; (80142d4 <sys_timeouts_sleeptime+0x60>)
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d102      	bne.n	8014288 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014282:	f04f 33ff 	mov.w	r3, #4294967295
 8014286:	e020      	b.n	80142ca <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014288:	f7f1 f820 	bl	80052cc <sys_now>
 801428c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801428e:	4b11      	ldr	r3, [pc, #68]	; (80142d4 <sys_timeouts_sleeptime+0x60>)
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	685a      	ldr	r2, [r3, #4]
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	1ad3      	subs	r3, r2, r3
 8014298:	0fdb      	lsrs	r3, r3, #31
 801429a:	f003 0301 	and.w	r3, r3, #1
 801429e:	b2db      	uxtb	r3, r3
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d001      	beq.n	80142a8 <sys_timeouts_sleeptime+0x34>
    return 0;
 80142a4:	2300      	movs	r3, #0
 80142a6:	e010      	b.n	80142ca <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80142a8:	4b0a      	ldr	r3, [pc, #40]	; (80142d4 <sys_timeouts_sleeptime+0x60>)
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	685a      	ldr	r2, [r3, #4]
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	1ad3      	subs	r3, r2, r3
 80142b2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80142b4:	683b      	ldr	r3, [r7, #0]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	da06      	bge.n	80142c8 <sys_timeouts_sleeptime+0x54>
 80142ba:	4b07      	ldr	r3, [pc, #28]	; (80142d8 <sys_timeouts_sleeptime+0x64>)
 80142bc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80142c0:	4906      	ldr	r1, [pc, #24]	; (80142dc <sys_timeouts_sleeptime+0x68>)
 80142c2:	4807      	ldr	r0, [pc, #28]	; (80142e0 <sys_timeouts_sleeptime+0x6c>)
 80142c4:	f003 fae2 	bl	801788c <iprintf>
    return ret;
 80142c8:	683b      	ldr	r3, [r7, #0]
  }
}
 80142ca:	4618      	mov	r0, r3
 80142cc:	3708      	adds	r7, #8
 80142ce:	46bd      	mov	sp, r7
 80142d0:	bd80      	pop	{r7, pc}
 80142d2:	bf00      	nop
 80142d4:	2000d68c 	.word	0x2000d68c
 80142d8:	0801b5e4 	.word	0x0801b5e4
 80142dc:	0801b6b8 	.word	0x0801b6b8
 80142e0:	0801b658 	.word	0x0801b658

080142e4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80142e8:	f003 f9d0 	bl	801768c <rand>
 80142ec:	4603      	mov	r3, r0
 80142ee:	b29b      	uxth	r3, r3
 80142f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80142f4:	b29b      	uxth	r3, r3
 80142f6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80142fa:	b29a      	uxth	r2, r3
 80142fc:	4b01      	ldr	r3, [pc, #4]	; (8014304 <udp_init+0x20>)
 80142fe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014300:	bf00      	nop
 8014302:	bd80      	pop	{r7, pc}
 8014304:	2000002c 	.word	0x2000002c

08014308 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014308:	b480      	push	{r7}
 801430a:	b083      	sub	sp, #12
 801430c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801430e:	2300      	movs	r3, #0
 8014310:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014312:	4b17      	ldr	r3, [pc, #92]	; (8014370 <udp_new_port+0x68>)
 8014314:	881b      	ldrh	r3, [r3, #0]
 8014316:	1c5a      	adds	r2, r3, #1
 8014318:	b291      	uxth	r1, r2
 801431a:	4a15      	ldr	r2, [pc, #84]	; (8014370 <udp_new_port+0x68>)
 801431c:	8011      	strh	r1, [r2, #0]
 801431e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014322:	4293      	cmp	r3, r2
 8014324:	d103      	bne.n	801432e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014326:	4b12      	ldr	r3, [pc, #72]	; (8014370 <udp_new_port+0x68>)
 8014328:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801432c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801432e:	4b11      	ldr	r3, [pc, #68]	; (8014374 <udp_new_port+0x6c>)
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	603b      	str	r3, [r7, #0]
 8014334:	e011      	b.n	801435a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014336:	683b      	ldr	r3, [r7, #0]
 8014338:	8a5a      	ldrh	r2, [r3, #18]
 801433a:	4b0d      	ldr	r3, [pc, #52]	; (8014370 <udp_new_port+0x68>)
 801433c:	881b      	ldrh	r3, [r3, #0]
 801433e:	429a      	cmp	r2, r3
 8014340:	d108      	bne.n	8014354 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8014342:	88fb      	ldrh	r3, [r7, #6]
 8014344:	3301      	adds	r3, #1
 8014346:	80fb      	strh	r3, [r7, #6]
 8014348:	88fb      	ldrh	r3, [r7, #6]
 801434a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801434e:	d3e0      	bcc.n	8014312 <udp_new_port+0xa>
        return 0;
 8014350:	2300      	movs	r3, #0
 8014352:	e007      	b.n	8014364 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014354:	683b      	ldr	r3, [r7, #0]
 8014356:	68db      	ldr	r3, [r3, #12]
 8014358:	603b      	str	r3, [r7, #0]
 801435a:	683b      	ldr	r3, [r7, #0]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d1ea      	bne.n	8014336 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014360:	4b03      	ldr	r3, [pc, #12]	; (8014370 <udp_new_port+0x68>)
 8014362:	881b      	ldrh	r3, [r3, #0]
}
 8014364:	4618      	mov	r0, r3
 8014366:	370c      	adds	r7, #12
 8014368:	46bd      	mov	sp, r7
 801436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436e:	4770      	bx	lr
 8014370:	2000002c 	.word	0x2000002c
 8014374:	2000d698 	.word	0x2000d698

08014378 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b084      	sub	sp, #16
 801437c:	af00      	add	r7, sp, #0
 801437e:	60f8      	str	r0, [r7, #12]
 8014380:	60b9      	str	r1, [r7, #8]
 8014382:	4613      	mov	r3, r2
 8014384:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d105      	bne.n	8014398 <udp_input_local_match+0x20>
 801438c:	4b27      	ldr	r3, [pc, #156]	; (801442c <udp_input_local_match+0xb4>)
 801438e:	2287      	movs	r2, #135	; 0x87
 8014390:	4927      	ldr	r1, [pc, #156]	; (8014430 <udp_input_local_match+0xb8>)
 8014392:	4828      	ldr	r0, [pc, #160]	; (8014434 <udp_input_local_match+0xbc>)
 8014394:	f003 fa7a 	bl	801788c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014398:	68bb      	ldr	r3, [r7, #8]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d105      	bne.n	80143aa <udp_input_local_match+0x32>
 801439e:	4b23      	ldr	r3, [pc, #140]	; (801442c <udp_input_local_match+0xb4>)
 80143a0:	2288      	movs	r2, #136	; 0x88
 80143a2:	4925      	ldr	r1, [pc, #148]	; (8014438 <udp_input_local_match+0xc0>)
 80143a4:	4823      	ldr	r0, [pc, #140]	; (8014434 <udp_input_local_match+0xbc>)
 80143a6:	f003 fa71 	bl	801788c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	7a1b      	ldrb	r3, [r3, #8]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d00b      	beq.n	80143ca <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	7a1a      	ldrb	r2, [r3, #8]
 80143b6:	4b21      	ldr	r3, [pc, #132]	; (801443c <udp_input_local_match+0xc4>)
 80143b8:	685b      	ldr	r3, [r3, #4]
 80143ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80143be:	3301      	adds	r3, #1
 80143c0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80143c2:	429a      	cmp	r2, r3
 80143c4:	d001      	beq.n	80143ca <udp_input_local_match+0x52>
    return 0;
 80143c6:	2300      	movs	r3, #0
 80143c8:	e02b      	b.n	8014422 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80143ca:	79fb      	ldrb	r3, [r7, #7]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d018      	beq.n	8014402 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d013      	beq.n	80143fe <udp_input_local_match+0x86>
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d00f      	beq.n	80143fe <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80143de:	4b17      	ldr	r3, [pc, #92]	; (801443c <udp_input_local_match+0xc4>)
 80143e0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80143e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143e6:	d00a      	beq.n	80143fe <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	681a      	ldr	r2, [r3, #0]
 80143ec:	4b13      	ldr	r3, [pc, #76]	; (801443c <udp_input_local_match+0xc4>)
 80143ee:	695b      	ldr	r3, [r3, #20]
 80143f0:	405a      	eors	r2, r3
 80143f2:	68bb      	ldr	r3, [r7, #8]
 80143f4:	3308      	adds	r3, #8
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d110      	bne.n	8014420 <udp_input_local_match+0xa8>
          return 1;
 80143fe:	2301      	movs	r3, #1
 8014400:	e00f      	b.n	8014422 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d009      	beq.n	801441c <udp_input_local_match+0xa4>
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d005      	beq.n	801441c <udp_input_local_match+0xa4>
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	681a      	ldr	r2, [r3, #0]
 8014414:	4b09      	ldr	r3, [pc, #36]	; (801443c <udp_input_local_match+0xc4>)
 8014416:	695b      	ldr	r3, [r3, #20]
 8014418:	429a      	cmp	r2, r3
 801441a:	d101      	bne.n	8014420 <udp_input_local_match+0xa8>
        return 1;
 801441c:	2301      	movs	r3, #1
 801441e:	e000      	b.n	8014422 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014420:	2300      	movs	r3, #0
}
 8014422:	4618      	mov	r0, r3
 8014424:	3710      	adds	r7, #16
 8014426:	46bd      	mov	sp, r7
 8014428:	bd80      	pop	{r7, pc}
 801442a:	bf00      	nop
 801442c:	0801b6cc 	.word	0x0801b6cc
 8014430:	0801b6fc 	.word	0x0801b6fc
 8014434:	0801b720 	.word	0x0801b720
 8014438:	0801b748 	.word	0x0801b748
 801443c:	20009ee8 	.word	0x20009ee8

08014440 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014440:	b590      	push	{r4, r7, lr}
 8014442:	b08d      	sub	sp, #52	; 0x34
 8014444:	af02      	add	r7, sp, #8
 8014446:	6078      	str	r0, [r7, #4]
 8014448:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801444a:	2300      	movs	r3, #0
 801444c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d105      	bne.n	8014460 <udp_input+0x20>
 8014454:	4b7c      	ldr	r3, [pc, #496]	; (8014648 <udp_input+0x208>)
 8014456:	22cf      	movs	r2, #207	; 0xcf
 8014458:	497c      	ldr	r1, [pc, #496]	; (801464c <udp_input+0x20c>)
 801445a:	487d      	ldr	r0, [pc, #500]	; (8014650 <udp_input+0x210>)
 801445c:	f003 fa16 	bl	801788c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014460:	683b      	ldr	r3, [r7, #0]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d105      	bne.n	8014472 <udp_input+0x32>
 8014466:	4b78      	ldr	r3, [pc, #480]	; (8014648 <udp_input+0x208>)
 8014468:	22d0      	movs	r2, #208	; 0xd0
 801446a:	497a      	ldr	r1, [pc, #488]	; (8014654 <udp_input+0x214>)
 801446c:	4878      	ldr	r0, [pc, #480]	; (8014650 <udp_input+0x210>)
 801446e:	f003 fa0d 	bl	801788c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	895b      	ldrh	r3, [r3, #10]
 8014476:	2b07      	cmp	r3, #7
 8014478:	d803      	bhi.n	8014482 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801447a:	6878      	ldr	r0, [r7, #4]
 801447c:	f7f9 f8de 	bl	800d63c <pbuf_free>
    goto end;
 8014480:	e0de      	b.n	8014640 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	685b      	ldr	r3, [r3, #4]
 8014486:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014488:	4b73      	ldr	r3, [pc, #460]	; (8014658 <udp_input+0x218>)
 801448a:	695b      	ldr	r3, [r3, #20]
 801448c:	4a72      	ldr	r2, [pc, #456]	; (8014658 <udp_input+0x218>)
 801448e:	6812      	ldr	r2, [r2, #0]
 8014490:	4611      	mov	r1, r2
 8014492:	4618      	mov	r0, r3
 8014494:	f001 ffee 	bl	8016474 <ip4_addr_isbroadcast_u32>
 8014498:	4603      	mov	r3, r0
 801449a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801449c:	697b      	ldr	r3, [r7, #20]
 801449e:	881b      	ldrh	r3, [r3, #0]
 80144a0:	b29b      	uxth	r3, r3
 80144a2:	4618      	mov	r0, r3
 80144a4:	f7f7 fcd8 	bl	800be58 <lwip_htons>
 80144a8:	4603      	mov	r3, r0
 80144aa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80144ac:	697b      	ldr	r3, [r7, #20]
 80144ae:	885b      	ldrh	r3, [r3, #2]
 80144b0:	b29b      	uxth	r3, r3
 80144b2:	4618      	mov	r0, r3
 80144b4:	f7f7 fcd0 	bl	800be58 <lwip_htons>
 80144b8:	4603      	mov	r3, r0
 80144ba:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80144bc:	2300      	movs	r3, #0
 80144be:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80144c0:	2300      	movs	r3, #0
 80144c2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80144c4:	2300      	movs	r3, #0
 80144c6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80144c8:	4b64      	ldr	r3, [pc, #400]	; (801465c <udp_input+0x21c>)
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	627b      	str	r3, [r7, #36]	; 0x24
 80144ce:	e054      	b.n	801457a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80144d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144d2:	8a5b      	ldrh	r3, [r3, #18]
 80144d4:	89fa      	ldrh	r2, [r7, #14]
 80144d6:	429a      	cmp	r2, r3
 80144d8:	d14a      	bne.n	8014570 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80144da:	7cfb      	ldrb	r3, [r7, #19]
 80144dc:	461a      	mov	r2, r3
 80144de:	6839      	ldr	r1, [r7, #0]
 80144e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80144e2:	f7ff ff49 	bl	8014378 <udp_input_local_match>
 80144e6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d041      	beq.n	8014570 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80144ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ee:	7c1b      	ldrb	r3, [r3, #16]
 80144f0:	f003 0304 	and.w	r3, r3, #4
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d11d      	bne.n	8014534 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80144f8:	69fb      	ldr	r3, [r7, #28]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d102      	bne.n	8014504 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80144fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014500:	61fb      	str	r3, [r7, #28]
 8014502:	e017      	b.n	8014534 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014504:	7cfb      	ldrb	r3, [r7, #19]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d014      	beq.n	8014534 <udp_input+0xf4>
 801450a:	4b53      	ldr	r3, [pc, #332]	; (8014658 <udp_input+0x218>)
 801450c:	695b      	ldr	r3, [r3, #20]
 801450e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014512:	d10f      	bne.n	8014534 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014514:	69fb      	ldr	r3, [r7, #28]
 8014516:	681a      	ldr	r2, [r3, #0]
 8014518:	683b      	ldr	r3, [r7, #0]
 801451a:	3304      	adds	r3, #4
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	429a      	cmp	r2, r3
 8014520:	d008      	beq.n	8014534 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014524:	681a      	ldr	r2, [r3, #0]
 8014526:	683b      	ldr	r3, [r7, #0]
 8014528:	3304      	adds	r3, #4
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	429a      	cmp	r2, r3
 801452e:	d101      	bne.n	8014534 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014532:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014536:	8a9b      	ldrh	r3, [r3, #20]
 8014538:	8a3a      	ldrh	r2, [r7, #16]
 801453a:	429a      	cmp	r2, r3
 801453c:	d118      	bne.n	8014570 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014540:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014542:	2b00      	cmp	r3, #0
 8014544:	d005      	beq.n	8014552 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014548:	685a      	ldr	r2, [r3, #4]
 801454a:	4b43      	ldr	r3, [pc, #268]	; (8014658 <udp_input+0x218>)
 801454c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801454e:	429a      	cmp	r2, r3
 8014550:	d10e      	bne.n	8014570 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014552:	6a3b      	ldr	r3, [r7, #32]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d014      	beq.n	8014582 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801455a:	68da      	ldr	r2, [r3, #12]
 801455c:	6a3b      	ldr	r3, [r7, #32]
 801455e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014560:	4b3e      	ldr	r3, [pc, #248]	; (801465c <udp_input+0x21c>)
 8014562:	681a      	ldr	r2, [r3, #0]
 8014564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014566:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014568:	4a3c      	ldr	r2, [pc, #240]	; (801465c <udp_input+0x21c>)
 801456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801456c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801456e:	e008      	b.n	8014582 <udp_input+0x142>
      }
    }

    prev = pcb;
 8014570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014572:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014576:	68db      	ldr	r3, [r3, #12]
 8014578:	627b      	str	r3, [r7, #36]	; 0x24
 801457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801457c:	2b00      	cmp	r3, #0
 801457e:	d1a7      	bne.n	80144d0 <udp_input+0x90>
 8014580:	e000      	b.n	8014584 <udp_input+0x144>
        break;
 8014582:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014586:	2b00      	cmp	r3, #0
 8014588:	d101      	bne.n	801458e <udp_input+0x14e>
    pcb = uncon_pcb;
 801458a:	69fb      	ldr	r3, [r7, #28]
 801458c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014590:	2b00      	cmp	r3, #0
 8014592:	d002      	beq.n	801459a <udp_input+0x15a>
    for_us = 1;
 8014594:	2301      	movs	r3, #1
 8014596:	76fb      	strb	r3, [r7, #27]
 8014598:	e00a      	b.n	80145b0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801459a:	683b      	ldr	r3, [r7, #0]
 801459c:	3304      	adds	r3, #4
 801459e:	681a      	ldr	r2, [r3, #0]
 80145a0:	4b2d      	ldr	r3, [pc, #180]	; (8014658 <udp_input+0x218>)
 80145a2:	695b      	ldr	r3, [r3, #20]
 80145a4:	429a      	cmp	r2, r3
 80145a6:	bf0c      	ite	eq
 80145a8:	2301      	moveq	r3, #1
 80145aa:	2300      	movne	r3, #0
 80145ac:	b2db      	uxtb	r3, r3
 80145ae:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80145b0:	7efb      	ldrb	r3, [r7, #27]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d041      	beq.n	801463a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80145b6:	2108      	movs	r1, #8
 80145b8:	6878      	ldr	r0, [r7, #4]
 80145ba:	f7f8 ffb9 	bl	800d530 <pbuf_remove_header>
 80145be:	4603      	mov	r3, r0
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d00a      	beq.n	80145da <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80145c4:	4b20      	ldr	r3, [pc, #128]	; (8014648 <udp_input+0x208>)
 80145c6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80145ca:	4925      	ldr	r1, [pc, #148]	; (8014660 <udp_input+0x220>)
 80145cc:	4820      	ldr	r0, [pc, #128]	; (8014650 <udp_input+0x210>)
 80145ce:	f003 f95d 	bl	801788c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80145d2:	6878      	ldr	r0, [r7, #4]
 80145d4:	f7f9 f832 	bl	800d63c <pbuf_free>
      goto end;
 80145d8:	e032      	b.n	8014640 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80145da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d012      	beq.n	8014606 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80145e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145e2:	699b      	ldr	r3, [r3, #24]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d00a      	beq.n	80145fe <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80145e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145ea:	699c      	ldr	r4, [r3, #24]
 80145ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145ee:	69d8      	ldr	r0, [r3, #28]
 80145f0:	8a3b      	ldrh	r3, [r7, #16]
 80145f2:	9300      	str	r3, [sp, #0]
 80145f4:	4b1b      	ldr	r3, [pc, #108]	; (8014664 <udp_input+0x224>)
 80145f6:	687a      	ldr	r2, [r7, #4]
 80145f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80145fa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80145fc:	e021      	b.n	8014642 <udp_input+0x202>
        pbuf_free(p);
 80145fe:	6878      	ldr	r0, [r7, #4]
 8014600:	f7f9 f81c 	bl	800d63c <pbuf_free>
        goto end;
 8014604:	e01c      	b.n	8014640 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014606:	7cfb      	ldrb	r3, [r7, #19]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d112      	bne.n	8014632 <udp_input+0x1f2>
 801460c:	4b12      	ldr	r3, [pc, #72]	; (8014658 <udp_input+0x218>)
 801460e:	695b      	ldr	r3, [r3, #20]
 8014610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014614:	2be0      	cmp	r3, #224	; 0xe0
 8014616:	d00c      	beq.n	8014632 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014618:	4b0f      	ldr	r3, [pc, #60]	; (8014658 <udp_input+0x218>)
 801461a:	899b      	ldrh	r3, [r3, #12]
 801461c:	3308      	adds	r3, #8
 801461e:	b29b      	uxth	r3, r3
 8014620:	b21b      	sxth	r3, r3
 8014622:	4619      	mov	r1, r3
 8014624:	6878      	ldr	r0, [r7, #4]
 8014626:	f7f8 fff6 	bl	800d616 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801462a:	2103      	movs	r1, #3
 801462c:	6878      	ldr	r0, [r7, #4]
 801462e:	f001 fc01 	bl	8015e34 <icmp_dest_unreach>
      pbuf_free(p);
 8014632:	6878      	ldr	r0, [r7, #4]
 8014634:	f7f9 f802 	bl	800d63c <pbuf_free>
  return;
 8014638:	e003      	b.n	8014642 <udp_input+0x202>
    pbuf_free(p);
 801463a:	6878      	ldr	r0, [r7, #4]
 801463c:	f7f8 fffe 	bl	800d63c <pbuf_free>
  return;
 8014640:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014642:	372c      	adds	r7, #44	; 0x2c
 8014644:	46bd      	mov	sp, r7
 8014646:	bd90      	pop	{r4, r7, pc}
 8014648:	0801b6cc 	.word	0x0801b6cc
 801464c:	0801b770 	.word	0x0801b770
 8014650:	0801b720 	.word	0x0801b720
 8014654:	0801b788 	.word	0x0801b788
 8014658:	20009ee8 	.word	0x20009ee8
 801465c:	2000d698 	.word	0x2000d698
 8014660:	0801b7a4 	.word	0x0801b7a4
 8014664:	20009ef8 	.word	0x20009ef8

08014668 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b082      	sub	sp, #8
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
 8014670:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d109      	bne.n	801468c <udp_send+0x24>
 8014678:	4b11      	ldr	r3, [pc, #68]	; (80146c0 <udp_send+0x58>)
 801467a:	f240 12d5 	movw	r2, #469	; 0x1d5
 801467e:	4911      	ldr	r1, [pc, #68]	; (80146c4 <udp_send+0x5c>)
 8014680:	4811      	ldr	r0, [pc, #68]	; (80146c8 <udp_send+0x60>)
 8014682:	f003 f903 	bl	801788c <iprintf>
 8014686:	f06f 030f 	mvn.w	r3, #15
 801468a:	e015      	b.n	80146b8 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d109      	bne.n	80146a6 <udp_send+0x3e>
 8014692:	4b0b      	ldr	r3, [pc, #44]	; (80146c0 <udp_send+0x58>)
 8014694:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8014698:	490c      	ldr	r1, [pc, #48]	; (80146cc <udp_send+0x64>)
 801469a:	480b      	ldr	r0, [pc, #44]	; (80146c8 <udp_send+0x60>)
 801469c:	f003 f8f6 	bl	801788c <iprintf>
 80146a0:	f06f 030f 	mvn.w	r3, #15
 80146a4:	e008      	b.n	80146b8 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	1d1a      	adds	r2, r3, #4
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	8a9b      	ldrh	r3, [r3, #20]
 80146ae:	6839      	ldr	r1, [r7, #0]
 80146b0:	6878      	ldr	r0, [r7, #4]
 80146b2:	f000 f80d 	bl	80146d0 <udp_sendto>
 80146b6:	4603      	mov	r3, r0
}
 80146b8:	4618      	mov	r0, r3
 80146ba:	3708      	adds	r7, #8
 80146bc:	46bd      	mov	sp, r7
 80146be:	bd80      	pop	{r7, pc}
 80146c0:	0801b6cc 	.word	0x0801b6cc
 80146c4:	0801b7c0 	.word	0x0801b7c0
 80146c8:	0801b720 	.word	0x0801b720
 80146cc:	0801b7d8 	.word	0x0801b7d8

080146d0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b088      	sub	sp, #32
 80146d4:	af02      	add	r7, sp, #8
 80146d6:	60f8      	str	r0, [r7, #12]
 80146d8:	60b9      	str	r1, [r7, #8]
 80146da:	607a      	str	r2, [r7, #4]
 80146dc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d109      	bne.n	80146f8 <udp_sendto+0x28>
 80146e4:	4b23      	ldr	r3, [pc, #140]	; (8014774 <udp_sendto+0xa4>)
 80146e6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80146ea:	4923      	ldr	r1, [pc, #140]	; (8014778 <udp_sendto+0xa8>)
 80146ec:	4823      	ldr	r0, [pc, #140]	; (801477c <udp_sendto+0xac>)
 80146ee:	f003 f8cd 	bl	801788c <iprintf>
 80146f2:	f06f 030f 	mvn.w	r3, #15
 80146f6:	e038      	b.n	801476a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80146f8:	68bb      	ldr	r3, [r7, #8]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d109      	bne.n	8014712 <udp_sendto+0x42>
 80146fe:	4b1d      	ldr	r3, [pc, #116]	; (8014774 <udp_sendto+0xa4>)
 8014700:	f240 2219 	movw	r2, #537	; 0x219
 8014704:	491e      	ldr	r1, [pc, #120]	; (8014780 <udp_sendto+0xb0>)
 8014706:	481d      	ldr	r0, [pc, #116]	; (801477c <udp_sendto+0xac>)
 8014708:	f003 f8c0 	bl	801788c <iprintf>
 801470c:	f06f 030f 	mvn.w	r3, #15
 8014710:	e02b      	b.n	801476a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d109      	bne.n	801472c <udp_sendto+0x5c>
 8014718:	4b16      	ldr	r3, [pc, #88]	; (8014774 <udp_sendto+0xa4>)
 801471a:	f240 221a 	movw	r2, #538	; 0x21a
 801471e:	4919      	ldr	r1, [pc, #100]	; (8014784 <udp_sendto+0xb4>)
 8014720:	4816      	ldr	r0, [pc, #88]	; (801477c <udp_sendto+0xac>)
 8014722:	f003 f8b3 	bl	801788c <iprintf>
 8014726:	f06f 030f 	mvn.w	r3, #15
 801472a:	e01e      	b.n	801476a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	7a1b      	ldrb	r3, [r3, #8]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d006      	beq.n	8014742 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	7a1b      	ldrb	r3, [r3, #8]
 8014738:	4618      	mov	r0, r3
 801473a:	f7f8 fbf1 	bl	800cf20 <netif_get_by_index>
 801473e:	6178      	str	r0, [r7, #20]
 8014740:	e003      	b.n	801474a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8014742:	6878      	ldr	r0, [r7, #4]
 8014744:	f001 fc00 	bl	8015f48 <ip4_route>
 8014748:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801474a:	697b      	ldr	r3, [r7, #20]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d102      	bne.n	8014756 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8014750:	f06f 0303 	mvn.w	r3, #3
 8014754:	e009      	b.n	801476a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8014756:	887a      	ldrh	r2, [r7, #2]
 8014758:	697b      	ldr	r3, [r7, #20]
 801475a:	9300      	str	r3, [sp, #0]
 801475c:	4613      	mov	r3, r2
 801475e:	687a      	ldr	r2, [r7, #4]
 8014760:	68b9      	ldr	r1, [r7, #8]
 8014762:	68f8      	ldr	r0, [r7, #12]
 8014764:	f000 f810 	bl	8014788 <udp_sendto_if>
 8014768:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801476a:	4618      	mov	r0, r3
 801476c:	3718      	adds	r7, #24
 801476e:	46bd      	mov	sp, r7
 8014770:	bd80      	pop	{r7, pc}
 8014772:	bf00      	nop
 8014774:	0801b6cc 	.word	0x0801b6cc
 8014778:	0801b7f0 	.word	0x0801b7f0
 801477c:	0801b720 	.word	0x0801b720
 8014780:	0801b808 	.word	0x0801b808
 8014784:	0801b824 	.word	0x0801b824

08014788 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8014788:	b580      	push	{r7, lr}
 801478a:	b088      	sub	sp, #32
 801478c:	af02      	add	r7, sp, #8
 801478e:	60f8      	str	r0, [r7, #12]
 8014790:	60b9      	str	r1, [r7, #8]
 8014792:	607a      	str	r2, [r7, #4]
 8014794:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d109      	bne.n	80147b0 <udp_sendto_if+0x28>
 801479c:	4b2e      	ldr	r3, [pc, #184]	; (8014858 <udp_sendto_if+0xd0>)
 801479e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80147a2:	492e      	ldr	r1, [pc, #184]	; (801485c <udp_sendto_if+0xd4>)
 80147a4:	482e      	ldr	r0, [pc, #184]	; (8014860 <udp_sendto_if+0xd8>)
 80147a6:	f003 f871 	bl	801788c <iprintf>
 80147aa:	f06f 030f 	mvn.w	r3, #15
 80147ae:	e04f      	b.n	8014850 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80147b0:	68bb      	ldr	r3, [r7, #8]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d109      	bne.n	80147ca <udp_sendto_if+0x42>
 80147b6:	4b28      	ldr	r3, [pc, #160]	; (8014858 <udp_sendto_if+0xd0>)
 80147b8:	f240 2281 	movw	r2, #641	; 0x281
 80147bc:	4929      	ldr	r1, [pc, #164]	; (8014864 <udp_sendto_if+0xdc>)
 80147be:	4828      	ldr	r0, [pc, #160]	; (8014860 <udp_sendto_if+0xd8>)
 80147c0:	f003 f864 	bl	801788c <iprintf>
 80147c4:	f06f 030f 	mvn.w	r3, #15
 80147c8:	e042      	b.n	8014850 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d109      	bne.n	80147e4 <udp_sendto_if+0x5c>
 80147d0:	4b21      	ldr	r3, [pc, #132]	; (8014858 <udp_sendto_if+0xd0>)
 80147d2:	f240 2282 	movw	r2, #642	; 0x282
 80147d6:	4924      	ldr	r1, [pc, #144]	; (8014868 <udp_sendto_if+0xe0>)
 80147d8:	4821      	ldr	r0, [pc, #132]	; (8014860 <udp_sendto_if+0xd8>)
 80147da:	f003 f857 	bl	801788c <iprintf>
 80147de:	f06f 030f 	mvn.w	r3, #15
 80147e2:	e035      	b.n	8014850 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80147e4:	6a3b      	ldr	r3, [r7, #32]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d109      	bne.n	80147fe <udp_sendto_if+0x76>
 80147ea:	4b1b      	ldr	r3, [pc, #108]	; (8014858 <udp_sendto_if+0xd0>)
 80147ec:	f240 2283 	movw	r2, #643	; 0x283
 80147f0:	491e      	ldr	r1, [pc, #120]	; (801486c <udp_sendto_if+0xe4>)
 80147f2:	481b      	ldr	r0, [pc, #108]	; (8014860 <udp_sendto_if+0xd8>)
 80147f4:	f003 f84a 	bl	801788c <iprintf>
 80147f8:	f06f 030f 	mvn.w	r3, #15
 80147fc:	e028      	b.n	8014850 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d009      	beq.n	8014818 <udp_sendto_if+0x90>
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d005      	beq.n	8014818 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014814:	2be0      	cmp	r3, #224	; 0xe0
 8014816:	d103      	bne.n	8014820 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8014818:	6a3b      	ldr	r3, [r7, #32]
 801481a:	3304      	adds	r3, #4
 801481c:	617b      	str	r3, [r7, #20]
 801481e:	e00b      	b.n	8014838 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	681a      	ldr	r2, [r3, #0]
 8014824:	6a3b      	ldr	r3, [r7, #32]
 8014826:	3304      	adds	r3, #4
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	429a      	cmp	r2, r3
 801482c:	d002      	beq.n	8014834 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801482e:	f06f 0303 	mvn.w	r3, #3
 8014832:	e00d      	b.n	8014850 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014838:	887a      	ldrh	r2, [r7, #2]
 801483a:	697b      	ldr	r3, [r7, #20]
 801483c:	9301      	str	r3, [sp, #4]
 801483e:	6a3b      	ldr	r3, [r7, #32]
 8014840:	9300      	str	r3, [sp, #0]
 8014842:	4613      	mov	r3, r2
 8014844:	687a      	ldr	r2, [r7, #4]
 8014846:	68b9      	ldr	r1, [r7, #8]
 8014848:	68f8      	ldr	r0, [r7, #12]
 801484a:	f000 f811 	bl	8014870 <udp_sendto_if_src>
 801484e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014850:	4618      	mov	r0, r3
 8014852:	3718      	adds	r7, #24
 8014854:	46bd      	mov	sp, r7
 8014856:	bd80      	pop	{r7, pc}
 8014858:	0801b6cc 	.word	0x0801b6cc
 801485c:	0801b840 	.word	0x0801b840
 8014860:	0801b720 	.word	0x0801b720
 8014864:	0801b85c 	.word	0x0801b85c
 8014868:	0801b878 	.word	0x0801b878
 801486c:	0801b898 	.word	0x0801b898

08014870 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b08c      	sub	sp, #48	; 0x30
 8014874:	af04      	add	r7, sp, #16
 8014876:	60f8      	str	r0, [r7, #12]
 8014878:	60b9      	str	r1, [r7, #8]
 801487a:	607a      	str	r2, [r7, #4]
 801487c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d109      	bne.n	8014898 <udp_sendto_if_src+0x28>
 8014884:	4b65      	ldr	r3, [pc, #404]	; (8014a1c <udp_sendto_if_src+0x1ac>)
 8014886:	f240 22d1 	movw	r2, #721	; 0x2d1
 801488a:	4965      	ldr	r1, [pc, #404]	; (8014a20 <udp_sendto_if_src+0x1b0>)
 801488c:	4865      	ldr	r0, [pc, #404]	; (8014a24 <udp_sendto_if_src+0x1b4>)
 801488e:	f002 fffd 	bl	801788c <iprintf>
 8014892:	f06f 030f 	mvn.w	r3, #15
 8014896:	e0bc      	b.n	8014a12 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d109      	bne.n	80148b2 <udp_sendto_if_src+0x42>
 801489e:	4b5f      	ldr	r3, [pc, #380]	; (8014a1c <udp_sendto_if_src+0x1ac>)
 80148a0:	f240 22d2 	movw	r2, #722	; 0x2d2
 80148a4:	4960      	ldr	r1, [pc, #384]	; (8014a28 <udp_sendto_if_src+0x1b8>)
 80148a6:	485f      	ldr	r0, [pc, #380]	; (8014a24 <udp_sendto_if_src+0x1b4>)
 80148a8:	f002 fff0 	bl	801788c <iprintf>
 80148ac:	f06f 030f 	mvn.w	r3, #15
 80148b0:	e0af      	b.n	8014a12 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d109      	bne.n	80148cc <udp_sendto_if_src+0x5c>
 80148b8:	4b58      	ldr	r3, [pc, #352]	; (8014a1c <udp_sendto_if_src+0x1ac>)
 80148ba:	f240 22d3 	movw	r2, #723	; 0x2d3
 80148be:	495b      	ldr	r1, [pc, #364]	; (8014a2c <udp_sendto_if_src+0x1bc>)
 80148c0:	4858      	ldr	r0, [pc, #352]	; (8014a24 <udp_sendto_if_src+0x1b4>)
 80148c2:	f002 ffe3 	bl	801788c <iprintf>
 80148c6:	f06f 030f 	mvn.w	r3, #15
 80148ca:	e0a2      	b.n	8014a12 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80148cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d109      	bne.n	80148e6 <udp_sendto_if_src+0x76>
 80148d2:	4b52      	ldr	r3, [pc, #328]	; (8014a1c <udp_sendto_if_src+0x1ac>)
 80148d4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80148d8:	4955      	ldr	r1, [pc, #340]	; (8014a30 <udp_sendto_if_src+0x1c0>)
 80148da:	4852      	ldr	r0, [pc, #328]	; (8014a24 <udp_sendto_if_src+0x1b4>)
 80148dc:	f002 ffd6 	bl	801788c <iprintf>
 80148e0:	f06f 030f 	mvn.w	r3, #15
 80148e4:	e095      	b.n	8014a12 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80148e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d109      	bne.n	8014900 <udp_sendto_if_src+0x90>
 80148ec:	4b4b      	ldr	r3, [pc, #300]	; (8014a1c <udp_sendto_if_src+0x1ac>)
 80148ee:	f240 22d5 	movw	r2, #725	; 0x2d5
 80148f2:	4950      	ldr	r1, [pc, #320]	; (8014a34 <udp_sendto_if_src+0x1c4>)
 80148f4:	484b      	ldr	r0, [pc, #300]	; (8014a24 <udp_sendto_if_src+0x1b4>)
 80148f6:	f002 ffc9 	bl	801788c <iprintf>
 80148fa:	f06f 030f 	mvn.w	r3, #15
 80148fe:	e088      	b.n	8014a12 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	8a5b      	ldrh	r3, [r3, #18]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d10f      	bne.n	8014928 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014908:	68f9      	ldr	r1, [r7, #12]
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	8a5b      	ldrh	r3, [r3, #18]
 801490e:	461a      	mov	r2, r3
 8014910:	68f8      	ldr	r0, [r7, #12]
 8014912:	f000 f893 	bl	8014a3c <udp_bind>
 8014916:	4603      	mov	r3, r0
 8014918:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801491a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d002      	beq.n	8014928 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8014922:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014926:	e074      	b.n	8014a12 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014928:	68bb      	ldr	r3, [r7, #8]
 801492a:	891b      	ldrh	r3, [r3, #8]
 801492c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014930:	4293      	cmp	r3, r2
 8014932:	d902      	bls.n	801493a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8014934:	f04f 33ff 	mov.w	r3, #4294967295
 8014938:	e06b      	b.n	8014a12 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801493a:	2108      	movs	r1, #8
 801493c:	68b8      	ldr	r0, [r7, #8]
 801493e:	f7f8 fde7 	bl	800d510 <pbuf_add_header>
 8014942:	4603      	mov	r3, r0
 8014944:	2b00      	cmp	r3, #0
 8014946:	d015      	beq.n	8014974 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014948:	f44f 7220 	mov.w	r2, #640	; 0x280
 801494c:	2108      	movs	r1, #8
 801494e:	2022      	movs	r0, #34	; 0x22
 8014950:	f7f8 fb90 	bl	800d074 <pbuf_alloc>
 8014954:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8014956:	69fb      	ldr	r3, [r7, #28]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d102      	bne.n	8014962 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801495c:	f04f 33ff 	mov.w	r3, #4294967295
 8014960:	e057      	b.n	8014a12 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8014962:	68bb      	ldr	r3, [r7, #8]
 8014964:	891b      	ldrh	r3, [r3, #8]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d006      	beq.n	8014978 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801496a:	68b9      	ldr	r1, [r7, #8]
 801496c:	69f8      	ldr	r0, [r7, #28]
 801496e:	f7f8 ff89 	bl	800d884 <pbuf_chain>
 8014972:	e001      	b.n	8014978 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014974:	68bb      	ldr	r3, [r7, #8]
 8014976:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014978:	69fb      	ldr	r3, [r7, #28]
 801497a:	895b      	ldrh	r3, [r3, #10]
 801497c:	2b07      	cmp	r3, #7
 801497e:	d806      	bhi.n	801498e <udp_sendto_if_src+0x11e>
 8014980:	4b26      	ldr	r3, [pc, #152]	; (8014a1c <udp_sendto_if_src+0x1ac>)
 8014982:	f240 320d 	movw	r2, #781	; 0x30d
 8014986:	492c      	ldr	r1, [pc, #176]	; (8014a38 <udp_sendto_if_src+0x1c8>)
 8014988:	4826      	ldr	r0, [pc, #152]	; (8014a24 <udp_sendto_if_src+0x1b4>)
 801498a:	f002 ff7f 	bl	801788c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801498e:	69fb      	ldr	r3, [r7, #28]
 8014990:	685b      	ldr	r3, [r3, #4]
 8014992:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	8a5b      	ldrh	r3, [r3, #18]
 8014998:	4618      	mov	r0, r3
 801499a:	f7f7 fa5d 	bl	800be58 <lwip_htons>
 801499e:	4603      	mov	r3, r0
 80149a0:	461a      	mov	r2, r3
 80149a2:	697b      	ldr	r3, [r7, #20]
 80149a4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80149a6:	887b      	ldrh	r3, [r7, #2]
 80149a8:	4618      	mov	r0, r3
 80149aa:	f7f7 fa55 	bl	800be58 <lwip_htons>
 80149ae:	4603      	mov	r3, r0
 80149b0:	461a      	mov	r2, r3
 80149b2:	697b      	ldr	r3, [r7, #20]
 80149b4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80149b6:	697b      	ldr	r3, [r7, #20]
 80149b8:	2200      	movs	r2, #0
 80149ba:	719a      	strb	r2, [r3, #6]
 80149bc:	2200      	movs	r2, #0
 80149be:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80149c0:	69fb      	ldr	r3, [r7, #28]
 80149c2:	891b      	ldrh	r3, [r3, #8]
 80149c4:	4618      	mov	r0, r3
 80149c6:	f7f7 fa47 	bl	800be58 <lwip_htons>
 80149ca:	4603      	mov	r3, r0
 80149cc:	461a      	mov	r2, r3
 80149ce:	697b      	ldr	r3, [r7, #20]
 80149d0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80149d2:	2311      	movs	r3, #17
 80149d4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	7adb      	ldrb	r3, [r3, #11]
 80149da:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	7a9b      	ldrb	r3, [r3, #10]
 80149e0:	7cb9      	ldrb	r1, [r7, #18]
 80149e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80149e4:	9202      	str	r2, [sp, #8]
 80149e6:	7cfa      	ldrb	r2, [r7, #19]
 80149e8:	9201      	str	r2, [sp, #4]
 80149ea:	9300      	str	r3, [sp, #0]
 80149ec:	460b      	mov	r3, r1
 80149ee:	687a      	ldr	r2, [r7, #4]
 80149f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80149f2:	69f8      	ldr	r0, [r7, #28]
 80149f4:	f001 fc90 	bl	8016318 <ip4_output_if_src>
 80149f8:	4603      	mov	r3, r0
 80149fa:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80149fc:	69fa      	ldr	r2, [r7, #28]
 80149fe:	68bb      	ldr	r3, [r7, #8]
 8014a00:	429a      	cmp	r2, r3
 8014a02:	d004      	beq.n	8014a0e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8014a04:	69f8      	ldr	r0, [r7, #28]
 8014a06:	f7f8 fe19 	bl	800d63c <pbuf_free>
    q = NULL;
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014a0e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8014a12:	4618      	mov	r0, r3
 8014a14:	3720      	adds	r7, #32
 8014a16:	46bd      	mov	sp, r7
 8014a18:	bd80      	pop	{r7, pc}
 8014a1a:	bf00      	nop
 8014a1c:	0801b6cc 	.word	0x0801b6cc
 8014a20:	0801b8b8 	.word	0x0801b8b8
 8014a24:	0801b720 	.word	0x0801b720
 8014a28:	0801b8d8 	.word	0x0801b8d8
 8014a2c:	0801b8f8 	.word	0x0801b8f8
 8014a30:	0801b91c 	.word	0x0801b91c
 8014a34:	0801b940 	.word	0x0801b940
 8014a38:	0801b964 	.word	0x0801b964

08014a3c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b086      	sub	sp, #24
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	60f8      	str	r0, [r7, #12]
 8014a44:	60b9      	str	r1, [r7, #8]
 8014a46:	4613      	mov	r3, r2
 8014a48:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014a4a:	68bb      	ldr	r3, [r7, #8]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d101      	bne.n	8014a54 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014a50:	4b39      	ldr	r3, [pc, #228]	; (8014b38 <udp_bind+0xfc>)
 8014a52:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d109      	bne.n	8014a6e <udp_bind+0x32>
 8014a5a:	4b38      	ldr	r3, [pc, #224]	; (8014b3c <udp_bind+0x100>)
 8014a5c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014a60:	4937      	ldr	r1, [pc, #220]	; (8014b40 <udp_bind+0x104>)
 8014a62:	4838      	ldr	r0, [pc, #224]	; (8014b44 <udp_bind+0x108>)
 8014a64:	f002 ff12 	bl	801788c <iprintf>
 8014a68:	f06f 030f 	mvn.w	r3, #15
 8014a6c:	e060      	b.n	8014b30 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014a6e:	2300      	movs	r3, #0
 8014a70:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014a72:	4b35      	ldr	r3, [pc, #212]	; (8014b48 <udp_bind+0x10c>)
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	617b      	str	r3, [r7, #20]
 8014a78:	e009      	b.n	8014a8e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014a7a:	68fa      	ldr	r2, [r7, #12]
 8014a7c:	697b      	ldr	r3, [r7, #20]
 8014a7e:	429a      	cmp	r2, r3
 8014a80:	d102      	bne.n	8014a88 <udp_bind+0x4c>
      rebind = 1;
 8014a82:	2301      	movs	r3, #1
 8014a84:	74fb      	strb	r3, [r7, #19]
      break;
 8014a86:	e005      	b.n	8014a94 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014a88:	697b      	ldr	r3, [r7, #20]
 8014a8a:	68db      	ldr	r3, [r3, #12]
 8014a8c:	617b      	str	r3, [r7, #20]
 8014a8e:	697b      	ldr	r3, [r7, #20]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d1f2      	bne.n	8014a7a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014a94:	88fb      	ldrh	r3, [r7, #6]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d109      	bne.n	8014aae <udp_bind+0x72>
    port = udp_new_port();
 8014a9a:	f7ff fc35 	bl	8014308 <udp_new_port>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014aa2:	88fb      	ldrh	r3, [r7, #6]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d12c      	bne.n	8014b02 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014aa8:	f06f 0307 	mvn.w	r3, #7
 8014aac:	e040      	b.n	8014b30 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014aae:	4b26      	ldr	r3, [pc, #152]	; (8014b48 <udp_bind+0x10c>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	617b      	str	r3, [r7, #20]
 8014ab4:	e022      	b.n	8014afc <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014ab6:	68fa      	ldr	r2, [r7, #12]
 8014ab8:	697b      	ldr	r3, [r7, #20]
 8014aba:	429a      	cmp	r2, r3
 8014abc:	d01b      	beq.n	8014af6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014abe:	697b      	ldr	r3, [r7, #20]
 8014ac0:	8a5b      	ldrh	r3, [r3, #18]
 8014ac2:	88fa      	ldrh	r2, [r7, #6]
 8014ac4:	429a      	cmp	r2, r3
 8014ac6:	d116      	bne.n	8014af6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014ac8:	697b      	ldr	r3, [r7, #20]
 8014aca:	681a      	ldr	r2, [r3, #0]
 8014acc:	68bb      	ldr	r3, [r7, #8]
 8014ace:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014ad0:	429a      	cmp	r2, r3
 8014ad2:	d00d      	beq.n	8014af0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014ad4:	68bb      	ldr	r3, [r7, #8]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d00a      	beq.n	8014af0 <udp_bind+0xb4>
 8014ada:	68bb      	ldr	r3, [r7, #8]
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d006      	beq.n	8014af0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014ae2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d003      	beq.n	8014af0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014ae8:	697b      	ldr	r3, [r7, #20]
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d102      	bne.n	8014af6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014af0:	f06f 0307 	mvn.w	r3, #7
 8014af4:	e01c      	b.n	8014b30 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014af6:	697b      	ldr	r3, [r7, #20]
 8014af8:	68db      	ldr	r3, [r3, #12]
 8014afa:	617b      	str	r3, [r7, #20]
 8014afc:	697b      	ldr	r3, [r7, #20]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d1d9      	bne.n	8014ab6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014b02:	68bb      	ldr	r3, [r7, #8]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d002      	beq.n	8014b0e <udp_bind+0xd2>
 8014b08:	68bb      	ldr	r3, [r7, #8]
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	e000      	b.n	8014b10 <udp_bind+0xd4>
 8014b0e:	2300      	movs	r3, #0
 8014b10:	68fa      	ldr	r2, [r7, #12]
 8014b12:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	88fa      	ldrh	r2, [r7, #6]
 8014b18:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014b1a:	7cfb      	ldrb	r3, [r7, #19]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d106      	bne.n	8014b2e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014b20:	4b09      	ldr	r3, [pc, #36]	; (8014b48 <udp_bind+0x10c>)
 8014b22:	681a      	ldr	r2, [r3, #0]
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014b28:	4a07      	ldr	r2, [pc, #28]	; (8014b48 <udp_bind+0x10c>)
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014b2e:	2300      	movs	r3, #0
}
 8014b30:	4618      	mov	r0, r3
 8014b32:	3718      	adds	r7, #24
 8014b34:	46bd      	mov	sp, r7
 8014b36:	bd80      	pop	{r7, pc}
 8014b38:	0801c298 	.word	0x0801c298
 8014b3c:	0801b6cc 	.word	0x0801b6cc
 8014b40:	0801b994 	.word	0x0801b994
 8014b44:	0801b720 	.word	0x0801b720
 8014b48:	2000d698 	.word	0x2000d698

08014b4c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014b4c:	b580      	push	{r7, lr}
 8014b4e:	b086      	sub	sp, #24
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	60f8      	str	r0, [r7, #12]
 8014b54:	60b9      	str	r1, [r7, #8]
 8014b56:	4613      	mov	r3, r2
 8014b58:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d109      	bne.n	8014b74 <udp_connect+0x28>
 8014b60:	4b2c      	ldr	r3, [pc, #176]	; (8014c14 <udp_connect+0xc8>)
 8014b62:	f240 4235 	movw	r2, #1077	; 0x435
 8014b66:	492c      	ldr	r1, [pc, #176]	; (8014c18 <udp_connect+0xcc>)
 8014b68:	482c      	ldr	r0, [pc, #176]	; (8014c1c <udp_connect+0xd0>)
 8014b6a:	f002 fe8f 	bl	801788c <iprintf>
 8014b6e:	f06f 030f 	mvn.w	r3, #15
 8014b72:	e04b      	b.n	8014c0c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014b74:	68bb      	ldr	r3, [r7, #8]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d109      	bne.n	8014b8e <udp_connect+0x42>
 8014b7a:	4b26      	ldr	r3, [pc, #152]	; (8014c14 <udp_connect+0xc8>)
 8014b7c:	f240 4236 	movw	r2, #1078	; 0x436
 8014b80:	4927      	ldr	r1, [pc, #156]	; (8014c20 <udp_connect+0xd4>)
 8014b82:	4826      	ldr	r0, [pc, #152]	; (8014c1c <udp_connect+0xd0>)
 8014b84:	f002 fe82 	bl	801788c <iprintf>
 8014b88:	f06f 030f 	mvn.w	r3, #15
 8014b8c:	e03e      	b.n	8014c0c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	8a5b      	ldrh	r3, [r3, #18]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d10f      	bne.n	8014bb6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014b96:	68f9      	ldr	r1, [r7, #12]
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	8a5b      	ldrh	r3, [r3, #18]
 8014b9c:	461a      	mov	r2, r3
 8014b9e:	68f8      	ldr	r0, [r7, #12]
 8014ba0:	f7ff ff4c 	bl	8014a3c <udp_bind>
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014ba8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d002      	beq.n	8014bb6 <udp_connect+0x6a>
      return err;
 8014bb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014bb4:	e02a      	b.n	8014c0c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8014bb6:	68bb      	ldr	r3, [r7, #8]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d002      	beq.n	8014bc2 <udp_connect+0x76>
 8014bbc:	68bb      	ldr	r3, [r7, #8]
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	e000      	b.n	8014bc4 <udp_connect+0x78>
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	68fa      	ldr	r2, [r7, #12]
 8014bc6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	88fa      	ldrh	r2, [r7, #6]
 8014bcc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	7c1b      	ldrb	r3, [r3, #16]
 8014bd2:	f043 0304 	orr.w	r3, r3, #4
 8014bd6:	b2da      	uxtb	r2, r3
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014bdc:	4b11      	ldr	r3, [pc, #68]	; (8014c24 <udp_connect+0xd8>)
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	617b      	str	r3, [r7, #20]
 8014be2:	e008      	b.n	8014bf6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8014be4:	68fa      	ldr	r2, [r7, #12]
 8014be6:	697b      	ldr	r3, [r7, #20]
 8014be8:	429a      	cmp	r2, r3
 8014bea:	d101      	bne.n	8014bf0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014bec:	2300      	movs	r3, #0
 8014bee:	e00d      	b.n	8014c0c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014bf0:	697b      	ldr	r3, [r7, #20]
 8014bf2:	68db      	ldr	r3, [r3, #12]
 8014bf4:	617b      	str	r3, [r7, #20]
 8014bf6:	697b      	ldr	r3, [r7, #20]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d1f3      	bne.n	8014be4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014bfc:	4b09      	ldr	r3, [pc, #36]	; (8014c24 <udp_connect+0xd8>)
 8014bfe:	681a      	ldr	r2, [r3, #0]
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014c04:	4a07      	ldr	r2, [pc, #28]	; (8014c24 <udp_connect+0xd8>)
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8014c0a:	2300      	movs	r3, #0
}
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	3718      	adds	r7, #24
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bd80      	pop	{r7, pc}
 8014c14:	0801b6cc 	.word	0x0801b6cc
 8014c18:	0801b9ac 	.word	0x0801b9ac
 8014c1c:	0801b720 	.word	0x0801b720
 8014c20:	0801b9c8 	.word	0x0801b9c8
 8014c24:	2000d698 	.word	0x2000d698

08014c28 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	b084      	sub	sp, #16
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	60f8      	str	r0, [r7, #12]
 8014c30:	60b9      	str	r1, [r7, #8]
 8014c32:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d107      	bne.n	8014c4a <udp_recv+0x22>
 8014c3a:	4b08      	ldr	r3, [pc, #32]	; (8014c5c <udp_recv+0x34>)
 8014c3c:	f240 428a 	movw	r2, #1162	; 0x48a
 8014c40:	4907      	ldr	r1, [pc, #28]	; (8014c60 <udp_recv+0x38>)
 8014c42:	4808      	ldr	r0, [pc, #32]	; (8014c64 <udp_recv+0x3c>)
 8014c44:	f002 fe22 	bl	801788c <iprintf>
 8014c48:	e005      	b.n	8014c56 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	68ba      	ldr	r2, [r7, #8]
 8014c4e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	687a      	ldr	r2, [r7, #4]
 8014c54:	61da      	str	r2, [r3, #28]
}
 8014c56:	3710      	adds	r7, #16
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	bd80      	pop	{r7, pc}
 8014c5c:	0801b6cc 	.word	0x0801b6cc
 8014c60:	0801ba00 	.word	0x0801ba00
 8014c64:	0801b720 	.word	0x0801b720

08014c68 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b084      	sub	sp, #16
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d107      	bne.n	8014c86 <udp_remove+0x1e>
 8014c76:	4b19      	ldr	r3, [pc, #100]	; (8014cdc <udp_remove+0x74>)
 8014c78:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014c7c:	4918      	ldr	r1, [pc, #96]	; (8014ce0 <udp_remove+0x78>)
 8014c7e:	4819      	ldr	r0, [pc, #100]	; (8014ce4 <udp_remove+0x7c>)
 8014c80:	f002 fe04 	bl	801788c <iprintf>
 8014c84:	e026      	b.n	8014cd4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014c86:	4b18      	ldr	r3, [pc, #96]	; (8014ce8 <udp_remove+0x80>)
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	687a      	ldr	r2, [r7, #4]
 8014c8c:	429a      	cmp	r2, r3
 8014c8e:	d105      	bne.n	8014c9c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014c90:	4b15      	ldr	r3, [pc, #84]	; (8014ce8 <udp_remove+0x80>)
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	68db      	ldr	r3, [r3, #12]
 8014c96:	4a14      	ldr	r2, [pc, #80]	; (8014ce8 <udp_remove+0x80>)
 8014c98:	6013      	str	r3, [r2, #0]
 8014c9a:	e017      	b.n	8014ccc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014c9c:	4b12      	ldr	r3, [pc, #72]	; (8014ce8 <udp_remove+0x80>)
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	60fb      	str	r3, [r7, #12]
 8014ca2:	e010      	b.n	8014cc6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	68db      	ldr	r3, [r3, #12]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d009      	beq.n	8014cc0 <udp_remove+0x58>
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	68db      	ldr	r3, [r3, #12]
 8014cb0:	687a      	ldr	r2, [r7, #4]
 8014cb2:	429a      	cmp	r2, r3
 8014cb4:	d104      	bne.n	8014cc0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	68da      	ldr	r2, [r3, #12]
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	60da      	str	r2, [r3, #12]
        break;
 8014cbe:	e005      	b.n	8014ccc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	68db      	ldr	r3, [r3, #12]
 8014cc4:	60fb      	str	r3, [r7, #12]
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d1eb      	bne.n	8014ca4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014ccc:	6879      	ldr	r1, [r7, #4]
 8014cce:	2000      	movs	r0, #0
 8014cd0:	f7f7 fe10 	bl	800c8f4 <memp_free>
}
 8014cd4:	3710      	adds	r7, #16
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	bd80      	pop	{r7, pc}
 8014cda:	bf00      	nop
 8014cdc:	0801b6cc 	.word	0x0801b6cc
 8014ce0:	0801ba18 	.word	0x0801ba18
 8014ce4:	0801b720 	.word	0x0801b720
 8014ce8:	2000d698 	.word	0x2000d698

08014cec <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b082      	sub	sp, #8
 8014cf0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014cf2:	2000      	movs	r0, #0
 8014cf4:	f7f7 fd88 	bl	800c808 <memp_malloc>
 8014cf8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d007      	beq.n	8014d10 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014d00:	2220      	movs	r2, #32
 8014d02:	2100      	movs	r1, #0
 8014d04:	6878      	ldr	r0, [r7, #4]
 8014d06:	f002 fe60 	bl	80179ca <memset>
    pcb->ttl = UDP_TTL;
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	22ff      	movs	r2, #255	; 0xff
 8014d0e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014d10:	687b      	ldr	r3, [r7, #4]
}
 8014d12:	4618      	mov	r0, r3
 8014d14:	3708      	adds	r7, #8
 8014d16:	46bd      	mov	sp, r7
 8014d18:	bd80      	pop	{r7, pc}

08014d1a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014d1a:	b580      	push	{r7, lr}
 8014d1c:	b084      	sub	sp, #16
 8014d1e:	af00      	add	r7, sp, #0
 8014d20:	4603      	mov	r3, r0
 8014d22:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014d24:	f7ff ffe2 	bl	8014cec <udp_new>
 8014d28:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014d2a:	68fb      	ldr	r3, [r7, #12]
}
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	3710      	adds	r7, #16
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd80      	pop	{r7, pc}

08014d34 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014d34:	b480      	push	{r7}
 8014d36:	b085      	sub	sp, #20
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
 8014d3c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d01e      	beq.n	8014d82 <udp_netif_ip_addr_changed+0x4e>
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d01a      	beq.n	8014d82 <udp_netif_ip_addr_changed+0x4e>
 8014d4c:	683b      	ldr	r3, [r7, #0]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d017      	beq.n	8014d82 <udp_netif_ip_addr_changed+0x4e>
 8014d52:	683b      	ldr	r3, [r7, #0]
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d013      	beq.n	8014d82 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014d5a:	4b0d      	ldr	r3, [pc, #52]	; (8014d90 <udp_netif_ip_addr_changed+0x5c>)
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	60fb      	str	r3, [r7, #12]
 8014d60:	e00c      	b.n	8014d7c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	681a      	ldr	r2, [r3, #0]
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	d103      	bne.n	8014d76 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	681a      	ldr	r2, [r3, #0]
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	68db      	ldr	r3, [r3, #12]
 8014d7a:	60fb      	str	r3, [r7, #12]
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d1ef      	bne.n	8014d62 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014d82:	bf00      	nop
 8014d84:	3714      	adds	r7, #20
 8014d86:	46bd      	mov	sp, r7
 8014d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8c:	4770      	bx	lr
 8014d8e:	bf00      	nop
 8014d90:	2000d698 	.word	0x2000d698

08014d94 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014d94:	b580      	push	{r7, lr}
 8014d96:	b082      	sub	sp, #8
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014d9c:	4915      	ldr	r1, [pc, #84]	; (8014df4 <etharp_free_entry+0x60>)
 8014d9e:	687a      	ldr	r2, [r7, #4]
 8014da0:	4613      	mov	r3, r2
 8014da2:	005b      	lsls	r3, r3, #1
 8014da4:	4413      	add	r3, r2
 8014da6:	00db      	lsls	r3, r3, #3
 8014da8:	440b      	add	r3, r1
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d013      	beq.n	8014dd8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014db0:	4910      	ldr	r1, [pc, #64]	; (8014df4 <etharp_free_entry+0x60>)
 8014db2:	687a      	ldr	r2, [r7, #4]
 8014db4:	4613      	mov	r3, r2
 8014db6:	005b      	lsls	r3, r3, #1
 8014db8:	4413      	add	r3, r2
 8014dba:	00db      	lsls	r3, r3, #3
 8014dbc:	440b      	add	r3, r1
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f7f8 fc3b 	bl	800d63c <pbuf_free>
    arp_table[i].q = NULL;
 8014dc6:	490b      	ldr	r1, [pc, #44]	; (8014df4 <etharp_free_entry+0x60>)
 8014dc8:	687a      	ldr	r2, [r7, #4]
 8014dca:	4613      	mov	r3, r2
 8014dcc:	005b      	lsls	r3, r3, #1
 8014dce:	4413      	add	r3, r2
 8014dd0:	00db      	lsls	r3, r3, #3
 8014dd2:	440b      	add	r3, r1
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014dd8:	4906      	ldr	r1, [pc, #24]	; (8014df4 <etharp_free_entry+0x60>)
 8014dda:	687a      	ldr	r2, [r7, #4]
 8014ddc:	4613      	mov	r3, r2
 8014dde:	005b      	lsls	r3, r3, #1
 8014de0:	4413      	add	r3, r2
 8014de2:	00db      	lsls	r3, r3, #3
 8014de4:	440b      	add	r3, r1
 8014de6:	3314      	adds	r3, #20
 8014de8:	2200      	movs	r2, #0
 8014dea:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014dec:	bf00      	nop
 8014dee:	3708      	adds	r7, #8
 8014df0:	46bd      	mov	sp, r7
 8014df2:	bd80      	pop	{r7, pc}
 8014df4:	2000d69c 	.word	0x2000d69c

08014df8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014df8:	b580      	push	{r7, lr}
 8014dfa:	b082      	sub	sp, #8
 8014dfc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014dfe:	2300      	movs	r3, #0
 8014e00:	607b      	str	r3, [r7, #4]
 8014e02:	e096      	b.n	8014f32 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014e04:	494f      	ldr	r1, [pc, #316]	; (8014f44 <etharp_tmr+0x14c>)
 8014e06:	687a      	ldr	r2, [r7, #4]
 8014e08:	4613      	mov	r3, r2
 8014e0a:	005b      	lsls	r3, r3, #1
 8014e0c:	4413      	add	r3, r2
 8014e0e:	00db      	lsls	r3, r3, #3
 8014e10:	440b      	add	r3, r1
 8014e12:	3314      	adds	r3, #20
 8014e14:	781b      	ldrb	r3, [r3, #0]
 8014e16:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014e18:	78fb      	ldrb	r3, [r7, #3]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	f000 8086 	beq.w	8014f2c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014e20:	4948      	ldr	r1, [pc, #288]	; (8014f44 <etharp_tmr+0x14c>)
 8014e22:	687a      	ldr	r2, [r7, #4]
 8014e24:	4613      	mov	r3, r2
 8014e26:	005b      	lsls	r3, r3, #1
 8014e28:	4413      	add	r3, r2
 8014e2a:	00db      	lsls	r3, r3, #3
 8014e2c:	440b      	add	r3, r1
 8014e2e:	3312      	adds	r3, #18
 8014e30:	881b      	ldrh	r3, [r3, #0]
 8014e32:	3301      	adds	r3, #1
 8014e34:	b298      	uxth	r0, r3
 8014e36:	4943      	ldr	r1, [pc, #268]	; (8014f44 <etharp_tmr+0x14c>)
 8014e38:	687a      	ldr	r2, [r7, #4]
 8014e3a:	4613      	mov	r3, r2
 8014e3c:	005b      	lsls	r3, r3, #1
 8014e3e:	4413      	add	r3, r2
 8014e40:	00db      	lsls	r3, r3, #3
 8014e42:	440b      	add	r3, r1
 8014e44:	3312      	adds	r3, #18
 8014e46:	4602      	mov	r2, r0
 8014e48:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014e4a:	493e      	ldr	r1, [pc, #248]	; (8014f44 <etharp_tmr+0x14c>)
 8014e4c:	687a      	ldr	r2, [r7, #4]
 8014e4e:	4613      	mov	r3, r2
 8014e50:	005b      	lsls	r3, r3, #1
 8014e52:	4413      	add	r3, r2
 8014e54:	00db      	lsls	r3, r3, #3
 8014e56:	440b      	add	r3, r1
 8014e58:	3312      	adds	r3, #18
 8014e5a:	881b      	ldrh	r3, [r3, #0]
 8014e5c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014e60:	d215      	bcs.n	8014e8e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014e62:	4938      	ldr	r1, [pc, #224]	; (8014f44 <etharp_tmr+0x14c>)
 8014e64:	687a      	ldr	r2, [r7, #4]
 8014e66:	4613      	mov	r3, r2
 8014e68:	005b      	lsls	r3, r3, #1
 8014e6a:	4413      	add	r3, r2
 8014e6c:	00db      	lsls	r3, r3, #3
 8014e6e:	440b      	add	r3, r1
 8014e70:	3314      	adds	r3, #20
 8014e72:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014e74:	2b01      	cmp	r3, #1
 8014e76:	d10e      	bne.n	8014e96 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014e78:	4932      	ldr	r1, [pc, #200]	; (8014f44 <etharp_tmr+0x14c>)
 8014e7a:	687a      	ldr	r2, [r7, #4]
 8014e7c:	4613      	mov	r3, r2
 8014e7e:	005b      	lsls	r3, r3, #1
 8014e80:	4413      	add	r3, r2
 8014e82:	00db      	lsls	r3, r3, #3
 8014e84:	440b      	add	r3, r1
 8014e86:	3312      	adds	r3, #18
 8014e88:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014e8a:	2b04      	cmp	r3, #4
 8014e8c:	d903      	bls.n	8014e96 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014e8e:	6878      	ldr	r0, [r7, #4]
 8014e90:	f7ff ff80 	bl	8014d94 <etharp_free_entry>
 8014e94:	e04a      	b.n	8014f2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014e96:	492b      	ldr	r1, [pc, #172]	; (8014f44 <etharp_tmr+0x14c>)
 8014e98:	687a      	ldr	r2, [r7, #4]
 8014e9a:	4613      	mov	r3, r2
 8014e9c:	005b      	lsls	r3, r3, #1
 8014e9e:	4413      	add	r3, r2
 8014ea0:	00db      	lsls	r3, r3, #3
 8014ea2:	440b      	add	r3, r1
 8014ea4:	3314      	adds	r3, #20
 8014ea6:	781b      	ldrb	r3, [r3, #0]
 8014ea8:	2b03      	cmp	r3, #3
 8014eaa:	d10a      	bne.n	8014ec2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014eac:	4925      	ldr	r1, [pc, #148]	; (8014f44 <etharp_tmr+0x14c>)
 8014eae:	687a      	ldr	r2, [r7, #4]
 8014eb0:	4613      	mov	r3, r2
 8014eb2:	005b      	lsls	r3, r3, #1
 8014eb4:	4413      	add	r3, r2
 8014eb6:	00db      	lsls	r3, r3, #3
 8014eb8:	440b      	add	r3, r1
 8014eba:	3314      	adds	r3, #20
 8014ebc:	2204      	movs	r2, #4
 8014ebe:	701a      	strb	r2, [r3, #0]
 8014ec0:	e034      	b.n	8014f2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014ec2:	4920      	ldr	r1, [pc, #128]	; (8014f44 <etharp_tmr+0x14c>)
 8014ec4:	687a      	ldr	r2, [r7, #4]
 8014ec6:	4613      	mov	r3, r2
 8014ec8:	005b      	lsls	r3, r3, #1
 8014eca:	4413      	add	r3, r2
 8014ecc:	00db      	lsls	r3, r3, #3
 8014ece:	440b      	add	r3, r1
 8014ed0:	3314      	adds	r3, #20
 8014ed2:	781b      	ldrb	r3, [r3, #0]
 8014ed4:	2b04      	cmp	r3, #4
 8014ed6:	d10a      	bne.n	8014eee <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014ed8:	491a      	ldr	r1, [pc, #104]	; (8014f44 <etharp_tmr+0x14c>)
 8014eda:	687a      	ldr	r2, [r7, #4]
 8014edc:	4613      	mov	r3, r2
 8014ede:	005b      	lsls	r3, r3, #1
 8014ee0:	4413      	add	r3, r2
 8014ee2:	00db      	lsls	r3, r3, #3
 8014ee4:	440b      	add	r3, r1
 8014ee6:	3314      	adds	r3, #20
 8014ee8:	2202      	movs	r2, #2
 8014eea:	701a      	strb	r2, [r3, #0]
 8014eec:	e01e      	b.n	8014f2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014eee:	4915      	ldr	r1, [pc, #84]	; (8014f44 <etharp_tmr+0x14c>)
 8014ef0:	687a      	ldr	r2, [r7, #4]
 8014ef2:	4613      	mov	r3, r2
 8014ef4:	005b      	lsls	r3, r3, #1
 8014ef6:	4413      	add	r3, r2
 8014ef8:	00db      	lsls	r3, r3, #3
 8014efa:	440b      	add	r3, r1
 8014efc:	3314      	adds	r3, #20
 8014efe:	781b      	ldrb	r3, [r3, #0]
 8014f00:	2b01      	cmp	r3, #1
 8014f02:	d113      	bne.n	8014f2c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014f04:	490f      	ldr	r1, [pc, #60]	; (8014f44 <etharp_tmr+0x14c>)
 8014f06:	687a      	ldr	r2, [r7, #4]
 8014f08:	4613      	mov	r3, r2
 8014f0a:	005b      	lsls	r3, r3, #1
 8014f0c:	4413      	add	r3, r2
 8014f0e:	00db      	lsls	r3, r3, #3
 8014f10:	440b      	add	r3, r1
 8014f12:	3308      	adds	r3, #8
 8014f14:	6818      	ldr	r0, [r3, #0]
 8014f16:	687a      	ldr	r2, [r7, #4]
 8014f18:	4613      	mov	r3, r2
 8014f1a:	005b      	lsls	r3, r3, #1
 8014f1c:	4413      	add	r3, r2
 8014f1e:	00db      	lsls	r3, r3, #3
 8014f20:	4a08      	ldr	r2, [pc, #32]	; (8014f44 <etharp_tmr+0x14c>)
 8014f22:	4413      	add	r3, r2
 8014f24:	3304      	adds	r3, #4
 8014f26:	4619      	mov	r1, r3
 8014f28:	f000 fe6e 	bl	8015c08 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	3301      	adds	r3, #1
 8014f30:	607b      	str	r3, [r7, #4]
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	2b09      	cmp	r3, #9
 8014f36:	f77f af65 	ble.w	8014e04 <etharp_tmr+0xc>
      }
    }
  }
}
 8014f3a:	bf00      	nop
 8014f3c:	bf00      	nop
 8014f3e:	3708      	adds	r7, #8
 8014f40:	46bd      	mov	sp, r7
 8014f42:	bd80      	pop	{r7, pc}
 8014f44:	2000d69c 	.word	0x2000d69c

08014f48 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b08a      	sub	sp, #40	; 0x28
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	60f8      	str	r0, [r7, #12]
 8014f50:	460b      	mov	r3, r1
 8014f52:	607a      	str	r2, [r7, #4]
 8014f54:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014f56:	230a      	movs	r3, #10
 8014f58:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014f5a:	230a      	movs	r3, #10
 8014f5c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014f5e:	230a      	movs	r3, #10
 8014f60:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014f62:	2300      	movs	r3, #0
 8014f64:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014f66:	230a      	movs	r3, #10
 8014f68:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	83bb      	strh	r3, [r7, #28]
 8014f6e:	2300      	movs	r3, #0
 8014f70:	837b      	strh	r3, [r7, #26]
 8014f72:	2300      	movs	r3, #0
 8014f74:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014f76:	2300      	movs	r3, #0
 8014f78:	843b      	strh	r3, [r7, #32]
 8014f7a:	e0ae      	b.n	80150da <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014f7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f80:	49a6      	ldr	r1, [pc, #664]	; (801521c <etharp_find_entry+0x2d4>)
 8014f82:	4613      	mov	r3, r2
 8014f84:	005b      	lsls	r3, r3, #1
 8014f86:	4413      	add	r3, r2
 8014f88:	00db      	lsls	r3, r3, #3
 8014f8a:	440b      	add	r3, r1
 8014f8c:	3314      	adds	r3, #20
 8014f8e:	781b      	ldrb	r3, [r3, #0]
 8014f90:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014f92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014f96:	2b0a      	cmp	r3, #10
 8014f98:	d105      	bne.n	8014fa6 <etharp_find_entry+0x5e>
 8014f9a:	7dfb      	ldrb	r3, [r7, #23]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d102      	bne.n	8014fa6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014fa0:	8c3b      	ldrh	r3, [r7, #32]
 8014fa2:	847b      	strh	r3, [r7, #34]	; 0x22
 8014fa4:	e095      	b.n	80150d2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014fa6:	7dfb      	ldrb	r3, [r7, #23]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	f000 8092 	beq.w	80150d2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014fae:	7dfb      	ldrb	r3, [r7, #23]
 8014fb0:	2b01      	cmp	r3, #1
 8014fb2:	d009      	beq.n	8014fc8 <etharp_find_entry+0x80>
 8014fb4:	7dfb      	ldrb	r3, [r7, #23]
 8014fb6:	2b01      	cmp	r3, #1
 8014fb8:	d806      	bhi.n	8014fc8 <etharp_find_entry+0x80>
 8014fba:	4b99      	ldr	r3, [pc, #612]	; (8015220 <etharp_find_entry+0x2d8>)
 8014fbc:	f240 1223 	movw	r2, #291	; 0x123
 8014fc0:	4998      	ldr	r1, [pc, #608]	; (8015224 <etharp_find_entry+0x2dc>)
 8014fc2:	4899      	ldr	r0, [pc, #612]	; (8015228 <etharp_find_entry+0x2e0>)
 8014fc4:	f002 fc62 	bl	801788c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d020      	beq.n	8015010 <etharp_find_entry+0xc8>
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	6819      	ldr	r1, [r3, #0]
 8014fd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014fd6:	4891      	ldr	r0, [pc, #580]	; (801521c <etharp_find_entry+0x2d4>)
 8014fd8:	4613      	mov	r3, r2
 8014fda:	005b      	lsls	r3, r3, #1
 8014fdc:	4413      	add	r3, r2
 8014fde:	00db      	lsls	r3, r3, #3
 8014fe0:	4403      	add	r3, r0
 8014fe2:	3304      	adds	r3, #4
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	4299      	cmp	r1, r3
 8014fe8:	d112      	bne.n	8015010 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d00c      	beq.n	801500a <etharp_find_entry+0xc2>
 8014ff0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ff4:	4989      	ldr	r1, [pc, #548]	; (801521c <etharp_find_entry+0x2d4>)
 8014ff6:	4613      	mov	r3, r2
 8014ff8:	005b      	lsls	r3, r3, #1
 8014ffa:	4413      	add	r3, r2
 8014ffc:	00db      	lsls	r3, r3, #3
 8014ffe:	440b      	add	r3, r1
 8015000:	3308      	adds	r3, #8
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	687a      	ldr	r2, [r7, #4]
 8015006:	429a      	cmp	r2, r3
 8015008:	d102      	bne.n	8015010 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801500a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801500e:	e100      	b.n	8015212 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015010:	7dfb      	ldrb	r3, [r7, #23]
 8015012:	2b01      	cmp	r3, #1
 8015014:	d140      	bne.n	8015098 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015016:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801501a:	4980      	ldr	r1, [pc, #512]	; (801521c <etharp_find_entry+0x2d4>)
 801501c:	4613      	mov	r3, r2
 801501e:	005b      	lsls	r3, r3, #1
 8015020:	4413      	add	r3, r2
 8015022:	00db      	lsls	r3, r3, #3
 8015024:	440b      	add	r3, r1
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d01a      	beq.n	8015062 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801502c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015030:	497a      	ldr	r1, [pc, #488]	; (801521c <etharp_find_entry+0x2d4>)
 8015032:	4613      	mov	r3, r2
 8015034:	005b      	lsls	r3, r3, #1
 8015036:	4413      	add	r3, r2
 8015038:	00db      	lsls	r3, r3, #3
 801503a:	440b      	add	r3, r1
 801503c:	3312      	adds	r3, #18
 801503e:	881b      	ldrh	r3, [r3, #0]
 8015040:	8bba      	ldrh	r2, [r7, #28]
 8015042:	429a      	cmp	r2, r3
 8015044:	d845      	bhi.n	80150d2 <etharp_find_entry+0x18a>
            old_queue = i;
 8015046:	8c3b      	ldrh	r3, [r7, #32]
 8015048:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801504a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801504e:	4973      	ldr	r1, [pc, #460]	; (801521c <etharp_find_entry+0x2d4>)
 8015050:	4613      	mov	r3, r2
 8015052:	005b      	lsls	r3, r3, #1
 8015054:	4413      	add	r3, r2
 8015056:	00db      	lsls	r3, r3, #3
 8015058:	440b      	add	r3, r1
 801505a:	3312      	adds	r3, #18
 801505c:	881b      	ldrh	r3, [r3, #0]
 801505e:	83bb      	strh	r3, [r7, #28]
 8015060:	e037      	b.n	80150d2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015062:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015066:	496d      	ldr	r1, [pc, #436]	; (801521c <etharp_find_entry+0x2d4>)
 8015068:	4613      	mov	r3, r2
 801506a:	005b      	lsls	r3, r3, #1
 801506c:	4413      	add	r3, r2
 801506e:	00db      	lsls	r3, r3, #3
 8015070:	440b      	add	r3, r1
 8015072:	3312      	adds	r3, #18
 8015074:	881b      	ldrh	r3, [r3, #0]
 8015076:	8b7a      	ldrh	r2, [r7, #26]
 8015078:	429a      	cmp	r2, r3
 801507a:	d82a      	bhi.n	80150d2 <etharp_find_entry+0x18a>
            old_pending = i;
 801507c:	8c3b      	ldrh	r3, [r7, #32]
 801507e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015080:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015084:	4965      	ldr	r1, [pc, #404]	; (801521c <etharp_find_entry+0x2d4>)
 8015086:	4613      	mov	r3, r2
 8015088:	005b      	lsls	r3, r3, #1
 801508a:	4413      	add	r3, r2
 801508c:	00db      	lsls	r3, r3, #3
 801508e:	440b      	add	r3, r1
 8015090:	3312      	adds	r3, #18
 8015092:	881b      	ldrh	r3, [r3, #0]
 8015094:	837b      	strh	r3, [r7, #26]
 8015096:	e01c      	b.n	80150d2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015098:	7dfb      	ldrb	r3, [r7, #23]
 801509a:	2b01      	cmp	r3, #1
 801509c:	d919      	bls.n	80150d2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801509e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80150a2:	495e      	ldr	r1, [pc, #376]	; (801521c <etharp_find_entry+0x2d4>)
 80150a4:	4613      	mov	r3, r2
 80150a6:	005b      	lsls	r3, r3, #1
 80150a8:	4413      	add	r3, r2
 80150aa:	00db      	lsls	r3, r3, #3
 80150ac:	440b      	add	r3, r1
 80150ae:	3312      	adds	r3, #18
 80150b0:	881b      	ldrh	r3, [r3, #0]
 80150b2:	8b3a      	ldrh	r2, [r7, #24]
 80150b4:	429a      	cmp	r2, r3
 80150b6:	d80c      	bhi.n	80150d2 <etharp_find_entry+0x18a>
            old_stable = i;
 80150b8:	8c3b      	ldrh	r3, [r7, #32]
 80150ba:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80150bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80150c0:	4956      	ldr	r1, [pc, #344]	; (801521c <etharp_find_entry+0x2d4>)
 80150c2:	4613      	mov	r3, r2
 80150c4:	005b      	lsls	r3, r3, #1
 80150c6:	4413      	add	r3, r2
 80150c8:	00db      	lsls	r3, r3, #3
 80150ca:	440b      	add	r3, r1
 80150cc:	3312      	adds	r3, #18
 80150ce:	881b      	ldrh	r3, [r3, #0]
 80150d0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80150d2:	8c3b      	ldrh	r3, [r7, #32]
 80150d4:	3301      	adds	r3, #1
 80150d6:	b29b      	uxth	r3, r3
 80150d8:	843b      	strh	r3, [r7, #32]
 80150da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80150de:	2b09      	cmp	r3, #9
 80150e0:	f77f af4c 	ble.w	8014f7c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80150e4:	7afb      	ldrb	r3, [r7, #11]
 80150e6:	f003 0302 	and.w	r3, r3, #2
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d108      	bne.n	8015100 <etharp_find_entry+0x1b8>
 80150ee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80150f2:	2b0a      	cmp	r3, #10
 80150f4:	d107      	bne.n	8015106 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80150f6:	7afb      	ldrb	r3, [r7, #11]
 80150f8:	f003 0301 	and.w	r3, r3, #1
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d102      	bne.n	8015106 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015100:	f04f 33ff 	mov.w	r3, #4294967295
 8015104:	e085      	b.n	8015212 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015106:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801510a:	2b09      	cmp	r3, #9
 801510c:	dc02      	bgt.n	8015114 <etharp_find_entry+0x1cc>
    i = empty;
 801510e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015110:	843b      	strh	r3, [r7, #32]
 8015112:	e039      	b.n	8015188 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015114:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015118:	2b09      	cmp	r3, #9
 801511a:	dc14      	bgt.n	8015146 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801511c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801511e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015120:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015124:	493d      	ldr	r1, [pc, #244]	; (801521c <etharp_find_entry+0x2d4>)
 8015126:	4613      	mov	r3, r2
 8015128:	005b      	lsls	r3, r3, #1
 801512a:	4413      	add	r3, r2
 801512c:	00db      	lsls	r3, r3, #3
 801512e:	440b      	add	r3, r1
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d018      	beq.n	8015168 <etharp_find_entry+0x220>
 8015136:	4b3a      	ldr	r3, [pc, #232]	; (8015220 <etharp_find_entry+0x2d8>)
 8015138:	f240 126d 	movw	r2, #365	; 0x16d
 801513c:	493b      	ldr	r1, [pc, #236]	; (801522c <etharp_find_entry+0x2e4>)
 801513e:	483a      	ldr	r0, [pc, #232]	; (8015228 <etharp_find_entry+0x2e0>)
 8015140:	f002 fba4 	bl	801788c <iprintf>
 8015144:	e010      	b.n	8015168 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015146:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801514a:	2b09      	cmp	r3, #9
 801514c:	dc02      	bgt.n	8015154 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801514e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015150:	843b      	strh	r3, [r7, #32]
 8015152:	e009      	b.n	8015168 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015154:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015158:	2b09      	cmp	r3, #9
 801515a:	dc02      	bgt.n	8015162 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801515c:	8bfb      	ldrh	r3, [r7, #30]
 801515e:	843b      	strh	r3, [r7, #32]
 8015160:	e002      	b.n	8015168 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015162:	f04f 33ff 	mov.w	r3, #4294967295
 8015166:	e054      	b.n	8015212 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015168:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801516c:	2b09      	cmp	r3, #9
 801516e:	dd06      	ble.n	801517e <etharp_find_entry+0x236>
 8015170:	4b2b      	ldr	r3, [pc, #172]	; (8015220 <etharp_find_entry+0x2d8>)
 8015172:	f240 127f 	movw	r2, #383	; 0x17f
 8015176:	492e      	ldr	r1, [pc, #184]	; (8015230 <etharp_find_entry+0x2e8>)
 8015178:	482b      	ldr	r0, [pc, #172]	; (8015228 <etharp_find_entry+0x2e0>)
 801517a:	f002 fb87 	bl	801788c <iprintf>
    etharp_free_entry(i);
 801517e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015182:	4618      	mov	r0, r3
 8015184:	f7ff fe06 	bl	8014d94 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015188:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801518c:	2b09      	cmp	r3, #9
 801518e:	dd06      	ble.n	801519e <etharp_find_entry+0x256>
 8015190:	4b23      	ldr	r3, [pc, #140]	; (8015220 <etharp_find_entry+0x2d8>)
 8015192:	f240 1283 	movw	r2, #387	; 0x183
 8015196:	4926      	ldr	r1, [pc, #152]	; (8015230 <etharp_find_entry+0x2e8>)
 8015198:	4823      	ldr	r0, [pc, #140]	; (8015228 <etharp_find_entry+0x2e0>)
 801519a:	f002 fb77 	bl	801788c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801519e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151a2:	491e      	ldr	r1, [pc, #120]	; (801521c <etharp_find_entry+0x2d4>)
 80151a4:	4613      	mov	r3, r2
 80151a6:	005b      	lsls	r3, r3, #1
 80151a8:	4413      	add	r3, r2
 80151aa:	00db      	lsls	r3, r3, #3
 80151ac:	440b      	add	r3, r1
 80151ae:	3314      	adds	r3, #20
 80151b0:	781b      	ldrb	r3, [r3, #0]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d006      	beq.n	80151c4 <etharp_find_entry+0x27c>
 80151b6:	4b1a      	ldr	r3, [pc, #104]	; (8015220 <etharp_find_entry+0x2d8>)
 80151b8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80151bc:	491d      	ldr	r1, [pc, #116]	; (8015234 <etharp_find_entry+0x2ec>)
 80151be:	481a      	ldr	r0, [pc, #104]	; (8015228 <etharp_find_entry+0x2e0>)
 80151c0:	f002 fb64 	bl	801788c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d00b      	beq.n	80151e2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80151ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	6819      	ldr	r1, [r3, #0]
 80151d2:	4812      	ldr	r0, [pc, #72]	; (801521c <etharp_find_entry+0x2d4>)
 80151d4:	4613      	mov	r3, r2
 80151d6:	005b      	lsls	r3, r3, #1
 80151d8:	4413      	add	r3, r2
 80151da:	00db      	lsls	r3, r3, #3
 80151dc:	4403      	add	r3, r0
 80151de:	3304      	adds	r3, #4
 80151e0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80151e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151e6:	490d      	ldr	r1, [pc, #52]	; (801521c <etharp_find_entry+0x2d4>)
 80151e8:	4613      	mov	r3, r2
 80151ea:	005b      	lsls	r3, r3, #1
 80151ec:	4413      	add	r3, r2
 80151ee:	00db      	lsls	r3, r3, #3
 80151f0:	440b      	add	r3, r1
 80151f2:	3312      	adds	r3, #18
 80151f4:	2200      	movs	r2, #0
 80151f6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80151f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151fc:	4907      	ldr	r1, [pc, #28]	; (801521c <etharp_find_entry+0x2d4>)
 80151fe:	4613      	mov	r3, r2
 8015200:	005b      	lsls	r3, r3, #1
 8015202:	4413      	add	r3, r2
 8015204:	00db      	lsls	r3, r3, #3
 8015206:	440b      	add	r3, r1
 8015208:	3308      	adds	r3, #8
 801520a:	687a      	ldr	r2, [r7, #4]
 801520c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801520e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015212:	4618      	mov	r0, r3
 8015214:	3728      	adds	r7, #40	; 0x28
 8015216:	46bd      	mov	sp, r7
 8015218:	bd80      	pop	{r7, pc}
 801521a:	bf00      	nop
 801521c:	2000d69c 	.word	0x2000d69c
 8015220:	0801ba30 	.word	0x0801ba30
 8015224:	0801ba68 	.word	0x0801ba68
 8015228:	0801baa8 	.word	0x0801baa8
 801522c:	0801bad0 	.word	0x0801bad0
 8015230:	0801bae8 	.word	0x0801bae8
 8015234:	0801bafc 	.word	0x0801bafc

08015238 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b088      	sub	sp, #32
 801523c:	af02      	add	r7, sp, #8
 801523e:	60f8      	str	r0, [r7, #12]
 8015240:	60b9      	str	r1, [r7, #8]
 8015242:	607a      	str	r2, [r7, #4]
 8015244:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801524c:	2b06      	cmp	r3, #6
 801524e:	d006      	beq.n	801525e <etharp_update_arp_entry+0x26>
 8015250:	4b48      	ldr	r3, [pc, #288]	; (8015374 <etharp_update_arp_entry+0x13c>)
 8015252:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015256:	4948      	ldr	r1, [pc, #288]	; (8015378 <etharp_update_arp_entry+0x140>)
 8015258:	4848      	ldr	r0, [pc, #288]	; (801537c <etharp_update_arp_entry+0x144>)
 801525a:	f002 fb17 	bl	801788c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801525e:	68bb      	ldr	r3, [r7, #8]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d012      	beq.n	801528a <etharp_update_arp_entry+0x52>
 8015264:	68bb      	ldr	r3, [r7, #8]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d00e      	beq.n	801528a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801526c:	68bb      	ldr	r3, [r7, #8]
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	68f9      	ldr	r1, [r7, #12]
 8015272:	4618      	mov	r0, r3
 8015274:	f001 f8fe 	bl	8016474 <ip4_addr_isbroadcast_u32>
 8015278:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801527a:	2b00      	cmp	r3, #0
 801527c:	d105      	bne.n	801528a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801527e:	68bb      	ldr	r3, [r7, #8]
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015286:	2be0      	cmp	r3, #224	; 0xe0
 8015288:	d102      	bne.n	8015290 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801528a:	f06f 030f 	mvn.w	r3, #15
 801528e:	e06c      	b.n	801536a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015290:	78fb      	ldrb	r3, [r7, #3]
 8015292:	68fa      	ldr	r2, [r7, #12]
 8015294:	4619      	mov	r1, r3
 8015296:	68b8      	ldr	r0, [r7, #8]
 8015298:	f7ff fe56 	bl	8014f48 <etharp_find_entry>
 801529c:	4603      	mov	r3, r0
 801529e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80152a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	da02      	bge.n	80152ae <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80152a8:	8afb      	ldrh	r3, [r7, #22]
 80152aa:	b25b      	sxtb	r3, r3
 80152ac:	e05d      	b.n	801536a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80152ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80152b2:	4933      	ldr	r1, [pc, #204]	; (8015380 <etharp_update_arp_entry+0x148>)
 80152b4:	4613      	mov	r3, r2
 80152b6:	005b      	lsls	r3, r3, #1
 80152b8:	4413      	add	r3, r2
 80152ba:	00db      	lsls	r3, r3, #3
 80152bc:	440b      	add	r3, r1
 80152be:	3314      	adds	r3, #20
 80152c0:	2202      	movs	r2, #2
 80152c2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80152c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80152c8:	492d      	ldr	r1, [pc, #180]	; (8015380 <etharp_update_arp_entry+0x148>)
 80152ca:	4613      	mov	r3, r2
 80152cc:	005b      	lsls	r3, r3, #1
 80152ce:	4413      	add	r3, r2
 80152d0:	00db      	lsls	r3, r3, #3
 80152d2:	440b      	add	r3, r1
 80152d4:	3308      	adds	r3, #8
 80152d6:	68fa      	ldr	r2, [r7, #12]
 80152d8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80152da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80152de:	4613      	mov	r3, r2
 80152e0:	005b      	lsls	r3, r3, #1
 80152e2:	4413      	add	r3, r2
 80152e4:	00db      	lsls	r3, r3, #3
 80152e6:	3308      	adds	r3, #8
 80152e8:	4a25      	ldr	r2, [pc, #148]	; (8015380 <etharp_update_arp_entry+0x148>)
 80152ea:	4413      	add	r3, r2
 80152ec:	3304      	adds	r3, #4
 80152ee:	2206      	movs	r2, #6
 80152f0:	6879      	ldr	r1, [r7, #4]
 80152f2:	4618      	mov	r0, r3
 80152f4:	f002 fc4f 	bl	8017b96 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80152f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80152fc:	4920      	ldr	r1, [pc, #128]	; (8015380 <etharp_update_arp_entry+0x148>)
 80152fe:	4613      	mov	r3, r2
 8015300:	005b      	lsls	r3, r3, #1
 8015302:	4413      	add	r3, r2
 8015304:	00db      	lsls	r3, r3, #3
 8015306:	440b      	add	r3, r1
 8015308:	3312      	adds	r3, #18
 801530a:	2200      	movs	r2, #0
 801530c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801530e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015312:	491b      	ldr	r1, [pc, #108]	; (8015380 <etharp_update_arp_entry+0x148>)
 8015314:	4613      	mov	r3, r2
 8015316:	005b      	lsls	r3, r3, #1
 8015318:	4413      	add	r3, r2
 801531a:	00db      	lsls	r3, r3, #3
 801531c:	440b      	add	r3, r1
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d021      	beq.n	8015368 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015324:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015328:	4915      	ldr	r1, [pc, #84]	; (8015380 <etharp_update_arp_entry+0x148>)
 801532a:	4613      	mov	r3, r2
 801532c:	005b      	lsls	r3, r3, #1
 801532e:	4413      	add	r3, r2
 8015330:	00db      	lsls	r3, r3, #3
 8015332:	440b      	add	r3, r1
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015338:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801533c:	4910      	ldr	r1, [pc, #64]	; (8015380 <etharp_update_arp_entry+0x148>)
 801533e:	4613      	mov	r3, r2
 8015340:	005b      	lsls	r3, r3, #1
 8015342:	4413      	add	r3, r2
 8015344:	00db      	lsls	r3, r3, #3
 8015346:	440b      	add	r3, r1
 8015348:	2200      	movs	r2, #0
 801534a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015352:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015356:	9300      	str	r3, [sp, #0]
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	6939      	ldr	r1, [r7, #16]
 801535c:	68f8      	ldr	r0, [r7, #12]
 801535e:	f001 ff97 	bl	8017290 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015362:	6938      	ldr	r0, [r7, #16]
 8015364:	f7f8 f96a 	bl	800d63c <pbuf_free>
  }
  return ERR_OK;
 8015368:	2300      	movs	r3, #0
}
 801536a:	4618      	mov	r0, r3
 801536c:	3718      	adds	r7, #24
 801536e:	46bd      	mov	sp, r7
 8015370:	bd80      	pop	{r7, pc}
 8015372:	bf00      	nop
 8015374:	0801ba30 	.word	0x0801ba30
 8015378:	0801bb28 	.word	0x0801bb28
 801537c:	0801baa8 	.word	0x0801baa8
 8015380:	2000d69c 	.word	0x2000d69c

08015384 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015384:	b580      	push	{r7, lr}
 8015386:	b084      	sub	sp, #16
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801538c:	2300      	movs	r3, #0
 801538e:	60fb      	str	r3, [r7, #12]
 8015390:	e01e      	b.n	80153d0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015392:	4913      	ldr	r1, [pc, #76]	; (80153e0 <etharp_cleanup_netif+0x5c>)
 8015394:	68fa      	ldr	r2, [r7, #12]
 8015396:	4613      	mov	r3, r2
 8015398:	005b      	lsls	r3, r3, #1
 801539a:	4413      	add	r3, r2
 801539c:	00db      	lsls	r3, r3, #3
 801539e:	440b      	add	r3, r1
 80153a0:	3314      	adds	r3, #20
 80153a2:	781b      	ldrb	r3, [r3, #0]
 80153a4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80153a6:	7afb      	ldrb	r3, [r7, #11]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d00e      	beq.n	80153ca <etharp_cleanup_netif+0x46>
 80153ac:	490c      	ldr	r1, [pc, #48]	; (80153e0 <etharp_cleanup_netif+0x5c>)
 80153ae:	68fa      	ldr	r2, [r7, #12]
 80153b0:	4613      	mov	r3, r2
 80153b2:	005b      	lsls	r3, r3, #1
 80153b4:	4413      	add	r3, r2
 80153b6:	00db      	lsls	r3, r3, #3
 80153b8:	440b      	add	r3, r1
 80153ba:	3308      	adds	r3, #8
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	687a      	ldr	r2, [r7, #4]
 80153c0:	429a      	cmp	r2, r3
 80153c2:	d102      	bne.n	80153ca <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80153c4:	68f8      	ldr	r0, [r7, #12]
 80153c6:	f7ff fce5 	bl	8014d94 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	3301      	adds	r3, #1
 80153ce:	60fb      	str	r3, [r7, #12]
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	2b09      	cmp	r3, #9
 80153d4:	dddd      	ble.n	8015392 <etharp_cleanup_netif+0xe>
    }
  }
}
 80153d6:	bf00      	nop
 80153d8:	bf00      	nop
 80153da:	3710      	adds	r7, #16
 80153dc:	46bd      	mov	sp, r7
 80153de:	bd80      	pop	{r7, pc}
 80153e0:	2000d69c 	.word	0x2000d69c

080153e4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80153e4:	b5b0      	push	{r4, r5, r7, lr}
 80153e6:	b08a      	sub	sp, #40	; 0x28
 80153e8:	af04      	add	r7, sp, #16
 80153ea:	6078      	str	r0, [r7, #4]
 80153ec:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80153ee:	683b      	ldr	r3, [r7, #0]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d107      	bne.n	8015404 <etharp_input+0x20>
 80153f4:	4b3d      	ldr	r3, [pc, #244]	; (80154ec <etharp_input+0x108>)
 80153f6:	f240 228a 	movw	r2, #650	; 0x28a
 80153fa:	493d      	ldr	r1, [pc, #244]	; (80154f0 <etharp_input+0x10c>)
 80153fc:	483d      	ldr	r0, [pc, #244]	; (80154f4 <etharp_input+0x110>)
 80153fe:	f002 fa45 	bl	801788c <iprintf>
 8015402:	e06f      	b.n	80154e4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	685b      	ldr	r3, [r3, #4]
 8015408:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801540a:	693b      	ldr	r3, [r7, #16]
 801540c:	881b      	ldrh	r3, [r3, #0]
 801540e:	b29b      	uxth	r3, r3
 8015410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015414:	d10c      	bne.n	8015430 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015416:	693b      	ldr	r3, [r7, #16]
 8015418:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801541a:	2b06      	cmp	r3, #6
 801541c:	d108      	bne.n	8015430 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801541e:	693b      	ldr	r3, [r7, #16]
 8015420:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015422:	2b04      	cmp	r3, #4
 8015424:	d104      	bne.n	8015430 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015426:	693b      	ldr	r3, [r7, #16]
 8015428:	885b      	ldrh	r3, [r3, #2]
 801542a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801542c:	2b08      	cmp	r3, #8
 801542e:	d003      	beq.n	8015438 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015430:	6878      	ldr	r0, [r7, #4]
 8015432:	f7f8 f903 	bl	800d63c <pbuf_free>
    return;
 8015436:	e055      	b.n	80154e4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015438:	693b      	ldr	r3, [r7, #16]
 801543a:	330e      	adds	r3, #14
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015440:	693b      	ldr	r3, [r7, #16]
 8015442:	3318      	adds	r3, #24
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015448:	683b      	ldr	r3, [r7, #0]
 801544a:	3304      	adds	r3, #4
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d102      	bne.n	8015458 <etharp_input+0x74>
    for_us = 0;
 8015452:	2300      	movs	r3, #0
 8015454:	75fb      	strb	r3, [r7, #23]
 8015456:	e009      	b.n	801546c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015458:	68ba      	ldr	r2, [r7, #8]
 801545a:	683b      	ldr	r3, [r7, #0]
 801545c:	3304      	adds	r3, #4
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	429a      	cmp	r2, r3
 8015462:	bf0c      	ite	eq
 8015464:	2301      	moveq	r3, #1
 8015466:	2300      	movne	r3, #0
 8015468:	b2db      	uxtb	r3, r3
 801546a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801546c:	693b      	ldr	r3, [r7, #16]
 801546e:	f103 0208 	add.w	r2, r3, #8
 8015472:	7dfb      	ldrb	r3, [r7, #23]
 8015474:	2b00      	cmp	r3, #0
 8015476:	d001      	beq.n	801547c <etharp_input+0x98>
 8015478:	2301      	movs	r3, #1
 801547a:	e000      	b.n	801547e <etharp_input+0x9a>
 801547c:	2302      	movs	r3, #2
 801547e:	f107 010c 	add.w	r1, r7, #12
 8015482:	6838      	ldr	r0, [r7, #0]
 8015484:	f7ff fed8 	bl	8015238 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015488:	693b      	ldr	r3, [r7, #16]
 801548a:	88db      	ldrh	r3, [r3, #6]
 801548c:	b29b      	uxth	r3, r3
 801548e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015492:	d003      	beq.n	801549c <etharp_input+0xb8>
 8015494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015498:	d01e      	beq.n	80154d8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801549a:	e020      	b.n	80154de <etharp_input+0xfa>
      if (for_us) {
 801549c:	7dfb      	ldrb	r3, [r7, #23]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d01c      	beq.n	80154dc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80154a2:	683b      	ldr	r3, [r7, #0]
 80154a4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80154a8:	693b      	ldr	r3, [r7, #16]
 80154aa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80154ae:	683b      	ldr	r3, [r7, #0]
 80154b0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80154b4:	683b      	ldr	r3, [r7, #0]
 80154b6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80154b8:	693a      	ldr	r2, [r7, #16]
 80154ba:	3208      	adds	r2, #8
        etharp_raw(netif,
 80154bc:	2102      	movs	r1, #2
 80154be:	9103      	str	r1, [sp, #12]
 80154c0:	f107 010c 	add.w	r1, r7, #12
 80154c4:	9102      	str	r1, [sp, #8]
 80154c6:	9201      	str	r2, [sp, #4]
 80154c8:	9300      	str	r3, [sp, #0]
 80154ca:	462b      	mov	r3, r5
 80154cc:	4622      	mov	r2, r4
 80154ce:	4601      	mov	r1, r0
 80154d0:	6838      	ldr	r0, [r7, #0]
 80154d2:	f000 faeb 	bl	8015aac <etharp_raw>
      break;
 80154d6:	e001      	b.n	80154dc <etharp_input+0xf8>
      break;
 80154d8:	bf00      	nop
 80154da:	e000      	b.n	80154de <etharp_input+0xfa>
      break;
 80154dc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80154de:	6878      	ldr	r0, [r7, #4]
 80154e0:	f7f8 f8ac 	bl	800d63c <pbuf_free>
}
 80154e4:	3718      	adds	r7, #24
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bdb0      	pop	{r4, r5, r7, pc}
 80154ea:	bf00      	nop
 80154ec:	0801ba30 	.word	0x0801ba30
 80154f0:	0801bb80 	.word	0x0801bb80
 80154f4:	0801baa8 	.word	0x0801baa8

080154f8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b086      	sub	sp, #24
 80154fc:	af02      	add	r7, sp, #8
 80154fe:	60f8      	str	r0, [r7, #12]
 8015500:	60b9      	str	r1, [r7, #8]
 8015502:	4613      	mov	r3, r2
 8015504:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015506:	79fa      	ldrb	r2, [r7, #7]
 8015508:	4944      	ldr	r1, [pc, #272]	; (801561c <etharp_output_to_arp_index+0x124>)
 801550a:	4613      	mov	r3, r2
 801550c:	005b      	lsls	r3, r3, #1
 801550e:	4413      	add	r3, r2
 8015510:	00db      	lsls	r3, r3, #3
 8015512:	440b      	add	r3, r1
 8015514:	3314      	adds	r3, #20
 8015516:	781b      	ldrb	r3, [r3, #0]
 8015518:	2b01      	cmp	r3, #1
 801551a:	d806      	bhi.n	801552a <etharp_output_to_arp_index+0x32>
 801551c:	4b40      	ldr	r3, [pc, #256]	; (8015620 <etharp_output_to_arp_index+0x128>)
 801551e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015522:	4940      	ldr	r1, [pc, #256]	; (8015624 <etharp_output_to_arp_index+0x12c>)
 8015524:	4840      	ldr	r0, [pc, #256]	; (8015628 <etharp_output_to_arp_index+0x130>)
 8015526:	f002 f9b1 	bl	801788c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801552a:	79fa      	ldrb	r2, [r7, #7]
 801552c:	493b      	ldr	r1, [pc, #236]	; (801561c <etharp_output_to_arp_index+0x124>)
 801552e:	4613      	mov	r3, r2
 8015530:	005b      	lsls	r3, r3, #1
 8015532:	4413      	add	r3, r2
 8015534:	00db      	lsls	r3, r3, #3
 8015536:	440b      	add	r3, r1
 8015538:	3314      	adds	r3, #20
 801553a:	781b      	ldrb	r3, [r3, #0]
 801553c:	2b02      	cmp	r3, #2
 801553e:	d153      	bne.n	80155e8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015540:	79fa      	ldrb	r2, [r7, #7]
 8015542:	4936      	ldr	r1, [pc, #216]	; (801561c <etharp_output_to_arp_index+0x124>)
 8015544:	4613      	mov	r3, r2
 8015546:	005b      	lsls	r3, r3, #1
 8015548:	4413      	add	r3, r2
 801554a:	00db      	lsls	r3, r3, #3
 801554c:	440b      	add	r3, r1
 801554e:	3312      	adds	r3, #18
 8015550:	881b      	ldrh	r3, [r3, #0]
 8015552:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015556:	d919      	bls.n	801558c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015558:	79fa      	ldrb	r2, [r7, #7]
 801555a:	4613      	mov	r3, r2
 801555c:	005b      	lsls	r3, r3, #1
 801555e:	4413      	add	r3, r2
 8015560:	00db      	lsls	r3, r3, #3
 8015562:	4a2e      	ldr	r2, [pc, #184]	; (801561c <etharp_output_to_arp_index+0x124>)
 8015564:	4413      	add	r3, r2
 8015566:	3304      	adds	r3, #4
 8015568:	4619      	mov	r1, r3
 801556a:	68f8      	ldr	r0, [r7, #12]
 801556c:	f000 fb4c 	bl	8015c08 <etharp_request>
 8015570:	4603      	mov	r3, r0
 8015572:	2b00      	cmp	r3, #0
 8015574:	d138      	bne.n	80155e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015576:	79fa      	ldrb	r2, [r7, #7]
 8015578:	4928      	ldr	r1, [pc, #160]	; (801561c <etharp_output_to_arp_index+0x124>)
 801557a:	4613      	mov	r3, r2
 801557c:	005b      	lsls	r3, r3, #1
 801557e:	4413      	add	r3, r2
 8015580:	00db      	lsls	r3, r3, #3
 8015582:	440b      	add	r3, r1
 8015584:	3314      	adds	r3, #20
 8015586:	2203      	movs	r2, #3
 8015588:	701a      	strb	r2, [r3, #0]
 801558a:	e02d      	b.n	80155e8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801558c:	79fa      	ldrb	r2, [r7, #7]
 801558e:	4923      	ldr	r1, [pc, #140]	; (801561c <etharp_output_to_arp_index+0x124>)
 8015590:	4613      	mov	r3, r2
 8015592:	005b      	lsls	r3, r3, #1
 8015594:	4413      	add	r3, r2
 8015596:	00db      	lsls	r3, r3, #3
 8015598:	440b      	add	r3, r1
 801559a:	3312      	adds	r3, #18
 801559c:	881b      	ldrh	r3, [r3, #0]
 801559e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80155a2:	d321      	bcc.n	80155e8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80155a4:	79fa      	ldrb	r2, [r7, #7]
 80155a6:	4613      	mov	r3, r2
 80155a8:	005b      	lsls	r3, r3, #1
 80155aa:	4413      	add	r3, r2
 80155ac:	00db      	lsls	r3, r3, #3
 80155ae:	4a1b      	ldr	r2, [pc, #108]	; (801561c <etharp_output_to_arp_index+0x124>)
 80155b0:	4413      	add	r3, r2
 80155b2:	1d19      	adds	r1, r3, #4
 80155b4:	79fa      	ldrb	r2, [r7, #7]
 80155b6:	4613      	mov	r3, r2
 80155b8:	005b      	lsls	r3, r3, #1
 80155ba:	4413      	add	r3, r2
 80155bc:	00db      	lsls	r3, r3, #3
 80155be:	3308      	adds	r3, #8
 80155c0:	4a16      	ldr	r2, [pc, #88]	; (801561c <etharp_output_to_arp_index+0x124>)
 80155c2:	4413      	add	r3, r2
 80155c4:	3304      	adds	r3, #4
 80155c6:	461a      	mov	r2, r3
 80155c8:	68f8      	ldr	r0, [r7, #12]
 80155ca:	f000 fafb 	bl	8015bc4 <etharp_request_dst>
 80155ce:	4603      	mov	r3, r0
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d109      	bne.n	80155e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80155d4:	79fa      	ldrb	r2, [r7, #7]
 80155d6:	4911      	ldr	r1, [pc, #68]	; (801561c <etharp_output_to_arp_index+0x124>)
 80155d8:	4613      	mov	r3, r2
 80155da:	005b      	lsls	r3, r3, #1
 80155dc:	4413      	add	r3, r2
 80155de:	00db      	lsls	r3, r3, #3
 80155e0:	440b      	add	r3, r1
 80155e2:	3314      	adds	r3, #20
 80155e4:	2203      	movs	r2, #3
 80155e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80155ee:	79fa      	ldrb	r2, [r7, #7]
 80155f0:	4613      	mov	r3, r2
 80155f2:	005b      	lsls	r3, r3, #1
 80155f4:	4413      	add	r3, r2
 80155f6:	00db      	lsls	r3, r3, #3
 80155f8:	3308      	adds	r3, #8
 80155fa:	4a08      	ldr	r2, [pc, #32]	; (801561c <etharp_output_to_arp_index+0x124>)
 80155fc:	4413      	add	r3, r2
 80155fe:	3304      	adds	r3, #4
 8015600:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015604:	9200      	str	r2, [sp, #0]
 8015606:	460a      	mov	r2, r1
 8015608:	68b9      	ldr	r1, [r7, #8]
 801560a:	68f8      	ldr	r0, [r7, #12]
 801560c:	f001 fe40 	bl	8017290 <ethernet_output>
 8015610:	4603      	mov	r3, r0
}
 8015612:	4618      	mov	r0, r3
 8015614:	3710      	adds	r7, #16
 8015616:	46bd      	mov	sp, r7
 8015618:	bd80      	pop	{r7, pc}
 801561a:	bf00      	nop
 801561c:	2000d69c 	.word	0x2000d69c
 8015620:	0801ba30 	.word	0x0801ba30
 8015624:	0801bba0 	.word	0x0801bba0
 8015628:	0801baa8 	.word	0x0801baa8

0801562c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801562c:	b580      	push	{r7, lr}
 801562e:	b08a      	sub	sp, #40	; 0x28
 8015630:	af02      	add	r7, sp, #8
 8015632:	60f8      	str	r0, [r7, #12]
 8015634:	60b9      	str	r1, [r7, #8]
 8015636:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d106      	bne.n	8015650 <etharp_output+0x24>
 8015642:	4b73      	ldr	r3, [pc, #460]	; (8015810 <etharp_output+0x1e4>)
 8015644:	f240 321e 	movw	r2, #798	; 0x31e
 8015648:	4972      	ldr	r1, [pc, #456]	; (8015814 <etharp_output+0x1e8>)
 801564a:	4873      	ldr	r0, [pc, #460]	; (8015818 <etharp_output+0x1ec>)
 801564c:	f002 f91e 	bl	801788c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015650:	68bb      	ldr	r3, [r7, #8]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d106      	bne.n	8015664 <etharp_output+0x38>
 8015656:	4b6e      	ldr	r3, [pc, #440]	; (8015810 <etharp_output+0x1e4>)
 8015658:	f240 321f 	movw	r2, #799	; 0x31f
 801565c:	496f      	ldr	r1, [pc, #444]	; (801581c <etharp_output+0x1f0>)
 801565e:	486e      	ldr	r0, [pc, #440]	; (8015818 <etharp_output+0x1ec>)
 8015660:	f002 f914 	bl	801788c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d106      	bne.n	8015678 <etharp_output+0x4c>
 801566a:	4b69      	ldr	r3, [pc, #420]	; (8015810 <etharp_output+0x1e4>)
 801566c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015670:	496b      	ldr	r1, [pc, #428]	; (8015820 <etharp_output+0x1f4>)
 8015672:	4869      	ldr	r0, [pc, #420]	; (8015818 <etharp_output+0x1ec>)
 8015674:	f002 f90a 	bl	801788c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	68f9      	ldr	r1, [r7, #12]
 801567e:	4618      	mov	r0, r3
 8015680:	f000 fef8 	bl	8016474 <ip4_addr_isbroadcast_u32>
 8015684:	4603      	mov	r3, r0
 8015686:	2b00      	cmp	r3, #0
 8015688:	d002      	beq.n	8015690 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801568a:	4b66      	ldr	r3, [pc, #408]	; (8015824 <etharp_output+0x1f8>)
 801568c:	61fb      	str	r3, [r7, #28]
 801568e:	e0af      	b.n	80157f0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015698:	2be0      	cmp	r3, #224	; 0xe0
 801569a:	d118      	bne.n	80156ce <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801569c:	2301      	movs	r3, #1
 801569e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80156a0:	2300      	movs	r3, #0
 80156a2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80156a4:	235e      	movs	r3, #94	; 0x5e
 80156a6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	3301      	adds	r3, #1
 80156ac:	781b      	ldrb	r3, [r3, #0]
 80156ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80156b2:	b2db      	uxtb	r3, r3
 80156b4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	3302      	adds	r3, #2
 80156ba:	781b      	ldrb	r3, [r3, #0]
 80156bc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	3303      	adds	r3, #3
 80156c2:	781b      	ldrb	r3, [r3, #0]
 80156c4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80156c6:	f107 0310 	add.w	r3, r7, #16
 80156ca:	61fb      	str	r3, [r7, #28]
 80156cc:	e090      	b.n	80157f0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	681a      	ldr	r2, [r3, #0]
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	3304      	adds	r3, #4
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	405a      	eors	r2, r3
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	3308      	adds	r3, #8
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	4013      	ands	r3, r2
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d012      	beq.n	801570c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80156ec:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80156f0:	4293      	cmp	r3, r2
 80156f2:	d00b      	beq.n	801570c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	330c      	adds	r3, #12
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d003      	beq.n	8015706 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	330c      	adds	r3, #12
 8015702:	61bb      	str	r3, [r7, #24]
 8015704:	e002      	b.n	801570c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015706:	f06f 0303 	mvn.w	r3, #3
 801570a:	e07d      	b.n	8015808 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801570c:	4b46      	ldr	r3, [pc, #280]	; (8015828 <etharp_output+0x1fc>)
 801570e:	781b      	ldrb	r3, [r3, #0]
 8015710:	4619      	mov	r1, r3
 8015712:	4a46      	ldr	r2, [pc, #280]	; (801582c <etharp_output+0x200>)
 8015714:	460b      	mov	r3, r1
 8015716:	005b      	lsls	r3, r3, #1
 8015718:	440b      	add	r3, r1
 801571a:	00db      	lsls	r3, r3, #3
 801571c:	4413      	add	r3, r2
 801571e:	3314      	adds	r3, #20
 8015720:	781b      	ldrb	r3, [r3, #0]
 8015722:	2b01      	cmp	r3, #1
 8015724:	d925      	bls.n	8015772 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015726:	4b40      	ldr	r3, [pc, #256]	; (8015828 <etharp_output+0x1fc>)
 8015728:	781b      	ldrb	r3, [r3, #0]
 801572a:	4619      	mov	r1, r3
 801572c:	4a3f      	ldr	r2, [pc, #252]	; (801582c <etharp_output+0x200>)
 801572e:	460b      	mov	r3, r1
 8015730:	005b      	lsls	r3, r3, #1
 8015732:	440b      	add	r3, r1
 8015734:	00db      	lsls	r3, r3, #3
 8015736:	4413      	add	r3, r2
 8015738:	3308      	adds	r3, #8
 801573a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801573c:	68fa      	ldr	r2, [r7, #12]
 801573e:	429a      	cmp	r2, r3
 8015740:	d117      	bne.n	8015772 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015742:	69bb      	ldr	r3, [r7, #24]
 8015744:	681a      	ldr	r2, [r3, #0]
 8015746:	4b38      	ldr	r3, [pc, #224]	; (8015828 <etharp_output+0x1fc>)
 8015748:	781b      	ldrb	r3, [r3, #0]
 801574a:	4618      	mov	r0, r3
 801574c:	4937      	ldr	r1, [pc, #220]	; (801582c <etharp_output+0x200>)
 801574e:	4603      	mov	r3, r0
 8015750:	005b      	lsls	r3, r3, #1
 8015752:	4403      	add	r3, r0
 8015754:	00db      	lsls	r3, r3, #3
 8015756:	440b      	add	r3, r1
 8015758:	3304      	adds	r3, #4
 801575a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801575c:	429a      	cmp	r2, r3
 801575e:	d108      	bne.n	8015772 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015760:	4b31      	ldr	r3, [pc, #196]	; (8015828 <etharp_output+0x1fc>)
 8015762:	781b      	ldrb	r3, [r3, #0]
 8015764:	461a      	mov	r2, r3
 8015766:	68b9      	ldr	r1, [r7, #8]
 8015768:	68f8      	ldr	r0, [r7, #12]
 801576a:	f7ff fec5 	bl	80154f8 <etharp_output_to_arp_index>
 801576e:	4603      	mov	r3, r0
 8015770:	e04a      	b.n	8015808 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015772:	2300      	movs	r3, #0
 8015774:	75fb      	strb	r3, [r7, #23]
 8015776:	e031      	b.n	80157dc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015778:	7dfa      	ldrb	r2, [r7, #23]
 801577a:	492c      	ldr	r1, [pc, #176]	; (801582c <etharp_output+0x200>)
 801577c:	4613      	mov	r3, r2
 801577e:	005b      	lsls	r3, r3, #1
 8015780:	4413      	add	r3, r2
 8015782:	00db      	lsls	r3, r3, #3
 8015784:	440b      	add	r3, r1
 8015786:	3314      	adds	r3, #20
 8015788:	781b      	ldrb	r3, [r3, #0]
 801578a:	2b01      	cmp	r3, #1
 801578c:	d923      	bls.n	80157d6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801578e:	7dfa      	ldrb	r2, [r7, #23]
 8015790:	4926      	ldr	r1, [pc, #152]	; (801582c <etharp_output+0x200>)
 8015792:	4613      	mov	r3, r2
 8015794:	005b      	lsls	r3, r3, #1
 8015796:	4413      	add	r3, r2
 8015798:	00db      	lsls	r3, r3, #3
 801579a:	440b      	add	r3, r1
 801579c:	3308      	adds	r3, #8
 801579e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80157a0:	68fa      	ldr	r2, [r7, #12]
 80157a2:	429a      	cmp	r2, r3
 80157a4:	d117      	bne.n	80157d6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80157a6:	69bb      	ldr	r3, [r7, #24]
 80157a8:	6819      	ldr	r1, [r3, #0]
 80157aa:	7dfa      	ldrb	r2, [r7, #23]
 80157ac:	481f      	ldr	r0, [pc, #124]	; (801582c <etharp_output+0x200>)
 80157ae:	4613      	mov	r3, r2
 80157b0:	005b      	lsls	r3, r3, #1
 80157b2:	4413      	add	r3, r2
 80157b4:	00db      	lsls	r3, r3, #3
 80157b6:	4403      	add	r3, r0
 80157b8:	3304      	adds	r3, #4
 80157ba:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80157bc:	4299      	cmp	r1, r3
 80157be:	d10a      	bne.n	80157d6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80157c0:	4a19      	ldr	r2, [pc, #100]	; (8015828 <etharp_output+0x1fc>)
 80157c2:	7dfb      	ldrb	r3, [r7, #23]
 80157c4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80157c6:	7dfb      	ldrb	r3, [r7, #23]
 80157c8:	461a      	mov	r2, r3
 80157ca:	68b9      	ldr	r1, [r7, #8]
 80157cc:	68f8      	ldr	r0, [r7, #12]
 80157ce:	f7ff fe93 	bl	80154f8 <etharp_output_to_arp_index>
 80157d2:	4603      	mov	r3, r0
 80157d4:	e018      	b.n	8015808 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80157d6:	7dfb      	ldrb	r3, [r7, #23]
 80157d8:	3301      	adds	r3, #1
 80157da:	75fb      	strb	r3, [r7, #23]
 80157dc:	7dfb      	ldrb	r3, [r7, #23]
 80157de:	2b09      	cmp	r3, #9
 80157e0:	d9ca      	bls.n	8015778 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80157e2:	68ba      	ldr	r2, [r7, #8]
 80157e4:	69b9      	ldr	r1, [r7, #24]
 80157e6:	68f8      	ldr	r0, [r7, #12]
 80157e8:	f000 f822 	bl	8015830 <etharp_query>
 80157ec:	4603      	mov	r3, r0
 80157ee:	e00b      	b.n	8015808 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80157f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80157fa:	9300      	str	r3, [sp, #0]
 80157fc:	69fb      	ldr	r3, [r7, #28]
 80157fe:	68b9      	ldr	r1, [r7, #8]
 8015800:	68f8      	ldr	r0, [r7, #12]
 8015802:	f001 fd45 	bl	8017290 <ethernet_output>
 8015806:	4603      	mov	r3, r0
}
 8015808:	4618      	mov	r0, r3
 801580a:	3720      	adds	r7, #32
 801580c:	46bd      	mov	sp, r7
 801580e:	bd80      	pop	{r7, pc}
 8015810:	0801ba30 	.word	0x0801ba30
 8015814:	0801bb80 	.word	0x0801bb80
 8015818:	0801baa8 	.word	0x0801baa8
 801581c:	0801bbd0 	.word	0x0801bbd0
 8015820:	0801bb70 	.word	0x0801bb70
 8015824:	0801c29c 	.word	0x0801c29c
 8015828:	2000d78c 	.word	0x2000d78c
 801582c:	2000d69c 	.word	0x2000d69c

08015830 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b08c      	sub	sp, #48	; 0x30
 8015834:	af02      	add	r7, sp, #8
 8015836:	60f8      	str	r0, [r7, #12]
 8015838:	60b9      	str	r1, [r7, #8]
 801583a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	3326      	adds	r3, #38	; 0x26
 8015840:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015842:	23ff      	movs	r3, #255	; 0xff
 8015844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015848:	2300      	movs	r3, #0
 801584a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801584c:	68bb      	ldr	r3, [r7, #8]
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	68f9      	ldr	r1, [r7, #12]
 8015852:	4618      	mov	r0, r3
 8015854:	f000 fe0e 	bl	8016474 <ip4_addr_isbroadcast_u32>
 8015858:	4603      	mov	r3, r0
 801585a:	2b00      	cmp	r3, #0
 801585c:	d10c      	bne.n	8015878 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801585e:	68bb      	ldr	r3, [r7, #8]
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015866:	2be0      	cmp	r3, #224	; 0xe0
 8015868:	d006      	beq.n	8015878 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801586a:	68bb      	ldr	r3, [r7, #8]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d003      	beq.n	8015878 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015870:	68bb      	ldr	r3, [r7, #8]
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d102      	bne.n	801587e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015878:	f06f 030f 	mvn.w	r3, #15
 801587c:	e101      	b.n	8015a82 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801587e:	68fa      	ldr	r2, [r7, #12]
 8015880:	2101      	movs	r1, #1
 8015882:	68b8      	ldr	r0, [r7, #8]
 8015884:	f7ff fb60 	bl	8014f48 <etharp_find_entry>
 8015888:	4603      	mov	r3, r0
 801588a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801588c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015890:	2b00      	cmp	r3, #0
 8015892:	da02      	bge.n	801589a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015894:	8a7b      	ldrh	r3, [r7, #18]
 8015896:	b25b      	sxtb	r3, r3
 8015898:	e0f3      	b.n	8015a82 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801589a:	8a7b      	ldrh	r3, [r7, #18]
 801589c:	2b7e      	cmp	r3, #126	; 0x7e
 801589e:	d906      	bls.n	80158ae <etharp_query+0x7e>
 80158a0:	4b7a      	ldr	r3, [pc, #488]	; (8015a8c <etharp_query+0x25c>)
 80158a2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80158a6:	497a      	ldr	r1, [pc, #488]	; (8015a90 <etharp_query+0x260>)
 80158a8:	487a      	ldr	r0, [pc, #488]	; (8015a94 <etharp_query+0x264>)
 80158aa:	f001 ffef 	bl	801788c <iprintf>
  i = (netif_addr_idx_t)i_err;
 80158ae:	8a7b      	ldrh	r3, [r7, #18]
 80158b0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80158b2:	7c7a      	ldrb	r2, [r7, #17]
 80158b4:	4978      	ldr	r1, [pc, #480]	; (8015a98 <etharp_query+0x268>)
 80158b6:	4613      	mov	r3, r2
 80158b8:	005b      	lsls	r3, r3, #1
 80158ba:	4413      	add	r3, r2
 80158bc:	00db      	lsls	r3, r3, #3
 80158be:	440b      	add	r3, r1
 80158c0:	3314      	adds	r3, #20
 80158c2:	781b      	ldrb	r3, [r3, #0]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d115      	bne.n	80158f4 <etharp_query+0xc4>
    is_new_entry = 1;
 80158c8:	2301      	movs	r3, #1
 80158ca:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80158cc:	7c7a      	ldrb	r2, [r7, #17]
 80158ce:	4972      	ldr	r1, [pc, #456]	; (8015a98 <etharp_query+0x268>)
 80158d0:	4613      	mov	r3, r2
 80158d2:	005b      	lsls	r3, r3, #1
 80158d4:	4413      	add	r3, r2
 80158d6:	00db      	lsls	r3, r3, #3
 80158d8:	440b      	add	r3, r1
 80158da:	3314      	adds	r3, #20
 80158dc:	2201      	movs	r2, #1
 80158de:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80158e0:	7c7a      	ldrb	r2, [r7, #17]
 80158e2:	496d      	ldr	r1, [pc, #436]	; (8015a98 <etharp_query+0x268>)
 80158e4:	4613      	mov	r3, r2
 80158e6:	005b      	lsls	r3, r3, #1
 80158e8:	4413      	add	r3, r2
 80158ea:	00db      	lsls	r3, r3, #3
 80158ec:	440b      	add	r3, r1
 80158ee:	3308      	adds	r3, #8
 80158f0:	68fa      	ldr	r2, [r7, #12]
 80158f2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80158f4:	7c7a      	ldrb	r2, [r7, #17]
 80158f6:	4968      	ldr	r1, [pc, #416]	; (8015a98 <etharp_query+0x268>)
 80158f8:	4613      	mov	r3, r2
 80158fa:	005b      	lsls	r3, r3, #1
 80158fc:	4413      	add	r3, r2
 80158fe:	00db      	lsls	r3, r3, #3
 8015900:	440b      	add	r3, r1
 8015902:	3314      	adds	r3, #20
 8015904:	781b      	ldrb	r3, [r3, #0]
 8015906:	2b01      	cmp	r3, #1
 8015908:	d011      	beq.n	801592e <etharp_query+0xfe>
 801590a:	7c7a      	ldrb	r2, [r7, #17]
 801590c:	4962      	ldr	r1, [pc, #392]	; (8015a98 <etharp_query+0x268>)
 801590e:	4613      	mov	r3, r2
 8015910:	005b      	lsls	r3, r3, #1
 8015912:	4413      	add	r3, r2
 8015914:	00db      	lsls	r3, r3, #3
 8015916:	440b      	add	r3, r1
 8015918:	3314      	adds	r3, #20
 801591a:	781b      	ldrb	r3, [r3, #0]
 801591c:	2b01      	cmp	r3, #1
 801591e:	d806      	bhi.n	801592e <etharp_query+0xfe>
 8015920:	4b5a      	ldr	r3, [pc, #360]	; (8015a8c <etharp_query+0x25c>)
 8015922:	f240 32cd 	movw	r2, #973	; 0x3cd
 8015926:	495d      	ldr	r1, [pc, #372]	; (8015a9c <etharp_query+0x26c>)
 8015928:	485a      	ldr	r0, [pc, #360]	; (8015a94 <etharp_query+0x264>)
 801592a:	f001 ffaf 	bl	801788c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801592e:	6a3b      	ldr	r3, [r7, #32]
 8015930:	2b00      	cmp	r3, #0
 8015932:	d102      	bne.n	801593a <etharp_query+0x10a>
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d10c      	bne.n	8015954 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801593a:	68b9      	ldr	r1, [r7, #8]
 801593c:	68f8      	ldr	r0, [r7, #12]
 801593e:	f000 f963 	bl	8015c08 <etharp_request>
 8015942:	4603      	mov	r3, r0
 8015944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d102      	bne.n	8015954 <etharp_query+0x124>
      return result;
 801594e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015952:	e096      	b.n	8015a82 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d106      	bne.n	8015968 <etharp_query+0x138>
 801595a:	4b4c      	ldr	r3, [pc, #304]	; (8015a8c <etharp_query+0x25c>)
 801595c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015960:	494f      	ldr	r1, [pc, #316]	; (8015aa0 <etharp_query+0x270>)
 8015962:	484c      	ldr	r0, [pc, #304]	; (8015a94 <etharp_query+0x264>)
 8015964:	f001 ff92 	bl	801788c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015968:	7c7a      	ldrb	r2, [r7, #17]
 801596a:	494b      	ldr	r1, [pc, #300]	; (8015a98 <etharp_query+0x268>)
 801596c:	4613      	mov	r3, r2
 801596e:	005b      	lsls	r3, r3, #1
 8015970:	4413      	add	r3, r2
 8015972:	00db      	lsls	r3, r3, #3
 8015974:	440b      	add	r3, r1
 8015976:	3314      	adds	r3, #20
 8015978:	781b      	ldrb	r3, [r3, #0]
 801597a:	2b01      	cmp	r3, #1
 801597c:	d917      	bls.n	80159ae <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801597e:	4a49      	ldr	r2, [pc, #292]	; (8015aa4 <etharp_query+0x274>)
 8015980:	7c7b      	ldrb	r3, [r7, #17]
 8015982:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015984:	7c7a      	ldrb	r2, [r7, #17]
 8015986:	4613      	mov	r3, r2
 8015988:	005b      	lsls	r3, r3, #1
 801598a:	4413      	add	r3, r2
 801598c:	00db      	lsls	r3, r3, #3
 801598e:	3308      	adds	r3, #8
 8015990:	4a41      	ldr	r2, [pc, #260]	; (8015a98 <etharp_query+0x268>)
 8015992:	4413      	add	r3, r2
 8015994:	3304      	adds	r3, #4
 8015996:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801599a:	9200      	str	r2, [sp, #0]
 801599c:	697a      	ldr	r2, [r7, #20]
 801599e:	6879      	ldr	r1, [r7, #4]
 80159a0:	68f8      	ldr	r0, [r7, #12]
 80159a2:	f001 fc75 	bl	8017290 <ethernet_output>
 80159a6:	4603      	mov	r3, r0
 80159a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80159ac:	e067      	b.n	8015a7e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80159ae:	7c7a      	ldrb	r2, [r7, #17]
 80159b0:	4939      	ldr	r1, [pc, #228]	; (8015a98 <etharp_query+0x268>)
 80159b2:	4613      	mov	r3, r2
 80159b4:	005b      	lsls	r3, r3, #1
 80159b6:	4413      	add	r3, r2
 80159b8:	00db      	lsls	r3, r3, #3
 80159ba:	440b      	add	r3, r1
 80159bc:	3314      	adds	r3, #20
 80159be:	781b      	ldrb	r3, [r3, #0]
 80159c0:	2b01      	cmp	r3, #1
 80159c2:	d15c      	bne.n	8015a7e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80159c4:	2300      	movs	r3, #0
 80159c6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	61fb      	str	r3, [r7, #28]
    while (p) {
 80159cc:	e01c      	b.n	8015a08 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80159ce:	69fb      	ldr	r3, [r7, #28]
 80159d0:	895a      	ldrh	r2, [r3, #10]
 80159d2:	69fb      	ldr	r3, [r7, #28]
 80159d4:	891b      	ldrh	r3, [r3, #8]
 80159d6:	429a      	cmp	r2, r3
 80159d8:	d10a      	bne.n	80159f0 <etharp_query+0x1c0>
 80159da:	69fb      	ldr	r3, [r7, #28]
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d006      	beq.n	80159f0 <etharp_query+0x1c0>
 80159e2:	4b2a      	ldr	r3, [pc, #168]	; (8015a8c <etharp_query+0x25c>)
 80159e4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80159e8:	492f      	ldr	r1, [pc, #188]	; (8015aa8 <etharp_query+0x278>)
 80159ea:	482a      	ldr	r0, [pc, #168]	; (8015a94 <etharp_query+0x264>)
 80159ec:	f001 ff4e 	bl	801788c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80159f0:	69fb      	ldr	r3, [r7, #28]
 80159f2:	7b1b      	ldrb	r3, [r3, #12]
 80159f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d002      	beq.n	8015a02 <etharp_query+0x1d2>
        copy_needed = 1;
 80159fc:	2301      	movs	r3, #1
 80159fe:	61bb      	str	r3, [r7, #24]
        break;
 8015a00:	e005      	b.n	8015a0e <etharp_query+0x1de>
      }
      p = p->next;
 8015a02:	69fb      	ldr	r3, [r7, #28]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015a08:	69fb      	ldr	r3, [r7, #28]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d1df      	bne.n	80159ce <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015a0e:	69bb      	ldr	r3, [r7, #24]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d007      	beq.n	8015a24 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015a14:	687a      	ldr	r2, [r7, #4]
 8015a16:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015a1a:	200e      	movs	r0, #14
 8015a1c:	f7f8 f918 	bl	800dc50 <pbuf_clone>
 8015a20:	61f8      	str	r0, [r7, #28]
 8015a22:	e004      	b.n	8015a2e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015a28:	69f8      	ldr	r0, [r7, #28]
 8015a2a:	f7f7 fead 	bl	800d788 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015a2e:	69fb      	ldr	r3, [r7, #28]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d021      	beq.n	8015a78 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015a34:	7c7a      	ldrb	r2, [r7, #17]
 8015a36:	4918      	ldr	r1, [pc, #96]	; (8015a98 <etharp_query+0x268>)
 8015a38:	4613      	mov	r3, r2
 8015a3a:	005b      	lsls	r3, r3, #1
 8015a3c:	4413      	add	r3, r2
 8015a3e:	00db      	lsls	r3, r3, #3
 8015a40:	440b      	add	r3, r1
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d00a      	beq.n	8015a5e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015a48:	7c7a      	ldrb	r2, [r7, #17]
 8015a4a:	4913      	ldr	r1, [pc, #76]	; (8015a98 <etharp_query+0x268>)
 8015a4c:	4613      	mov	r3, r2
 8015a4e:	005b      	lsls	r3, r3, #1
 8015a50:	4413      	add	r3, r2
 8015a52:	00db      	lsls	r3, r3, #3
 8015a54:	440b      	add	r3, r1
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	4618      	mov	r0, r3
 8015a5a:	f7f7 fdef 	bl	800d63c <pbuf_free>
      }
      arp_table[i].q = p;
 8015a5e:	7c7a      	ldrb	r2, [r7, #17]
 8015a60:	490d      	ldr	r1, [pc, #52]	; (8015a98 <etharp_query+0x268>)
 8015a62:	4613      	mov	r3, r2
 8015a64:	005b      	lsls	r3, r3, #1
 8015a66:	4413      	add	r3, r2
 8015a68:	00db      	lsls	r3, r3, #3
 8015a6a:	440b      	add	r3, r1
 8015a6c:	69fa      	ldr	r2, [r7, #28]
 8015a6e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015a70:	2300      	movs	r3, #0
 8015a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015a76:	e002      	b.n	8015a7e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015a78:	23ff      	movs	r3, #255	; 0xff
 8015a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015a7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015a82:	4618      	mov	r0, r3
 8015a84:	3728      	adds	r7, #40	; 0x28
 8015a86:	46bd      	mov	sp, r7
 8015a88:	bd80      	pop	{r7, pc}
 8015a8a:	bf00      	nop
 8015a8c:	0801ba30 	.word	0x0801ba30
 8015a90:	0801bbdc 	.word	0x0801bbdc
 8015a94:	0801baa8 	.word	0x0801baa8
 8015a98:	2000d69c 	.word	0x2000d69c
 8015a9c:	0801bbec 	.word	0x0801bbec
 8015aa0:	0801bbd0 	.word	0x0801bbd0
 8015aa4:	2000d78c 	.word	0x2000d78c
 8015aa8:	0801bc14 	.word	0x0801bc14

08015aac <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015aac:	b580      	push	{r7, lr}
 8015aae:	b08a      	sub	sp, #40	; 0x28
 8015ab0:	af02      	add	r7, sp, #8
 8015ab2:	60f8      	str	r0, [r7, #12]
 8015ab4:	60b9      	str	r1, [r7, #8]
 8015ab6:	607a      	str	r2, [r7, #4]
 8015ab8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015aba:	2300      	movs	r3, #0
 8015abc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d106      	bne.n	8015ad2 <etharp_raw+0x26>
 8015ac4:	4b3a      	ldr	r3, [pc, #232]	; (8015bb0 <etharp_raw+0x104>)
 8015ac6:	f240 4257 	movw	r2, #1111	; 0x457
 8015aca:	493a      	ldr	r1, [pc, #232]	; (8015bb4 <etharp_raw+0x108>)
 8015acc:	483a      	ldr	r0, [pc, #232]	; (8015bb8 <etharp_raw+0x10c>)
 8015ace:	f001 fedd 	bl	801788c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015ad2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015ad6:	211c      	movs	r1, #28
 8015ad8:	200e      	movs	r0, #14
 8015ada:	f7f7 facb 	bl	800d074 <pbuf_alloc>
 8015ade:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015ae0:	69bb      	ldr	r3, [r7, #24]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d102      	bne.n	8015aec <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8015aea:	e05d      	b.n	8015ba8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015aec:	69bb      	ldr	r3, [r7, #24]
 8015aee:	895b      	ldrh	r3, [r3, #10]
 8015af0:	2b1b      	cmp	r3, #27
 8015af2:	d806      	bhi.n	8015b02 <etharp_raw+0x56>
 8015af4:	4b2e      	ldr	r3, [pc, #184]	; (8015bb0 <etharp_raw+0x104>)
 8015af6:	f240 4262 	movw	r2, #1122	; 0x462
 8015afa:	4930      	ldr	r1, [pc, #192]	; (8015bbc <etharp_raw+0x110>)
 8015afc:	482e      	ldr	r0, [pc, #184]	; (8015bb8 <etharp_raw+0x10c>)
 8015afe:	f001 fec5 	bl	801788c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015b02:	69bb      	ldr	r3, [r7, #24]
 8015b04:	685b      	ldr	r3, [r3, #4]
 8015b06:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015b08:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	f7f6 f9a4 	bl	800be58 <lwip_htons>
 8015b10:	4603      	mov	r3, r0
 8015b12:	461a      	mov	r2, r3
 8015b14:	697b      	ldr	r3, [r7, #20]
 8015b16:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015b1e:	2b06      	cmp	r3, #6
 8015b20:	d006      	beq.n	8015b30 <etharp_raw+0x84>
 8015b22:	4b23      	ldr	r3, [pc, #140]	; (8015bb0 <etharp_raw+0x104>)
 8015b24:	f240 4269 	movw	r2, #1129	; 0x469
 8015b28:	4925      	ldr	r1, [pc, #148]	; (8015bc0 <etharp_raw+0x114>)
 8015b2a:	4823      	ldr	r0, [pc, #140]	; (8015bb8 <etharp_raw+0x10c>)
 8015b2c:	f001 feae 	bl	801788c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015b30:	697b      	ldr	r3, [r7, #20]
 8015b32:	3308      	adds	r3, #8
 8015b34:	2206      	movs	r2, #6
 8015b36:	6839      	ldr	r1, [r7, #0]
 8015b38:	4618      	mov	r0, r3
 8015b3a:	f002 f82c 	bl	8017b96 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015b3e:	697b      	ldr	r3, [r7, #20]
 8015b40:	3312      	adds	r3, #18
 8015b42:	2206      	movs	r2, #6
 8015b44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015b46:	4618      	mov	r0, r3
 8015b48:	f002 f825 	bl	8017b96 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015b4c:	697b      	ldr	r3, [r7, #20]
 8015b4e:	330e      	adds	r3, #14
 8015b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015b52:	6812      	ldr	r2, [r2, #0]
 8015b54:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015b56:	697b      	ldr	r3, [r7, #20]
 8015b58:	3318      	adds	r3, #24
 8015b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b5c:	6812      	ldr	r2, [r2, #0]
 8015b5e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015b60:	697b      	ldr	r3, [r7, #20]
 8015b62:	2200      	movs	r2, #0
 8015b64:	701a      	strb	r2, [r3, #0]
 8015b66:	2200      	movs	r2, #0
 8015b68:	f042 0201 	orr.w	r2, r2, #1
 8015b6c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015b6e:	697b      	ldr	r3, [r7, #20]
 8015b70:	2200      	movs	r2, #0
 8015b72:	f042 0208 	orr.w	r2, r2, #8
 8015b76:	709a      	strb	r2, [r3, #2]
 8015b78:	2200      	movs	r2, #0
 8015b7a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015b7c:	697b      	ldr	r3, [r7, #20]
 8015b7e:	2206      	movs	r2, #6
 8015b80:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015b82:	697b      	ldr	r3, [r7, #20]
 8015b84:	2204      	movs	r2, #4
 8015b86:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015b88:	f640 0306 	movw	r3, #2054	; 0x806
 8015b8c:	9300      	str	r3, [sp, #0]
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	68ba      	ldr	r2, [r7, #8]
 8015b92:	69b9      	ldr	r1, [r7, #24]
 8015b94:	68f8      	ldr	r0, [r7, #12]
 8015b96:	f001 fb7b 	bl	8017290 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015b9a:	69b8      	ldr	r0, [r7, #24]
 8015b9c:	f7f7 fd4e 	bl	800d63c <pbuf_free>
  p = NULL;
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015ba4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015ba8:	4618      	mov	r0, r3
 8015baa:	3720      	adds	r7, #32
 8015bac:	46bd      	mov	sp, r7
 8015bae:	bd80      	pop	{r7, pc}
 8015bb0:	0801ba30 	.word	0x0801ba30
 8015bb4:	0801bb80 	.word	0x0801bb80
 8015bb8:	0801baa8 	.word	0x0801baa8
 8015bbc:	0801bc30 	.word	0x0801bc30
 8015bc0:	0801bc64 	.word	0x0801bc64

08015bc4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015bc4:	b580      	push	{r7, lr}
 8015bc6:	b088      	sub	sp, #32
 8015bc8:	af04      	add	r7, sp, #16
 8015bca:	60f8      	str	r0, [r7, #12]
 8015bcc:	60b9      	str	r1, [r7, #8]
 8015bce:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015be0:	2201      	movs	r2, #1
 8015be2:	9203      	str	r2, [sp, #12]
 8015be4:	68ba      	ldr	r2, [r7, #8]
 8015be6:	9202      	str	r2, [sp, #8]
 8015be8:	4a06      	ldr	r2, [pc, #24]	; (8015c04 <etharp_request_dst+0x40>)
 8015bea:	9201      	str	r2, [sp, #4]
 8015bec:	9300      	str	r3, [sp, #0]
 8015bee:	4603      	mov	r3, r0
 8015bf0:	687a      	ldr	r2, [r7, #4]
 8015bf2:	68f8      	ldr	r0, [r7, #12]
 8015bf4:	f7ff ff5a 	bl	8015aac <etharp_raw>
 8015bf8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	3710      	adds	r7, #16
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	bd80      	pop	{r7, pc}
 8015c02:	bf00      	nop
 8015c04:	0801c2a4 	.word	0x0801c2a4

08015c08 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b082      	sub	sp, #8
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
 8015c10:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015c12:	4a05      	ldr	r2, [pc, #20]	; (8015c28 <etharp_request+0x20>)
 8015c14:	6839      	ldr	r1, [r7, #0]
 8015c16:	6878      	ldr	r0, [r7, #4]
 8015c18:	f7ff ffd4 	bl	8015bc4 <etharp_request_dst>
 8015c1c:	4603      	mov	r3, r0
}
 8015c1e:	4618      	mov	r0, r3
 8015c20:	3708      	adds	r7, #8
 8015c22:	46bd      	mov	sp, r7
 8015c24:	bd80      	pop	{r7, pc}
 8015c26:	bf00      	nop
 8015c28:	0801c29c 	.word	0x0801c29c

08015c2c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	b08e      	sub	sp, #56	; 0x38
 8015c30:	af04      	add	r7, sp, #16
 8015c32:	6078      	str	r0, [r7, #4]
 8015c34:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015c36:	4b79      	ldr	r3, [pc, #484]	; (8015e1c <icmp_input+0x1f0>)
 8015c38:	689b      	ldr	r3, [r3, #8]
 8015c3a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c3e:	781b      	ldrb	r3, [r3, #0]
 8015c40:	f003 030f 	and.w	r3, r3, #15
 8015c44:	b2db      	uxtb	r3, r3
 8015c46:	009b      	lsls	r3, r3, #2
 8015c48:	b2db      	uxtb	r3, r3
 8015c4a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015c4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015c4e:	2b13      	cmp	r3, #19
 8015c50:	f240 80cd 	bls.w	8015dee <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	895b      	ldrh	r3, [r3, #10]
 8015c58:	2b03      	cmp	r3, #3
 8015c5a:	f240 80ca 	bls.w	8015df2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	685b      	ldr	r3, [r3, #4]
 8015c62:	781b      	ldrb	r3, [r3, #0]
 8015c64:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015c68:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	f000 80b7 	beq.w	8015de0 <icmp_input+0x1b4>
 8015c72:	2b08      	cmp	r3, #8
 8015c74:	f040 80b7 	bne.w	8015de6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015c78:	4b69      	ldr	r3, [pc, #420]	; (8015e20 <icmp_input+0x1f4>)
 8015c7a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015c7c:	4b67      	ldr	r3, [pc, #412]	; (8015e1c <icmp_input+0x1f0>)
 8015c7e:	695b      	ldr	r3, [r3, #20]
 8015c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015c84:	2be0      	cmp	r3, #224	; 0xe0
 8015c86:	f000 80bb 	beq.w	8015e00 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015c8a:	4b64      	ldr	r3, [pc, #400]	; (8015e1c <icmp_input+0x1f0>)
 8015c8c:	695b      	ldr	r3, [r3, #20]
 8015c8e:	4a63      	ldr	r2, [pc, #396]	; (8015e1c <icmp_input+0x1f0>)
 8015c90:	6812      	ldr	r2, [r2, #0]
 8015c92:	4611      	mov	r1, r2
 8015c94:	4618      	mov	r0, r3
 8015c96:	f000 fbed 	bl	8016474 <ip4_addr_isbroadcast_u32>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	f040 80b1 	bne.w	8015e04 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	891b      	ldrh	r3, [r3, #8]
 8015ca6:	2b07      	cmp	r3, #7
 8015ca8:	f240 80a5 	bls.w	8015df6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015cac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015cae:	330e      	adds	r3, #14
 8015cb0:	4619      	mov	r1, r3
 8015cb2:	6878      	ldr	r0, [r7, #4]
 8015cb4:	f7f7 fc2c 	bl	800d510 <pbuf_add_header>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d04b      	beq.n	8015d56 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	891a      	ldrh	r2, [r3, #8]
 8015cc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015cc4:	4413      	add	r3, r2
 8015cc6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	891b      	ldrh	r3, [r3, #8]
 8015ccc:	8b7a      	ldrh	r2, [r7, #26]
 8015cce:	429a      	cmp	r2, r3
 8015cd0:	f0c0 809a 	bcc.w	8015e08 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015cd4:	8b7b      	ldrh	r3, [r7, #26]
 8015cd6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015cda:	4619      	mov	r1, r3
 8015cdc:	200e      	movs	r0, #14
 8015cde:	f7f7 f9c9 	bl	800d074 <pbuf_alloc>
 8015ce2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015ce4:	697b      	ldr	r3, [r7, #20]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	f000 8090 	beq.w	8015e0c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015cec:	697b      	ldr	r3, [r7, #20]
 8015cee:	895b      	ldrh	r3, [r3, #10]
 8015cf0:	461a      	mov	r2, r3
 8015cf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015cf4:	3308      	adds	r3, #8
 8015cf6:	429a      	cmp	r2, r3
 8015cf8:	d203      	bcs.n	8015d02 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015cfa:	6978      	ldr	r0, [r7, #20]
 8015cfc:	f7f7 fc9e 	bl	800d63c <pbuf_free>
          goto icmperr;
 8015d00:	e085      	b.n	8015e0e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015d02:	697b      	ldr	r3, [r7, #20]
 8015d04:	685b      	ldr	r3, [r3, #4]
 8015d06:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015d08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f001 ff43 	bl	8017b96 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015d10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d12:	4619      	mov	r1, r3
 8015d14:	6978      	ldr	r0, [r7, #20]
 8015d16:	f7f7 fc0b 	bl	800d530 <pbuf_remove_header>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d009      	beq.n	8015d34 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015d20:	4b40      	ldr	r3, [pc, #256]	; (8015e24 <icmp_input+0x1f8>)
 8015d22:	22b6      	movs	r2, #182	; 0xb6
 8015d24:	4940      	ldr	r1, [pc, #256]	; (8015e28 <icmp_input+0x1fc>)
 8015d26:	4841      	ldr	r0, [pc, #260]	; (8015e2c <icmp_input+0x200>)
 8015d28:	f001 fdb0 	bl	801788c <iprintf>
          pbuf_free(r);
 8015d2c:	6978      	ldr	r0, [r7, #20]
 8015d2e:	f7f7 fc85 	bl	800d63c <pbuf_free>
          goto icmperr;
 8015d32:	e06c      	b.n	8015e0e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015d34:	6879      	ldr	r1, [r7, #4]
 8015d36:	6978      	ldr	r0, [r7, #20]
 8015d38:	f7f7 fdb4 	bl	800d8a4 <pbuf_copy>
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d003      	beq.n	8015d4a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015d42:	6978      	ldr	r0, [r7, #20]
 8015d44:	f7f7 fc7a 	bl	800d63c <pbuf_free>
          goto icmperr;
 8015d48:	e061      	b.n	8015e0e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015d4a:	6878      	ldr	r0, [r7, #4]
 8015d4c:	f7f7 fc76 	bl	800d63c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015d50:	697b      	ldr	r3, [r7, #20]
 8015d52:	607b      	str	r3, [r7, #4]
 8015d54:	e00f      	b.n	8015d76 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015d56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d58:	330e      	adds	r3, #14
 8015d5a:	4619      	mov	r1, r3
 8015d5c:	6878      	ldr	r0, [r7, #4]
 8015d5e:	f7f7 fbe7 	bl	800d530 <pbuf_remove_header>
 8015d62:	4603      	mov	r3, r0
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d006      	beq.n	8015d76 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015d68:	4b2e      	ldr	r3, [pc, #184]	; (8015e24 <icmp_input+0x1f8>)
 8015d6a:	22c7      	movs	r2, #199	; 0xc7
 8015d6c:	4930      	ldr	r1, [pc, #192]	; (8015e30 <icmp_input+0x204>)
 8015d6e:	482f      	ldr	r0, [pc, #188]	; (8015e2c <icmp_input+0x200>)
 8015d70:	f001 fd8c 	bl	801788c <iprintf>
          goto icmperr;
 8015d74:	e04b      	b.n	8015e0e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	685b      	ldr	r3, [r3, #4]
 8015d7a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015d7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d7e:	4619      	mov	r1, r3
 8015d80:	6878      	ldr	r0, [r7, #4]
 8015d82:	f7f7 fbc5 	bl	800d510 <pbuf_add_header>
 8015d86:	4603      	mov	r3, r0
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d12b      	bne.n	8015de4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	685b      	ldr	r3, [r3, #4]
 8015d90:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015d92:	69fb      	ldr	r3, [r7, #28]
 8015d94:	681a      	ldr	r2, [r3, #0]
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015d9a:	4b20      	ldr	r3, [pc, #128]	; (8015e1c <icmp_input+0x1f0>)
 8015d9c:	691a      	ldr	r2, [r3, #16]
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015da2:	693b      	ldr	r3, [r7, #16]
 8015da4:	2200      	movs	r2, #0
 8015da6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015da8:	693b      	ldr	r3, [r7, #16]
 8015daa:	2200      	movs	r2, #0
 8015dac:	709a      	strb	r2, [r3, #2]
 8015dae:	2200      	movs	r2, #0
 8015db0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	22ff      	movs	r2, #255	; 0xff
 8015db6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	2200      	movs	r2, #0
 8015dbc:	729a      	strb	r2, [r3, #10]
 8015dbe:	2200      	movs	r2, #0
 8015dc0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015dc2:	683b      	ldr	r3, [r7, #0]
 8015dc4:	9302      	str	r3, [sp, #8]
 8015dc6:	2301      	movs	r3, #1
 8015dc8:	9301      	str	r3, [sp, #4]
 8015dca:	2300      	movs	r3, #0
 8015dcc:	9300      	str	r3, [sp, #0]
 8015dce:	23ff      	movs	r3, #255	; 0xff
 8015dd0:	2200      	movs	r2, #0
 8015dd2:	69f9      	ldr	r1, [r7, #28]
 8015dd4:	6878      	ldr	r0, [r7, #4]
 8015dd6:	f000 fa75 	bl	80162c4 <ip4_output_if>
 8015dda:	4603      	mov	r3, r0
 8015ddc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015dde:	e001      	b.n	8015de4 <icmp_input+0x1b8>
      break;
 8015de0:	bf00      	nop
 8015de2:	e000      	b.n	8015de6 <icmp_input+0x1ba>
      break;
 8015de4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015de6:	6878      	ldr	r0, [r7, #4]
 8015de8:	f7f7 fc28 	bl	800d63c <pbuf_free>
  return;
 8015dec:	e013      	b.n	8015e16 <icmp_input+0x1ea>
    goto lenerr;
 8015dee:	bf00      	nop
 8015df0:	e002      	b.n	8015df8 <icmp_input+0x1cc>
    goto lenerr;
 8015df2:	bf00      	nop
 8015df4:	e000      	b.n	8015df8 <icmp_input+0x1cc>
        goto lenerr;
 8015df6:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015df8:	6878      	ldr	r0, [r7, #4]
 8015dfa:	f7f7 fc1f 	bl	800d63c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015dfe:	e00a      	b.n	8015e16 <icmp_input+0x1ea>
        goto icmperr;
 8015e00:	bf00      	nop
 8015e02:	e004      	b.n	8015e0e <icmp_input+0x1e2>
        goto icmperr;
 8015e04:	bf00      	nop
 8015e06:	e002      	b.n	8015e0e <icmp_input+0x1e2>
          goto icmperr;
 8015e08:	bf00      	nop
 8015e0a:	e000      	b.n	8015e0e <icmp_input+0x1e2>
          goto icmperr;
 8015e0c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015e0e:	6878      	ldr	r0, [r7, #4]
 8015e10:	f7f7 fc14 	bl	800d63c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015e14:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015e16:	3728      	adds	r7, #40	; 0x28
 8015e18:	46bd      	mov	sp, r7
 8015e1a:	bd80      	pop	{r7, pc}
 8015e1c:	20009ee8 	.word	0x20009ee8
 8015e20:	20009efc 	.word	0x20009efc
 8015e24:	0801bca8 	.word	0x0801bca8
 8015e28:	0801bce0 	.word	0x0801bce0
 8015e2c:	0801bd18 	.word	0x0801bd18
 8015e30:	0801bd40 	.word	0x0801bd40

08015e34 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b082      	sub	sp, #8
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	6078      	str	r0, [r7, #4]
 8015e3c:	460b      	mov	r3, r1
 8015e3e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015e40:	78fb      	ldrb	r3, [r7, #3]
 8015e42:	461a      	mov	r2, r3
 8015e44:	2103      	movs	r1, #3
 8015e46:	6878      	ldr	r0, [r7, #4]
 8015e48:	f000 f814 	bl	8015e74 <icmp_send_response>
}
 8015e4c:	bf00      	nop
 8015e4e:	3708      	adds	r7, #8
 8015e50:	46bd      	mov	sp, r7
 8015e52:	bd80      	pop	{r7, pc}

08015e54 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015e54:	b580      	push	{r7, lr}
 8015e56:	b082      	sub	sp, #8
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	6078      	str	r0, [r7, #4]
 8015e5c:	460b      	mov	r3, r1
 8015e5e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015e60:	78fb      	ldrb	r3, [r7, #3]
 8015e62:	461a      	mov	r2, r3
 8015e64:	210b      	movs	r1, #11
 8015e66:	6878      	ldr	r0, [r7, #4]
 8015e68:	f000 f804 	bl	8015e74 <icmp_send_response>
}
 8015e6c:	bf00      	nop
 8015e6e:	3708      	adds	r7, #8
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd80      	pop	{r7, pc}

08015e74 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015e74:	b580      	push	{r7, lr}
 8015e76:	b08c      	sub	sp, #48	; 0x30
 8015e78:	af04      	add	r7, sp, #16
 8015e7a:	6078      	str	r0, [r7, #4]
 8015e7c:	460b      	mov	r3, r1
 8015e7e:	70fb      	strb	r3, [r7, #3]
 8015e80:	4613      	mov	r3, r2
 8015e82:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015e84:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015e88:	2124      	movs	r1, #36	; 0x24
 8015e8a:	2022      	movs	r0, #34	; 0x22
 8015e8c:	f7f7 f8f2 	bl	800d074 <pbuf_alloc>
 8015e90:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015e92:	69fb      	ldr	r3, [r7, #28]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d04c      	beq.n	8015f32 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015e98:	69fb      	ldr	r3, [r7, #28]
 8015e9a:	895b      	ldrh	r3, [r3, #10]
 8015e9c:	2b23      	cmp	r3, #35	; 0x23
 8015e9e:	d806      	bhi.n	8015eae <icmp_send_response+0x3a>
 8015ea0:	4b26      	ldr	r3, [pc, #152]	; (8015f3c <icmp_send_response+0xc8>)
 8015ea2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015ea6:	4926      	ldr	r1, [pc, #152]	; (8015f40 <icmp_send_response+0xcc>)
 8015ea8:	4826      	ldr	r0, [pc, #152]	; (8015f44 <icmp_send_response+0xd0>)
 8015eaa:	f001 fcef 	bl	801788c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	685b      	ldr	r3, [r3, #4]
 8015eb2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015eb4:	69fb      	ldr	r3, [r7, #28]
 8015eb6:	685b      	ldr	r3, [r3, #4]
 8015eb8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015eba:	697b      	ldr	r3, [r7, #20]
 8015ebc:	78fa      	ldrb	r2, [r7, #3]
 8015ebe:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015ec0:	697b      	ldr	r3, [r7, #20]
 8015ec2:	78ba      	ldrb	r2, [r7, #2]
 8015ec4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015ec6:	697b      	ldr	r3, [r7, #20]
 8015ec8:	2200      	movs	r2, #0
 8015eca:	711a      	strb	r2, [r3, #4]
 8015ecc:	2200      	movs	r2, #0
 8015ece:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015ed0:	697b      	ldr	r3, [r7, #20]
 8015ed2:	2200      	movs	r2, #0
 8015ed4:	719a      	strb	r2, [r3, #6]
 8015ed6:	2200      	movs	r2, #0
 8015ed8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015eda:	69fb      	ldr	r3, [r7, #28]
 8015edc:	685b      	ldr	r3, [r3, #4]
 8015ede:	f103 0008 	add.w	r0, r3, #8
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	685b      	ldr	r3, [r3, #4]
 8015ee6:	221c      	movs	r2, #28
 8015ee8:	4619      	mov	r1, r3
 8015eea:	f001 fe54 	bl	8017b96 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015eee:	69bb      	ldr	r3, [r7, #24]
 8015ef0:	68db      	ldr	r3, [r3, #12]
 8015ef2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015ef4:	f107 030c 	add.w	r3, r7, #12
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f000 f825 	bl	8015f48 <ip4_route>
 8015efe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015f00:	693b      	ldr	r3, [r7, #16]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d011      	beq.n	8015f2a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015f06:	697b      	ldr	r3, [r7, #20]
 8015f08:	2200      	movs	r2, #0
 8015f0a:	709a      	strb	r2, [r3, #2]
 8015f0c:	2200      	movs	r2, #0
 8015f0e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015f10:	f107 020c 	add.w	r2, r7, #12
 8015f14:	693b      	ldr	r3, [r7, #16]
 8015f16:	9302      	str	r3, [sp, #8]
 8015f18:	2301      	movs	r3, #1
 8015f1a:	9301      	str	r3, [sp, #4]
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	9300      	str	r3, [sp, #0]
 8015f20:	23ff      	movs	r3, #255	; 0xff
 8015f22:	2100      	movs	r1, #0
 8015f24:	69f8      	ldr	r0, [r7, #28]
 8015f26:	f000 f9cd 	bl	80162c4 <ip4_output_if>
  }
  pbuf_free(q);
 8015f2a:	69f8      	ldr	r0, [r7, #28]
 8015f2c:	f7f7 fb86 	bl	800d63c <pbuf_free>
 8015f30:	e000      	b.n	8015f34 <icmp_send_response+0xc0>
    return;
 8015f32:	bf00      	nop
}
 8015f34:	3720      	adds	r7, #32
 8015f36:	46bd      	mov	sp, r7
 8015f38:	bd80      	pop	{r7, pc}
 8015f3a:	bf00      	nop
 8015f3c:	0801bca8 	.word	0x0801bca8
 8015f40:	0801bd74 	.word	0x0801bd74
 8015f44:	0801bd18 	.word	0x0801bd18

08015f48 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015f48:	b480      	push	{r7}
 8015f4a:	b085      	sub	sp, #20
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015f50:	4b33      	ldr	r3, [pc, #204]	; (8016020 <ip4_route+0xd8>)
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	60fb      	str	r3, [r7, #12]
 8015f56:	e036      	b.n	8015fc6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f5e:	f003 0301 	and.w	r3, r3, #1
 8015f62:	b2db      	uxtb	r3, r3
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d02b      	beq.n	8015fc0 <ip4_route+0x78>
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f6e:	089b      	lsrs	r3, r3, #2
 8015f70:	f003 0301 	and.w	r3, r3, #1
 8015f74:	b2db      	uxtb	r3, r3
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d022      	beq.n	8015fc0 <ip4_route+0x78>
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	3304      	adds	r3, #4
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d01d      	beq.n	8015fc0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	681a      	ldr	r2, [r3, #0]
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	3304      	adds	r3, #4
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	405a      	eors	r2, r3
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	3308      	adds	r3, #8
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	4013      	ands	r3, r2
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d101      	bne.n	8015fa0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	e038      	b.n	8016012 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015fa6:	f003 0302 	and.w	r3, r3, #2
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d108      	bne.n	8015fc0 <ip4_route+0x78>
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	681a      	ldr	r2, [r3, #0]
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	330c      	adds	r3, #12
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	429a      	cmp	r2, r3
 8015fba:	d101      	bne.n	8015fc0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	e028      	b.n	8016012 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	60fb      	str	r3, [r7, #12]
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d1c5      	bne.n	8015f58 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015fcc:	4b15      	ldr	r3, [pc, #84]	; (8016024 <ip4_route+0xdc>)
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d01a      	beq.n	801600a <ip4_route+0xc2>
 8015fd4:	4b13      	ldr	r3, [pc, #76]	; (8016024 <ip4_route+0xdc>)
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015fdc:	f003 0301 	and.w	r3, r3, #1
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d012      	beq.n	801600a <ip4_route+0xc2>
 8015fe4:	4b0f      	ldr	r3, [pc, #60]	; (8016024 <ip4_route+0xdc>)
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015fec:	f003 0304 	and.w	r3, r3, #4
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d00a      	beq.n	801600a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015ff4:	4b0b      	ldr	r3, [pc, #44]	; (8016024 <ip4_route+0xdc>)
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	3304      	adds	r3, #4
 8015ffa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d004      	beq.n	801600a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	b2db      	uxtb	r3, r3
 8016006:	2b7f      	cmp	r3, #127	; 0x7f
 8016008:	d101      	bne.n	801600e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801600a:	2300      	movs	r3, #0
 801600c:	e001      	b.n	8016012 <ip4_route+0xca>
  }

  return netif_default;
 801600e:	4b05      	ldr	r3, [pc, #20]	; (8016024 <ip4_route+0xdc>)
 8016010:	681b      	ldr	r3, [r3, #0]
}
 8016012:	4618      	mov	r0, r3
 8016014:	3714      	adds	r7, #20
 8016016:	46bd      	mov	sp, r7
 8016018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801601c:	4770      	bx	lr
 801601e:	bf00      	nop
 8016020:	2000d630 	.word	0x2000d630
 8016024:	2000d634 	.word	0x2000d634

08016028 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016028:	b580      	push	{r7, lr}
 801602a:	b082      	sub	sp, #8
 801602c:	af00      	add	r7, sp, #0
 801602e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016036:	f003 0301 	and.w	r3, r3, #1
 801603a:	b2db      	uxtb	r3, r3
 801603c:	2b00      	cmp	r3, #0
 801603e:	d016      	beq.n	801606e <ip4_input_accept+0x46>
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	3304      	adds	r3, #4
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d011      	beq.n	801606e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801604a:	4b0b      	ldr	r3, [pc, #44]	; (8016078 <ip4_input_accept+0x50>)
 801604c:	695a      	ldr	r2, [r3, #20]
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	3304      	adds	r3, #4
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	429a      	cmp	r2, r3
 8016056:	d008      	beq.n	801606a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016058:	4b07      	ldr	r3, [pc, #28]	; (8016078 <ip4_input_accept+0x50>)
 801605a:	695b      	ldr	r3, [r3, #20]
 801605c:	6879      	ldr	r1, [r7, #4]
 801605e:	4618      	mov	r0, r3
 8016060:	f000 fa08 	bl	8016474 <ip4_addr_isbroadcast_u32>
 8016064:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016066:	2b00      	cmp	r3, #0
 8016068:	d001      	beq.n	801606e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801606a:	2301      	movs	r3, #1
 801606c:	e000      	b.n	8016070 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801606e:	2300      	movs	r3, #0
}
 8016070:	4618      	mov	r0, r3
 8016072:	3708      	adds	r7, #8
 8016074:	46bd      	mov	sp, r7
 8016076:	bd80      	pop	{r7, pc}
 8016078:	20009ee8 	.word	0x20009ee8

0801607c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801607c:	b580      	push	{r7, lr}
 801607e:	b086      	sub	sp, #24
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
 8016084:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	685b      	ldr	r3, [r3, #4]
 801608a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801608c:	697b      	ldr	r3, [r7, #20]
 801608e:	781b      	ldrb	r3, [r3, #0]
 8016090:	091b      	lsrs	r3, r3, #4
 8016092:	b2db      	uxtb	r3, r3
 8016094:	2b04      	cmp	r3, #4
 8016096:	d004      	beq.n	80160a2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016098:	6878      	ldr	r0, [r7, #4]
 801609a:	f7f7 facf 	bl	800d63c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801609e:	2300      	movs	r3, #0
 80160a0:	e107      	b.n	80162b2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80160a2:	697b      	ldr	r3, [r7, #20]
 80160a4:	781b      	ldrb	r3, [r3, #0]
 80160a6:	f003 030f 	and.w	r3, r3, #15
 80160aa:	b2db      	uxtb	r3, r3
 80160ac:	009b      	lsls	r3, r3, #2
 80160ae:	b2db      	uxtb	r3, r3
 80160b0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80160b2:	697b      	ldr	r3, [r7, #20]
 80160b4:	885b      	ldrh	r3, [r3, #2]
 80160b6:	b29b      	uxth	r3, r3
 80160b8:	4618      	mov	r0, r3
 80160ba:	f7f5 fecd 	bl	800be58 <lwip_htons>
 80160be:	4603      	mov	r3, r0
 80160c0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	891b      	ldrh	r3, [r3, #8]
 80160c6:	89ba      	ldrh	r2, [r7, #12]
 80160c8:	429a      	cmp	r2, r3
 80160ca:	d204      	bcs.n	80160d6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80160cc:	89bb      	ldrh	r3, [r7, #12]
 80160ce:	4619      	mov	r1, r3
 80160d0:	6878      	ldr	r0, [r7, #4]
 80160d2:	f7f7 f92d 	bl	800d330 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	895b      	ldrh	r3, [r3, #10]
 80160da:	89fa      	ldrh	r2, [r7, #14]
 80160dc:	429a      	cmp	r2, r3
 80160de:	d807      	bhi.n	80160f0 <ip4_input+0x74>
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	891b      	ldrh	r3, [r3, #8]
 80160e4:	89ba      	ldrh	r2, [r7, #12]
 80160e6:	429a      	cmp	r2, r3
 80160e8:	d802      	bhi.n	80160f0 <ip4_input+0x74>
 80160ea:	89fb      	ldrh	r3, [r7, #14]
 80160ec:	2b13      	cmp	r3, #19
 80160ee:	d804      	bhi.n	80160fa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80160f0:	6878      	ldr	r0, [r7, #4]
 80160f2:	f7f7 faa3 	bl	800d63c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80160f6:	2300      	movs	r3, #0
 80160f8:	e0db      	b.n	80162b2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80160fa:	697b      	ldr	r3, [r7, #20]
 80160fc:	691b      	ldr	r3, [r3, #16]
 80160fe:	4a6f      	ldr	r2, [pc, #444]	; (80162bc <ip4_input+0x240>)
 8016100:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016102:	697b      	ldr	r3, [r7, #20]
 8016104:	68db      	ldr	r3, [r3, #12]
 8016106:	4a6d      	ldr	r2, [pc, #436]	; (80162bc <ip4_input+0x240>)
 8016108:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801610a:	4b6c      	ldr	r3, [pc, #432]	; (80162bc <ip4_input+0x240>)
 801610c:	695b      	ldr	r3, [r3, #20]
 801610e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016112:	2be0      	cmp	r3, #224	; 0xe0
 8016114:	d112      	bne.n	801613c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016116:	683b      	ldr	r3, [r7, #0]
 8016118:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801611c:	f003 0301 	and.w	r3, r3, #1
 8016120:	b2db      	uxtb	r3, r3
 8016122:	2b00      	cmp	r3, #0
 8016124:	d007      	beq.n	8016136 <ip4_input+0xba>
 8016126:	683b      	ldr	r3, [r7, #0]
 8016128:	3304      	adds	r3, #4
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d002      	beq.n	8016136 <ip4_input+0xba>
      netif = inp;
 8016130:	683b      	ldr	r3, [r7, #0]
 8016132:	613b      	str	r3, [r7, #16]
 8016134:	e02a      	b.n	801618c <ip4_input+0x110>
    } else {
      netif = NULL;
 8016136:	2300      	movs	r3, #0
 8016138:	613b      	str	r3, [r7, #16]
 801613a:	e027      	b.n	801618c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801613c:	6838      	ldr	r0, [r7, #0]
 801613e:	f7ff ff73 	bl	8016028 <ip4_input_accept>
 8016142:	4603      	mov	r3, r0
 8016144:	2b00      	cmp	r3, #0
 8016146:	d002      	beq.n	801614e <ip4_input+0xd2>
      netif = inp;
 8016148:	683b      	ldr	r3, [r7, #0]
 801614a:	613b      	str	r3, [r7, #16]
 801614c:	e01e      	b.n	801618c <ip4_input+0x110>
    } else {
      netif = NULL;
 801614e:	2300      	movs	r3, #0
 8016150:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016152:	4b5a      	ldr	r3, [pc, #360]	; (80162bc <ip4_input+0x240>)
 8016154:	695b      	ldr	r3, [r3, #20]
 8016156:	b2db      	uxtb	r3, r3
 8016158:	2b7f      	cmp	r3, #127	; 0x7f
 801615a:	d017      	beq.n	801618c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801615c:	4b58      	ldr	r3, [pc, #352]	; (80162c0 <ip4_input+0x244>)
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	613b      	str	r3, [r7, #16]
 8016162:	e00e      	b.n	8016182 <ip4_input+0x106>
          if (netif == inp) {
 8016164:	693a      	ldr	r2, [r7, #16]
 8016166:	683b      	ldr	r3, [r7, #0]
 8016168:	429a      	cmp	r2, r3
 801616a:	d006      	beq.n	801617a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801616c:	6938      	ldr	r0, [r7, #16]
 801616e:	f7ff ff5b 	bl	8016028 <ip4_input_accept>
 8016172:	4603      	mov	r3, r0
 8016174:	2b00      	cmp	r3, #0
 8016176:	d108      	bne.n	801618a <ip4_input+0x10e>
 8016178:	e000      	b.n	801617c <ip4_input+0x100>
            continue;
 801617a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801617c:	693b      	ldr	r3, [r7, #16]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	613b      	str	r3, [r7, #16]
 8016182:	693b      	ldr	r3, [r7, #16]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d1ed      	bne.n	8016164 <ip4_input+0xe8>
 8016188:	e000      	b.n	801618c <ip4_input+0x110>
            break;
 801618a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801618c:	4b4b      	ldr	r3, [pc, #300]	; (80162bc <ip4_input+0x240>)
 801618e:	691b      	ldr	r3, [r3, #16]
 8016190:	6839      	ldr	r1, [r7, #0]
 8016192:	4618      	mov	r0, r3
 8016194:	f000 f96e 	bl	8016474 <ip4_addr_isbroadcast_u32>
 8016198:	4603      	mov	r3, r0
 801619a:	2b00      	cmp	r3, #0
 801619c:	d105      	bne.n	80161aa <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801619e:	4b47      	ldr	r3, [pc, #284]	; (80162bc <ip4_input+0x240>)
 80161a0:	691b      	ldr	r3, [r3, #16]
 80161a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80161a6:	2be0      	cmp	r3, #224	; 0xe0
 80161a8:	d104      	bne.n	80161b4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80161aa:	6878      	ldr	r0, [r7, #4]
 80161ac:	f7f7 fa46 	bl	800d63c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80161b0:	2300      	movs	r3, #0
 80161b2:	e07e      	b.n	80162b2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80161b4:	693b      	ldr	r3, [r7, #16]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d104      	bne.n	80161c4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80161ba:	6878      	ldr	r0, [r7, #4]
 80161bc:	f7f7 fa3e 	bl	800d63c <pbuf_free>
    return ERR_OK;
 80161c0:	2300      	movs	r3, #0
 80161c2:	e076      	b.n	80162b2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80161c4:	697b      	ldr	r3, [r7, #20]
 80161c6:	88db      	ldrh	r3, [r3, #6]
 80161c8:	b29b      	uxth	r3, r3
 80161ca:	461a      	mov	r2, r3
 80161cc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80161d0:	4013      	ands	r3, r2
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d00b      	beq.n	80161ee <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80161d6:	6878      	ldr	r0, [r7, #4]
 80161d8:	f000 fc92 	bl	8016b00 <ip4_reass>
 80161dc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d101      	bne.n	80161e8 <ip4_input+0x16c>
      return ERR_OK;
 80161e4:	2300      	movs	r3, #0
 80161e6:	e064      	b.n	80162b2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	685b      	ldr	r3, [r3, #4]
 80161ec:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80161ee:	4a33      	ldr	r2, [pc, #204]	; (80162bc <ip4_input+0x240>)
 80161f0:	693b      	ldr	r3, [r7, #16]
 80161f2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80161f4:	4a31      	ldr	r2, [pc, #196]	; (80162bc <ip4_input+0x240>)
 80161f6:	683b      	ldr	r3, [r7, #0]
 80161f8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80161fa:	4a30      	ldr	r2, [pc, #192]	; (80162bc <ip4_input+0x240>)
 80161fc:	697b      	ldr	r3, [r7, #20]
 80161fe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016200:	697b      	ldr	r3, [r7, #20]
 8016202:	781b      	ldrb	r3, [r3, #0]
 8016204:	f003 030f 	and.w	r3, r3, #15
 8016208:	b2db      	uxtb	r3, r3
 801620a:	009b      	lsls	r3, r3, #2
 801620c:	b2db      	uxtb	r3, r3
 801620e:	b29a      	uxth	r2, r3
 8016210:	4b2a      	ldr	r3, [pc, #168]	; (80162bc <ip4_input+0x240>)
 8016212:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016214:	89fb      	ldrh	r3, [r7, #14]
 8016216:	4619      	mov	r1, r3
 8016218:	6878      	ldr	r0, [r7, #4]
 801621a:	f7f7 f989 	bl	800d530 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801621e:	697b      	ldr	r3, [r7, #20]
 8016220:	7a5b      	ldrb	r3, [r3, #9]
 8016222:	2b11      	cmp	r3, #17
 8016224:	d006      	beq.n	8016234 <ip4_input+0x1b8>
 8016226:	2b11      	cmp	r3, #17
 8016228:	dc13      	bgt.n	8016252 <ip4_input+0x1d6>
 801622a:	2b01      	cmp	r3, #1
 801622c:	d00c      	beq.n	8016248 <ip4_input+0x1cc>
 801622e:	2b06      	cmp	r3, #6
 8016230:	d005      	beq.n	801623e <ip4_input+0x1c2>
 8016232:	e00e      	b.n	8016252 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016234:	6839      	ldr	r1, [r7, #0]
 8016236:	6878      	ldr	r0, [r7, #4]
 8016238:	f7fe f902 	bl	8014440 <udp_input>
        break;
 801623c:	e026      	b.n	801628c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801623e:	6839      	ldr	r1, [r7, #0]
 8016240:	6878      	ldr	r0, [r7, #4]
 8016242:	f7f9 fcbb 	bl	800fbbc <tcp_input>
        break;
 8016246:	e021      	b.n	801628c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016248:	6839      	ldr	r1, [r7, #0]
 801624a:	6878      	ldr	r0, [r7, #4]
 801624c:	f7ff fcee 	bl	8015c2c <icmp_input>
        break;
 8016250:	e01c      	b.n	801628c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016252:	4b1a      	ldr	r3, [pc, #104]	; (80162bc <ip4_input+0x240>)
 8016254:	695b      	ldr	r3, [r3, #20]
 8016256:	6939      	ldr	r1, [r7, #16]
 8016258:	4618      	mov	r0, r3
 801625a:	f000 f90b 	bl	8016474 <ip4_addr_isbroadcast_u32>
 801625e:	4603      	mov	r3, r0
 8016260:	2b00      	cmp	r3, #0
 8016262:	d10f      	bne.n	8016284 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016264:	4b15      	ldr	r3, [pc, #84]	; (80162bc <ip4_input+0x240>)
 8016266:	695b      	ldr	r3, [r3, #20]
 8016268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801626c:	2be0      	cmp	r3, #224	; 0xe0
 801626e:	d009      	beq.n	8016284 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016270:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016274:	4619      	mov	r1, r3
 8016276:	6878      	ldr	r0, [r7, #4]
 8016278:	f7f7 f9cd 	bl	800d616 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801627c:	2102      	movs	r1, #2
 801627e:	6878      	ldr	r0, [r7, #4]
 8016280:	f7ff fdd8 	bl	8015e34 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016284:	6878      	ldr	r0, [r7, #4]
 8016286:	f7f7 f9d9 	bl	800d63c <pbuf_free>
        break;
 801628a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801628c:	4b0b      	ldr	r3, [pc, #44]	; (80162bc <ip4_input+0x240>)
 801628e:	2200      	movs	r2, #0
 8016290:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016292:	4b0a      	ldr	r3, [pc, #40]	; (80162bc <ip4_input+0x240>)
 8016294:	2200      	movs	r2, #0
 8016296:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016298:	4b08      	ldr	r3, [pc, #32]	; (80162bc <ip4_input+0x240>)
 801629a:	2200      	movs	r2, #0
 801629c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801629e:	4b07      	ldr	r3, [pc, #28]	; (80162bc <ip4_input+0x240>)
 80162a0:	2200      	movs	r2, #0
 80162a2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80162a4:	4b05      	ldr	r3, [pc, #20]	; (80162bc <ip4_input+0x240>)
 80162a6:	2200      	movs	r2, #0
 80162a8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80162aa:	4b04      	ldr	r3, [pc, #16]	; (80162bc <ip4_input+0x240>)
 80162ac:	2200      	movs	r2, #0
 80162ae:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80162b0:	2300      	movs	r3, #0
}
 80162b2:	4618      	mov	r0, r3
 80162b4:	3718      	adds	r7, #24
 80162b6:	46bd      	mov	sp, r7
 80162b8:	bd80      	pop	{r7, pc}
 80162ba:	bf00      	nop
 80162bc:	20009ee8 	.word	0x20009ee8
 80162c0:	2000d630 	.word	0x2000d630

080162c4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80162c4:	b580      	push	{r7, lr}
 80162c6:	b08a      	sub	sp, #40	; 0x28
 80162c8:	af04      	add	r7, sp, #16
 80162ca:	60f8      	str	r0, [r7, #12]
 80162cc:	60b9      	str	r1, [r7, #8]
 80162ce:	607a      	str	r2, [r7, #4]
 80162d0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80162d2:	68bb      	ldr	r3, [r7, #8]
 80162d4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d009      	beq.n	80162f0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80162dc:	68bb      	ldr	r3, [r7, #8]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d003      	beq.n	80162ea <ip4_output_if+0x26>
 80162e2:	68bb      	ldr	r3, [r7, #8]
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d102      	bne.n	80162f0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80162ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162ec:	3304      	adds	r3, #4
 80162ee:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80162f0:	78fa      	ldrb	r2, [r7, #3]
 80162f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162f4:	9302      	str	r3, [sp, #8]
 80162f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80162fa:	9301      	str	r3, [sp, #4]
 80162fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016300:	9300      	str	r3, [sp, #0]
 8016302:	4613      	mov	r3, r2
 8016304:	687a      	ldr	r2, [r7, #4]
 8016306:	6979      	ldr	r1, [r7, #20]
 8016308:	68f8      	ldr	r0, [r7, #12]
 801630a:	f000 f805 	bl	8016318 <ip4_output_if_src>
 801630e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016310:	4618      	mov	r0, r3
 8016312:	3718      	adds	r7, #24
 8016314:	46bd      	mov	sp, r7
 8016316:	bd80      	pop	{r7, pc}

08016318 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016318:	b580      	push	{r7, lr}
 801631a:	b088      	sub	sp, #32
 801631c:	af00      	add	r7, sp, #0
 801631e:	60f8      	str	r0, [r7, #12]
 8016320:	60b9      	str	r1, [r7, #8]
 8016322:	607a      	str	r2, [r7, #4]
 8016324:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	7b9b      	ldrb	r3, [r3, #14]
 801632a:	2b01      	cmp	r3, #1
 801632c:	d006      	beq.n	801633c <ip4_output_if_src+0x24>
 801632e:	4b4b      	ldr	r3, [pc, #300]	; (801645c <ip4_output_if_src+0x144>)
 8016330:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016334:	494a      	ldr	r1, [pc, #296]	; (8016460 <ip4_output_if_src+0x148>)
 8016336:	484b      	ldr	r0, [pc, #300]	; (8016464 <ip4_output_if_src+0x14c>)
 8016338:	f001 faa8 	bl	801788c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d060      	beq.n	8016404 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016342:	2314      	movs	r3, #20
 8016344:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016346:	2114      	movs	r1, #20
 8016348:	68f8      	ldr	r0, [r7, #12]
 801634a:	f7f7 f8e1 	bl	800d510 <pbuf_add_header>
 801634e:	4603      	mov	r3, r0
 8016350:	2b00      	cmp	r3, #0
 8016352:	d002      	beq.n	801635a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016354:	f06f 0301 	mvn.w	r3, #1
 8016358:	e07c      	b.n	8016454 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	685b      	ldr	r3, [r3, #4]
 801635e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	895b      	ldrh	r3, [r3, #10]
 8016364:	2b13      	cmp	r3, #19
 8016366:	d806      	bhi.n	8016376 <ip4_output_if_src+0x5e>
 8016368:	4b3c      	ldr	r3, [pc, #240]	; (801645c <ip4_output_if_src+0x144>)
 801636a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801636e:	493e      	ldr	r1, [pc, #248]	; (8016468 <ip4_output_if_src+0x150>)
 8016370:	483c      	ldr	r0, [pc, #240]	; (8016464 <ip4_output_if_src+0x14c>)
 8016372:	f001 fa8b 	bl	801788c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016376:	69fb      	ldr	r3, [r7, #28]
 8016378:	78fa      	ldrb	r2, [r7, #3]
 801637a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801637c:	69fb      	ldr	r3, [r7, #28]
 801637e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016382:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	681a      	ldr	r2, [r3, #0]
 8016388:	69fb      	ldr	r3, [r7, #28]
 801638a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801638c:	8b7b      	ldrh	r3, [r7, #26]
 801638e:	089b      	lsrs	r3, r3, #2
 8016390:	b29b      	uxth	r3, r3
 8016392:	b2db      	uxtb	r3, r3
 8016394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016398:	b2da      	uxtb	r2, r3
 801639a:	69fb      	ldr	r3, [r7, #28]
 801639c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801639e:	69fb      	ldr	r3, [r7, #28]
 80163a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80163a4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	891b      	ldrh	r3, [r3, #8]
 80163aa:	4618      	mov	r0, r3
 80163ac:	f7f5 fd54 	bl	800be58 <lwip_htons>
 80163b0:	4603      	mov	r3, r0
 80163b2:	461a      	mov	r2, r3
 80163b4:	69fb      	ldr	r3, [r7, #28]
 80163b6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80163b8:	69fb      	ldr	r3, [r7, #28]
 80163ba:	2200      	movs	r2, #0
 80163bc:	719a      	strb	r2, [r3, #6]
 80163be:	2200      	movs	r2, #0
 80163c0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80163c2:	4b2a      	ldr	r3, [pc, #168]	; (801646c <ip4_output_if_src+0x154>)
 80163c4:	881b      	ldrh	r3, [r3, #0]
 80163c6:	4618      	mov	r0, r3
 80163c8:	f7f5 fd46 	bl	800be58 <lwip_htons>
 80163cc:	4603      	mov	r3, r0
 80163ce:	461a      	mov	r2, r3
 80163d0:	69fb      	ldr	r3, [r7, #28]
 80163d2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80163d4:	4b25      	ldr	r3, [pc, #148]	; (801646c <ip4_output_if_src+0x154>)
 80163d6:	881b      	ldrh	r3, [r3, #0]
 80163d8:	3301      	adds	r3, #1
 80163da:	b29a      	uxth	r2, r3
 80163dc:	4b23      	ldr	r3, [pc, #140]	; (801646c <ip4_output_if_src+0x154>)
 80163de:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80163e0:	68bb      	ldr	r3, [r7, #8]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d104      	bne.n	80163f0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80163e6:	4b22      	ldr	r3, [pc, #136]	; (8016470 <ip4_output_if_src+0x158>)
 80163e8:	681a      	ldr	r2, [r3, #0]
 80163ea:	69fb      	ldr	r3, [r7, #28]
 80163ec:	60da      	str	r2, [r3, #12]
 80163ee:	e003      	b.n	80163f8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80163f0:	68bb      	ldr	r3, [r7, #8]
 80163f2:	681a      	ldr	r2, [r3, #0]
 80163f4:	69fb      	ldr	r3, [r7, #28]
 80163f6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80163f8:	69fb      	ldr	r3, [r7, #28]
 80163fa:	2200      	movs	r2, #0
 80163fc:	729a      	strb	r2, [r3, #10]
 80163fe:	2200      	movs	r2, #0
 8016400:	72da      	strb	r2, [r3, #11]
 8016402:	e00f      	b.n	8016424 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	895b      	ldrh	r3, [r3, #10]
 8016408:	2b13      	cmp	r3, #19
 801640a:	d802      	bhi.n	8016412 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801640c:	f06f 0301 	mvn.w	r3, #1
 8016410:	e020      	b.n	8016454 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	685b      	ldr	r3, [r3, #4]
 8016416:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016418:	69fb      	ldr	r3, [r7, #28]
 801641a:	691b      	ldr	r3, [r3, #16]
 801641c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801641e:	f107 0314 	add.w	r3, r7, #20
 8016422:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016426:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016428:	2b00      	cmp	r3, #0
 801642a:	d00c      	beq.n	8016446 <ip4_output_if_src+0x12e>
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	891a      	ldrh	r2, [r3, #8]
 8016430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016432:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016434:	429a      	cmp	r2, r3
 8016436:	d906      	bls.n	8016446 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016438:	687a      	ldr	r2, [r7, #4]
 801643a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801643c:	68f8      	ldr	r0, [r7, #12]
 801643e:	f000 fd53 	bl	8016ee8 <ip4_frag>
 8016442:	4603      	mov	r3, r0
 8016444:	e006      	b.n	8016454 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016448:	695b      	ldr	r3, [r3, #20]
 801644a:	687a      	ldr	r2, [r7, #4]
 801644c:	68f9      	ldr	r1, [r7, #12]
 801644e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016450:	4798      	blx	r3
 8016452:	4603      	mov	r3, r0
}
 8016454:	4618      	mov	r0, r3
 8016456:	3720      	adds	r7, #32
 8016458:	46bd      	mov	sp, r7
 801645a:	bd80      	pop	{r7, pc}
 801645c:	0801bda0 	.word	0x0801bda0
 8016460:	0801bdd4 	.word	0x0801bdd4
 8016464:	0801bde0 	.word	0x0801bde0
 8016468:	0801be08 	.word	0x0801be08
 801646c:	2000d78e 	.word	0x2000d78e
 8016470:	0801c298 	.word	0x0801c298

08016474 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016474:	b480      	push	{r7}
 8016476:	b085      	sub	sp, #20
 8016478:	af00      	add	r7, sp, #0
 801647a:	6078      	str	r0, [r7, #4]
 801647c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016488:	d002      	beq.n	8016490 <ip4_addr_isbroadcast_u32+0x1c>
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d101      	bne.n	8016494 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016490:	2301      	movs	r3, #1
 8016492:	e02a      	b.n	80164ea <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016494:	683b      	ldr	r3, [r7, #0]
 8016496:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801649a:	f003 0302 	and.w	r3, r3, #2
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d101      	bne.n	80164a6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80164a2:	2300      	movs	r3, #0
 80164a4:	e021      	b.n	80164ea <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80164a6:	683b      	ldr	r3, [r7, #0]
 80164a8:	3304      	adds	r3, #4
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	687a      	ldr	r2, [r7, #4]
 80164ae:	429a      	cmp	r2, r3
 80164b0:	d101      	bne.n	80164b6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80164b2:	2300      	movs	r3, #0
 80164b4:	e019      	b.n	80164ea <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80164b6:	68fa      	ldr	r2, [r7, #12]
 80164b8:	683b      	ldr	r3, [r7, #0]
 80164ba:	3304      	adds	r3, #4
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	405a      	eors	r2, r3
 80164c0:	683b      	ldr	r3, [r7, #0]
 80164c2:	3308      	adds	r3, #8
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	4013      	ands	r3, r2
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d10d      	bne.n	80164e8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80164cc:	683b      	ldr	r3, [r7, #0]
 80164ce:	3308      	adds	r3, #8
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	43da      	mvns	r2, r3
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80164d8:	683b      	ldr	r3, [r7, #0]
 80164da:	3308      	adds	r3, #8
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80164e0:	429a      	cmp	r2, r3
 80164e2:	d101      	bne.n	80164e8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80164e4:	2301      	movs	r3, #1
 80164e6:	e000      	b.n	80164ea <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80164e8:	2300      	movs	r3, #0
  }
}
 80164ea:	4618      	mov	r0, r3
 80164ec:	3714      	adds	r7, #20
 80164ee:	46bd      	mov	sp, r7
 80164f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f4:	4770      	bx	lr
	...

080164f8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80164f8:	b580      	push	{r7, lr}
 80164fa:	b084      	sub	sp, #16
 80164fc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80164fe:	2300      	movs	r3, #0
 8016500:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016502:	4b12      	ldr	r3, [pc, #72]	; (801654c <ip_reass_tmr+0x54>)
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016508:	e018      	b.n	801653c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	7fdb      	ldrb	r3, [r3, #31]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d00b      	beq.n	801652a <ip_reass_tmr+0x32>
      r->timer--;
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	7fdb      	ldrb	r3, [r3, #31]
 8016516:	3b01      	subs	r3, #1
 8016518:	b2da      	uxtb	r2, r3
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	60fb      	str	r3, [r7, #12]
 8016528:	e008      	b.n	801653c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016534:	68b9      	ldr	r1, [r7, #8]
 8016536:	6878      	ldr	r0, [r7, #4]
 8016538:	f000 f80a 	bl	8016550 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	2b00      	cmp	r3, #0
 8016540:	d1e3      	bne.n	801650a <ip_reass_tmr+0x12>
    }
  }
}
 8016542:	bf00      	nop
 8016544:	bf00      	nop
 8016546:	3710      	adds	r7, #16
 8016548:	46bd      	mov	sp, r7
 801654a:	bd80      	pop	{r7, pc}
 801654c:	2000d790 	.word	0x2000d790

08016550 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016550:	b580      	push	{r7, lr}
 8016552:	b088      	sub	sp, #32
 8016554:	af00      	add	r7, sp, #0
 8016556:	6078      	str	r0, [r7, #4]
 8016558:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801655a:	2300      	movs	r3, #0
 801655c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801655e:	683a      	ldr	r2, [r7, #0]
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	429a      	cmp	r2, r3
 8016564:	d105      	bne.n	8016572 <ip_reass_free_complete_datagram+0x22>
 8016566:	4b45      	ldr	r3, [pc, #276]	; (801667c <ip_reass_free_complete_datagram+0x12c>)
 8016568:	22ab      	movs	r2, #171	; 0xab
 801656a:	4945      	ldr	r1, [pc, #276]	; (8016680 <ip_reass_free_complete_datagram+0x130>)
 801656c:	4845      	ldr	r0, [pc, #276]	; (8016684 <ip_reass_free_complete_datagram+0x134>)
 801656e:	f001 f98d 	bl	801788c <iprintf>
  if (prev != NULL) {
 8016572:	683b      	ldr	r3, [r7, #0]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d00a      	beq.n	801658e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016578:	683b      	ldr	r3, [r7, #0]
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	687a      	ldr	r2, [r7, #4]
 801657e:	429a      	cmp	r2, r3
 8016580:	d005      	beq.n	801658e <ip_reass_free_complete_datagram+0x3e>
 8016582:	4b3e      	ldr	r3, [pc, #248]	; (801667c <ip_reass_free_complete_datagram+0x12c>)
 8016584:	22ad      	movs	r2, #173	; 0xad
 8016586:	4940      	ldr	r1, [pc, #256]	; (8016688 <ip_reass_free_complete_datagram+0x138>)
 8016588:	483e      	ldr	r0, [pc, #248]	; (8016684 <ip_reass_free_complete_datagram+0x134>)
 801658a:	f001 f97f 	bl	801788c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	685b      	ldr	r3, [r3, #4]
 8016592:	685b      	ldr	r3, [r3, #4]
 8016594:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016596:	697b      	ldr	r3, [r7, #20]
 8016598:	889b      	ldrh	r3, [r3, #4]
 801659a:	b29b      	uxth	r3, r3
 801659c:	2b00      	cmp	r3, #0
 801659e:	d12a      	bne.n	80165f6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	685b      	ldr	r3, [r3, #4]
 80165a4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80165a6:	697b      	ldr	r3, [r7, #20]
 80165a8:	681a      	ldr	r2, [r3, #0]
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80165ae:	69bb      	ldr	r3, [r7, #24]
 80165b0:	6858      	ldr	r0, [r3, #4]
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	3308      	adds	r3, #8
 80165b6:	2214      	movs	r2, #20
 80165b8:	4619      	mov	r1, r3
 80165ba:	f001 faec 	bl	8017b96 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80165be:	2101      	movs	r1, #1
 80165c0:	69b8      	ldr	r0, [r7, #24]
 80165c2:	f7ff fc47 	bl	8015e54 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80165c6:	69b8      	ldr	r0, [r7, #24]
 80165c8:	f7f7 f8c6 	bl	800d758 <pbuf_clen>
 80165cc:	4603      	mov	r3, r0
 80165ce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80165d0:	8bfa      	ldrh	r2, [r7, #30]
 80165d2:	8a7b      	ldrh	r3, [r7, #18]
 80165d4:	4413      	add	r3, r2
 80165d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80165da:	db05      	blt.n	80165e8 <ip_reass_free_complete_datagram+0x98>
 80165dc:	4b27      	ldr	r3, [pc, #156]	; (801667c <ip_reass_free_complete_datagram+0x12c>)
 80165de:	22bc      	movs	r2, #188	; 0xbc
 80165e0:	492a      	ldr	r1, [pc, #168]	; (801668c <ip_reass_free_complete_datagram+0x13c>)
 80165e2:	4828      	ldr	r0, [pc, #160]	; (8016684 <ip_reass_free_complete_datagram+0x134>)
 80165e4:	f001 f952 	bl	801788c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80165e8:	8bfa      	ldrh	r2, [r7, #30]
 80165ea:	8a7b      	ldrh	r3, [r7, #18]
 80165ec:	4413      	add	r3, r2
 80165ee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80165f0:	69b8      	ldr	r0, [r7, #24]
 80165f2:	f7f7 f823 	bl	800d63c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	685b      	ldr	r3, [r3, #4]
 80165fa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80165fc:	e01f      	b.n	801663e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80165fe:	69bb      	ldr	r3, [r7, #24]
 8016600:	685b      	ldr	r3, [r3, #4]
 8016602:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016604:	69bb      	ldr	r3, [r7, #24]
 8016606:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016608:	697b      	ldr	r3, [r7, #20]
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801660e:	68f8      	ldr	r0, [r7, #12]
 8016610:	f7f7 f8a2 	bl	800d758 <pbuf_clen>
 8016614:	4603      	mov	r3, r0
 8016616:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016618:	8bfa      	ldrh	r2, [r7, #30]
 801661a:	8a7b      	ldrh	r3, [r7, #18]
 801661c:	4413      	add	r3, r2
 801661e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016622:	db05      	blt.n	8016630 <ip_reass_free_complete_datagram+0xe0>
 8016624:	4b15      	ldr	r3, [pc, #84]	; (801667c <ip_reass_free_complete_datagram+0x12c>)
 8016626:	22cc      	movs	r2, #204	; 0xcc
 8016628:	4918      	ldr	r1, [pc, #96]	; (801668c <ip_reass_free_complete_datagram+0x13c>)
 801662a:	4816      	ldr	r0, [pc, #88]	; (8016684 <ip_reass_free_complete_datagram+0x134>)
 801662c:	f001 f92e 	bl	801788c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016630:	8bfa      	ldrh	r2, [r7, #30]
 8016632:	8a7b      	ldrh	r3, [r7, #18]
 8016634:	4413      	add	r3, r2
 8016636:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016638:	68f8      	ldr	r0, [r7, #12]
 801663a:	f7f6 ffff 	bl	800d63c <pbuf_free>
  while (p != NULL) {
 801663e:	69bb      	ldr	r3, [r7, #24]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d1dc      	bne.n	80165fe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016644:	6839      	ldr	r1, [r7, #0]
 8016646:	6878      	ldr	r0, [r7, #4]
 8016648:	f000 f8c2 	bl	80167d0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801664c:	4b10      	ldr	r3, [pc, #64]	; (8016690 <ip_reass_free_complete_datagram+0x140>)
 801664e:	881b      	ldrh	r3, [r3, #0]
 8016650:	8bfa      	ldrh	r2, [r7, #30]
 8016652:	429a      	cmp	r2, r3
 8016654:	d905      	bls.n	8016662 <ip_reass_free_complete_datagram+0x112>
 8016656:	4b09      	ldr	r3, [pc, #36]	; (801667c <ip_reass_free_complete_datagram+0x12c>)
 8016658:	22d2      	movs	r2, #210	; 0xd2
 801665a:	490e      	ldr	r1, [pc, #56]	; (8016694 <ip_reass_free_complete_datagram+0x144>)
 801665c:	4809      	ldr	r0, [pc, #36]	; (8016684 <ip_reass_free_complete_datagram+0x134>)
 801665e:	f001 f915 	bl	801788c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016662:	4b0b      	ldr	r3, [pc, #44]	; (8016690 <ip_reass_free_complete_datagram+0x140>)
 8016664:	881a      	ldrh	r2, [r3, #0]
 8016666:	8bfb      	ldrh	r3, [r7, #30]
 8016668:	1ad3      	subs	r3, r2, r3
 801666a:	b29a      	uxth	r2, r3
 801666c:	4b08      	ldr	r3, [pc, #32]	; (8016690 <ip_reass_free_complete_datagram+0x140>)
 801666e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016670:	8bfb      	ldrh	r3, [r7, #30]
}
 8016672:	4618      	mov	r0, r3
 8016674:	3720      	adds	r7, #32
 8016676:	46bd      	mov	sp, r7
 8016678:	bd80      	pop	{r7, pc}
 801667a:	bf00      	nop
 801667c:	0801be38 	.word	0x0801be38
 8016680:	0801be74 	.word	0x0801be74
 8016684:	0801be80 	.word	0x0801be80
 8016688:	0801bea8 	.word	0x0801bea8
 801668c:	0801bebc 	.word	0x0801bebc
 8016690:	2000d794 	.word	0x2000d794
 8016694:	0801bedc 	.word	0x0801bedc

08016698 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b08a      	sub	sp, #40	; 0x28
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
 80166a0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80166a2:	2300      	movs	r3, #0
 80166a4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80166a6:	2300      	movs	r3, #0
 80166a8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80166aa:	2300      	movs	r3, #0
 80166ac:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80166ae:	2300      	movs	r3, #0
 80166b0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80166b2:	2300      	movs	r3, #0
 80166b4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80166b6:	4b28      	ldr	r3, [pc, #160]	; (8016758 <ip_reass_remove_oldest_datagram+0xc0>)
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80166bc:	e030      	b.n	8016720 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80166be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166c0:	695a      	ldr	r2, [r3, #20]
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	68db      	ldr	r3, [r3, #12]
 80166c6:	429a      	cmp	r2, r3
 80166c8:	d10c      	bne.n	80166e4 <ip_reass_remove_oldest_datagram+0x4c>
 80166ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166cc:	699a      	ldr	r2, [r3, #24]
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	691b      	ldr	r3, [r3, #16]
 80166d2:	429a      	cmp	r2, r3
 80166d4:	d106      	bne.n	80166e4 <ip_reass_remove_oldest_datagram+0x4c>
 80166d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d8:	899a      	ldrh	r2, [r3, #12]
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	889b      	ldrh	r3, [r3, #4]
 80166de:	b29b      	uxth	r3, r3
 80166e0:	429a      	cmp	r2, r3
 80166e2:	d014      	beq.n	801670e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80166e4:	693b      	ldr	r3, [r7, #16]
 80166e6:	3301      	adds	r3, #1
 80166e8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80166ea:	6a3b      	ldr	r3, [r7, #32]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d104      	bne.n	80166fa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80166f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166f2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80166f4:	69fb      	ldr	r3, [r7, #28]
 80166f6:	61bb      	str	r3, [r7, #24]
 80166f8:	e009      	b.n	801670e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80166fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166fc:	7fda      	ldrb	r2, [r3, #31]
 80166fe:	6a3b      	ldr	r3, [r7, #32]
 8016700:	7fdb      	ldrb	r3, [r3, #31]
 8016702:	429a      	cmp	r2, r3
 8016704:	d803      	bhi.n	801670e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016708:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801670a:	69fb      	ldr	r3, [r7, #28]
 801670c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d001      	beq.n	801671a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016718:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016722:	2b00      	cmp	r3, #0
 8016724:	d1cb      	bne.n	80166be <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016726:	6a3b      	ldr	r3, [r7, #32]
 8016728:	2b00      	cmp	r3, #0
 801672a:	d008      	beq.n	801673e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801672c:	69b9      	ldr	r1, [r7, #24]
 801672e:	6a38      	ldr	r0, [r7, #32]
 8016730:	f7ff ff0e 	bl	8016550 <ip_reass_free_complete_datagram>
 8016734:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016736:	697a      	ldr	r2, [r7, #20]
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	4413      	add	r3, r2
 801673c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801673e:	697a      	ldr	r2, [r7, #20]
 8016740:	683b      	ldr	r3, [r7, #0]
 8016742:	429a      	cmp	r2, r3
 8016744:	da02      	bge.n	801674c <ip_reass_remove_oldest_datagram+0xb4>
 8016746:	693b      	ldr	r3, [r7, #16]
 8016748:	2b01      	cmp	r3, #1
 801674a:	dcac      	bgt.n	80166a6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801674c:	697b      	ldr	r3, [r7, #20]
}
 801674e:	4618      	mov	r0, r3
 8016750:	3728      	adds	r7, #40	; 0x28
 8016752:	46bd      	mov	sp, r7
 8016754:	bd80      	pop	{r7, pc}
 8016756:	bf00      	nop
 8016758:	2000d790 	.word	0x2000d790

0801675c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801675c:	b580      	push	{r7, lr}
 801675e:	b084      	sub	sp, #16
 8016760:	af00      	add	r7, sp, #0
 8016762:	6078      	str	r0, [r7, #4]
 8016764:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016766:	2004      	movs	r0, #4
 8016768:	f7f6 f84e 	bl	800c808 <memp_malloc>
 801676c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	2b00      	cmp	r3, #0
 8016772:	d110      	bne.n	8016796 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016774:	6839      	ldr	r1, [r7, #0]
 8016776:	6878      	ldr	r0, [r7, #4]
 8016778:	f7ff ff8e 	bl	8016698 <ip_reass_remove_oldest_datagram>
 801677c:	4602      	mov	r2, r0
 801677e:	683b      	ldr	r3, [r7, #0]
 8016780:	4293      	cmp	r3, r2
 8016782:	dc03      	bgt.n	801678c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016784:	2004      	movs	r0, #4
 8016786:	f7f6 f83f 	bl	800c808 <memp_malloc>
 801678a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	2b00      	cmp	r3, #0
 8016790:	d101      	bne.n	8016796 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016792:	2300      	movs	r3, #0
 8016794:	e016      	b.n	80167c4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016796:	2220      	movs	r2, #32
 8016798:	2100      	movs	r1, #0
 801679a:	68f8      	ldr	r0, [r7, #12]
 801679c:	f001 f915 	bl	80179ca <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	220f      	movs	r2, #15
 80167a4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80167a6:	4b09      	ldr	r3, [pc, #36]	; (80167cc <ip_reass_enqueue_new_datagram+0x70>)
 80167a8:	681a      	ldr	r2, [r3, #0]
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80167ae:	4a07      	ldr	r2, [pc, #28]	; (80167cc <ip_reass_enqueue_new_datagram+0x70>)
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	3308      	adds	r3, #8
 80167b8:	2214      	movs	r2, #20
 80167ba:	6879      	ldr	r1, [r7, #4]
 80167bc:	4618      	mov	r0, r3
 80167be:	f001 f9ea 	bl	8017b96 <memcpy>
  return ipr;
 80167c2:	68fb      	ldr	r3, [r7, #12]
}
 80167c4:	4618      	mov	r0, r3
 80167c6:	3710      	adds	r7, #16
 80167c8:	46bd      	mov	sp, r7
 80167ca:	bd80      	pop	{r7, pc}
 80167cc:	2000d790 	.word	0x2000d790

080167d0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b082      	sub	sp, #8
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	6078      	str	r0, [r7, #4]
 80167d8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80167da:	4b10      	ldr	r3, [pc, #64]	; (801681c <ip_reass_dequeue_datagram+0x4c>)
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	687a      	ldr	r2, [r7, #4]
 80167e0:	429a      	cmp	r2, r3
 80167e2:	d104      	bne.n	80167ee <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	4a0c      	ldr	r2, [pc, #48]	; (801681c <ip_reass_dequeue_datagram+0x4c>)
 80167ea:	6013      	str	r3, [r2, #0]
 80167ec:	e00d      	b.n	801680a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80167ee:	683b      	ldr	r3, [r7, #0]
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d106      	bne.n	8016802 <ip_reass_dequeue_datagram+0x32>
 80167f4:	4b0a      	ldr	r3, [pc, #40]	; (8016820 <ip_reass_dequeue_datagram+0x50>)
 80167f6:	f240 1245 	movw	r2, #325	; 0x145
 80167fa:	490a      	ldr	r1, [pc, #40]	; (8016824 <ip_reass_dequeue_datagram+0x54>)
 80167fc:	480a      	ldr	r0, [pc, #40]	; (8016828 <ip_reass_dequeue_datagram+0x58>)
 80167fe:	f001 f845 	bl	801788c <iprintf>
    prev->next = ipr->next;
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	681a      	ldr	r2, [r3, #0]
 8016806:	683b      	ldr	r3, [r7, #0]
 8016808:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801680a:	6879      	ldr	r1, [r7, #4]
 801680c:	2004      	movs	r0, #4
 801680e:	f7f6 f871 	bl	800c8f4 <memp_free>
}
 8016812:	bf00      	nop
 8016814:	3708      	adds	r7, #8
 8016816:	46bd      	mov	sp, r7
 8016818:	bd80      	pop	{r7, pc}
 801681a:	bf00      	nop
 801681c:	2000d790 	.word	0x2000d790
 8016820:	0801be38 	.word	0x0801be38
 8016824:	0801bf00 	.word	0x0801bf00
 8016828:	0801be80 	.word	0x0801be80

0801682c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b08c      	sub	sp, #48	; 0x30
 8016830:	af00      	add	r7, sp, #0
 8016832:	60f8      	str	r0, [r7, #12]
 8016834:	60b9      	str	r1, [r7, #8]
 8016836:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016838:	2300      	movs	r3, #0
 801683a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801683c:	2301      	movs	r3, #1
 801683e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016840:	68bb      	ldr	r3, [r7, #8]
 8016842:	685b      	ldr	r3, [r3, #4]
 8016844:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016846:	69fb      	ldr	r3, [r7, #28]
 8016848:	885b      	ldrh	r3, [r3, #2]
 801684a:	b29b      	uxth	r3, r3
 801684c:	4618      	mov	r0, r3
 801684e:	f7f5 fb03 	bl	800be58 <lwip_htons>
 8016852:	4603      	mov	r3, r0
 8016854:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016856:	69fb      	ldr	r3, [r7, #28]
 8016858:	781b      	ldrb	r3, [r3, #0]
 801685a:	f003 030f 	and.w	r3, r3, #15
 801685e:	b2db      	uxtb	r3, r3
 8016860:	009b      	lsls	r3, r3, #2
 8016862:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016864:	7e7b      	ldrb	r3, [r7, #25]
 8016866:	b29b      	uxth	r3, r3
 8016868:	8b7a      	ldrh	r2, [r7, #26]
 801686a:	429a      	cmp	r2, r3
 801686c:	d202      	bcs.n	8016874 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801686e:	f04f 33ff 	mov.w	r3, #4294967295
 8016872:	e135      	b.n	8016ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016874:	7e7b      	ldrb	r3, [r7, #25]
 8016876:	b29b      	uxth	r3, r3
 8016878:	8b7a      	ldrh	r2, [r7, #26]
 801687a:	1ad3      	subs	r3, r2, r3
 801687c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801687e:	69fb      	ldr	r3, [r7, #28]
 8016880:	88db      	ldrh	r3, [r3, #6]
 8016882:	b29b      	uxth	r3, r3
 8016884:	4618      	mov	r0, r3
 8016886:	f7f5 fae7 	bl	800be58 <lwip_htons>
 801688a:	4603      	mov	r3, r0
 801688c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016890:	b29b      	uxth	r3, r3
 8016892:	00db      	lsls	r3, r3, #3
 8016894:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016896:	68bb      	ldr	r3, [r7, #8]
 8016898:	685b      	ldr	r3, [r3, #4]
 801689a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801689e:	2200      	movs	r2, #0
 80168a0:	701a      	strb	r2, [r3, #0]
 80168a2:	2200      	movs	r2, #0
 80168a4:	705a      	strb	r2, [r3, #1]
 80168a6:	2200      	movs	r2, #0
 80168a8:	709a      	strb	r2, [r3, #2]
 80168aa:	2200      	movs	r2, #0
 80168ac:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80168ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168b0:	8afa      	ldrh	r2, [r7, #22]
 80168b2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80168b4:	8afa      	ldrh	r2, [r7, #22]
 80168b6:	8b7b      	ldrh	r3, [r7, #26]
 80168b8:	4413      	add	r3, r2
 80168ba:	b29a      	uxth	r2, r3
 80168bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168be:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80168c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168c2:	88db      	ldrh	r3, [r3, #6]
 80168c4:	b29b      	uxth	r3, r3
 80168c6:	8afa      	ldrh	r2, [r7, #22]
 80168c8:	429a      	cmp	r2, r3
 80168ca:	d902      	bls.n	80168d2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80168cc:	f04f 33ff 	mov.w	r3, #4294967295
 80168d0:	e106      	b.n	8016ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	685b      	ldr	r3, [r3, #4]
 80168d6:	627b      	str	r3, [r7, #36]	; 0x24
 80168d8:	e068      	b.n	80169ac <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80168da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168dc:	685b      	ldr	r3, [r3, #4]
 80168de:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80168e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168e2:	889b      	ldrh	r3, [r3, #4]
 80168e4:	b29a      	uxth	r2, r3
 80168e6:	693b      	ldr	r3, [r7, #16]
 80168e8:	889b      	ldrh	r3, [r3, #4]
 80168ea:	b29b      	uxth	r3, r3
 80168ec:	429a      	cmp	r2, r3
 80168ee:	d235      	bcs.n	801695c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80168f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80168f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80168f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d020      	beq.n	801693e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80168fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168fe:	889b      	ldrh	r3, [r3, #4]
 8016900:	b29a      	uxth	r2, r3
 8016902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016904:	88db      	ldrh	r3, [r3, #6]
 8016906:	b29b      	uxth	r3, r3
 8016908:	429a      	cmp	r2, r3
 801690a:	d307      	bcc.n	801691c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801690c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801690e:	88db      	ldrh	r3, [r3, #6]
 8016910:	b29a      	uxth	r2, r3
 8016912:	693b      	ldr	r3, [r7, #16]
 8016914:	889b      	ldrh	r3, [r3, #4]
 8016916:	b29b      	uxth	r3, r3
 8016918:	429a      	cmp	r2, r3
 801691a:	d902      	bls.n	8016922 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801691c:	f04f 33ff 	mov.w	r3, #4294967295
 8016920:	e0de      	b.n	8016ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016924:	68ba      	ldr	r2, [r7, #8]
 8016926:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801692a:	88db      	ldrh	r3, [r3, #6]
 801692c:	b29a      	uxth	r2, r3
 801692e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016930:	889b      	ldrh	r3, [r3, #4]
 8016932:	b29b      	uxth	r3, r3
 8016934:	429a      	cmp	r2, r3
 8016936:	d03d      	beq.n	80169b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016938:	2300      	movs	r3, #0
 801693a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801693c:	e03a      	b.n	80169b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801693e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016940:	88db      	ldrh	r3, [r3, #6]
 8016942:	b29a      	uxth	r2, r3
 8016944:	693b      	ldr	r3, [r7, #16]
 8016946:	889b      	ldrh	r3, [r3, #4]
 8016948:	b29b      	uxth	r3, r3
 801694a:	429a      	cmp	r2, r3
 801694c:	d902      	bls.n	8016954 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801694e:	f04f 33ff 	mov.w	r3, #4294967295
 8016952:	e0c5      	b.n	8016ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	68ba      	ldr	r2, [r7, #8]
 8016958:	605a      	str	r2, [r3, #4]
      break;
 801695a:	e02b      	b.n	80169b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801695e:	889b      	ldrh	r3, [r3, #4]
 8016960:	b29a      	uxth	r2, r3
 8016962:	693b      	ldr	r3, [r7, #16]
 8016964:	889b      	ldrh	r3, [r3, #4]
 8016966:	b29b      	uxth	r3, r3
 8016968:	429a      	cmp	r2, r3
 801696a:	d102      	bne.n	8016972 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801696c:	f04f 33ff 	mov.w	r3, #4294967295
 8016970:	e0b6      	b.n	8016ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016974:	889b      	ldrh	r3, [r3, #4]
 8016976:	b29a      	uxth	r2, r3
 8016978:	693b      	ldr	r3, [r7, #16]
 801697a:	88db      	ldrh	r3, [r3, #6]
 801697c:	b29b      	uxth	r3, r3
 801697e:	429a      	cmp	r2, r3
 8016980:	d202      	bcs.n	8016988 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016982:	f04f 33ff 	mov.w	r3, #4294967295
 8016986:	e0ab      	b.n	8016ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801698a:	2b00      	cmp	r3, #0
 801698c:	d009      	beq.n	80169a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016990:	88db      	ldrh	r3, [r3, #6]
 8016992:	b29a      	uxth	r2, r3
 8016994:	693b      	ldr	r3, [r7, #16]
 8016996:	889b      	ldrh	r3, [r3, #4]
 8016998:	b29b      	uxth	r3, r3
 801699a:	429a      	cmp	r2, r3
 801699c:	d001      	beq.n	80169a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801699e:	2300      	movs	r3, #0
 80169a0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80169a2:	693b      	ldr	r3, [r7, #16]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80169a8:	693b      	ldr	r3, [r7, #16]
 80169aa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80169ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d193      	bne.n	80168da <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80169b2:	e000      	b.n	80169b6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80169b4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80169b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d12d      	bne.n	8016a18 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80169bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d01c      	beq.n	80169fc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80169c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169c4:	88db      	ldrh	r3, [r3, #6]
 80169c6:	b29a      	uxth	r2, r3
 80169c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ca:	889b      	ldrh	r3, [r3, #4]
 80169cc:	b29b      	uxth	r3, r3
 80169ce:	429a      	cmp	r2, r3
 80169d0:	d906      	bls.n	80169e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80169d2:	4b45      	ldr	r3, [pc, #276]	; (8016ae8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80169d4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80169d8:	4944      	ldr	r1, [pc, #272]	; (8016aec <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80169da:	4845      	ldr	r0, [pc, #276]	; (8016af0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80169dc:	f000 ff56 	bl	801788c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80169e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169e2:	68ba      	ldr	r2, [r7, #8]
 80169e4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80169e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169e8:	88db      	ldrh	r3, [r3, #6]
 80169ea:	b29a      	uxth	r2, r3
 80169ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ee:	889b      	ldrh	r3, [r3, #4]
 80169f0:	b29b      	uxth	r3, r3
 80169f2:	429a      	cmp	r2, r3
 80169f4:	d010      	beq.n	8016a18 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80169f6:	2300      	movs	r3, #0
 80169f8:	623b      	str	r3, [r7, #32]
 80169fa:	e00d      	b.n	8016a18 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	685b      	ldr	r3, [r3, #4]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d006      	beq.n	8016a12 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016a04:	4b38      	ldr	r3, [pc, #224]	; (8016ae8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016a06:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016a0a:	493a      	ldr	r1, [pc, #232]	; (8016af4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016a0c:	4838      	ldr	r0, [pc, #224]	; (8016af0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016a0e:	f000 ff3d 	bl	801788c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	68ba      	ldr	r2, [r7, #8]
 8016a16:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d105      	bne.n	8016a2a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	7f9b      	ldrb	r3, [r3, #30]
 8016a22:	f003 0301 	and.w	r3, r3, #1
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d059      	beq.n	8016ade <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016a2a:	6a3b      	ldr	r3, [r7, #32]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d04f      	beq.n	8016ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	685b      	ldr	r3, [r3, #4]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d006      	beq.n	8016a46 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	685b      	ldr	r3, [r3, #4]
 8016a3c:	685b      	ldr	r3, [r3, #4]
 8016a3e:	889b      	ldrh	r3, [r3, #4]
 8016a40:	b29b      	uxth	r3, r3
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d002      	beq.n	8016a4c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016a46:	2300      	movs	r3, #0
 8016a48:	623b      	str	r3, [r7, #32]
 8016a4a:	e041      	b.n	8016ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a4e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016a56:	e012      	b.n	8016a7e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a5a:	685b      	ldr	r3, [r3, #4]
 8016a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a60:	88db      	ldrh	r3, [r3, #6]
 8016a62:	b29a      	uxth	r2, r3
 8016a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a66:	889b      	ldrh	r3, [r3, #4]
 8016a68:	b29b      	uxth	r3, r3
 8016a6a:	429a      	cmp	r2, r3
 8016a6c:	d002      	beq.n	8016a74 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016a6e:	2300      	movs	r3, #0
 8016a70:	623b      	str	r3, [r7, #32]
            break;
 8016a72:	e007      	b.n	8016a84 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a76:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d1e9      	bne.n	8016a58 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016a84:	6a3b      	ldr	r3, [r7, #32]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d022      	beq.n	8016ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	685b      	ldr	r3, [r3, #4]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d106      	bne.n	8016aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016a92:	4b15      	ldr	r3, [pc, #84]	; (8016ae8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016a94:	f240 12df 	movw	r2, #479	; 0x1df
 8016a98:	4917      	ldr	r1, [pc, #92]	; (8016af8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016a9a:	4815      	ldr	r0, [pc, #84]	; (8016af0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016a9c:	f000 fef6 	bl	801788c <iprintf>
          LWIP_ASSERT("sanity check",
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	685b      	ldr	r3, [r3, #4]
 8016aa4:	685b      	ldr	r3, [r3, #4]
 8016aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016aa8:	429a      	cmp	r2, r3
 8016aaa:	d106      	bne.n	8016aba <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016aac:	4b0e      	ldr	r3, [pc, #56]	; (8016ae8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016aae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016ab2:	4911      	ldr	r1, [pc, #68]	; (8016af8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016ab4:	480e      	ldr	r0, [pc, #56]	; (8016af0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016ab6:	f000 fee9 	bl	801788c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d006      	beq.n	8016ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016ac2:	4b09      	ldr	r3, [pc, #36]	; (8016ae8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016ac4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016ac8:	490c      	ldr	r1, [pc, #48]	; (8016afc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016aca:	4809      	ldr	r0, [pc, #36]	; (8016af0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016acc:	f000 fede 	bl	801788c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016ad0:	6a3b      	ldr	r3, [r7, #32]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	bf14      	ite	ne
 8016ad6:	2301      	movne	r3, #1
 8016ad8:	2300      	moveq	r3, #0
 8016ada:	b2db      	uxtb	r3, r3
 8016adc:	e000      	b.n	8016ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016ade:	2300      	movs	r3, #0
}
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	3730      	adds	r7, #48	; 0x30
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	bd80      	pop	{r7, pc}
 8016ae8:	0801be38 	.word	0x0801be38
 8016aec:	0801bf1c 	.word	0x0801bf1c
 8016af0:	0801be80 	.word	0x0801be80
 8016af4:	0801bf3c 	.word	0x0801bf3c
 8016af8:	0801bf74 	.word	0x0801bf74
 8016afc:	0801bf84 	.word	0x0801bf84

08016b00 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016b00:	b580      	push	{r7, lr}
 8016b02:	b08e      	sub	sp, #56	; 0x38
 8016b04:	af00      	add	r7, sp, #0
 8016b06:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	685b      	ldr	r3, [r3, #4]
 8016b0c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b10:	781b      	ldrb	r3, [r3, #0]
 8016b12:	f003 030f 	and.w	r3, r3, #15
 8016b16:	b2db      	uxtb	r3, r3
 8016b18:	009b      	lsls	r3, r3, #2
 8016b1a:	b2db      	uxtb	r3, r3
 8016b1c:	2b14      	cmp	r3, #20
 8016b1e:	f040 8171 	bne.w	8016e04 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b24:	88db      	ldrh	r3, [r3, #6]
 8016b26:	b29b      	uxth	r3, r3
 8016b28:	4618      	mov	r0, r3
 8016b2a:	f7f5 f995 	bl	800be58 <lwip_htons>
 8016b2e:	4603      	mov	r3, r0
 8016b30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016b34:	b29b      	uxth	r3, r3
 8016b36:	00db      	lsls	r3, r3, #3
 8016b38:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b3c:	885b      	ldrh	r3, [r3, #2]
 8016b3e:	b29b      	uxth	r3, r3
 8016b40:	4618      	mov	r0, r3
 8016b42:	f7f5 f989 	bl	800be58 <lwip_htons>
 8016b46:	4603      	mov	r3, r0
 8016b48:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b4c:	781b      	ldrb	r3, [r3, #0]
 8016b4e:	f003 030f 	and.w	r3, r3, #15
 8016b52:	b2db      	uxtb	r3, r3
 8016b54:	009b      	lsls	r3, r3, #2
 8016b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016b5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016b5e:	b29b      	uxth	r3, r3
 8016b60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016b62:	429a      	cmp	r2, r3
 8016b64:	f0c0 8150 	bcc.w	8016e08 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016b68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016b6c:	b29b      	uxth	r3, r3
 8016b6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016b70:	1ad3      	subs	r3, r2, r3
 8016b72:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016b74:	6878      	ldr	r0, [r7, #4]
 8016b76:	f7f6 fdef 	bl	800d758 <pbuf_clen>
 8016b7a:	4603      	mov	r3, r0
 8016b7c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016b7e:	4b8c      	ldr	r3, [pc, #560]	; (8016db0 <ip4_reass+0x2b0>)
 8016b80:	881b      	ldrh	r3, [r3, #0]
 8016b82:	461a      	mov	r2, r3
 8016b84:	8c3b      	ldrh	r3, [r7, #32]
 8016b86:	4413      	add	r3, r2
 8016b88:	2b0a      	cmp	r3, #10
 8016b8a:	dd10      	ble.n	8016bae <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016b8c:	8c3b      	ldrh	r3, [r7, #32]
 8016b8e:	4619      	mov	r1, r3
 8016b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016b92:	f7ff fd81 	bl	8016698 <ip_reass_remove_oldest_datagram>
 8016b96:	4603      	mov	r3, r0
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	f000 8137 	beq.w	8016e0c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016b9e:	4b84      	ldr	r3, [pc, #528]	; (8016db0 <ip4_reass+0x2b0>)
 8016ba0:	881b      	ldrh	r3, [r3, #0]
 8016ba2:	461a      	mov	r2, r3
 8016ba4:	8c3b      	ldrh	r3, [r7, #32]
 8016ba6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016ba8:	2b0a      	cmp	r3, #10
 8016baa:	f300 812f 	bgt.w	8016e0c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016bae:	4b81      	ldr	r3, [pc, #516]	; (8016db4 <ip4_reass+0x2b4>)
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	633b      	str	r3, [r7, #48]	; 0x30
 8016bb4:	e015      	b.n	8016be2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bb8:	695a      	ldr	r2, [r3, #20]
 8016bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bbc:	68db      	ldr	r3, [r3, #12]
 8016bbe:	429a      	cmp	r2, r3
 8016bc0:	d10c      	bne.n	8016bdc <ip4_reass+0xdc>
 8016bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bc4:	699a      	ldr	r2, [r3, #24]
 8016bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bc8:	691b      	ldr	r3, [r3, #16]
 8016bca:	429a      	cmp	r2, r3
 8016bcc:	d106      	bne.n	8016bdc <ip4_reass+0xdc>
 8016bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bd0:	899a      	ldrh	r2, [r3, #12]
 8016bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bd4:	889b      	ldrh	r3, [r3, #4]
 8016bd6:	b29b      	uxth	r3, r3
 8016bd8:	429a      	cmp	r2, r3
 8016bda:	d006      	beq.n	8016bea <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	633b      	str	r3, [r7, #48]	; 0x30
 8016be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d1e6      	bne.n	8016bb6 <ip4_reass+0xb6>
 8016be8:	e000      	b.n	8016bec <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016bea:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d109      	bne.n	8016c06 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016bf2:	8c3b      	ldrh	r3, [r7, #32]
 8016bf4:	4619      	mov	r1, r3
 8016bf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016bf8:	f7ff fdb0 	bl	801675c <ip_reass_enqueue_new_datagram>
 8016bfc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d11c      	bne.n	8016c3e <ip4_reass+0x13e>
      goto nullreturn;
 8016c04:	e105      	b.n	8016e12 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c08:	88db      	ldrh	r3, [r3, #6]
 8016c0a:	b29b      	uxth	r3, r3
 8016c0c:	4618      	mov	r0, r3
 8016c0e:	f7f5 f923 	bl	800be58 <lwip_htons>
 8016c12:	4603      	mov	r3, r0
 8016c14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d110      	bne.n	8016c3e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c1e:	89db      	ldrh	r3, [r3, #14]
 8016c20:	4618      	mov	r0, r3
 8016c22:	f7f5 f919 	bl	800be58 <lwip_htons>
 8016c26:	4603      	mov	r3, r0
 8016c28:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d006      	beq.n	8016c3e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c32:	3308      	adds	r3, #8
 8016c34:	2214      	movs	r2, #20
 8016c36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016c38:	4618      	mov	r0, r3
 8016c3a:	f000 ffac 	bl	8017b96 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c40:	88db      	ldrh	r3, [r3, #6]
 8016c42:	b29b      	uxth	r3, r3
 8016c44:	f003 0320 	and.w	r3, r3, #32
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	bf0c      	ite	eq
 8016c4c:	2301      	moveq	r3, #1
 8016c4e:	2300      	movne	r3, #0
 8016c50:	b2db      	uxtb	r3, r3
 8016c52:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016c54:	69fb      	ldr	r3, [r7, #28]
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d00e      	beq.n	8016c78 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016c5a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016c5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016c5e:	4413      	add	r3, r2
 8016c60:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016c62:	8b7a      	ldrh	r2, [r7, #26]
 8016c64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016c66:	429a      	cmp	r2, r3
 8016c68:	f0c0 80a0 	bcc.w	8016dac <ip4_reass+0x2ac>
 8016c6c:	8b7b      	ldrh	r3, [r7, #26]
 8016c6e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016c72:	4293      	cmp	r3, r2
 8016c74:	f200 809a 	bhi.w	8016dac <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016c78:	69fa      	ldr	r2, [r7, #28]
 8016c7a:	6879      	ldr	r1, [r7, #4]
 8016c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016c7e:	f7ff fdd5 	bl	801682c <ip_reass_chain_frag_into_datagram_and_validate>
 8016c82:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016c84:	697b      	ldr	r3, [r7, #20]
 8016c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c8a:	f000 809b 	beq.w	8016dc4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016c8e:	4b48      	ldr	r3, [pc, #288]	; (8016db0 <ip4_reass+0x2b0>)
 8016c90:	881a      	ldrh	r2, [r3, #0]
 8016c92:	8c3b      	ldrh	r3, [r7, #32]
 8016c94:	4413      	add	r3, r2
 8016c96:	b29a      	uxth	r2, r3
 8016c98:	4b45      	ldr	r3, [pc, #276]	; (8016db0 <ip4_reass+0x2b0>)
 8016c9a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016c9c:	69fb      	ldr	r3, [r7, #28]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d00d      	beq.n	8016cbe <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016ca2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016ca4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016ca6:	4413      	add	r3, r2
 8016ca8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cac:	8a7a      	ldrh	r2, [r7, #18]
 8016cae:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cb2:	7f9b      	ldrb	r3, [r3, #30]
 8016cb4:	f043 0301 	orr.w	r3, r3, #1
 8016cb8:	b2da      	uxtb	r2, r3
 8016cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cbc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016cbe:	697b      	ldr	r3, [r7, #20]
 8016cc0:	2b01      	cmp	r3, #1
 8016cc2:	d171      	bne.n	8016da8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cc6:	8b9b      	ldrh	r3, [r3, #28]
 8016cc8:	3314      	adds	r3, #20
 8016cca:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cce:	685b      	ldr	r3, [r3, #4]
 8016cd0:	685b      	ldr	r3, [r3, #4]
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cd8:	685b      	ldr	r3, [r3, #4]
 8016cda:	685b      	ldr	r3, [r3, #4]
 8016cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ce0:	3308      	adds	r3, #8
 8016ce2:	2214      	movs	r2, #20
 8016ce4:	4619      	mov	r1, r3
 8016ce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ce8:	f000 ff55 	bl	8017b96 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016cec:	8a3b      	ldrh	r3, [r7, #16]
 8016cee:	4618      	mov	r0, r3
 8016cf0:	f7f5 f8b2 	bl	800be58 <lwip_htons>
 8016cf4:	4603      	mov	r3, r0
 8016cf6:	461a      	mov	r2, r3
 8016cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cfa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cfe:	2200      	movs	r2, #0
 8016d00:	719a      	strb	r2, [r3, #6]
 8016d02:	2200      	movs	r2, #0
 8016d04:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d08:	2200      	movs	r2, #0
 8016d0a:	729a      	strb	r2, [r3, #10]
 8016d0c:	2200      	movs	r2, #0
 8016d0e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d12:	685b      	ldr	r3, [r3, #4]
 8016d14:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016d16:	e00d      	b.n	8016d34 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d1a:	685b      	ldr	r3, [r3, #4]
 8016d1c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016d1e:	2114      	movs	r1, #20
 8016d20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016d22:	f7f6 fc05 	bl	800d530 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016d26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016d28:	6878      	ldr	r0, [r7, #4]
 8016d2a:	f7f6 fd55 	bl	800d7d8 <pbuf_cat>
      r = iprh->next_pbuf;
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d1ee      	bne.n	8016d18 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016d3a:	4b1e      	ldr	r3, [pc, #120]	; (8016db4 <ip4_reass+0x2b4>)
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d40:	429a      	cmp	r2, r3
 8016d42:	d102      	bne.n	8016d4a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016d44:	2300      	movs	r3, #0
 8016d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016d48:	e010      	b.n	8016d6c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016d4a:	4b1a      	ldr	r3, [pc, #104]	; (8016db4 <ip4_reass+0x2b4>)
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016d50:	e007      	b.n	8016d62 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d58:	429a      	cmp	r2, r3
 8016d5a:	d006      	beq.n	8016d6a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d1f4      	bne.n	8016d52 <ip4_reass+0x252>
 8016d68:	e000      	b.n	8016d6c <ip4_reass+0x26c>
          break;
 8016d6a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016d6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016d6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d70:	f7ff fd2e 	bl	80167d0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016d74:	6878      	ldr	r0, [r7, #4]
 8016d76:	f7f6 fcef 	bl	800d758 <pbuf_clen>
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016d7e:	4b0c      	ldr	r3, [pc, #48]	; (8016db0 <ip4_reass+0x2b0>)
 8016d80:	881b      	ldrh	r3, [r3, #0]
 8016d82:	8c3a      	ldrh	r2, [r7, #32]
 8016d84:	429a      	cmp	r2, r3
 8016d86:	d906      	bls.n	8016d96 <ip4_reass+0x296>
 8016d88:	4b0b      	ldr	r3, [pc, #44]	; (8016db8 <ip4_reass+0x2b8>)
 8016d8a:	f240 229b 	movw	r2, #667	; 0x29b
 8016d8e:	490b      	ldr	r1, [pc, #44]	; (8016dbc <ip4_reass+0x2bc>)
 8016d90:	480b      	ldr	r0, [pc, #44]	; (8016dc0 <ip4_reass+0x2c0>)
 8016d92:	f000 fd7b 	bl	801788c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016d96:	4b06      	ldr	r3, [pc, #24]	; (8016db0 <ip4_reass+0x2b0>)
 8016d98:	881a      	ldrh	r2, [r3, #0]
 8016d9a:	8c3b      	ldrh	r3, [r7, #32]
 8016d9c:	1ad3      	subs	r3, r2, r3
 8016d9e:	b29a      	uxth	r2, r3
 8016da0:	4b03      	ldr	r3, [pc, #12]	; (8016db0 <ip4_reass+0x2b0>)
 8016da2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	e038      	b.n	8016e1a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016da8:	2300      	movs	r3, #0
 8016daa:	e036      	b.n	8016e1a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016dac:	bf00      	nop
 8016dae:	e00a      	b.n	8016dc6 <ip4_reass+0x2c6>
 8016db0:	2000d794 	.word	0x2000d794
 8016db4:	2000d790 	.word	0x2000d790
 8016db8:	0801be38 	.word	0x0801be38
 8016dbc:	0801bfa8 	.word	0x0801bfa8
 8016dc0:	0801be80 	.word	0x0801be80
    goto nullreturn_ipr;
 8016dc4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d106      	bne.n	8016dda <ip4_reass+0x2da>
 8016dcc:	4b15      	ldr	r3, [pc, #84]	; (8016e24 <ip4_reass+0x324>)
 8016dce:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016dd2:	4915      	ldr	r1, [pc, #84]	; (8016e28 <ip4_reass+0x328>)
 8016dd4:	4815      	ldr	r0, [pc, #84]	; (8016e2c <ip4_reass+0x32c>)
 8016dd6:	f000 fd59 	bl	801788c <iprintf>
  if (ipr->p == NULL) {
 8016dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ddc:	685b      	ldr	r3, [r3, #4]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d116      	bne.n	8016e10 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016de2:	4b13      	ldr	r3, [pc, #76]	; (8016e30 <ip4_reass+0x330>)
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016de8:	429a      	cmp	r2, r3
 8016dea:	d006      	beq.n	8016dfa <ip4_reass+0x2fa>
 8016dec:	4b0d      	ldr	r3, [pc, #52]	; (8016e24 <ip4_reass+0x324>)
 8016dee:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016df2:	4910      	ldr	r1, [pc, #64]	; (8016e34 <ip4_reass+0x334>)
 8016df4:	480d      	ldr	r0, [pc, #52]	; (8016e2c <ip4_reass+0x32c>)
 8016df6:	f000 fd49 	bl	801788c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016dfa:	2100      	movs	r1, #0
 8016dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016dfe:	f7ff fce7 	bl	80167d0 <ip_reass_dequeue_datagram>
 8016e02:	e006      	b.n	8016e12 <ip4_reass+0x312>
    goto nullreturn;
 8016e04:	bf00      	nop
 8016e06:	e004      	b.n	8016e12 <ip4_reass+0x312>
    goto nullreturn;
 8016e08:	bf00      	nop
 8016e0a:	e002      	b.n	8016e12 <ip4_reass+0x312>
      goto nullreturn;
 8016e0c:	bf00      	nop
 8016e0e:	e000      	b.n	8016e12 <ip4_reass+0x312>
  }

nullreturn:
 8016e10:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016e12:	6878      	ldr	r0, [r7, #4]
 8016e14:	f7f6 fc12 	bl	800d63c <pbuf_free>
  return NULL;
 8016e18:	2300      	movs	r3, #0
}
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	3738      	adds	r7, #56	; 0x38
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	bd80      	pop	{r7, pc}
 8016e22:	bf00      	nop
 8016e24:	0801be38 	.word	0x0801be38
 8016e28:	0801bfc4 	.word	0x0801bfc4
 8016e2c:	0801be80 	.word	0x0801be80
 8016e30:	2000d790 	.word	0x2000d790
 8016e34:	0801bfd0 	.word	0x0801bfd0

08016e38 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016e38:	b580      	push	{r7, lr}
 8016e3a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016e3c:	2005      	movs	r0, #5
 8016e3e:	f7f5 fce3 	bl	800c808 <memp_malloc>
 8016e42:	4603      	mov	r3, r0
}
 8016e44:	4618      	mov	r0, r3
 8016e46:	bd80      	pop	{r7, pc}

08016e48 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016e48:	b580      	push	{r7, lr}
 8016e4a:	b082      	sub	sp, #8
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d106      	bne.n	8016e64 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016e56:	4b07      	ldr	r3, [pc, #28]	; (8016e74 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016e58:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016e5c:	4906      	ldr	r1, [pc, #24]	; (8016e78 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016e5e:	4807      	ldr	r0, [pc, #28]	; (8016e7c <ip_frag_free_pbuf_custom_ref+0x34>)
 8016e60:	f000 fd14 	bl	801788c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016e64:	6879      	ldr	r1, [r7, #4]
 8016e66:	2005      	movs	r0, #5
 8016e68:	f7f5 fd44 	bl	800c8f4 <memp_free>
}
 8016e6c:	bf00      	nop
 8016e6e:	3708      	adds	r7, #8
 8016e70:	46bd      	mov	sp, r7
 8016e72:	bd80      	pop	{r7, pc}
 8016e74:	0801be38 	.word	0x0801be38
 8016e78:	0801bff0 	.word	0x0801bff0
 8016e7c:	0801be80 	.word	0x0801be80

08016e80 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016e80:	b580      	push	{r7, lr}
 8016e82:	b084      	sub	sp, #16
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d106      	bne.n	8016ea0 <ipfrag_free_pbuf_custom+0x20>
 8016e92:	4b11      	ldr	r3, [pc, #68]	; (8016ed8 <ipfrag_free_pbuf_custom+0x58>)
 8016e94:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016e98:	4910      	ldr	r1, [pc, #64]	; (8016edc <ipfrag_free_pbuf_custom+0x5c>)
 8016e9a:	4811      	ldr	r0, [pc, #68]	; (8016ee0 <ipfrag_free_pbuf_custom+0x60>)
 8016e9c:	f000 fcf6 	bl	801788c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016ea0:	68fa      	ldr	r2, [r7, #12]
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	429a      	cmp	r2, r3
 8016ea6:	d006      	beq.n	8016eb6 <ipfrag_free_pbuf_custom+0x36>
 8016ea8:	4b0b      	ldr	r3, [pc, #44]	; (8016ed8 <ipfrag_free_pbuf_custom+0x58>)
 8016eaa:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016eae:	490d      	ldr	r1, [pc, #52]	; (8016ee4 <ipfrag_free_pbuf_custom+0x64>)
 8016eb0:	480b      	ldr	r0, [pc, #44]	; (8016ee0 <ipfrag_free_pbuf_custom+0x60>)
 8016eb2:	f000 fceb 	bl	801788c <iprintf>
  if (pcr->original != NULL) {
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	695b      	ldr	r3, [r3, #20]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d004      	beq.n	8016ec8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	695b      	ldr	r3, [r3, #20]
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f7f6 fbba 	bl	800d63c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016ec8:	68f8      	ldr	r0, [r7, #12]
 8016eca:	f7ff ffbd 	bl	8016e48 <ip_frag_free_pbuf_custom_ref>
}
 8016ece:	bf00      	nop
 8016ed0:	3710      	adds	r7, #16
 8016ed2:	46bd      	mov	sp, r7
 8016ed4:	bd80      	pop	{r7, pc}
 8016ed6:	bf00      	nop
 8016ed8:	0801be38 	.word	0x0801be38
 8016edc:	0801bffc 	.word	0x0801bffc
 8016ee0:	0801be80 	.word	0x0801be80
 8016ee4:	0801c008 	.word	0x0801c008

08016ee8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016ee8:	b580      	push	{r7, lr}
 8016eea:	b094      	sub	sp, #80	; 0x50
 8016eec:	af02      	add	r7, sp, #8
 8016eee:	60f8      	str	r0, [r7, #12]
 8016ef0:	60b9      	str	r1, [r7, #8]
 8016ef2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016ef4:	2300      	movs	r3, #0
 8016ef6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016efa:	68bb      	ldr	r3, [r7, #8]
 8016efc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016efe:	3b14      	subs	r3, #20
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	da00      	bge.n	8016f06 <ip4_frag+0x1e>
 8016f04:	3307      	adds	r3, #7
 8016f06:	10db      	asrs	r3, r3, #3
 8016f08:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016f0a:	2314      	movs	r3, #20
 8016f0c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	685b      	ldr	r3, [r3, #4]
 8016f12:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f16:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f1a:	781b      	ldrb	r3, [r3, #0]
 8016f1c:	f003 030f 	and.w	r3, r3, #15
 8016f20:	b2db      	uxtb	r3, r3
 8016f22:	009b      	lsls	r3, r3, #2
 8016f24:	b2db      	uxtb	r3, r3
 8016f26:	2b14      	cmp	r3, #20
 8016f28:	d002      	beq.n	8016f30 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016f2a:	f06f 0305 	mvn.w	r3, #5
 8016f2e:	e110      	b.n	8017152 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	895b      	ldrh	r3, [r3, #10]
 8016f34:	2b13      	cmp	r3, #19
 8016f36:	d809      	bhi.n	8016f4c <ip4_frag+0x64>
 8016f38:	4b88      	ldr	r3, [pc, #544]	; (801715c <ip4_frag+0x274>)
 8016f3a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016f3e:	4988      	ldr	r1, [pc, #544]	; (8017160 <ip4_frag+0x278>)
 8016f40:	4888      	ldr	r0, [pc, #544]	; (8017164 <ip4_frag+0x27c>)
 8016f42:	f000 fca3 	bl	801788c <iprintf>
 8016f46:	f06f 0305 	mvn.w	r3, #5
 8016f4a:	e102      	b.n	8017152 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f4e:	88db      	ldrh	r3, [r3, #6]
 8016f50:	b29b      	uxth	r3, r3
 8016f52:	4618      	mov	r0, r3
 8016f54:	f7f4 ff80 	bl	800be58 <lwip_htons>
 8016f58:	4603      	mov	r3, r0
 8016f5a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016f5c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016f5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016f62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016f66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016f68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016f6c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	891b      	ldrh	r3, [r3, #8]
 8016f72:	3b14      	subs	r3, #20
 8016f74:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016f78:	e0e1      	b.n	801713e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016f7a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016f7c:	00db      	lsls	r3, r3, #3
 8016f7e:	b29b      	uxth	r3, r3
 8016f80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016f84:	4293      	cmp	r3, r2
 8016f86:	bf28      	it	cs
 8016f88:	4613      	movcs	r3, r2
 8016f8a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016f8c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016f90:	2114      	movs	r1, #20
 8016f92:	200e      	movs	r0, #14
 8016f94:	f7f6 f86e 	bl	800d074 <pbuf_alloc>
 8016f98:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	f000 80d5 	beq.w	801714c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fa4:	895b      	ldrh	r3, [r3, #10]
 8016fa6:	2b13      	cmp	r3, #19
 8016fa8:	d806      	bhi.n	8016fb8 <ip4_frag+0xd0>
 8016faa:	4b6c      	ldr	r3, [pc, #432]	; (801715c <ip4_frag+0x274>)
 8016fac:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016fb0:	496d      	ldr	r1, [pc, #436]	; (8017168 <ip4_frag+0x280>)
 8016fb2:	486c      	ldr	r0, [pc, #432]	; (8017164 <ip4_frag+0x27c>)
 8016fb4:	f000 fc6a 	bl	801788c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fba:	685b      	ldr	r3, [r3, #4]
 8016fbc:	2214      	movs	r2, #20
 8016fbe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	f000 fde8 	bl	8017b96 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fc8:	685b      	ldr	r3, [r3, #4]
 8016fca:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016fcc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016fce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016fd2:	e064      	b.n	801709e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	895a      	ldrh	r2, [r3, #10]
 8016fd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016fda:	1ad3      	subs	r3, r2, r3
 8016fdc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	895b      	ldrh	r3, [r3, #10]
 8016fe2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016fe4:	429a      	cmp	r2, r3
 8016fe6:	d906      	bls.n	8016ff6 <ip4_frag+0x10e>
 8016fe8:	4b5c      	ldr	r3, [pc, #368]	; (801715c <ip4_frag+0x274>)
 8016fea:	f240 322d 	movw	r2, #813	; 0x32d
 8016fee:	495f      	ldr	r1, [pc, #380]	; (801716c <ip4_frag+0x284>)
 8016ff0:	485c      	ldr	r0, [pc, #368]	; (8017164 <ip4_frag+0x27c>)
 8016ff2:	f000 fc4b 	bl	801788c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016ff6:	8bfa      	ldrh	r2, [r7, #30]
 8016ff8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016ffc:	4293      	cmp	r3, r2
 8016ffe:	bf28      	it	cs
 8017000:	4613      	movcs	r3, r2
 8017002:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017006:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801700a:	2b00      	cmp	r3, #0
 801700c:	d105      	bne.n	801701a <ip4_frag+0x132>
        poff = 0;
 801700e:	2300      	movs	r3, #0
 8017010:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	60fb      	str	r3, [r7, #12]
        continue;
 8017018:	e041      	b.n	801709e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801701a:	f7ff ff0d 	bl	8016e38 <ip_frag_alloc_pbuf_custom_ref>
 801701e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017020:	69bb      	ldr	r3, [r7, #24]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d103      	bne.n	801702e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017026:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017028:	f7f6 fb08 	bl	800d63c <pbuf_free>
        goto memerr;
 801702c:	e08f      	b.n	801714e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801702e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017034:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017036:	4413      	add	r3, r2
 8017038:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801703c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017040:	9201      	str	r2, [sp, #4]
 8017042:	9300      	str	r3, [sp, #0]
 8017044:	4603      	mov	r3, r0
 8017046:	2241      	movs	r2, #65	; 0x41
 8017048:	2000      	movs	r0, #0
 801704a:	f7f6 f93d 	bl	800d2c8 <pbuf_alloced_custom>
 801704e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017050:	697b      	ldr	r3, [r7, #20]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d106      	bne.n	8017064 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017056:	69b8      	ldr	r0, [r7, #24]
 8017058:	f7ff fef6 	bl	8016e48 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801705c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801705e:	f7f6 faed 	bl	800d63c <pbuf_free>
        goto memerr;
 8017062:	e074      	b.n	801714e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017064:	68f8      	ldr	r0, [r7, #12]
 8017066:	f7f6 fb8f 	bl	800d788 <pbuf_ref>
      pcr->original = p;
 801706a:	69bb      	ldr	r3, [r7, #24]
 801706c:	68fa      	ldr	r2, [r7, #12]
 801706e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017070:	69bb      	ldr	r3, [r7, #24]
 8017072:	4a3f      	ldr	r2, [pc, #252]	; (8017170 <ip4_frag+0x288>)
 8017074:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017076:	6979      	ldr	r1, [r7, #20]
 8017078:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801707a:	f7f6 fbad 	bl	800d7d8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801707e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017082:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017086:	1ad3      	subs	r3, r2, r3
 8017088:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801708c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017090:	2b00      	cmp	r3, #0
 8017092:	d004      	beq.n	801709e <ip4_frag+0x1b6>
        poff = 0;
 8017094:	2300      	movs	r3, #0
 8017096:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801709e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d196      	bne.n	8016fd4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80170a6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80170a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80170ac:	4413      	add	r3, r2
 80170ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80170b0:	68bb      	ldr	r3, [r7, #8]
 80170b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80170b4:	f1a3 0213 	sub.w	r2, r3, #19
 80170b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80170bc:	429a      	cmp	r2, r3
 80170be:	bfcc      	ite	gt
 80170c0:	2301      	movgt	r3, #1
 80170c2:	2300      	movle	r3, #0
 80170c4:	b2db      	uxtb	r3, r3
 80170c6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80170c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80170cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80170d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80170d2:	6a3b      	ldr	r3, [r7, #32]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d002      	beq.n	80170de <ip4_frag+0x1f6>
 80170d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d003      	beq.n	80170e6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80170de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80170e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80170e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80170e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80170e8:	4618      	mov	r0, r3
 80170ea:	f7f4 feb5 	bl	800be58 <lwip_htons>
 80170ee:	4603      	mov	r3, r0
 80170f0:	461a      	mov	r2, r3
 80170f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170f4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80170f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80170f8:	3314      	adds	r3, #20
 80170fa:	b29b      	uxth	r3, r3
 80170fc:	4618      	mov	r0, r3
 80170fe:	f7f4 feab 	bl	800be58 <lwip_htons>
 8017102:	4603      	mov	r3, r0
 8017104:	461a      	mov	r2, r3
 8017106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017108:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801710c:	2200      	movs	r2, #0
 801710e:	729a      	strb	r2, [r3, #10]
 8017110:	2200      	movs	r2, #0
 8017112:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017114:	68bb      	ldr	r3, [r7, #8]
 8017116:	695b      	ldr	r3, [r3, #20]
 8017118:	687a      	ldr	r2, [r7, #4]
 801711a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801711c:	68b8      	ldr	r0, [r7, #8]
 801711e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017120:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017122:	f7f6 fa8b 	bl	800d63c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017126:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801712a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801712c:	1ad3      	subs	r3, r2, r3
 801712e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017132:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017136:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017138:	4413      	add	r3, r2
 801713a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801713e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017142:	2b00      	cmp	r3, #0
 8017144:	f47f af19 	bne.w	8016f7a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017148:	2300      	movs	r3, #0
 801714a:	e002      	b.n	8017152 <ip4_frag+0x26a>
      goto memerr;
 801714c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801714e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017152:	4618      	mov	r0, r3
 8017154:	3748      	adds	r7, #72	; 0x48
 8017156:	46bd      	mov	sp, r7
 8017158:	bd80      	pop	{r7, pc}
 801715a:	bf00      	nop
 801715c:	0801be38 	.word	0x0801be38
 8017160:	0801c014 	.word	0x0801c014
 8017164:	0801be80 	.word	0x0801be80
 8017168:	0801c030 	.word	0x0801c030
 801716c:	0801c050 	.word	0x0801c050
 8017170:	08016e81 	.word	0x08016e81

08017174 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017174:	b580      	push	{r7, lr}
 8017176:	b086      	sub	sp, #24
 8017178:	af00      	add	r7, sp, #0
 801717a:	6078      	str	r0, [r7, #4]
 801717c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801717e:	230e      	movs	r3, #14
 8017180:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	895b      	ldrh	r3, [r3, #10]
 8017186:	2b0e      	cmp	r3, #14
 8017188:	d96e      	bls.n	8017268 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	7bdb      	ldrb	r3, [r3, #15]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d106      	bne.n	80171a0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017192:	683b      	ldr	r3, [r7, #0]
 8017194:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017198:	3301      	adds	r3, #1
 801719a:	b2da      	uxtb	r2, r3
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	685b      	ldr	r3, [r3, #4]
 80171a4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80171a6:	693b      	ldr	r3, [r7, #16]
 80171a8:	7b1a      	ldrb	r2, [r3, #12]
 80171aa:	7b5b      	ldrb	r3, [r3, #13]
 80171ac:	021b      	lsls	r3, r3, #8
 80171ae:	4313      	orrs	r3, r2
 80171b0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80171b2:	693b      	ldr	r3, [r7, #16]
 80171b4:	781b      	ldrb	r3, [r3, #0]
 80171b6:	f003 0301 	and.w	r3, r3, #1
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d023      	beq.n	8017206 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80171be:	693b      	ldr	r3, [r7, #16]
 80171c0:	781b      	ldrb	r3, [r3, #0]
 80171c2:	2b01      	cmp	r3, #1
 80171c4:	d10f      	bne.n	80171e6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80171c6:	693b      	ldr	r3, [r7, #16]
 80171c8:	785b      	ldrb	r3, [r3, #1]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d11b      	bne.n	8017206 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80171ce:	693b      	ldr	r3, [r7, #16]
 80171d0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80171d2:	2b5e      	cmp	r3, #94	; 0x5e
 80171d4:	d117      	bne.n	8017206 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	7b5b      	ldrb	r3, [r3, #13]
 80171da:	f043 0310 	orr.w	r3, r3, #16
 80171de:	b2da      	uxtb	r2, r3
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	735a      	strb	r2, [r3, #13]
 80171e4:	e00f      	b.n	8017206 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80171e6:	693b      	ldr	r3, [r7, #16]
 80171e8:	2206      	movs	r2, #6
 80171ea:	4928      	ldr	r1, [pc, #160]	; (801728c <ethernet_input+0x118>)
 80171ec:	4618      	mov	r0, r3
 80171ee:	f000 fbc2 	bl	8017976 <memcmp>
 80171f2:	4603      	mov	r3, r0
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d106      	bne.n	8017206 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	7b5b      	ldrb	r3, [r3, #13]
 80171fc:	f043 0308 	orr.w	r3, r3, #8
 8017200:	b2da      	uxtb	r2, r3
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017206:	89fb      	ldrh	r3, [r7, #14]
 8017208:	2b08      	cmp	r3, #8
 801720a:	d003      	beq.n	8017214 <ethernet_input+0xa0>
 801720c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017210:	d014      	beq.n	801723c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017212:	e032      	b.n	801727a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017214:	683b      	ldr	r3, [r7, #0]
 8017216:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801721a:	f003 0308 	and.w	r3, r3, #8
 801721e:	2b00      	cmp	r3, #0
 8017220:	d024      	beq.n	801726c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017222:	8afb      	ldrh	r3, [r7, #22]
 8017224:	4619      	mov	r1, r3
 8017226:	6878      	ldr	r0, [r7, #4]
 8017228:	f7f6 f982 	bl	800d530 <pbuf_remove_header>
 801722c:	4603      	mov	r3, r0
 801722e:	2b00      	cmp	r3, #0
 8017230:	d11e      	bne.n	8017270 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017232:	6839      	ldr	r1, [r7, #0]
 8017234:	6878      	ldr	r0, [r7, #4]
 8017236:	f7fe ff21 	bl	801607c <ip4_input>
      break;
 801723a:	e013      	b.n	8017264 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801723c:	683b      	ldr	r3, [r7, #0]
 801723e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017242:	f003 0308 	and.w	r3, r3, #8
 8017246:	2b00      	cmp	r3, #0
 8017248:	d014      	beq.n	8017274 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801724a:	8afb      	ldrh	r3, [r7, #22]
 801724c:	4619      	mov	r1, r3
 801724e:	6878      	ldr	r0, [r7, #4]
 8017250:	f7f6 f96e 	bl	800d530 <pbuf_remove_header>
 8017254:	4603      	mov	r3, r0
 8017256:	2b00      	cmp	r3, #0
 8017258:	d10e      	bne.n	8017278 <ethernet_input+0x104>
        etharp_input(p, netif);
 801725a:	6839      	ldr	r1, [r7, #0]
 801725c:	6878      	ldr	r0, [r7, #4]
 801725e:	f7fe f8c1 	bl	80153e4 <etharp_input>
      break;
 8017262:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017264:	2300      	movs	r3, #0
 8017266:	e00c      	b.n	8017282 <ethernet_input+0x10e>
    goto free_and_return;
 8017268:	bf00      	nop
 801726a:	e006      	b.n	801727a <ethernet_input+0x106>
        goto free_and_return;
 801726c:	bf00      	nop
 801726e:	e004      	b.n	801727a <ethernet_input+0x106>
        goto free_and_return;
 8017270:	bf00      	nop
 8017272:	e002      	b.n	801727a <ethernet_input+0x106>
        goto free_and_return;
 8017274:	bf00      	nop
 8017276:	e000      	b.n	801727a <ethernet_input+0x106>
        goto free_and_return;
 8017278:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801727a:	6878      	ldr	r0, [r7, #4]
 801727c:	f7f6 f9de 	bl	800d63c <pbuf_free>
  return ERR_OK;
 8017280:	2300      	movs	r3, #0
}
 8017282:	4618      	mov	r0, r3
 8017284:	3718      	adds	r7, #24
 8017286:	46bd      	mov	sp, r7
 8017288:	bd80      	pop	{r7, pc}
 801728a:	bf00      	nop
 801728c:	0801c29c 	.word	0x0801c29c

08017290 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017290:	b580      	push	{r7, lr}
 8017292:	b086      	sub	sp, #24
 8017294:	af00      	add	r7, sp, #0
 8017296:	60f8      	str	r0, [r7, #12]
 8017298:	60b9      	str	r1, [r7, #8]
 801729a:	607a      	str	r2, [r7, #4]
 801729c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801729e:	8c3b      	ldrh	r3, [r7, #32]
 80172a0:	4618      	mov	r0, r3
 80172a2:	f7f4 fdd9 	bl	800be58 <lwip_htons>
 80172a6:	4603      	mov	r3, r0
 80172a8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80172aa:	210e      	movs	r1, #14
 80172ac:	68b8      	ldr	r0, [r7, #8]
 80172ae:	f7f6 f92f 	bl	800d510 <pbuf_add_header>
 80172b2:	4603      	mov	r3, r0
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d125      	bne.n	8017304 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80172b8:	68bb      	ldr	r3, [r7, #8]
 80172ba:	685b      	ldr	r3, [r3, #4]
 80172bc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80172be:	693b      	ldr	r3, [r7, #16]
 80172c0:	8afa      	ldrh	r2, [r7, #22]
 80172c2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80172c4:	693b      	ldr	r3, [r7, #16]
 80172c6:	2206      	movs	r2, #6
 80172c8:	6839      	ldr	r1, [r7, #0]
 80172ca:	4618      	mov	r0, r3
 80172cc:	f000 fc63 	bl	8017b96 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80172d0:	693b      	ldr	r3, [r7, #16]
 80172d2:	3306      	adds	r3, #6
 80172d4:	2206      	movs	r2, #6
 80172d6:	6879      	ldr	r1, [r7, #4]
 80172d8:	4618      	mov	r0, r3
 80172da:	f000 fc5c 	bl	8017b96 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80172e4:	2b06      	cmp	r3, #6
 80172e6:	d006      	beq.n	80172f6 <ethernet_output+0x66>
 80172e8:	4b0a      	ldr	r3, [pc, #40]	; (8017314 <ethernet_output+0x84>)
 80172ea:	f44f 7299 	mov.w	r2, #306	; 0x132
 80172ee:	490a      	ldr	r1, [pc, #40]	; (8017318 <ethernet_output+0x88>)
 80172f0:	480a      	ldr	r0, [pc, #40]	; (801731c <ethernet_output+0x8c>)
 80172f2:	f000 facb 	bl	801788c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	699b      	ldr	r3, [r3, #24]
 80172fa:	68b9      	ldr	r1, [r7, #8]
 80172fc:	68f8      	ldr	r0, [r7, #12]
 80172fe:	4798      	blx	r3
 8017300:	4603      	mov	r3, r0
 8017302:	e002      	b.n	801730a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017304:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017306:	f06f 0301 	mvn.w	r3, #1
}
 801730a:	4618      	mov	r0, r3
 801730c:	3718      	adds	r7, #24
 801730e:	46bd      	mov	sp, r7
 8017310:	bd80      	pop	{r7, pc}
 8017312:	bf00      	nop
 8017314:	0801c060 	.word	0x0801c060
 8017318:	0801c098 	.word	0x0801c098
 801731c:	0801c0cc 	.word	0x0801c0cc

08017320 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017320:	b580      	push	{r7, lr}
 8017322:	b082      	sub	sp, #8
 8017324:	af00      	add	r7, sp, #0
 8017326:	6078      	str	r0, [r7, #4]
 8017328:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801732a:	683b      	ldr	r3, [r7, #0]
 801732c:	2200      	movs	r2, #0
 801732e:	2104      	movs	r1, #4
 8017330:	4618      	mov	r0, r3
 8017332:	f7ee fd9b 	bl	8005e6c <osMessageQueueNew>
 8017336:	4602      	mov	r2, r0
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	2b00      	cmp	r3, #0
 8017342:	d102      	bne.n	801734a <sys_mbox_new+0x2a>
    return ERR_MEM;
 8017344:	f04f 33ff 	mov.w	r3, #4294967295
 8017348:	e000      	b.n	801734c <sys_mbox_new+0x2c>

  return ERR_OK;
 801734a:	2300      	movs	r3, #0
}
 801734c:	4618      	mov	r0, r3
 801734e:	3708      	adds	r7, #8
 8017350:	46bd      	mov	sp, r7
 8017352:	bd80      	pop	{r7, pc}

08017354 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017354:	b580      	push	{r7, lr}
 8017356:	b082      	sub	sp, #8
 8017358:	af00      	add	r7, sp, #0
 801735a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	4618      	mov	r0, r3
 8017362:	f7ee feb5 	bl	80060d0 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	4618      	mov	r0, r3
 801736c:	f7ee fed0 	bl	8006110 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017370:	bf00      	nop
 8017372:	3708      	adds	r7, #8
 8017374:	46bd      	mov	sp, r7
 8017376:	bd80      	pop	{r7, pc}

08017378 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017378:	b580      	push	{r7, lr}
 801737a:	b084      	sub	sp, #16
 801737c:	af00      	add	r7, sp, #0
 801737e:	6078      	str	r0, [r7, #4]
 8017380:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	6818      	ldr	r0, [r3, #0]
 8017386:	4639      	mov	r1, r7
 8017388:	2300      	movs	r3, #0
 801738a:	2200      	movs	r2, #0
 801738c:	f7ee fde2 	bl	8005f54 <osMessageQueuePut>
 8017390:	4603      	mov	r3, r0
 8017392:	2b00      	cmp	r3, #0
 8017394:	d102      	bne.n	801739c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8017396:	2300      	movs	r3, #0
 8017398:	73fb      	strb	r3, [r7, #15]
 801739a:	e001      	b.n	80173a0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801739c:	23ff      	movs	r3, #255	; 0xff
 801739e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80173a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80173a4:	4618      	mov	r0, r3
 80173a6:	3710      	adds	r7, #16
 80173a8:	46bd      	mov	sp, r7
 80173aa:	bd80      	pop	{r7, pc}

080173ac <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80173ac:	b580      	push	{r7, lr}
 80173ae:	b086      	sub	sp, #24
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	60f8      	str	r0, [r7, #12]
 80173b4:	60b9      	str	r1, [r7, #8]
 80173b6:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80173b8:	f7ee fa44 	bl	8005844 <osKernelGetTickCount>
 80173bc:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d013      	beq.n	80173ec <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	6818      	ldr	r0, [r3, #0]
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	2200      	movs	r2, #0
 80173cc:	68b9      	ldr	r1, [r7, #8]
 80173ce:	f7ee fe21 	bl	8006014 <osMessageQueueGet>
 80173d2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80173d4:	693b      	ldr	r3, [r7, #16]
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d105      	bne.n	80173e6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80173da:	f7ee fa33 	bl	8005844 <osKernelGetTickCount>
 80173de:	4602      	mov	r2, r0
 80173e0:	697b      	ldr	r3, [r7, #20]
 80173e2:	1ad3      	subs	r3, r2, r3
 80173e4:	e00f      	b.n	8017406 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80173e6:	f04f 33ff 	mov.w	r3, #4294967295
 80173ea:	e00c      	b.n	8017406 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	6818      	ldr	r0, [r3, #0]
 80173f0:	f04f 33ff 	mov.w	r3, #4294967295
 80173f4:	2200      	movs	r2, #0
 80173f6:	68b9      	ldr	r1, [r7, #8]
 80173f8:	f7ee fe0c 	bl	8006014 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80173fc:	f7ee fa22 	bl	8005844 <osKernelGetTickCount>
 8017400:	4602      	mov	r2, r0
 8017402:	697b      	ldr	r3, [r7, #20]
 8017404:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8017406:	4618      	mov	r0, r3
 8017408:	3718      	adds	r7, #24
 801740a:	46bd      	mov	sp, r7
 801740c:	bd80      	pop	{r7, pc}

0801740e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801740e:	b580      	push	{r7, lr}
 8017410:	b082      	sub	sp, #8
 8017412:	af00      	add	r7, sp, #0
 8017414:	6078      	str	r0, [r7, #4]
 8017416:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	6818      	ldr	r0, [r3, #0]
 801741c:	2300      	movs	r3, #0
 801741e:	2200      	movs	r2, #0
 8017420:	6839      	ldr	r1, [r7, #0]
 8017422:	f7ee fdf7 	bl	8006014 <osMessageQueueGet>
 8017426:	4603      	mov	r3, r0
 8017428:	2b00      	cmp	r3, #0
 801742a:	d101      	bne.n	8017430 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801742c:	2300      	movs	r3, #0
 801742e:	e001      	b.n	8017434 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8017430:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8017434:	4618      	mov	r0, r3
 8017436:	3708      	adds	r7, #8
 8017438:	46bd      	mov	sp, r7
 801743a:	bd80      	pop	{r7, pc}

0801743c <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801743c:	b480      	push	{r7}
 801743e:	b083      	sub	sp, #12
 8017440:	af00      	add	r7, sp, #0
 8017442:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	2b00      	cmp	r3, #0
 801744a:	d101      	bne.n	8017450 <sys_mbox_valid+0x14>
    return 0;
 801744c:	2300      	movs	r3, #0
 801744e:	e000      	b.n	8017452 <sys_mbox_valid+0x16>
  else
    return 1;
 8017450:	2301      	movs	r3, #1
}
 8017452:	4618      	mov	r0, r3
 8017454:	370c      	adds	r7, #12
 8017456:	46bd      	mov	sp, r7
 8017458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801745c:	4770      	bx	lr

0801745e <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801745e:	b480      	push	{r7}
 8017460:	b083      	sub	sp, #12
 8017462:	af00      	add	r7, sp, #0
 8017464:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	2200      	movs	r2, #0
 801746a:	601a      	str	r2, [r3, #0]
}
 801746c:	bf00      	nop
 801746e:	370c      	adds	r7, #12
 8017470:	46bd      	mov	sp, r7
 8017472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017476:	4770      	bx	lr

08017478 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017478:	b580      	push	{r7, lr}
 801747a:	b082      	sub	sp, #8
 801747c:	af00      	add	r7, sp, #0
 801747e:	6078      	str	r0, [r7, #4]
 8017480:	460b      	mov	r3, r1
 8017482:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8017484:	78fb      	ldrb	r3, [r7, #3]
 8017486:	2200      	movs	r2, #0
 8017488:	4619      	mov	r1, r3
 801748a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801748e:	f7ee fba9 	bl	8005be4 <osSemaphoreNew>
 8017492:	4602      	mov	r2, r0
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d102      	bne.n	80174a6 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80174a0:	f04f 33ff 	mov.w	r3, #4294967295
 80174a4:	e009      	b.n	80174ba <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 80174a6:	78fb      	ldrb	r3, [r7, #3]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d105      	bne.n	80174b8 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	2100      	movs	r1, #0
 80174b2:	4618      	mov	r0, r3
 80174b4:	f7ee fc20 	bl	8005cf8 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80174b8:	2300      	movs	r3, #0
}
 80174ba:	4618      	mov	r0, r3
 80174bc:	3708      	adds	r7, #8
 80174be:	46bd      	mov	sp, r7
 80174c0:	bd80      	pop	{r7, pc}

080174c2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80174c2:	b580      	push	{r7, lr}
 80174c4:	b084      	sub	sp, #16
 80174c6:	af00      	add	r7, sp, #0
 80174c8:	6078      	str	r0, [r7, #4]
 80174ca:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 80174cc:	f7ee f9ba 	bl	8005844 <osKernelGetTickCount>
 80174d0:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 80174d2:	683b      	ldr	r3, [r7, #0]
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d011      	beq.n	80174fc <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	6839      	ldr	r1, [r7, #0]
 80174de:	4618      	mov	r0, r3
 80174e0:	f7ee fc0a 	bl	8005cf8 <osSemaphoreAcquire>
 80174e4:	4603      	mov	r3, r0
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d105      	bne.n	80174f6 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 80174ea:	f7ee f9ab 	bl	8005844 <osKernelGetTickCount>
 80174ee:	4602      	mov	r2, r0
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	1ad3      	subs	r3, r2, r3
 80174f4:	e012      	b.n	801751c <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80174f6:	f04f 33ff 	mov.w	r3, #4294967295
 80174fa:	e00f      	b.n	801751c <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 80174fc:	bf00      	nop
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	f04f 31ff 	mov.w	r1, #4294967295
 8017506:	4618      	mov	r0, r3
 8017508:	f7ee fbf6 	bl	8005cf8 <osSemaphoreAcquire>
 801750c:	4603      	mov	r3, r0
 801750e:	2b00      	cmp	r3, #0
 8017510:	d1f5      	bne.n	80174fe <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8017512:	f7ee f997 	bl	8005844 <osKernelGetTickCount>
 8017516:	4602      	mov	r2, r0
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801751c:	4618      	mov	r0, r3
 801751e:	3710      	adds	r7, #16
 8017520:	46bd      	mov	sp, r7
 8017522:	bd80      	pop	{r7, pc}

08017524 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8017524:	b580      	push	{r7, lr}
 8017526:	b082      	sub	sp, #8
 8017528:	af00      	add	r7, sp, #0
 801752a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	4618      	mov	r0, r3
 8017532:	f7ee fc33 	bl	8005d9c <osSemaphoreRelease>
}
 8017536:	bf00      	nop
 8017538:	3708      	adds	r7, #8
 801753a:	46bd      	mov	sp, r7
 801753c:	bd80      	pop	{r7, pc}

0801753e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801753e:	b580      	push	{r7, lr}
 8017540:	b082      	sub	sp, #8
 8017542:	af00      	add	r7, sp, #0
 8017544:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	4618      	mov	r0, r3
 801754c:	f7ee fc6a 	bl	8005e24 <osSemaphoreDelete>
}
 8017550:	bf00      	nop
 8017552:	3708      	adds	r7, #8
 8017554:	46bd      	mov	sp, r7
 8017556:	bd80      	pop	{r7, pc}

08017558 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017558:	b480      	push	{r7}
 801755a:	b083      	sub	sp, #12
 801755c:	af00      	add	r7, sp, #0
 801755e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d101      	bne.n	801756c <sys_sem_valid+0x14>
    return 0;
 8017568:	2300      	movs	r3, #0
 801756a:	e000      	b.n	801756e <sys_sem_valid+0x16>
  else
    return 1;
 801756c:	2301      	movs	r3, #1
}
 801756e:	4618      	mov	r0, r3
 8017570:	370c      	adds	r7, #12
 8017572:	46bd      	mov	sp, r7
 8017574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017578:	4770      	bx	lr

0801757a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801757a:	b480      	push	{r7}
 801757c:	b083      	sub	sp, #12
 801757e:	af00      	add	r7, sp, #0
 8017580:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	2200      	movs	r2, #0
 8017586:	601a      	str	r2, [r3, #0]
}
 8017588:	bf00      	nop
 801758a:	370c      	adds	r7, #12
 801758c:	46bd      	mov	sp, r7
 801758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017592:	4770      	bx	lr

08017594 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017594:	b580      	push	{r7, lr}
 8017596:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8017598:	2000      	movs	r0, #0
 801759a:	f7ee fa15 	bl	80059c8 <osMutexNew>
 801759e:	4603      	mov	r3, r0
 80175a0:	4a01      	ldr	r2, [pc, #4]	; (80175a8 <sys_init+0x14>)
 80175a2:	6013      	str	r3, [r2, #0]
#endif
}
 80175a4:	bf00      	nop
 80175a6:	bd80      	pop	{r7, pc}
 80175a8:	2000d798 	.word	0x2000d798

080175ac <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b082      	sub	sp, #8
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80175b4:	2000      	movs	r0, #0
 80175b6:	f7ee fa07 	bl	80059c8 <osMutexNew>
 80175ba:	4602      	mov	r2, r0
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d102      	bne.n	80175ce <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80175c8:	f04f 33ff 	mov.w	r3, #4294967295
 80175cc:	e000      	b.n	80175d0 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80175ce:	2300      	movs	r3, #0
}
 80175d0:	4618      	mov	r0, r3
 80175d2:	3708      	adds	r7, #8
 80175d4:	46bd      	mov	sp, r7
 80175d6:	bd80      	pop	{r7, pc}

080175d8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80175d8:	b580      	push	{r7, lr}
 80175da:	b082      	sub	sp, #8
 80175dc:	af00      	add	r7, sp, #0
 80175de:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	f04f 31ff 	mov.w	r1, #4294967295
 80175e8:	4618      	mov	r0, r3
 80175ea:	f7ee fa73 	bl	8005ad4 <osMutexAcquire>
#endif
}
 80175ee:	bf00      	nop
 80175f0:	3708      	adds	r7, #8
 80175f2:	46bd      	mov	sp, r7
 80175f4:	bd80      	pop	{r7, pc}

080175f6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80175f6:	b580      	push	{r7, lr}
 80175f8:	b082      	sub	sp, #8
 80175fa:	af00      	add	r7, sp, #0
 80175fc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	4618      	mov	r0, r3
 8017604:	f7ee fab1 	bl	8005b6a <osMutexRelease>
}
 8017608:	bf00      	nop
 801760a:	3708      	adds	r7, #8
 801760c:	46bd      	mov	sp, r7
 801760e:	bd80      	pop	{r7, pc}

08017610 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017610:	b580      	push	{r7, lr}
 8017612:	b08e      	sub	sp, #56	; 0x38
 8017614:	af00      	add	r7, sp, #0
 8017616:	60f8      	str	r0, [r7, #12]
 8017618:	60b9      	str	r1, [r7, #8]
 801761a:	607a      	str	r2, [r7, #4]
 801761c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801761e:	f107 0314 	add.w	r3, r7, #20
 8017622:	2224      	movs	r2, #36	; 0x24
 8017624:	2100      	movs	r1, #0
 8017626:	4618      	mov	r0, r3
 8017628:	f000 f9cf 	bl	80179ca <memset>
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	617b      	str	r3, [r7, #20]
 8017630:	683b      	ldr	r3, [r7, #0]
 8017632:	62bb      	str	r3, [r7, #40]	; 0x28
 8017634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017636:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8017638:	f107 0314 	add.w	r3, r7, #20
 801763c:	461a      	mov	r2, r3
 801763e:	6879      	ldr	r1, [r7, #4]
 8017640:	68b8      	ldr	r0, [r7, #8]
 8017642:	f7ee f914 	bl	800586e <osThreadNew>
 8017646:	4603      	mov	r3, r0
#endif
}
 8017648:	4618      	mov	r0, r3
 801764a:	3738      	adds	r7, #56	; 0x38
 801764c:	46bd      	mov	sp, r7
 801764e:	bd80      	pop	{r7, pc}

08017650 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017650:	b580      	push	{r7, lr}
 8017652:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8017654:	4b04      	ldr	r3, [pc, #16]	; (8017668 <sys_arch_protect+0x18>)
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	f04f 31ff 	mov.w	r1, #4294967295
 801765c:	4618      	mov	r0, r3
 801765e:	f7ee fa39 	bl	8005ad4 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8017662:	2301      	movs	r3, #1
}
 8017664:	4618      	mov	r0, r3
 8017666:	bd80      	pop	{r7, pc}
 8017668:	2000d798 	.word	0x2000d798

0801766c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801766c:	b580      	push	{r7, lr}
 801766e:	b082      	sub	sp, #8
 8017670:	af00      	add	r7, sp, #0
 8017672:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017674:	4b04      	ldr	r3, [pc, #16]	; (8017688 <sys_arch_unprotect+0x1c>)
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	4618      	mov	r0, r3
 801767a:	f7ee fa76 	bl	8005b6a <osMutexRelease>
}
 801767e:	bf00      	nop
 8017680:	3708      	adds	r7, #8
 8017682:	46bd      	mov	sp, r7
 8017684:	bd80      	pop	{r7, pc}
 8017686:	bf00      	nop
 8017688:	2000d798 	.word	0x2000d798

0801768c <rand>:
 801768c:	4b16      	ldr	r3, [pc, #88]	; (80176e8 <rand+0x5c>)
 801768e:	b510      	push	{r4, lr}
 8017690:	681c      	ldr	r4, [r3, #0]
 8017692:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017694:	b9b3      	cbnz	r3, 80176c4 <rand+0x38>
 8017696:	2018      	movs	r0, #24
 8017698:	f000 faf6 	bl	8017c88 <malloc>
 801769c:	4602      	mov	r2, r0
 801769e:	6320      	str	r0, [r4, #48]	; 0x30
 80176a0:	b920      	cbnz	r0, 80176ac <rand+0x20>
 80176a2:	4b12      	ldr	r3, [pc, #72]	; (80176ec <rand+0x60>)
 80176a4:	4812      	ldr	r0, [pc, #72]	; (80176f0 <rand+0x64>)
 80176a6:	2152      	movs	r1, #82	; 0x52
 80176a8:	f000 fa84 	bl	8017bb4 <__assert_func>
 80176ac:	4911      	ldr	r1, [pc, #68]	; (80176f4 <rand+0x68>)
 80176ae:	4b12      	ldr	r3, [pc, #72]	; (80176f8 <rand+0x6c>)
 80176b0:	e9c0 1300 	strd	r1, r3, [r0]
 80176b4:	4b11      	ldr	r3, [pc, #68]	; (80176fc <rand+0x70>)
 80176b6:	6083      	str	r3, [r0, #8]
 80176b8:	230b      	movs	r3, #11
 80176ba:	8183      	strh	r3, [r0, #12]
 80176bc:	2100      	movs	r1, #0
 80176be:	2001      	movs	r0, #1
 80176c0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80176c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80176c6:	480e      	ldr	r0, [pc, #56]	; (8017700 <rand+0x74>)
 80176c8:	690b      	ldr	r3, [r1, #16]
 80176ca:	694c      	ldr	r4, [r1, #20]
 80176cc:	4a0d      	ldr	r2, [pc, #52]	; (8017704 <rand+0x78>)
 80176ce:	4358      	muls	r0, r3
 80176d0:	fb02 0004 	mla	r0, r2, r4, r0
 80176d4:	fba3 3202 	umull	r3, r2, r3, r2
 80176d8:	3301      	adds	r3, #1
 80176da:	eb40 0002 	adc.w	r0, r0, r2
 80176de:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80176e2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80176e6:	bd10      	pop	{r4, pc}
 80176e8:	20000088 	.word	0x20000088
 80176ec:	0801c2aa 	.word	0x0801c2aa
 80176f0:	0801c2c1 	.word	0x0801c2c1
 80176f4:	abcd330e 	.word	0xabcd330e
 80176f8:	e66d1234 	.word	0xe66d1234
 80176fc:	0005deec 	.word	0x0005deec
 8017700:	5851f42d 	.word	0x5851f42d
 8017704:	4c957f2d 	.word	0x4c957f2d

08017708 <std>:
 8017708:	2300      	movs	r3, #0
 801770a:	b510      	push	{r4, lr}
 801770c:	4604      	mov	r4, r0
 801770e:	e9c0 3300 	strd	r3, r3, [r0]
 8017712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017716:	6083      	str	r3, [r0, #8]
 8017718:	8181      	strh	r1, [r0, #12]
 801771a:	6643      	str	r3, [r0, #100]	; 0x64
 801771c:	81c2      	strh	r2, [r0, #14]
 801771e:	6183      	str	r3, [r0, #24]
 8017720:	4619      	mov	r1, r3
 8017722:	2208      	movs	r2, #8
 8017724:	305c      	adds	r0, #92	; 0x5c
 8017726:	f000 f950 	bl	80179ca <memset>
 801772a:	4b0d      	ldr	r3, [pc, #52]	; (8017760 <std+0x58>)
 801772c:	6263      	str	r3, [r4, #36]	; 0x24
 801772e:	4b0d      	ldr	r3, [pc, #52]	; (8017764 <std+0x5c>)
 8017730:	62a3      	str	r3, [r4, #40]	; 0x28
 8017732:	4b0d      	ldr	r3, [pc, #52]	; (8017768 <std+0x60>)
 8017734:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017736:	4b0d      	ldr	r3, [pc, #52]	; (801776c <std+0x64>)
 8017738:	6323      	str	r3, [r4, #48]	; 0x30
 801773a:	4b0d      	ldr	r3, [pc, #52]	; (8017770 <std+0x68>)
 801773c:	6224      	str	r4, [r4, #32]
 801773e:	429c      	cmp	r4, r3
 8017740:	d006      	beq.n	8017750 <std+0x48>
 8017742:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8017746:	4294      	cmp	r4, r2
 8017748:	d002      	beq.n	8017750 <std+0x48>
 801774a:	33d0      	adds	r3, #208	; 0xd0
 801774c:	429c      	cmp	r4, r3
 801774e:	d105      	bne.n	801775c <std+0x54>
 8017750:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017758:	f000 ba12 	b.w	8017b80 <__retarget_lock_init_recursive>
 801775c:	bd10      	pop	{r4, pc}
 801775e:	bf00      	nop
 8017760:	080178f1 	.word	0x080178f1
 8017764:	08017913 	.word	0x08017913
 8017768:	0801794b 	.word	0x0801794b
 801776c:	0801796f 	.word	0x0801796f
 8017770:	2000d79c 	.word	0x2000d79c

08017774 <stdio_exit_handler>:
 8017774:	4a02      	ldr	r2, [pc, #8]	; (8017780 <stdio_exit_handler+0xc>)
 8017776:	4903      	ldr	r1, [pc, #12]	; (8017784 <stdio_exit_handler+0x10>)
 8017778:	4803      	ldr	r0, [pc, #12]	; (8017788 <stdio_exit_handler+0x14>)
 801777a:	f000 b869 	b.w	8017850 <_fwalk_sglue>
 801777e:	bf00      	nop
 8017780:	20000030 	.word	0x20000030
 8017784:	08018755 	.word	0x08018755
 8017788:	2000003c 	.word	0x2000003c

0801778c <cleanup_stdio>:
 801778c:	6841      	ldr	r1, [r0, #4]
 801778e:	4b0c      	ldr	r3, [pc, #48]	; (80177c0 <cleanup_stdio+0x34>)
 8017790:	4299      	cmp	r1, r3
 8017792:	b510      	push	{r4, lr}
 8017794:	4604      	mov	r4, r0
 8017796:	d001      	beq.n	801779c <cleanup_stdio+0x10>
 8017798:	f000 ffdc 	bl	8018754 <_fflush_r>
 801779c:	68a1      	ldr	r1, [r4, #8]
 801779e:	4b09      	ldr	r3, [pc, #36]	; (80177c4 <cleanup_stdio+0x38>)
 80177a0:	4299      	cmp	r1, r3
 80177a2:	d002      	beq.n	80177aa <cleanup_stdio+0x1e>
 80177a4:	4620      	mov	r0, r4
 80177a6:	f000 ffd5 	bl	8018754 <_fflush_r>
 80177aa:	68e1      	ldr	r1, [r4, #12]
 80177ac:	4b06      	ldr	r3, [pc, #24]	; (80177c8 <cleanup_stdio+0x3c>)
 80177ae:	4299      	cmp	r1, r3
 80177b0:	d004      	beq.n	80177bc <cleanup_stdio+0x30>
 80177b2:	4620      	mov	r0, r4
 80177b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177b8:	f000 bfcc 	b.w	8018754 <_fflush_r>
 80177bc:	bd10      	pop	{r4, pc}
 80177be:	bf00      	nop
 80177c0:	2000d79c 	.word	0x2000d79c
 80177c4:	2000d804 	.word	0x2000d804
 80177c8:	2000d86c 	.word	0x2000d86c

080177cc <global_stdio_init.part.0>:
 80177cc:	b510      	push	{r4, lr}
 80177ce:	4b0b      	ldr	r3, [pc, #44]	; (80177fc <global_stdio_init.part.0+0x30>)
 80177d0:	4c0b      	ldr	r4, [pc, #44]	; (8017800 <global_stdio_init.part.0+0x34>)
 80177d2:	4a0c      	ldr	r2, [pc, #48]	; (8017804 <global_stdio_init.part.0+0x38>)
 80177d4:	601a      	str	r2, [r3, #0]
 80177d6:	4620      	mov	r0, r4
 80177d8:	2200      	movs	r2, #0
 80177da:	2104      	movs	r1, #4
 80177dc:	f7ff ff94 	bl	8017708 <std>
 80177e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80177e4:	2201      	movs	r2, #1
 80177e6:	2109      	movs	r1, #9
 80177e8:	f7ff ff8e 	bl	8017708 <std>
 80177ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80177f0:	2202      	movs	r2, #2
 80177f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177f6:	2112      	movs	r1, #18
 80177f8:	f7ff bf86 	b.w	8017708 <std>
 80177fc:	2000d8d4 	.word	0x2000d8d4
 8017800:	2000d79c 	.word	0x2000d79c
 8017804:	08017775 	.word	0x08017775

08017808 <__sfp_lock_acquire>:
 8017808:	4801      	ldr	r0, [pc, #4]	; (8017810 <__sfp_lock_acquire+0x8>)
 801780a:	f000 b9ba 	b.w	8017b82 <__retarget_lock_acquire_recursive>
 801780e:	bf00      	nop
 8017810:	2000d8dd 	.word	0x2000d8dd

08017814 <__sfp_lock_release>:
 8017814:	4801      	ldr	r0, [pc, #4]	; (801781c <__sfp_lock_release+0x8>)
 8017816:	f000 b9b5 	b.w	8017b84 <__retarget_lock_release_recursive>
 801781a:	bf00      	nop
 801781c:	2000d8dd 	.word	0x2000d8dd

08017820 <__sinit>:
 8017820:	b510      	push	{r4, lr}
 8017822:	4604      	mov	r4, r0
 8017824:	f7ff fff0 	bl	8017808 <__sfp_lock_acquire>
 8017828:	6a23      	ldr	r3, [r4, #32]
 801782a:	b11b      	cbz	r3, 8017834 <__sinit+0x14>
 801782c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017830:	f7ff bff0 	b.w	8017814 <__sfp_lock_release>
 8017834:	4b04      	ldr	r3, [pc, #16]	; (8017848 <__sinit+0x28>)
 8017836:	6223      	str	r3, [r4, #32]
 8017838:	4b04      	ldr	r3, [pc, #16]	; (801784c <__sinit+0x2c>)
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d1f5      	bne.n	801782c <__sinit+0xc>
 8017840:	f7ff ffc4 	bl	80177cc <global_stdio_init.part.0>
 8017844:	e7f2      	b.n	801782c <__sinit+0xc>
 8017846:	bf00      	nop
 8017848:	0801778d 	.word	0x0801778d
 801784c:	2000d8d4 	.word	0x2000d8d4

08017850 <_fwalk_sglue>:
 8017850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017854:	4607      	mov	r7, r0
 8017856:	4688      	mov	r8, r1
 8017858:	4614      	mov	r4, r2
 801785a:	2600      	movs	r6, #0
 801785c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017860:	f1b9 0901 	subs.w	r9, r9, #1
 8017864:	d505      	bpl.n	8017872 <_fwalk_sglue+0x22>
 8017866:	6824      	ldr	r4, [r4, #0]
 8017868:	2c00      	cmp	r4, #0
 801786a:	d1f7      	bne.n	801785c <_fwalk_sglue+0xc>
 801786c:	4630      	mov	r0, r6
 801786e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017872:	89ab      	ldrh	r3, [r5, #12]
 8017874:	2b01      	cmp	r3, #1
 8017876:	d907      	bls.n	8017888 <_fwalk_sglue+0x38>
 8017878:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801787c:	3301      	adds	r3, #1
 801787e:	d003      	beq.n	8017888 <_fwalk_sglue+0x38>
 8017880:	4629      	mov	r1, r5
 8017882:	4638      	mov	r0, r7
 8017884:	47c0      	blx	r8
 8017886:	4306      	orrs	r6, r0
 8017888:	3568      	adds	r5, #104	; 0x68
 801788a:	e7e9      	b.n	8017860 <_fwalk_sglue+0x10>

0801788c <iprintf>:
 801788c:	b40f      	push	{r0, r1, r2, r3}
 801788e:	b507      	push	{r0, r1, r2, lr}
 8017890:	4906      	ldr	r1, [pc, #24]	; (80178ac <iprintf+0x20>)
 8017892:	ab04      	add	r3, sp, #16
 8017894:	6808      	ldr	r0, [r1, #0]
 8017896:	f853 2b04 	ldr.w	r2, [r3], #4
 801789a:	6881      	ldr	r1, [r0, #8]
 801789c:	9301      	str	r3, [sp, #4]
 801789e:	f000 fc29 	bl	80180f4 <_vfiprintf_r>
 80178a2:	b003      	add	sp, #12
 80178a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80178a8:	b004      	add	sp, #16
 80178aa:	4770      	bx	lr
 80178ac:	20000088 	.word	0x20000088

080178b0 <siprintf>:
 80178b0:	b40e      	push	{r1, r2, r3}
 80178b2:	b500      	push	{lr}
 80178b4:	b09c      	sub	sp, #112	; 0x70
 80178b6:	ab1d      	add	r3, sp, #116	; 0x74
 80178b8:	9002      	str	r0, [sp, #8]
 80178ba:	9006      	str	r0, [sp, #24]
 80178bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80178c0:	4809      	ldr	r0, [pc, #36]	; (80178e8 <siprintf+0x38>)
 80178c2:	9107      	str	r1, [sp, #28]
 80178c4:	9104      	str	r1, [sp, #16]
 80178c6:	4909      	ldr	r1, [pc, #36]	; (80178ec <siprintf+0x3c>)
 80178c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80178cc:	9105      	str	r1, [sp, #20]
 80178ce:	6800      	ldr	r0, [r0, #0]
 80178d0:	9301      	str	r3, [sp, #4]
 80178d2:	a902      	add	r1, sp, #8
 80178d4:	f000 fae6 	bl	8017ea4 <_svfiprintf_r>
 80178d8:	9b02      	ldr	r3, [sp, #8]
 80178da:	2200      	movs	r2, #0
 80178dc:	701a      	strb	r2, [r3, #0]
 80178de:	b01c      	add	sp, #112	; 0x70
 80178e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80178e4:	b003      	add	sp, #12
 80178e6:	4770      	bx	lr
 80178e8:	20000088 	.word	0x20000088
 80178ec:	ffff0208 	.word	0xffff0208

080178f0 <__sread>:
 80178f0:	b510      	push	{r4, lr}
 80178f2:	460c      	mov	r4, r1
 80178f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178f8:	f000 f8fa 	bl	8017af0 <_read_r>
 80178fc:	2800      	cmp	r0, #0
 80178fe:	bfab      	itete	ge
 8017900:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017902:	89a3      	ldrhlt	r3, [r4, #12]
 8017904:	181b      	addge	r3, r3, r0
 8017906:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801790a:	bfac      	ite	ge
 801790c:	6563      	strge	r3, [r4, #84]	; 0x54
 801790e:	81a3      	strhlt	r3, [r4, #12]
 8017910:	bd10      	pop	{r4, pc}

08017912 <__swrite>:
 8017912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017916:	461f      	mov	r7, r3
 8017918:	898b      	ldrh	r3, [r1, #12]
 801791a:	05db      	lsls	r3, r3, #23
 801791c:	4605      	mov	r5, r0
 801791e:	460c      	mov	r4, r1
 8017920:	4616      	mov	r6, r2
 8017922:	d505      	bpl.n	8017930 <__swrite+0x1e>
 8017924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017928:	2302      	movs	r3, #2
 801792a:	2200      	movs	r2, #0
 801792c:	f000 f8ce 	bl	8017acc <_lseek_r>
 8017930:	89a3      	ldrh	r3, [r4, #12]
 8017932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017936:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801793a:	81a3      	strh	r3, [r4, #12]
 801793c:	4632      	mov	r2, r6
 801793e:	463b      	mov	r3, r7
 8017940:	4628      	mov	r0, r5
 8017942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017946:	f000 b8e5 	b.w	8017b14 <_write_r>

0801794a <__sseek>:
 801794a:	b510      	push	{r4, lr}
 801794c:	460c      	mov	r4, r1
 801794e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017952:	f000 f8bb 	bl	8017acc <_lseek_r>
 8017956:	1c43      	adds	r3, r0, #1
 8017958:	89a3      	ldrh	r3, [r4, #12]
 801795a:	bf15      	itete	ne
 801795c:	6560      	strne	r0, [r4, #84]	; 0x54
 801795e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017962:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017966:	81a3      	strheq	r3, [r4, #12]
 8017968:	bf18      	it	ne
 801796a:	81a3      	strhne	r3, [r4, #12]
 801796c:	bd10      	pop	{r4, pc}

0801796e <__sclose>:
 801796e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017972:	f000 b845 	b.w	8017a00 <_close_r>

08017976 <memcmp>:
 8017976:	b510      	push	{r4, lr}
 8017978:	3901      	subs	r1, #1
 801797a:	4402      	add	r2, r0
 801797c:	4290      	cmp	r0, r2
 801797e:	d101      	bne.n	8017984 <memcmp+0xe>
 8017980:	2000      	movs	r0, #0
 8017982:	e005      	b.n	8017990 <memcmp+0x1a>
 8017984:	7803      	ldrb	r3, [r0, #0]
 8017986:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801798a:	42a3      	cmp	r3, r4
 801798c:	d001      	beq.n	8017992 <memcmp+0x1c>
 801798e:	1b18      	subs	r0, r3, r4
 8017990:	bd10      	pop	{r4, pc}
 8017992:	3001      	adds	r0, #1
 8017994:	e7f2      	b.n	801797c <memcmp+0x6>

08017996 <memmove>:
 8017996:	4288      	cmp	r0, r1
 8017998:	b510      	push	{r4, lr}
 801799a:	eb01 0402 	add.w	r4, r1, r2
 801799e:	d902      	bls.n	80179a6 <memmove+0x10>
 80179a0:	4284      	cmp	r4, r0
 80179a2:	4623      	mov	r3, r4
 80179a4:	d807      	bhi.n	80179b6 <memmove+0x20>
 80179a6:	1e43      	subs	r3, r0, #1
 80179a8:	42a1      	cmp	r1, r4
 80179aa:	d008      	beq.n	80179be <memmove+0x28>
 80179ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80179b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80179b4:	e7f8      	b.n	80179a8 <memmove+0x12>
 80179b6:	4402      	add	r2, r0
 80179b8:	4601      	mov	r1, r0
 80179ba:	428a      	cmp	r2, r1
 80179bc:	d100      	bne.n	80179c0 <memmove+0x2a>
 80179be:	bd10      	pop	{r4, pc}
 80179c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80179c4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80179c8:	e7f7      	b.n	80179ba <memmove+0x24>

080179ca <memset>:
 80179ca:	4402      	add	r2, r0
 80179cc:	4603      	mov	r3, r0
 80179ce:	4293      	cmp	r3, r2
 80179d0:	d100      	bne.n	80179d4 <memset+0xa>
 80179d2:	4770      	bx	lr
 80179d4:	f803 1b01 	strb.w	r1, [r3], #1
 80179d8:	e7f9      	b.n	80179ce <memset+0x4>

080179da <strncpy>:
 80179da:	b510      	push	{r4, lr}
 80179dc:	3901      	subs	r1, #1
 80179de:	4603      	mov	r3, r0
 80179e0:	b132      	cbz	r2, 80179f0 <strncpy+0x16>
 80179e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80179e6:	f803 4b01 	strb.w	r4, [r3], #1
 80179ea:	3a01      	subs	r2, #1
 80179ec:	2c00      	cmp	r4, #0
 80179ee:	d1f7      	bne.n	80179e0 <strncpy+0x6>
 80179f0:	441a      	add	r2, r3
 80179f2:	2100      	movs	r1, #0
 80179f4:	4293      	cmp	r3, r2
 80179f6:	d100      	bne.n	80179fa <strncpy+0x20>
 80179f8:	bd10      	pop	{r4, pc}
 80179fa:	f803 1b01 	strb.w	r1, [r3], #1
 80179fe:	e7f9      	b.n	80179f4 <strncpy+0x1a>

08017a00 <_close_r>:
 8017a00:	b538      	push	{r3, r4, r5, lr}
 8017a02:	4d06      	ldr	r5, [pc, #24]	; (8017a1c <_close_r+0x1c>)
 8017a04:	2300      	movs	r3, #0
 8017a06:	4604      	mov	r4, r0
 8017a08:	4608      	mov	r0, r1
 8017a0a:	602b      	str	r3, [r5, #0]
 8017a0c:	f7e9 fac5 	bl	8000f9a <_close>
 8017a10:	1c43      	adds	r3, r0, #1
 8017a12:	d102      	bne.n	8017a1a <_close_r+0x1a>
 8017a14:	682b      	ldr	r3, [r5, #0]
 8017a16:	b103      	cbz	r3, 8017a1a <_close_r+0x1a>
 8017a18:	6023      	str	r3, [r4, #0]
 8017a1a:	bd38      	pop	{r3, r4, r5, pc}
 8017a1c:	2000d8d8 	.word	0x2000d8d8

08017a20 <_reclaim_reent>:
 8017a20:	4b29      	ldr	r3, [pc, #164]	; (8017ac8 <_reclaim_reent+0xa8>)
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	4283      	cmp	r3, r0
 8017a26:	b570      	push	{r4, r5, r6, lr}
 8017a28:	4604      	mov	r4, r0
 8017a2a:	d04b      	beq.n	8017ac4 <_reclaim_reent+0xa4>
 8017a2c:	69c3      	ldr	r3, [r0, #28]
 8017a2e:	b143      	cbz	r3, 8017a42 <_reclaim_reent+0x22>
 8017a30:	68db      	ldr	r3, [r3, #12]
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d144      	bne.n	8017ac0 <_reclaim_reent+0xa0>
 8017a36:	69e3      	ldr	r3, [r4, #28]
 8017a38:	6819      	ldr	r1, [r3, #0]
 8017a3a:	b111      	cbz	r1, 8017a42 <_reclaim_reent+0x22>
 8017a3c:	4620      	mov	r0, r4
 8017a3e:	f000 f8d7 	bl	8017bf0 <_free_r>
 8017a42:	6961      	ldr	r1, [r4, #20]
 8017a44:	b111      	cbz	r1, 8017a4c <_reclaim_reent+0x2c>
 8017a46:	4620      	mov	r0, r4
 8017a48:	f000 f8d2 	bl	8017bf0 <_free_r>
 8017a4c:	69e1      	ldr	r1, [r4, #28]
 8017a4e:	b111      	cbz	r1, 8017a56 <_reclaim_reent+0x36>
 8017a50:	4620      	mov	r0, r4
 8017a52:	f000 f8cd 	bl	8017bf0 <_free_r>
 8017a56:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017a58:	b111      	cbz	r1, 8017a60 <_reclaim_reent+0x40>
 8017a5a:	4620      	mov	r0, r4
 8017a5c:	f000 f8c8 	bl	8017bf0 <_free_r>
 8017a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a62:	b111      	cbz	r1, 8017a6a <_reclaim_reent+0x4a>
 8017a64:	4620      	mov	r0, r4
 8017a66:	f000 f8c3 	bl	8017bf0 <_free_r>
 8017a6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017a6c:	b111      	cbz	r1, 8017a74 <_reclaim_reent+0x54>
 8017a6e:	4620      	mov	r0, r4
 8017a70:	f000 f8be 	bl	8017bf0 <_free_r>
 8017a74:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017a76:	b111      	cbz	r1, 8017a7e <_reclaim_reent+0x5e>
 8017a78:	4620      	mov	r0, r4
 8017a7a:	f000 f8b9 	bl	8017bf0 <_free_r>
 8017a7e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8017a80:	b111      	cbz	r1, 8017a88 <_reclaim_reent+0x68>
 8017a82:	4620      	mov	r0, r4
 8017a84:	f000 f8b4 	bl	8017bf0 <_free_r>
 8017a88:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8017a8a:	b111      	cbz	r1, 8017a92 <_reclaim_reent+0x72>
 8017a8c:	4620      	mov	r0, r4
 8017a8e:	f000 f8af 	bl	8017bf0 <_free_r>
 8017a92:	6a23      	ldr	r3, [r4, #32]
 8017a94:	b1b3      	cbz	r3, 8017ac4 <_reclaim_reent+0xa4>
 8017a96:	4620      	mov	r0, r4
 8017a98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a9c:	4718      	bx	r3
 8017a9e:	5949      	ldr	r1, [r1, r5]
 8017aa0:	b941      	cbnz	r1, 8017ab4 <_reclaim_reent+0x94>
 8017aa2:	3504      	adds	r5, #4
 8017aa4:	69e3      	ldr	r3, [r4, #28]
 8017aa6:	2d80      	cmp	r5, #128	; 0x80
 8017aa8:	68d9      	ldr	r1, [r3, #12]
 8017aaa:	d1f8      	bne.n	8017a9e <_reclaim_reent+0x7e>
 8017aac:	4620      	mov	r0, r4
 8017aae:	f000 f89f 	bl	8017bf0 <_free_r>
 8017ab2:	e7c0      	b.n	8017a36 <_reclaim_reent+0x16>
 8017ab4:	680e      	ldr	r6, [r1, #0]
 8017ab6:	4620      	mov	r0, r4
 8017ab8:	f000 f89a 	bl	8017bf0 <_free_r>
 8017abc:	4631      	mov	r1, r6
 8017abe:	e7ef      	b.n	8017aa0 <_reclaim_reent+0x80>
 8017ac0:	2500      	movs	r5, #0
 8017ac2:	e7ef      	b.n	8017aa4 <_reclaim_reent+0x84>
 8017ac4:	bd70      	pop	{r4, r5, r6, pc}
 8017ac6:	bf00      	nop
 8017ac8:	20000088 	.word	0x20000088

08017acc <_lseek_r>:
 8017acc:	b538      	push	{r3, r4, r5, lr}
 8017ace:	4d07      	ldr	r5, [pc, #28]	; (8017aec <_lseek_r+0x20>)
 8017ad0:	4604      	mov	r4, r0
 8017ad2:	4608      	mov	r0, r1
 8017ad4:	4611      	mov	r1, r2
 8017ad6:	2200      	movs	r2, #0
 8017ad8:	602a      	str	r2, [r5, #0]
 8017ada:	461a      	mov	r2, r3
 8017adc:	f7e9 fa84 	bl	8000fe8 <_lseek>
 8017ae0:	1c43      	adds	r3, r0, #1
 8017ae2:	d102      	bne.n	8017aea <_lseek_r+0x1e>
 8017ae4:	682b      	ldr	r3, [r5, #0]
 8017ae6:	b103      	cbz	r3, 8017aea <_lseek_r+0x1e>
 8017ae8:	6023      	str	r3, [r4, #0]
 8017aea:	bd38      	pop	{r3, r4, r5, pc}
 8017aec:	2000d8d8 	.word	0x2000d8d8

08017af0 <_read_r>:
 8017af0:	b538      	push	{r3, r4, r5, lr}
 8017af2:	4d07      	ldr	r5, [pc, #28]	; (8017b10 <_read_r+0x20>)
 8017af4:	4604      	mov	r4, r0
 8017af6:	4608      	mov	r0, r1
 8017af8:	4611      	mov	r1, r2
 8017afa:	2200      	movs	r2, #0
 8017afc:	602a      	str	r2, [r5, #0]
 8017afe:	461a      	mov	r2, r3
 8017b00:	f7e9 fa12 	bl	8000f28 <_read>
 8017b04:	1c43      	adds	r3, r0, #1
 8017b06:	d102      	bne.n	8017b0e <_read_r+0x1e>
 8017b08:	682b      	ldr	r3, [r5, #0]
 8017b0a:	b103      	cbz	r3, 8017b0e <_read_r+0x1e>
 8017b0c:	6023      	str	r3, [r4, #0]
 8017b0e:	bd38      	pop	{r3, r4, r5, pc}
 8017b10:	2000d8d8 	.word	0x2000d8d8

08017b14 <_write_r>:
 8017b14:	b538      	push	{r3, r4, r5, lr}
 8017b16:	4d07      	ldr	r5, [pc, #28]	; (8017b34 <_write_r+0x20>)
 8017b18:	4604      	mov	r4, r0
 8017b1a:	4608      	mov	r0, r1
 8017b1c:	4611      	mov	r1, r2
 8017b1e:	2200      	movs	r2, #0
 8017b20:	602a      	str	r2, [r5, #0]
 8017b22:	461a      	mov	r2, r3
 8017b24:	f7e9 fa1d 	bl	8000f62 <_write>
 8017b28:	1c43      	adds	r3, r0, #1
 8017b2a:	d102      	bne.n	8017b32 <_write_r+0x1e>
 8017b2c:	682b      	ldr	r3, [r5, #0]
 8017b2e:	b103      	cbz	r3, 8017b32 <_write_r+0x1e>
 8017b30:	6023      	str	r3, [r4, #0]
 8017b32:	bd38      	pop	{r3, r4, r5, pc}
 8017b34:	2000d8d8 	.word	0x2000d8d8

08017b38 <__libc_init_array>:
 8017b38:	b570      	push	{r4, r5, r6, lr}
 8017b3a:	4d0d      	ldr	r5, [pc, #52]	; (8017b70 <__libc_init_array+0x38>)
 8017b3c:	4c0d      	ldr	r4, [pc, #52]	; (8017b74 <__libc_init_array+0x3c>)
 8017b3e:	1b64      	subs	r4, r4, r5
 8017b40:	10a4      	asrs	r4, r4, #2
 8017b42:	2600      	movs	r6, #0
 8017b44:	42a6      	cmp	r6, r4
 8017b46:	d109      	bne.n	8017b5c <__libc_init_array+0x24>
 8017b48:	4d0b      	ldr	r5, [pc, #44]	; (8017b78 <__libc_init_array+0x40>)
 8017b4a:	4c0c      	ldr	r4, [pc, #48]	; (8017b7c <__libc_init_array+0x44>)
 8017b4c:	f000 ffe8 	bl	8018b20 <_init>
 8017b50:	1b64      	subs	r4, r4, r5
 8017b52:	10a4      	asrs	r4, r4, #2
 8017b54:	2600      	movs	r6, #0
 8017b56:	42a6      	cmp	r6, r4
 8017b58:	d105      	bne.n	8017b66 <__libc_init_array+0x2e>
 8017b5a:	bd70      	pop	{r4, r5, r6, pc}
 8017b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017b60:	4798      	blx	r3
 8017b62:	3601      	adds	r6, #1
 8017b64:	e7ee      	b.n	8017b44 <__libc_init_array+0xc>
 8017b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8017b6a:	4798      	blx	r3
 8017b6c:	3601      	adds	r6, #1
 8017b6e:	e7f2      	b.n	8017b56 <__libc_init_array+0x1e>
 8017b70:	0801c390 	.word	0x0801c390
 8017b74:	0801c390 	.word	0x0801c390
 8017b78:	0801c390 	.word	0x0801c390
 8017b7c:	0801c394 	.word	0x0801c394

08017b80 <__retarget_lock_init_recursive>:
 8017b80:	4770      	bx	lr

08017b82 <__retarget_lock_acquire_recursive>:
 8017b82:	4770      	bx	lr

08017b84 <__retarget_lock_release_recursive>:
 8017b84:	4770      	bx	lr

08017b86 <strcpy>:
 8017b86:	4603      	mov	r3, r0
 8017b88:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017b8c:	f803 2b01 	strb.w	r2, [r3], #1
 8017b90:	2a00      	cmp	r2, #0
 8017b92:	d1f9      	bne.n	8017b88 <strcpy+0x2>
 8017b94:	4770      	bx	lr

08017b96 <memcpy>:
 8017b96:	440a      	add	r2, r1
 8017b98:	4291      	cmp	r1, r2
 8017b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8017b9e:	d100      	bne.n	8017ba2 <memcpy+0xc>
 8017ba0:	4770      	bx	lr
 8017ba2:	b510      	push	{r4, lr}
 8017ba4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017ba8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017bac:	4291      	cmp	r1, r2
 8017bae:	d1f9      	bne.n	8017ba4 <memcpy+0xe>
 8017bb0:	bd10      	pop	{r4, pc}
	...

08017bb4 <__assert_func>:
 8017bb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017bb6:	4614      	mov	r4, r2
 8017bb8:	461a      	mov	r2, r3
 8017bba:	4b09      	ldr	r3, [pc, #36]	; (8017be0 <__assert_func+0x2c>)
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	4605      	mov	r5, r0
 8017bc0:	68d8      	ldr	r0, [r3, #12]
 8017bc2:	b14c      	cbz	r4, 8017bd8 <__assert_func+0x24>
 8017bc4:	4b07      	ldr	r3, [pc, #28]	; (8017be4 <__assert_func+0x30>)
 8017bc6:	9100      	str	r1, [sp, #0]
 8017bc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017bcc:	4906      	ldr	r1, [pc, #24]	; (8017be8 <__assert_func+0x34>)
 8017bce:	462b      	mov	r3, r5
 8017bd0:	f000 fde8 	bl	80187a4 <fiprintf>
 8017bd4:	f000 fe9e 	bl	8018914 <abort>
 8017bd8:	4b04      	ldr	r3, [pc, #16]	; (8017bec <__assert_func+0x38>)
 8017bda:	461c      	mov	r4, r3
 8017bdc:	e7f3      	b.n	8017bc6 <__assert_func+0x12>
 8017bde:	bf00      	nop
 8017be0:	20000088 	.word	0x20000088
 8017be4:	0801c319 	.word	0x0801c319
 8017be8:	0801c326 	.word	0x0801c326
 8017bec:	0801c354 	.word	0x0801c354

08017bf0 <_free_r>:
 8017bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017bf2:	2900      	cmp	r1, #0
 8017bf4:	d044      	beq.n	8017c80 <_free_r+0x90>
 8017bf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017bfa:	9001      	str	r0, [sp, #4]
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	f1a1 0404 	sub.w	r4, r1, #4
 8017c02:	bfb8      	it	lt
 8017c04:	18e4      	addlt	r4, r4, r3
 8017c06:	f000 f8e7 	bl	8017dd8 <__malloc_lock>
 8017c0a:	4a1e      	ldr	r2, [pc, #120]	; (8017c84 <_free_r+0x94>)
 8017c0c:	9801      	ldr	r0, [sp, #4]
 8017c0e:	6813      	ldr	r3, [r2, #0]
 8017c10:	b933      	cbnz	r3, 8017c20 <_free_r+0x30>
 8017c12:	6063      	str	r3, [r4, #4]
 8017c14:	6014      	str	r4, [r2, #0]
 8017c16:	b003      	add	sp, #12
 8017c18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017c1c:	f000 b8e2 	b.w	8017de4 <__malloc_unlock>
 8017c20:	42a3      	cmp	r3, r4
 8017c22:	d908      	bls.n	8017c36 <_free_r+0x46>
 8017c24:	6825      	ldr	r5, [r4, #0]
 8017c26:	1961      	adds	r1, r4, r5
 8017c28:	428b      	cmp	r3, r1
 8017c2a:	bf01      	itttt	eq
 8017c2c:	6819      	ldreq	r1, [r3, #0]
 8017c2e:	685b      	ldreq	r3, [r3, #4]
 8017c30:	1949      	addeq	r1, r1, r5
 8017c32:	6021      	streq	r1, [r4, #0]
 8017c34:	e7ed      	b.n	8017c12 <_free_r+0x22>
 8017c36:	461a      	mov	r2, r3
 8017c38:	685b      	ldr	r3, [r3, #4]
 8017c3a:	b10b      	cbz	r3, 8017c40 <_free_r+0x50>
 8017c3c:	42a3      	cmp	r3, r4
 8017c3e:	d9fa      	bls.n	8017c36 <_free_r+0x46>
 8017c40:	6811      	ldr	r1, [r2, #0]
 8017c42:	1855      	adds	r5, r2, r1
 8017c44:	42a5      	cmp	r5, r4
 8017c46:	d10b      	bne.n	8017c60 <_free_r+0x70>
 8017c48:	6824      	ldr	r4, [r4, #0]
 8017c4a:	4421      	add	r1, r4
 8017c4c:	1854      	adds	r4, r2, r1
 8017c4e:	42a3      	cmp	r3, r4
 8017c50:	6011      	str	r1, [r2, #0]
 8017c52:	d1e0      	bne.n	8017c16 <_free_r+0x26>
 8017c54:	681c      	ldr	r4, [r3, #0]
 8017c56:	685b      	ldr	r3, [r3, #4]
 8017c58:	6053      	str	r3, [r2, #4]
 8017c5a:	440c      	add	r4, r1
 8017c5c:	6014      	str	r4, [r2, #0]
 8017c5e:	e7da      	b.n	8017c16 <_free_r+0x26>
 8017c60:	d902      	bls.n	8017c68 <_free_r+0x78>
 8017c62:	230c      	movs	r3, #12
 8017c64:	6003      	str	r3, [r0, #0]
 8017c66:	e7d6      	b.n	8017c16 <_free_r+0x26>
 8017c68:	6825      	ldr	r5, [r4, #0]
 8017c6a:	1961      	adds	r1, r4, r5
 8017c6c:	428b      	cmp	r3, r1
 8017c6e:	bf04      	itt	eq
 8017c70:	6819      	ldreq	r1, [r3, #0]
 8017c72:	685b      	ldreq	r3, [r3, #4]
 8017c74:	6063      	str	r3, [r4, #4]
 8017c76:	bf04      	itt	eq
 8017c78:	1949      	addeq	r1, r1, r5
 8017c7a:	6021      	streq	r1, [r4, #0]
 8017c7c:	6054      	str	r4, [r2, #4]
 8017c7e:	e7ca      	b.n	8017c16 <_free_r+0x26>
 8017c80:	b003      	add	sp, #12
 8017c82:	bd30      	pop	{r4, r5, pc}
 8017c84:	2000d8e0 	.word	0x2000d8e0

08017c88 <malloc>:
 8017c88:	4b02      	ldr	r3, [pc, #8]	; (8017c94 <malloc+0xc>)
 8017c8a:	4601      	mov	r1, r0
 8017c8c:	6818      	ldr	r0, [r3, #0]
 8017c8e:	f000 b823 	b.w	8017cd8 <_malloc_r>
 8017c92:	bf00      	nop
 8017c94:	20000088 	.word	0x20000088

08017c98 <sbrk_aligned>:
 8017c98:	b570      	push	{r4, r5, r6, lr}
 8017c9a:	4e0e      	ldr	r6, [pc, #56]	; (8017cd4 <sbrk_aligned+0x3c>)
 8017c9c:	460c      	mov	r4, r1
 8017c9e:	6831      	ldr	r1, [r6, #0]
 8017ca0:	4605      	mov	r5, r0
 8017ca2:	b911      	cbnz	r1, 8017caa <sbrk_aligned+0x12>
 8017ca4:	f000 fe26 	bl	80188f4 <_sbrk_r>
 8017ca8:	6030      	str	r0, [r6, #0]
 8017caa:	4621      	mov	r1, r4
 8017cac:	4628      	mov	r0, r5
 8017cae:	f000 fe21 	bl	80188f4 <_sbrk_r>
 8017cb2:	1c43      	adds	r3, r0, #1
 8017cb4:	d00a      	beq.n	8017ccc <sbrk_aligned+0x34>
 8017cb6:	1cc4      	adds	r4, r0, #3
 8017cb8:	f024 0403 	bic.w	r4, r4, #3
 8017cbc:	42a0      	cmp	r0, r4
 8017cbe:	d007      	beq.n	8017cd0 <sbrk_aligned+0x38>
 8017cc0:	1a21      	subs	r1, r4, r0
 8017cc2:	4628      	mov	r0, r5
 8017cc4:	f000 fe16 	bl	80188f4 <_sbrk_r>
 8017cc8:	3001      	adds	r0, #1
 8017cca:	d101      	bne.n	8017cd0 <sbrk_aligned+0x38>
 8017ccc:	f04f 34ff 	mov.w	r4, #4294967295
 8017cd0:	4620      	mov	r0, r4
 8017cd2:	bd70      	pop	{r4, r5, r6, pc}
 8017cd4:	2000d8e4 	.word	0x2000d8e4

08017cd8 <_malloc_r>:
 8017cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017cdc:	1ccd      	adds	r5, r1, #3
 8017cde:	f025 0503 	bic.w	r5, r5, #3
 8017ce2:	3508      	adds	r5, #8
 8017ce4:	2d0c      	cmp	r5, #12
 8017ce6:	bf38      	it	cc
 8017ce8:	250c      	movcc	r5, #12
 8017cea:	2d00      	cmp	r5, #0
 8017cec:	4607      	mov	r7, r0
 8017cee:	db01      	blt.n	8017cf4 <_malloc_r+0x1c>
 8017cf0:	42a9      	cmp	r1, r5
 8017cf2:	d905      	bls.n	8017d00 <_malloc_r+0x28>
 8017cf4:	230c      	movs	r3, #12
 8017cf6:	603b      	str	r3, [r7, #0]
 8017cf8:	2600      	movs	r6, #0
 8017cfa:	4630      	mov	r0, r6
 8017cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017dd4 <_malloc_r+0xfc>
 8017d04:	f000 f868 	bl	8017dd8 <__malloc_lock>
 8017d08:	f8d8 3000 	ldr.w	r3, [r8]
 8017d0c:	461c      	mov	r4, r3
 8017d0e:	bb5c      	cbnz	r4, 8017d68 <_malloc_r+0x90>
 8017d10:	4629      	mov	r1, r5
 8017d12:	4638      	mov	r0, r7
 8017d14:	f7ff ffc0 	bl	8017c98 <sbrk_aligned>
 8017d18:	1c43      	adds	r3, r0, #1
 8017d1a:	4604      	mov	r4, r0
 8017d1c:	d155      	bne.n	8017dca <_malloc_r+0xf2>
 8017d1e:	f8d8 4000 	ldr.w	r4, [r8]
 8017d22:	4626      	mov	r6, r4
 8017d24:	2e00      	cmp	r6, #0
 8017d26:	d145      	bne.n	8017db4 <_malloc_r+0xdc>
 8017d28:	2c00      	cmp	r4, #0
 8017d2a:	d048      	beq.n	8017dbe <_malloc_r+0xe6>
 8017d2c:	6823      	ldr	r3, [r4, #0]
 8017d2e:	4631      	mov	r1, r6
 8017d30:	4638      	mov	r0, r7
 8017d32:	eb04 0903 	add.w	r9, r4, r3
 8017d36:	f000 fddd 	bl	80188f4 <_sbrk_r>
 8017d3a:	4581      	cmp	r9, r0
 8017d3c:	d13f      	bne.n	8017dbe <_malloc_r+0xe6>
 8017d3e:	6821      	ldr	r1, [r4, #0]
 8017d40:	1a6d      	subs	r5, r5, r1
 8017d42:	4629      	mov	r1, r5
 8017d44:	4638      	mov	r0, r7
 8017d46:	f7ff ffa7 	bl	8017c98 <sbrk_aligned>
 8017d4a:	3001      	adds	r0, #1
 8017d4c:	d037      	beq.n	8017dbe <_malloc_r+0xe6>
 8017d4e:	6823      	ldr	r3, [r4, #0]
 8017d50:	442b      	add	r3, r5
 8017d52:	6023      	str	r3, [r4, #0]
 8017d54:	f8d8 3000 	ldr.w	r3, [r8]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d038      	beq.n	8017dce <_malloc_r+0xf6>
 8017d5c:	685a      	ldr	r2, [r3, #4]
 8017d5e:	42a2      	cmp	r2, r4
 8017d60:	d12b      	bne.n	8017dba <_malloc_r+0xe2>
 8017d62:	2200      	movs	r2, #0
 8017d64:	605a      	str	r2, [r3, #4]
 8017d66:	e00f      	b.n	8017d88 <_malloc_r+0xb0>
 8017d68:	6822      	ldr	r2, [r4, #0]
 8017d6a:	1b52      	subs	r2, r2, r5
 8017d6c:	d41f      	bmi.n	8017dae <_malloc_r+0xd6>
 8017d6e:	2a0b      	cmp	r2, #11
 8017d70:	d917      	bls.n	8017da2 <_malloc_r+0xca>
 8017d72:	1961      	adds	r1, r4, r5
 8017d74:	42a3      	cmp	r3, r4
 8017d76:	6025      	str	r5, [r4, #0]
 8017d78:	bf18      	it	ne
 8017d7a:	6059      	strne	r1, [r3, #4]
 8017d7c:	6863      	ldr	r3, [r4, #4]
 8017d7e:	bf08      	it	eq
 8017d80:	f8c8 1000 	streq.w	r1, [r8]
 8017d84:	5162      	str	r2, [r4, r5]
 8017d86:	604b      	str	r3, [r1, #4]
 8017d88:	4638      	mov	r0, r7
 8017d8a:	f104 060b 	add.w	r6, r4, #11
 8017d8e:	f000 f829 	bl	8017de4 <__malloc_unlock>
 8017d92:	f026 0607 	bic.w	r6, r6, #7
 8017d96:	1d23      	adds	r3, r4, #4
 8017d98:	1af2      	subs	r2, r6, r3
 8017d9a:	d0ae      	beq.n	8017cfa <_malloc_r+0x22>
 8017d9c:	1b9b      	subs	r3, r3, r6
 8017d9e:	50a3      	str	r3, [r4, r2]
 8017da0:	e7ab      	b.n	8017cfa <_malloc_r+0x22>
 8017da2:	42a3      	cmp	r3, r4
 8017da4:	6862      	ldr	r2, [r4, #4]
 8017da6:	d1dd      	bne.n	8017d64 <_malloc_r+0x8c>
 8017da8:	f8c8 2000 	str.w	r2, [r8]
 8017dac:	e7ec      	b.n	8017d88 <_malloc_r+0xb0>
 8017dae:	4623      	mov	r3, r4
 8017db0:	6864      	ldr	r4, [r4, #4]
 8017db2:	e7ac      	b.n	8017d0e <_malloc_r+0x36>
 8017db4:	4634      	mov	r4, r6
 8017db6:	6876      	ldr	r6, [r6, #4]
 8017db8:	e7b4      	b.n	8017d24 <_malloc_r+0x4c>
 8017dba:	4613      	mov	r3, r2
 8017dbc:	e7cc      	b.n	8017d58 <_malloc_r+0x80>
 8017dbe:	230c      	movs	r3, #12
 8017dc0:	603b      	str	r3, [r7, #0]
 8017dc2:	4638      	mov	r0, r7
 8017dc4:	f000 f80e 	bl	8017de4 <__malloc_unlock>
 8017dc8:	e797      	b.n	8017cfa <_malloc_r+0x22>
 8017dca:	6025      	str	r5, [r4, #0]
 8017dcc:	e7dc      	b.n	8017d88 <_malloc_r+0xb0>
 8017dce:	605b      	str	r3, [r3, #4]
 8017dd0:	deff      	udf	#255	; 0xff
 8017dd2:	bf00      	nop
 8017dd4:	2000d8e0 	.word	0x2000d8e0

08017dd8 <__malloc_lock>:
 8017dd8:	4801      	ldr	r0, [pc, #4]	; (8017de0 <__malloc_lock+0x8>)
 8017dda:	f7ff bed2 	b.w	8017b82 <__retarget_lock_acquire_recursive>
 8017dde:	bf00      	nop
 8017de0:	2000d8dc 	.word	0x2000d8dc

08017de4 <__malloc_unlock>:
 8017de4:	4801      	ldr	r0, [pc, #4]	; (8017dec <__malloc_unlock+0x8>)
 8017de6:	f7ff becd 	b.w	8017b84 <__retarget_lock_release_recursive>
 8017dea:	bf00      	nop
 8017dec:	2000d8dc 	.word	0x2000d8dc

08017df0 <__ssputs_r>:
 8017df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017df4:	688e      	ldr	r6, [r1, #8]
 8017df6:	461f      	mov	r7, r3
 8017df8:	42be      	cmp	r6, r7
 8017dfa:	680b      	ldr	r3, [r1, #0]
 8017dfc:	4682      	mov	sl, r0
 8017dfe:	460c      	mov	r4, r1
 8017e00:	4690      	mov	r8, r2
 8017e02:	d82c      	bhi.n	8017e5e <__ssputs_r+0x6e>
 8017e04:	898a      	ldrh	r2, [r1, #12]
 8017e06:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017e0a:	d026      	beq.n	8017e5a <__ssputs_r+0x6a>
 8017e0c:	6965      	ldr	r5, [r4, #20]
 8017e0e:	6909      	ldr	r1, [r1, #16]
 8017e10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017e14:	eba3 0901 	sub.w	r9, r3, r1
 8017e18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017e1c:	1c7b      	adds	r3, r7, #1
 8017e1e:	444b      	add	r3, r9
 8017e20:	106d      	asrs	r5, r5, #1
 8017e22:	429d      	cmp	r5, r3
 8017e24:	bf38      	it	cc
 8017e26:	461d      	movcc	r5, r3
 8017e28:	0553      	lsls	r3, r2, #21
 8017e2a:	d527      	bpl.n	8017e7c <__ssputs_r+0x8c>
 8017e2c:	4629      	mov	r1, r5
 8017e2e:	f7ff ff53 	bl	8017cd8 <_malloc_r>
 8017e32:	4606      	mov	r6, r0
 8017e34:	b360      	cbz	r0, 8017e90 <__ssputs_r+0xa0>
 8017e36:	6921      	ldr	r1, [r4, #16]
 8017e38:	464a      	mov	r2, r9
 8017e3a:	f7ff feac 	bl	8017b96 <memcpy>
 8017e3e:	89a3      	ldrh	r3, [r4, #12]
 8017e40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017e48:	81a3      	strh	r3, [r4, #12]
 8017e4a:	6126      	str	r6, [r4, #16]
 8017e4c:	6165      	str	r5, [r4, #20]
 8017e4e:	444e      	add	r6, r9
 8017e50:	eba5 0509 	sub.w	r5, r5, r9
 8017e54:	6026      	str	r6, [r4, #0]
 8017e56:	60a5      	str	r5, [r4, #8]
 8017e58:	463e      	mov	r6, r7
 8017e5a:	42be      	cmp	r6, r7
 8017e5c:	d900      	bls.n	8017e60 <__ssputs_r+0x70>
 8017e5e:	463e      	mov	r6, r7
 8017e60:	6820      	ldr	r0, [r4, #0]
 8017e62:	4632      	mov	r2, r6
 8017e64:	4641      	mov	r1, r8
 8017e66:	f7ff fd96 	bl	8017996 <memmove>
 8017e6a:	68a3      	ldr	r3, [r4, #8]
 8017e6c:	1b9b      	subs	r3, r3, r6
 8017e6e:	60a3      	str	r3, [r4, #8]
 8017e70:	6823      	ldr	r3, [r4, #0]
 8017e72:	4433      	add	r3, r6
 8017e74:	6023      	str	r3, [r4, #0]
 8017e76:	2000      	movs	r0, #0
 8017e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e7c:	462a      	mov	r2, r5
 8017e7e:	f000 fd50 	bl	8018922 <_realloc_r>
 8017e82:	4606      	mov	r6, r0
 8017e84:	2800      	cmp	r0, #0
 8017e86:	d1e0      	bne.n	8017e4a <__ssputs_r+0x5a>
 8017e88:	6921      	ldr	r1, [r4, #16]
 8017e8a:	4650      	mov	r0, sl
 8017e8c:	f7ff feb0 	bl	8017bf0 <_free_r>
 8017e90:	230c      	movs	r3, #12
 8017e92:	f8ca 3000 	str.w	r3, [sl]
 8017e96:	89a3      	ldrh	r3, [r4, #12]
 8017e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e9c:	81a3      	strh	r3, [r4, #12]
 8017e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8017ea2:	e7e9      	b.n	8017e78 <__ssputs_r+0x88>

08017ea4 <_svfiprintf_r>:
 8017ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ea8:	4698      	mov	r8, r3
 8017eaa:	898b      	ldrh	r3, [r1, #12]
 8017eac:	061b      	lsls	r3, r3, #24
 8017eae:	b09d      	sub	sp, #116	; 0x74
 8017eb0:	4607      	mov	r7, r0
 8017eb2:	460d      	mov	r5, r1
 8017eb4:	4614      	mov	r4, r2
 8017eb6:	d50e      	bpl.n	8017ed6 <_svfiprintf_r+0x32>
 8017eb8:	690b      	ldr	r3, [r1, #16]
 8017eba:	b963      	cbnz	r3, 8017ed6 <_svfiprintf_r+0x32>
 8017ebc:	2140      	movs	r1, #64	; 0x40
 8017ebe:	f7ff ff0b 	bl	8017cd8 <_malloc_r>
 8017ec2:	6028      	str	r0, [r5, #0]
 8017ec4:	6128      	str	r0, [r5, #16]
 8017ec6:	b920      	cbnz	r0, 8017ed2 <_svfiprintf_r+0x2e>
 8017ec8:	230c      	movs	r3, #12
 8017eca:	603b      	str	r3, [r7, #0]
 8017ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8017ed0:	e0d0      	b.n	8018074 <_svfiprintf_r+0x1d0>
 8017ed2:	2340      	movs	r3, #64	; 0x40
 8017ed4:	616b      	str	r3, [r5, #20]
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8017eda:	2320      	movs	r3, #32
 8017edc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017ee0:	f8cd 800c 	str.w	r8, [sp, #12]
 8017ee4:	2330      	movs	r3, #48	; 0x30
 8017ee6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801808c <_svfiprintf_r+0x1e8>
 8017eea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017eee:	f04f 0901 	mov.w	r9, #1
 8017ef2:	4623      	mov	r3, r4
 8017ef4:	469a      	mov	sl, r3
 8017ef6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017efa:	b10a      	cbz	r2, 8017f00 <_svfiprintf_r+0x5c>
 8017efc:	2a25      	cmp	r2, #37	; 0x25
 8017efe:	d1f9      	bne.n	8017ef4 <_svfiprintf_r+0x50>
 8017f00:	ebba 0b04 	subs.w	fp, sl, r4
 8017f04:	d00b      	beq.n	8017f1e <_svfiprintf_r+0x7a>
 8017f06:	465b      	mov	r3, fp
 8017f08:	4622      	mov	r2, r4
 8017f0a:	4629      	mov	r1, r5
 8017f0c:	4638      	mov	r0, r7
 8017f0e:	f7ff ff6f 	bl	8017df0 <__ssputs_r>
 8017f12:	3001      	adds	r0, #1
 8017f14:	f000 80a9 	beq.w	801806a <_svfiprintf_r+0x1c6>
 8017f18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017f1a:	445a      	add	r2, fp
 8017f1c:	9209      	str	r2, [sp, #36]	; 0x24
 8017f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	f000 80a1 	beq.w	801806a <_svfiprintf_r+0x1c6>
 8017f28:	2300      	movs	r3, #0
 8017f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8017f2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017f32:	f10a 0a01 	add.w	sl, sl, #1
 8017f36:	9304      	str	r3, [sp, #16]
 8017f38:	9307      	str	r3, [sp, #28]
 8017f3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017f3e:	931a      	str	r3, [sp, #104]	; 0x68
 8017f40:	4654      	mov	r4, sl
 8017f42:	2205      	movs	r2, #5
 8017f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f48:	4850      	ldr	r0, [pc, #320]	; (801808c <_svfiprintf_r+0x1e8>)
 8017f4a:	f7e8 f951 	bl	80001f0 <memchr>
 8017f4e:	9a04      	ldr	r2, [sp, #16]
 8017f50:	b9d8      	cbnz	r0, 8017f8a <_svfiprintf_r+0xe6>
 8017f52:	06d0      	lsls	r0, r2, #27
 8017f54:	bf44      	itt	mi
 8017f56:	2320      	movmi	r3, #32
 8017f58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017f5c:	0711      	lsls	r1, r2, #28
 8017f5e:	bf44      	itt	mi
 8017f60:	232b      	movmi	r3, #43	; 0x2b
 8017f62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017f66:	f89a 3000 	ldrb.w	r3, [sl]
 8017f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8017f6c:	d015      	beq.n	8017f9a <_svfiprintf_r+0xf6>
 8017f6e:	9a07      	ldr	r2, [sp, #28]
 8017f70:	4654      	mov	r4, sl
 8017f72:	2000      	movs	r0, #0
 8017f74:	f04f 0c0a 	mov.w	ip, #10
 8017f78:	4621      	mov	r1, r4
 8017f7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017f7e:	3b30      	subs	r3, #48	; 0x30
 8017f80:	2b09      	cmp	r3, #9
 8017f82:	d94d      	bls.n	8018020 <_svfiprintf_r+0x17c>
 8017f84:	b1b0      	cbz	r0, 8017fb4 <_svfiprintf_r+0x110>
 8017f86:	9207      	str	r2, [sp, #28]
 8017f88:	e014      	b.n	8017fb4 <_svfiprintf_r+0x110>
 8017f8a:	eba0 0308 	sub.w	r3, r0, r8
 8017f8e:	fa09 f303 	lsl.w	r3, r9, r3
 8017f92:	4313      	orrs	r3, r2
 8017f94:	9304      	str	r3, [sp, #16]
 8017f96:	46a2      	mov	sl, r4
 8017f98:	e7d2      	b.n	8017f40 <_svfiprintf_r+0x9c>
 8017f9a:	9b03      	ldr	r3, [sp, #12]
 8017f9c:	1d19      	adds	r1, r3, #4
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	9103      	str	r1, [sp, #12]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	bfbb      	ittet	lt
 8017fa6:	425b      	neglt	r3, r3
 8017fa8:	f042 0202 	orrlt.w	r2, r2, #2
 8017fac:	9307      	strge	r3, [sp, #28]
 8017fae:	9307      	strlt	r3, [sp, #28]
 8017fb0:	bfb8      	it	lt
 8017fb2:	9204      	strlt	r2, [sp, #16]
 8017fb4:	7823      	ldrb	r3, [r4, #0]
 8017fb6:	2b2e      	cmp	r3, #46	; 0x2e
 8017fb8:	d10c      	bne.n	8017fd4 <_svfiprintf_r+0x130>
 8017fba:	7863      	ldrb	r3, [r4, #1]
 8017fbc:	2b2a      	cmp	r3, #42	; 0x2a
 8017fbe:	d134      	bne.n	801802a <_svfiprintf_r+0x186>
 8017fc0:	9b03      	ldr	r3, [sp, #12]
 8017fc2:	1d1a      	adds	r2, r3, #4
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	9203      	str	r2, [sp, #12]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	bfb8      	it	lt
 8017fcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8017fd0:	3402      	adds	r4, #2
 8017fd2:	9305      	str	r3, [sp, #20]
 8017fd4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801809c <_svfiprintf_r+0x1f8>
 8017fd8:	7821      	ldrb	r1, [r4, #0]
 8017fda:	2203      	movs	r2, #3
 8017fdc:	4650      	mov	r0, sl
 8017fde:	f7e8 f907 	bl	80001f0 <memchr>
 8017fe2:	b138      	cbz	r0, 8017ff4 <_svfiprintf_r+0x150>
 8017fe4:	9b04      	ldr	r3, [sp, #16]
 8017fe6:	eba0 000a 	sub.w	r0, r0, sl
 8017fea:	2240      	movs	r2, #64	; 0x40
 8017fec:	4082      	lsls	r2, r0
 8017fee:	4313      	orrs	r3, r2
 8017ff0:	3401      	adds	r4, #1
 8017ff2:	9304      	str	r3, [sp, #16]
 8017ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ff8:	4825      	ldr	r0, [pc, #148]	; (8018090 <_svfiprintf_r+0x1ec>)
 8017ffa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017ffe:	2206      	movs	r2, #6
 8018000:	f7e8 f8f6 	bl	80001f0 <memchr>
 8018004:	2800      	cmp	r0, #0
 8018006:	d038      	beq.n	801807a <_svfiprintf_r+0x1d6>
 8018008:	4b22      	ldr	r3, [pc, #136]	; (8018094 <_svfiprintf_r+0x1f0>)
 801800a:	bb1b      	cbnz	r3, 8018054 <_svfiprintf_r+0x1b0>
 801800c:	9b03      	ldr	r3, [sp, #12]
 801800e:	3307      	adds	r3, #7
 8018010:	f023 0307 	bic.w	r3, r3, #7
 8018014:	3308      	adds	r3, #8
 8018016:	9303      	str	r3, [sp, #12]
 8018018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801801a:	4433      	add	r3, r6
 801801c:	9309      	str	r3, [sp, #36]	; 0x24
 801801e:	e768      	b.n	8017ef2 <_svfiprintf_r+0x4e>
 8018020:	fb0c 3202 	mla	r2, ip, r2, r3
 8018024:	460c      	mov	r4, r1
 8018026:	2001      	movs	r0, #1
 8018028:	e7a6      	b.n	8017f78 <_svfiprintf_r+0xd4>
 801802a:	2300      	movs	r3, #0
 801802c:	3401      	adds	r4, #1
 801802e:	9305      	str	r3, [sp, #20]
 8018030:	4619      	mov	r1, r3
 8018032:	f04f 0c0a 	mov.w	ip, #10
 8018036:	4620      	mov	r0, r4
 8018038:	f810 2b01 	ldrb.w	r2, [r0], #1
 801803c:	3a30      	subs	r2, #48	; 0x30
 801803e:	2a09      	cmp	r2, #9
 8018040:	d903      	bls.n	801804a <_svfiprintf_r+0x1a6>
 8018042:	2b00      	cmp	r3, #0
 8018044:	d0c6      	beq.n	8017fd4 <_svfiprintf_r+0x130>
 8018046:	9105      	str	r1, [sp, #20]
 8018048:	e7c4      	b.n	8017fd4 <_svfiprintf_r+0x130>
 801804a:	fb0c 2101 	mla	r1, ip, r1, r2
 801804e:	4604      	mov	r4, r0
 8018050:	2301      	movs	r3, #1
 8018052:	e7f0      	b.n	8018036 <_svfiprintf_r+0x192>
 8018054:	ab03      	add	r3, sp, #12
 8018056:	9300      	str	r3, [sp, #0]
 8018058:	462a      	mov	r2, r5
 801805a:	4b0f      	ldr	r3, [pc, #60]	; (8018098 <_svfiprintf_r+0x1f4>)
 801805c:	a904      	add	r1, sp, #16
 801805e:	4638      	mov	r0, r7
 8018060:	f3af 8000 	nop.w
 8018064:	1c42      	adds	r2, r0, #1
 8018066:	4606      	mov	r6, r0
 8018068:	d1d6      	bne.n	8018018 <_svfiprintf_r+0x174>
 801806a:	89ab      	ldrh	r3, [r5, #12]
 801806c:	065b      	lsls	r3, r3, #25
 801806e:	f53f af2d 	bmi.w	8017ecc <_svfiprintf_r+0x28>
 8018072:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018074:	b01d      	add	sp, #116	; 0x74
 8018076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801807a:	ab03      	add	r3, sp, #12
 801807c:	9300      	str	r3, [sp, #0]
 801807e:	462a      	mov	r2, r5
 8018080:	4b05      	ldr	r3, [pc, #20]	; (8018098 <_svfiprintf_r+0x1f4>)
 8018082:	a904      	add	r1, sp, #16
 8018084:	4638      	mov	r0, r7
 8018086:	f000 f9bd 	bl	8018404 <_printf_i>
 801808a:	e7eb      	b.n	8018064 <_svfiprintf_r+0x1c0>
 801808c:	0801c355 	.word	0x0801c355
 8018090:	0801c35f 	.word	0x0801c35f
 8018094:	00000000 	.word	0x00000000
 8018098:	08017df1 	.word	0x08017df1
 801809c:	0801c35b 	.word	0x0801c35b

080180a0 <__sfputc_r>:
 80180a0:	6893      	ldr	r3, [r2, #8]
 80180a2:	3b01      	subs	r3, #1
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	b410      	push	{r4}
 80180a8:	6093      	str	r3, [r2, #8]
 80180aa:	da08      	bge.n	80180be <__sfputc_r+0x1e>
 80180ac:	6994      	ldr	r4, [r2, #24]
 80180ae:	42a3      	cmp	r3, r4
 80180b0:	db01      	blt.n	80180b6 <__sfputc_r+0x16>
 80180b2:	290a      	cmp	r1, #10
 80180b4:	d103      	bne.n	80180be <__sfputc_r+0x1e>
 80180b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180ba:	f000 bb85 	b.w	80187c8 <__swbuf_r>
 80180be:	6813      	ldr	r3, [r2, #0]
 80180c0:	1c58      	adds	r0, r3, #1
 80180c2:	6010      	str	r0, [r2, #0]
 80180c4:	7019      	strb	r1, [r3, #0]
 80180c6:	4608      	mov	r0, r1
 80180c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180cc:	4770      	bx	lr

080180ce <__sfputs_r>:
 80180ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180d0:	4606      	mov	r6, r0
 80180d2:	460f      	mov	r7, r1
 80180d4:	4614      	mov	r4, r2
 80180d6:	18d5      	adds	r5, r2, r3
 80180d8:	42ac      	cmp	r4, r5
 80180da:	d101      	bne.n	80180e0 <__sfputs_r+0x12>
 80180dc:	2000      	movs	r0, #0
 80180de:	e007      	b.n	80180f0 <__sfputs_r+0x22>
 80180e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180e4:	463a      	mov	r2, r7
 80180e6:	4630      	mov	r0, r6
 80180e8:	f7ff ffda 	bl	80180a0 <__sfputc_r>
 80180ec:	1c43      	adds	r3, r0, #1
 80180ee:	d1f3      	bne.n	80180d8 <__sfputs_r+0xa>
 80180f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080180f4 <_vfiprintf_r>:
 80180f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180f8:	460d      	mov	r5, r1
 80180fa:	b09d      	sub	sp, #116	; 0x74
 80180fc:	4614      	mov	r4, r2
 80180fe:	4698      	mov	r8, r3
 8018100:	4606      	mov	r6, r0
 8018102:	b118      	cbz	r0, 801810c <_vfiprintf_r+0x18>
 8018104:	6a03      	ldr	r3, [r0, #32]
 8018106:	b90b      	cbnz	r3, 801810c <_vfiprintf_r+0x18>
 8018108:	f7ff fb8a 	bl	8017820 <__sinit>
 801810c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801810e:	07d9      	lsls	r1, r3, #31
 8018110:	d405      	bmi.n	801811e <_vfiprintf_r+0x2a>
 8018112:	89ab      	ldrh	r3, [r5, #12]
 8018114:	059a      	lsls	r2, r3, #22
 8018116:	d402      	bmi.n	801811e <_vfiprintf_r+0x2a>
 8018118:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801811a:	f7ff fd32 	bl	8017b82 <__retarget_lock_acquire_recursive>
 801811e:	89ab      	ldrh	r3, [r5, #12]
 8018120:	071b      	lsls	r3, r3, #28
 8018122:	d501      	bpl.n	8018128 <_vfiprintf_r+0x34>
 8018124:	692b      	ldr	r3, [r5, #16]
 8018126:	b99b      	cbnz	r3, 8018150 <_vfiprintf_r+0x5c>
 8018128:	4629      	mov	r1, r5
 801812a:	4630      	mov	r0, r6
 801812c:	f000 fb8a 	bl	8018844 <__swsetup_r>
 8018130:	b170      	cbz	r0, 8018150 <_vfiprintf_r+0x5c>
 8018132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018134:	07dc      	lsls	r4, r3, #31
 8018136:	d504      	bpl.n	8018142 <_vfiprintf_r+0x4e>
 8018138:	f04f 30ff 	mov.w	r0, #4294967295
 801813c:	b01d      	add	sp, #116	; 0x74
 801813e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018142:	89ab      	ldrh	r3, [r5, #12]
 8018144:	0598      	lsls	r0, r3, #22
 8018146:	d4f7      	bmi.n	8018138 <_vfiprintf_r+0x44>
 8018148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801814a:	f7ff fd1b 	bl	8017b84 <__retarget_lock_release_recursive>
 801814e:	e7f3      	b.n	8018138 <_vfiprintf_r+0x44>
 8018150:	2300      	movs	r3, #0
 8018152:	9309      	str	r3, [sp, #36]	; 0x24
 8018154:	2320      	movs	r3, #32
 8018156:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801815a:	f8cd 800c 	str.w	r8, [sp, #12]
 801815e:	2330      	movs	r3, #48	; 0x30
 8018160:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018314 <_vfiprintf_r+0x220>
 8018164:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018168:	f04f 0901 	mov.w	r9, #1
 801816c:	4623      	mov	r3, r4
 801816e:	469a      	mov	sl, r3
 8018170:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018174:	b10a      	cbz	r2, 801817a <_vfiprintf_r+0x86>
 8018176:	2a25      	cmp	r2, #37	; 0x25
 8018178:	d1f9      	bne.n	801816e <_vfiprintf_r+0x7a>
 801817a:	ebba 0b04 	subs.w	fp, sl, r4
 801817e:	d00b      	beq.n	8018198 <_vfiprintf_r+0xa4>
 8018180:	465b      	mov	r3, fp
 8018182:	4622      	mov	r2, r4
 8018184:	4629      	mov	r1, r5
 8018186:	4630      	mov	r0, r6
 8018188:	f7ff ffa1 	bl	80180ce <__sfputs_r>
 801818c:	3001      	adds	r0, #1
 801818e:	f000 80a9 	beq.w	80182e4 <_vfiprintf_r+0x1f0>
 8018192:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018194:	445a      	add	r2, fp
 8018196:	9209      	str	r2, [sp, #36]	; 0x24
 8018198:	f89a 3000 	ldrb.w	r3, [sl]
 801819c:	2b00      	cmp	r3, #0
 801819e:	f000 80a1 	beq.w	80182e4 <_vfiprintf_r+0x1f0>
 80181a2:	2300      	movs	r3, #0
 80181a4:	f04f 32ff 	mov.w	r2, #4294967295
 80181a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80181ac:	f10a 0a01 	add.w	sl, sl, #1
 80181b0:	9304      	str	r3, [sp, #16]
 80181b2:	9307      	str	r3, [sp, #28]
 80181b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80181b8:	931a      	str	r3, [sp, #104]	; 0x68
 80181ba:	4654      	mov	r4, sl
 80181bc:	2205      	movs	r2, #5
 80181be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181c2:	4854      	ldr	r0, [pc, #336]	; (8018314 <_vfiprintf_r+0x220>)
 80181c4:	f7e8 f814 	bl	80001f0 <memchr>
 80181c8:	9a04      	ldr	r2, [sp, #16]
 80181ca:	b9d8      	cbnz	r0, 8018204 <_vfiprintf_r+0x110>
 80181cc:	06d1      	lsls	r1, r2, #27
 80181ce:	bf44      	itt	mi
 80181d0:	2320      	movmi	r3, #32
 80181d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80181d6:	0713      	lsls	r3, r2, #28
 80181d8:	bf44      	itt	mi
 80181da:	232b      	movmi	r3, #43	; 0x2b
 80181dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80181e0:	f89a 3000 	ldrb.w	r3, [sl]
 80181e4:	2b2a      	cmp	r3, #42	; 0x2a
 80181e6:	d015      	beq.n	8018214 <_vfiprintf_r+0x120>
 80181e8:	9a07      	ldr	r2, [sp, #28]
 80181ea:	4654      	mov	r4, sl
 80181ec:	2000      	movs	r0, #0
 80181ee:	f04f 0c0a 	mov.w	ip, #10
 80181f2:	4621      	mov	r1, r4
 80181f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80181f8:	3b30      	subs	r3, #48	; 0x30
 80181fa:	2b09      	cmp	r3, #9
 80181fc:	d94d      	bls.n	801829a <_vfiprintf_r+0x1a6>
 80181fe:	b1b0      	cbz	r0, 801822e <_vfiprintf_r+0x13a>
 8018200:	9207      	str	r2, [sp, #28]
 8018202:	e014      	b.n	801822e <_vfiprintf_r+0x13a>
 8018204:	eba0 0308 	sub.w	r3, r0, r8
 8018208:	fa09 f303 	lsl.w	r3, r9, r3
 801820c:	4313      	orrs	r3, r2
 801820e:	9304      	str	r3, [sp, #16]
 8018210:	46a2      	mov	sl, r4
 8018212:	e7d2      	b.n	80181ba <_vfiprintf_r+0xc6>
 8018214:	9b03      	ldr	r3, [sp, #12]
 8018216:	1d19      	adds	r1, r3, #4
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	9103      	str	r1, [sp, #12]
 801821c:	2b00      	cmp	r3, #0
 801821e:	bfbb      	ittet	lt
 8018220:	425b      	neglt	r3, r3
 8018222:	f042 0202 	orrlt.w	r2, r2, #2
 8018226:	9307      	strge	r3, [sp, #28]
 8018228:	9307      	strlt	r3, [sp, #28]
 801822a:	bfb8      	it	lt
 801822c:	9204      	strlt	r2, [sp, #16]
 801822e:	7823      	ldrb	r3, [r4, #0]
 8018230:	2b2e      	cmp	r3, #46	; 0x2e
 8018232:	d10c      	bne.n	801824e <_vfiprintf_r+0x15a>
 8018234:	7863      	ldrb	r3, [r4, #1]
 8018236:	2b2a      	cmp	r3, #42	; 0x2a
 8018238:	d134      	bne.n	80182a4 <_vfiprintf_r+0x1b0>
 801823a:	9b03      	ldr	r3, [sp, #12]
 801823c:	1d1a      	adds	r2, r3, #4
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	9203      	str	r2, [sp, #12]
 8018242:	2b00      	cmp	r3, #0
 8018244:	bfb8      	it	lt
 8018246:	f04f 33ff 	movlt.w	r3, #4294967295
 801824a:	3402      	adds	r4, #2
 801824c:	9305      	str	r3, [sp, #20]
 801824e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018324 <_vfiprintf_r+0x230>
 8018252:	7821      	ldrb	r1, [r4, #0]
 8018254:	2203      	movs	r2, #3
 8018256:	4650      	mov	r0, sl
 8018258:	f7e7 ffca 	bl	80001f0 <memchr>
 801825c:	b138      	cbz	r0, 801826e <_vfiprintf_r+0x17a>
 801825e:	9b04      	ldr	r3, [sp, #16]
 8018260:	eba0 000a 	sub.w	r0, r0, sl
 8018264:	2240      	movs	r2, #64	; 0x40
 8018266:	4082      	lsls	r2, r0
 8018268:	4313      	orrs	r3, r2
 801826a:	3401      	adds	r4, #1
 801826c:	9304      	str	r3, [sp, #16]
 801826e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018272:	4829      	ldr	r0, [pc, #164]	; (8018318 <_vfiprintf_r+0x224>)
 8018274:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018278:	2206      	movs	r2, #6
 801827a:	f7e7 ffb9 	bl	80001f0 <memchr>
 801827e:	2800      	cmp	r0, #0
 8018280:	d03f      	beq.n	8018302 <_vfiprintf_r+0x20e>
 8018282:	4b26      	ldr	r3, [pc, #152]	; (801831c <_vfiprintf_r+0x228>)
 8018284:	bb1b      	cbnz	r3, 80182ce <_vfiprintf_r+0x1da>
 8018286:	9b03      	ldr	r3, [sp, #12]
 8018288:	3307      	adds	r3, #7
 801828a:	f023 0307 	bic.w	r3, r3, #7
 801828e:	3308      	adds	r3, #8
 8018290:	9303      	str	r3, [sp, #12]
 8018292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018294:	443b      	add	r3, r7
 8018296:	9309      	str	r3, [sp, #36]	; 0x24
 8018298:	e768      	b.n	801816c <_vfiprintf_r+0x78>
 801829a:	fb0c 3202 	mla	r2, ip, r2, r3
 801829e:	460c      	mov	r4, r1
 80182a0:	2001      	movs	r0, #1
 80182a2:	e7a6      	b.n	80181f2 <_vfiprintf_r+0xfe>
 80182a4:	2300      	movs	r3, #0
 80182a6:	3401      	adds	r4, #1
 80182a8:	9305      	str	r3, [sp, #20]
 80182aa:	4619      	mov	r1, r3
 80182ac:	f04f 0c0a 	mov.w	ip, #10
 80182b0:	4620      	mov	r0, r4
 80182b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80182b6:	3a30      	subs	r2, #48	; 0x30
 80182b8:	2a09      	cmp	r2, #9
 80182ba:	d903      	bls.n	80182c4 <_vfiprintf_r+0x1d0>
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d0c6      	beq.n	801824e <_vfiprintf_r+0x15a>
 80182c0:	9105      	str	r1, [sp, #20]
 80182c2:	e7c4      	b.n	801824e <_vfiprintf_r+0x15a>
 80182c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80182c8:	4604      	mov	r4, r0
 80182ca:	2301      	movs	r3, #1
 80182cc:	e7f0      	b.n	80182b0 <_vfiprintf_r+0x1bc>
 80182ce:	ab03      	add	r3, sp, #12
 80182d0:	9300      	str	r3, [sp, #0]
 80182d2:	462a      	mov	r2, r5
 80182d4:	4b12      	ldr	r3, [pc, #72]	; (8018320 <_vfiprintf_r+0x22c>)
 80182d6:	a904      	add	r1, sp, #16
 80182d8:	4630      	mov	r0, r6
 80182da:	f3af 8000 	nop.w
 80182de:	4607      	mov	r7, r0
 80182e0:	1c78      	adds	r0, r7, #1
 80182e2:	d1d6      	bne.n	8018292 <_vfiprintf_r+0x19e>
 80182e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80182e6:	07d9      	lsls	r1, r3, #31
 80182e8:	d405      	bmi.n	80182f6 <_vfiprintf_r+0x202>
 80182ea:	89ab      	ldrh	r3, [r5, #12]
 80182ec:	059a      	lsls	r2, r3, #22
 80182ee:	d402      	bmi.n	80182f6 <_vfiprintf_r+0x202>
 80182f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80182f2:	f7ff fc47 	bl	8017b84 <__retarget_lock_release_recursive>
 80182f6:	89ab      	ldrh	r3, [r5, #12]
 80182f8:	065b      	lsls	r3, r3, #25
 80182fa:	f53f af1d 	bmi.w	8018138 <_vfiprintf_r+0x44>
 80182fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018300:	e71c      	b.n	801813c <_vfiprintf_r+0x48>
 8018302:	ab03      	add	r3, sp, #12
 8018304:	9300      	str	r3, [sp, #0]
 8018306:	462a      	mov	r2, r5
 8018308:	4b05      	ldr	r3, [pc, #20]	; (8018320 <_vfiprintf_r+0x22c>)
 801830a:	a904      	add	r1, sp, #16
 801830c:	4630      	mov	r0, r6
 801830e:	f000 f879 	bl	8018404 <_printf_i>
 8018312:	e7e4      	b.n	80182de <_vfiprintf_r+0x1ea>
 8018314:	0801c355 	.word	0x0801c355
 8018318:	0801c35f 	.word	0x0801c35f
 801831c:	00000000 	.word	0x00000000
 8018320:	080180cf 	.word	0x080180cf
 8018324:	0801c35b 	.word	0x0801c35b

08018328 <_printf_common>:
 8018328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801832c:	4616      	mov	r6, r2
 801832e:	4699      	mov	r9, r3
 8018330:	688a      	ldr	r2, [r1, #8]
 8018332:	690b      	ldr	r3, [r1, #16]
 8018334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018338:	4293      	cmp	r3, r2
 801833a:	bfb8      	it	lt
 801833c:	4613      	movlt	r3, r2
 801833e:	6033      	str	r3, [r6, #0]
 8018340:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018344:	4607      	mov	r7, r0
 8018346:	460c      	mov	r4, r1
 8018348:	b10a      	cbz	r2, 801834e <_printf_common+0x26>
 801834a:	3301      	adds	r3, #1
 801834c:	6033      	str	r3, [r6, #0]
 801834e:	6823      	ldr	r3, [r4, #0]
 8018350:	0699      	lsls	r1, r3, #26
 8018352:	bf42      	ittt	mi
 8018354:	6833      	ldrmi	r3, [r6, #0]
 8018356:	3302      	addmi	r3, #2
 8018358:	6033      	strmi	r3, [r6, #0]
 801835a:	6825      	ldr	r5, [r4, #0]
 801835c:	f015 0506 	ands.w	r5, r5, #6
 8018360:	d106      	bne.n	8018370 <_printf_common+0x48>
 8018362:	f104 0a19 	add.w	sl, r4, #25
 8018366:	68e3      	ldr	r3, [r4, #12]
 8018368:	6832      	ldr	r2, [r6, #0]
 801836a:	1a9b      	subs	r3, r3, r2
 801836c:	42ab      	cmp	r3, r5
 801836e:	dc26      	bgt.n	80183be <_printf_common+0x96>
 8018370:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018374:	1e13      	subs	r3, r2, #0
 8018376:	6822      	ldr	r2, [r4, #0]
 8018378:	bf18      	it	ne
 801837a:	2301      	movne	r3, #1
 801837c:	0692      	lsls	r2, r2, #26
 801837e:	d42b      	bmi.n	80183d8 <_printf_common+0xb0>
 8018380:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018384:	4649      	mov	r1, r9
 8018386:	4638      	mov	r0, r7
 8018388:	47c0      	blx	r8
 801838a:	3001      	adds	r0, #1
 801838c:	d01e      	beq.n	80183cc <_printf_common+0xa4>
 801838e:	6823      	ldr	r3, [r4, #0]
 8018390:	6922      	ldr	r2, [r4, #16]
 8018392:	f003 0306 	and.w	r3, r3, #6
 8018396:	2b04      	cmp	r3, #4
 8018398:	bf02      	ittt	eq
 801839a:	68e5      	ldreq	r5, [r4, #12]
 801839c:	6833      	ldreq	r3, [r6, #0]
 801839e:	1aed      	subeq	r5, r5, r3
 80183a0:	68a3      	ldr	r3, [r4, #8]
 80183a2:	bf0c      	ite	eq
 80183a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80183a8:	2500      	movne	r5, #0
 80183aa:	4293      	cmp	r3, r2
 80183ac:	bfc4      	itt	gt
 80183ae:	1a9b      	subgt	r3, r3, r2
 80183b0:	18ed      	addgt	r5, r5, r3
 80183b2:	2600      	movs	r6, #0
 80183b4:	341a      	adds	r4, #26
 80183b6:	42b5      	cmp	r5, r6
 80183b8:	d11a      	bne.n	80183f0 <_printf_common+0xc8>
 80183ba:	2000      	movs	r0, #0
 80183bc:	e008      	b.n	80183d0 <_printf_common+0xa8>
 80183be:	2301      	movs	r3, #1
 80183c0:	4652      	mov	r2, sl
 80183c2:	4649      	mov	r1, r9
 80183c4:	4638      	mov	r0, r7
 80183c6:	47c0      	blx	r8
 80183c8:	3001      	adds	r0, #1
 80183ca:	d103      	bne.n	80183d4 <_printf_common+0xac>
 80183cc:	f04f 30ff 	mov.w	r0, #4294967295
 80183d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183d4:	3501      	adds	r5, #1
 80183d6:	e7c6      	b.n	8018366 <_printf_common+0x3e>
 80183d8:	18e1      	adds	r1, r4, r3
 80183da:	1c5a      	adds	r2, r3, #1
 80183dc:	2030      	movs	r0, #48	; 0x30
 80183de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80183e2:	4422      	add	r2, r4
 80183e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80183e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80183ec:	3302      	adds	r3, #2
 80183ee:	e7c7      	b.n	8018380 <_printf_common+0x58>
 80183f0:	2301      	movs	r3, #1
 80183f2:	4622      	mov	r2, r4
 80183f4:	4649      	mov	r1, r9
 80183f6:	4638      	mov	r0, r7
 80183f8:	47c0      	blx	r8
 80183fa:	3001      	adds	r0, #1
 80183fc:	d0e6      	beq.n	80183cc <_printf_common+0xa4>
 80183fe:	3601      	adds	r6, #1
 8018400:	e7d9      	b.n	80183b6 <_printf_common+0x8e>
	...

08018404 <_printf_i>:
 8018404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018408:	7e0f      	ldrb	r7, [r1, #24]
 801840a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801840c:	2f78      	cmp	r7, #120	; 0x78
 801840e:	4691      	mov	r9, r2
 8018410:	4680      	mov	r8, r0
 8018412:	460c      	mov	r4, r1
 8018414:	469a      	mov	sl, r3
 8018416:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801841a:	d807      	bhi.n	801842c <_printf_i+0x28>
 801841c:	2f62      	cmp	r7, #98	; 0x62
 801841e:	d80a      	bhi.n	8018436 <_printf_i+0x32>
 8018420:	2f00      	cmp	r7, #0
 8018422:	f000 80d4 	beq.w	80185ce <_printf_i+0x1ca>
 8018426:	2f58      	cmp	r7, #88	; 0x58
 8018428:	f000 80c0 	beq.w	80185ac <_printf_i+0x1a8>
 801842c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018430:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018434:	e03a      	b.n	80184ac <_printf_i+0xa8>
 8018436:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801843a:	2b15      	cmp	r3, #21
 801843c:	d8f6      	bhi.n	801842c <_printf_i+0x28>
 801843e:	a101      	add	r1, pc, #4	; (adr r1, 8018444 <_printf_i+0x40>)
 8018440:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018444:	0801849d 	.word	0x0801849d
 8018448:	080184b1 	.word	0x080184b1
 801844c:	0801842d 	.word	0x0801842d
 8018450:	0801842d 	.word	0x0801842d
 8018454:	0801842d 	.word	0x0801842d
 8018458:	0801842d 	.word	0x0801842d
 801845c:	080184b1 	.word	0x080184b1
 8018460:	0801842d 	.word	0x0801842d
 8018464:	0801842d 	.word	0x0801842d
 8018468:	0801842d 	.word	0x0801842d
 801846c:	0801842d 	.word	0x0801842d
 8018470:	080185b5 	.word	0x080185b5
 8018474:	080184dd 	.word	0x080184dd
 8018478:	0801856f 	.word	0x0801856f
 801847c:	0801842d 	.word	0x0801842d
 8018480:	0801842d 	.word	0x0801842d
 8018484:	080185d7 	.word	0x080185d7
 8018488:	0801842d 	.word	0x0801842d
 801848c:	080184dd 	.word	0x080184dd
 8018490:	0801842d 	.word	0x0801842d
 8018494:	0801842d 	.word	0x0801842d
 8018498:	08018577 	.word	0x08018577
 801849c:	682b      	ldr	r3, [r5, #0]
 801849e:	1d1a      	adds	r2, r3, #4
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	602a      	str	r2, [r5, #0]
 80184a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80184a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80184ac:	2301      	movs	r3, #1
 80184ae:	e09f      	b.n	80185f0 <_printf_i+0x1ec>
 80184b0:	6820      	ldr	r0, [r4, #0]
 80184b2:	682b      	ldr	r3, [r5, #0]
 80184b4:	0607      	lsls	r7, r0, #24
 80184b6:	f103 0104 	add.w	r1, r3, #4
 80184ba:	6029      	str	r1, [r5, #0]
 80184bc:	d501      	bpl.n	80184c2 <_printf_i+0xbe>
 80184be:	681e      	ldr	r6, [r3, #0]
 80184c0:	e003      	b.n	80184ca <_printf_i+0xc6>
 80184c2:	0646      	lsls	r6, r0, #25
 80184c4:	d5fb      	bpl.n	80184be <_printf_i+0xba>
 80184c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80184ca:	2e00      	cmp	r6, #0
 80184cc:	da03      	bge.n	80184d6 <_printf_i+0xd2>
 80184ce:	232d      	movs	r3, #45	; 0x2d
 80184d0:	4276      	negs	r6, r6
 80184d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80184d6:	485a      	ldr	r0, [pc, #360]	; (8018640 <_printf_i+0x23c>)
 80184d8:	230a      	movs	r3, #10
 80184da:	e012      	b.n	8018502 <_printf_i+0xfe>
 80184dc:	682b      	ldr	r3, [r5, #0]
 80184de:	6820      	ldr	r0, [r4, #0]
 80184e0:	1d19      	adds	r1, r3, #4
 80184e2:	6029      	str	r1, [r5, #0]
 80184e4:	0605      	lsls	r5, r0, #24
 80184e6:	d501      	bpl.n	80184ec <_printf_i+0xe8>
 80184e8:	681e      	ldr	r6, [r3, #0]
 80184ea:	e002      	b.n	80184f2 <_printf_i+0xee>
 80184ec:	0641      	lsls	r1, r0, #25
 80184ee:	d5fb      	bpl.n	80184e8 <_printf_i+0xe4>
 80184f0:	881e      	ldrh	r6, [r3, #0]
 80184f2:	4853      	ldr	r0, [pc, #332]	; (8018640 <_printf_i+0x23c>)
 80184f4:	2f6f      	cmp	r7, #111	; 0x6f
 80184f6:	bf0c      	ite	eq
 80184f8:	2308      	moveq	r3, #8
 80184fa:	230a      	movne	r3, #10
 80184fc:	2100      	movs	r1, #0
 80184fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018502:	6865      	ldr	r5, [r4, #4]
 8018504:	60a5      	str	r5, [r4, #8]
 8018506:	2d00      	cmp	r5, #0
 8018508:	bfa2      	ittt	ge
 801850a:	6821      	ldrge	r1, [r4, #0]
 801850c:	f021 0104 	bicge.w	r1, r1, #4
 8018510:	6021      	strge	r1, [r4, #0]
 8018512:	b90e      	cbnz	r6, 8018518 <_printf_i+0x114>
 8018514:	2d00      	cmp	r5, #0
 8018516:	d04b      	beq.n	80185b0 <_printf_i+0x1ac>
 8018518:	4615      	mov	r5, r2
 801851a:	fbb6 f1f3 	udiv	r1, r6, r3
 801851e:	fb03 6711 	mls	r7, r3, r1, r6
 8018522:	5dc7      	ldrb	r7, [r0, r7]
 8018524:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018528:	4637      	mov	r7, r6
 801852a:	42bb      	cmp	r3, r7
 801852c:	460e      	mov	r6, r1
 801852e:	d9f4      	bls.n	801851a <_printf_i+0x116>
 8018530:	2b08      	cmp	r3, #8
 8018532:	d10b      	bne.n	801854c <_printf_i+0x148>
 8018534:	6823      	ldr	r3, [r4, #0]
 8018536:	07de      	lsls	r6, r3, #31
 8018538:	d508      	bpl.n	801854c <_printf_i+0x148>
 801853a:	6923      	ldr	r3, [r4, #16]
 801853c:	6861      	ldr	r1, [r4, #4]
 801853e:	4299      	cmp	r1, r3
 8018540:	bfde      	ittt	le
 8018542:	2330      	movle	r3, #48	; 0x30
 8018544:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018548:	f105 35ff 	addle.w	r5, r5, #4294967295
 801854c:	1b52      	subs	r2, r2, r5
 801854e:	6122      	str	r2, [r4, #16]
 8018550:	f8cd a000 	str.w	sl, [sp]
 8018554:	464b      	mov	r3, r9
 8018556:	aa03      	add	r2, sp, #12
 8018558:	4621      	mov	r1, r4
 801855a:	4640      	mov	r0, r8
 801855c:	f7ff fee4 	bl	8018328 <_printf_common>
 8018560:	3001      	adds	r0, #1
 8018562:	d14a      	bne.n	80185fa <_printf_i+0x1f6>
 8018564:	f04f 30ff 	mov.w	r0, #4294967295
 8018568:	b004      	add	sp, #16
 801856a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801856e:	6823      	ldr	r3, [r4, #0]
 8018570:	f043 0320 	orr.w	r3, r3, #32
 8018574:	6023      	str	r3, [r4, #0]
 8018576:	4833      	ldr	r0, [pc, #204]	; (8018644 <_printf_i+0x240>)
 8018578:	2778      	movs	r7, #120	; 0x78
 801857a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801857e:	6823      	ldr	r3, [r4, #0]
 8018580:	6829      	ldr	r1, [r5, #0]
 8018582:	061f      	lsls	r7, r3, #24
 8018584:	f851 6b04 	ldr.w	r6, [r1], #4
 8018588:	d402      	bmi.n	8018590 <_printf_i+0x18c>
 801858a:	065f      	lsls	r7, r3, #25
 801858c:	bf48      	it	mi
 801858e:	b2b6      	uxthmi	r6, r6
 8018590:	07df      	lsls	r7, r3, #31
 8018592:	bf48      	it	mi
 8018594:	f043 0320 	orrmi.w	r3, r3, #32
 8018598:	6029      	str	r1, [r5, #0]
 801859a:	bf48      	it	mi
 801859c:	6023      	strmi	r3, [r4, #0]
 801859e:	b91e      	cbnz	r6, 80185a8 <_printf_i+0x1a4>
 80185a0:	6823      	ldr	r3, [r4, #0]
 80185a2:	f023 0320 	bic.w	r3, r3, #32
 80185a6:	6023      	str	r3, [r4, #0]
 80185a8:	2310      	movs	r3, #16
 80185aa:	e7a7      	b.n	80184fc <_printf_i+0xf8>
 80185ac:	4824      	ldr	r0, [pc, #144]	; (8018640 <_printf_i+0x23c>)
 80185ae:	e7e4      	b.n	801857a <_printf_i+0x176>
 80185b0:	4615      	mov	r5, r2
 80185b2:	e7bd      	b.n	8018530 <_printf_i+0x12c>
 80185b4:	682b      	ldr	r3, [r5, #0]
 80185b6:	6826      	ldr	r6, [r4, #0]
 80185b8:	6961      	ldr	r1, [r4, #20]
 80185ba:	1d18      	adds	r0, r3, #4
 80185bc:	6028      	str	r0, [r5, #0]
 80185be:	0635      	lsls	r5, r6, #24
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	d501      	bpl.n	80185c8 <_printf_i+0x1c4>
 80185c4:	6019      	str	r1, [r3, #0]
 80185c6:	e002      	b.n	80185ce <_printf_i+0x1ca>
 80185c8:	0670      	lsls	r0, r6, #25
 80185ca:	d5fb      	bpl.n	80185c4 <_printf_i+0x1c0>
 80185cc:	8019      	strh	r1, [r3, #0]
 80185ce:	2300      	movs	r3, #0
 80185d0:	6123      	str	r3, [r4, #16]
 80185d2:	4615      	mov	r5, r2
 80185d4:	e7bc      	b.n	8018550 <_printf_i+0x14c>
 80185d6:	682b      	ldr	r3, [r5, #0]
 80185d8:	1d1a      	adds	r2, r3, #4
 80185da:	602a      	str	r2, [r5, #0]
 80185dc:	681d      	ldr	r5, [r3, #0]
 80185de:	6862      	ldr	r2, [r4, #4]
 80185e0:	2100      	movs	r1, #0
 80185e2:	4628      	mov	r0, r5
 80185e4:	f7e7 fe04 	bl	80001f0 <memchr>
 80185e8:	b108      	cbz	r0, 80185ee <_printf_i+0x1ea>
 80185ea:	1b40      	subs	r0, r0, r5
 80185ec:	6060      	str	r0, [r4, #4]
 80185ee:	6863      	ldr	r3, [r4, #4]
 80185f0:	6123      	str	r3, [r4, #16]
 80185f2:	2300      	movs	r3, #0
 80185f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80185f8:	e7aa      	b.n	8018550 <_printf_i+0x14c>
 80185fa:	6923      	ldr	r3, [r4, #16]
 80185fc:	462a      	mov	r2, r5
 80185fe:	4649      	mov	r1, r9
 8018600:	4640      	mov	r0, r8
 8018602:	47d0      	blx	sl
 8018604:	3001      	adds	r0, #1
 8018606:	d0ad      	beq.n	8018564 <_printf_i+0x160>
 8018608:	6823      	ldr	r3, [r4, #0]
 801860a:	079b      	lsls	r3, r3, #30
 801860c:	d413      	bmi.n	8018636 <_printf_i+0x232>
 801860e:	68e0      	ldr	r0, [r4, #12]
 8018610:	9b03      	ldr	r3, [sp, #12]
 8018612:	4298      	cmp	r0, r3
 8018614:	bfb8      	it	lt
 8018616:	4618      	movlt	r0, r3
 8018618:	e7a6      	b.n	8018568 <_printf_i+0x164>
 801861a:	2301      	movs	r3, #1
 801861c:	4632      	mov	r2, r6
 801861e:	4649      	mov	r1, r9
 8018620:	4640      	mov	r0, r8
 8018622:	47d0      	blx	sl
 8018624:	3001      	adds	r0, #1
 8018626:	d09d      	beq.n	8018564 <_printf_i+0x160>
 8018628:	3501      	adds	r5, #1
 801862a:	68e3      	ldr	r3, [r4, #12]
 801862c:	9903      	ldr	r1, [sp, #12]
 801862e:	1a5b      	subs	r3, r3, r1
 8018630:	42ab      	cmp	r3, r5
 8018632:	dcf2      	bgt.n	801861a <_printf_i+0x216>
 8018634:	e7eb      	b.n	801860e <_printf_i+0x20a>
 8018636:	2500      	movs	r5, #0
 8018638:	f104 0619 	add.w	r6, r4, #25
 801863c:	e7f5      	b.n	801862a <_printf_i+0x226>
 801863e:	bf00      	nop
 8018640:	0801c366 	.word	0x0801c366
 8018644:	0801c377 	.word	0x0801c377

08018648 <__sflush_r>:
 8018648:	898a      	ldrh	r2, [r1, #12]
 801864a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801864e:	4605      	mov	r5, r0
 8018650:	0710      	lsls	r0, r2, #28
 8018652:	460c      	mov	r4, r1
 8018654:	d458      	bmi.n	8018708 <__sflush_r+0xc0>
 8018656:	684b      	ldr	r3, [r1, #4]
 8018658:	2b00      	cmp	r3, #0
 801865a:	dc05      	bgt.n	8018668 <__sflush_r+0x20>
 801865c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801865e:	2b00      	cmp	r3, #0
 8018660:	dc02      	bgt.n	8018668 <__sflush_r+0x20>
 8018662:	2000      	movs	r0, #0
 8018664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801866a:	2e00      	cmp	r6, #0
 801866c:	d0f9      	beq.n	8018662 <__sflush_r+0x1a>
 801866e:	2300      	movs	r3, #0
 8018670:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018674:	682f      	ldr	r7, [r5, #0]
 8018676:	6a21      	ldr	r1, [r4, #32]
 8018678:	602b      	str	r3, [r5, #0]
 801867a:	d032      	beq.n	80186e2 <__sflush_r+0x9a>
 801867c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801867e:	89a3      	ldrh	r3, [r4, #12]
 8018680:	075a      	lsls	r2, r3, #29
 8018682:	d505      	bpl.n	8018690 <__sflush_r+0x48>
 8018684:	6863      	ldr	r3, [r4, #4]
 8018686:	1ac0      	subs	r0, r0, r3
 8018688:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801868a:	b10b      	cbz	r3, 8018690 <__sflush_r+0x48>
 801868c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801868e:	1ac0      	subs	r0, r0, r3
 8018690:	2300      	movs	r3, #0
 8018692:	4602      	mov	r2, r0
 8018694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018696:	6a21      	ldr	r1, [r4, #32]
 8018698:	4628      	mov	r0, r5
 801869a:	47b0      	blx	r6
 801869c:	1c43      	adds	r3, r0, #1
 801869e:	89a3      	ldrh	r3, [r4, #12]
 80186a0:	d106      	bne.n	80186b0 <__sflush_r+0x68>
 80186a2:	6829      	ldr	r1, [r5, #0]
 80186a4:	291d      	cmp	r1, #29
 80186a6:	d82b      	bhi.n	8018700 <__sflush_r+0xb8>
 80186a8:	4a29      	ldr	r2, [pc, #164]	; (8018750 <__sflush_r+0x108>)
 80186aa:	410a      	asrs	r2, r1
 80186ac:	07d6      	lsls	r6, r2, #31
 80186ae:	d427      	bmi.n	8018700 <__sflush_r+0xb8>
 80186b0:	2200      	movs	r2, #0
 80186b2:	6062      	str	r2, [r4, #4]
 80186b4:	04d9      	lsls	r1, r3, #19
 80186b6:	6922      	ldr	r2, [r4, #16]
 80186b8:	6022      	str	r2, [r4, #0]
 80186ba:	d504      	bpl.n	80186c6 <__sflush_r+0x7e>
 80186bc:	1c42      	adds	r2, r0, #1
 80186be:	d101      	bne.n	80186c4 <__sflush_r+0x7c>
 80186c0:	682b      	ldr	r3, [r5, #0]
 80186c2:	b903      	cbnz	r3, 80186c6 <__sflush_r+0x7e>
 80186c4:	6560      	str	r0, [r4, #84]	; 0x54
 80186c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80186c8:	602f      	str	r7, [r5, #0]
 80186ca:	2900      	cmp	r1, #0
 80186cc:	d0c9      	beq.n	8018662 <__sflush_r+0x1a>
 80186ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80186d2:	4299      	cmp	r1, r3
 80186d4:	d002      	beq.n	80186dc <__sflush_r+0x94>
 80186d6:	4628      	mov	r0, r5
 80186d8:	f7ff fa8a 	bl	8017bf0 <_free_r>
 80186dc:	2000      	movs	r0, #0
 80186de:	6360      	str	r0, [r4, #52]	; 0x34
 80186e0:	e7c0      	b.n	8018664 <__sflush_r+0x1c>
 80186e2:	2301      	movs	r3, #1
 80186e4:	4628      	mov	r0, r5
 80186e6:	47b0      	blx	r6
 80186e8:	1c41      	adds	r1, r0, #1
 80186ea:	d1c8      	bne.n	801867e <__sflush_r+0x36>
 80186ec:	682b      	ldr	r3, [r5, #0]
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d0c5      	beq.n	801867e <__sflush_r+0x36>
 80186f2:	2b1d      	cmp	r3, #29
 80186f4:	d001      	beq.n	80186fa <__sflush_r+0xb2>
 80186f6:	2b16      	cmp	r3, #22
 80186f8:	d101      	bne.n	80186fe <__sflush_r+0xb6>
 80186fa:	602f      	str	r7, [r5, #0]
 80186fc:	e7b1      	b.n	8018662 <__sflush_r+0x1a>
 80186fe:	89a3      	ldrh	r3, [r4, #12]
 8018700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018704:	81a3      	strh	r3, [r4, #12]
 8018706:	e7ad      	b.n	8018664 <__sflush_r+0x1c>
 8018708:	690f      	ldr	r7, [r1, #16]
 801870a:	2f00      	cmp	r7, #0
 801870c:	d0a9      	beq.n	8018662 <__sflush_r+0x1a>
 801870e:	0793      	lsls	r3, r2, #30
 8018710:	680e      	ldr	r6, [r1, #0]
 8018712:	bf08      	it	eq
 8018714:	694b      	ldreq	r3, [r1, #20]
 8018716:	600f      	str	r7, [r1, #0]
 8018718:	bf18      	it	ne
 801871a:	2300      	movne	r3, #0
 801871c:	eba6 0807 	sub.w	r8, r6, r7
 8018720:	608b      	str	r3, [r1, #8]
 8018722:	f1b8 0f00 	cmp.w	r8, #0
 8018726:	dd9c      	ble.n	8018662 <__sflush_r+0x1a>
 8018728:	6a21      	ldr	r1, [r4, #32]
 801872a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801872c:	4643      	mov	r3, r8
 801872e:	463a      	mov	r2, r7
 8018730:	4628      	mov	r0, r5
 8018732:	47b0      	blx	r6
 8018734:	2800      	cmp	r0, #0
 8018736:	dc06      	bgt.n	8018746 <__sflush_r+0xfe>
 8018738:	89a3      	ldrh	r3, [r4, #12]
 801873a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801873e:	81a3      	strh	r3, [r4, #12]
 8018740:	f04f 30ff 	mov.w	r0, #4294967295
 8018744:	e78e      	b.n	8018664 <__sflush_r+0x1c>
 8018746:	4407      	add	r7, r0
 8018748:	eba8 0800 	sub.w	r8, r8, r0
 801874c:	e7e9      	b.n	8018722 <__sflush_r+0xda>
 801874e:	bf00      	nop
 8018750:	dfbffffe 	.word	0xdfbffffe

08018754 <_fflush_r>:
 8018754:	b538      	push	{r3, r4, r5, lr}
 8018756:	690b      	ldr	r3, [r1, #16]
 8018758:	4605      	mov	r5, r0
 801875a:	460c      	mov	r4, r1
 801875c:	b913      	cbnz	r3, 8018764 <_fflush_r+0x10>
 801875e:	2500      	movs	r5, #0
 8018760:	4628      	mov	r0, r5
 8018762:	bd38      	pop	{r3, r4, r5, pc}
 8018764:	b118      	cbz	r0, 801876e <_fflush_r+0x1a>
 8018766:	6a03      	ldr	r3, [r0, #32]
 8018768:	b90b      	cbnz	r3, 801876e <_fflush_r+0x1a>
 801876a:	f7ff f859 	bl	8017820 <__sinit>
 801876e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d0f3      	beq.n	801875e <_fflush_r+0xa>
 8018776:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018778:	07d0      	lsls	r0, r2, #31
 801877a:	d404      	bmi.n	8018786 <_fflush_r+0x32>
 801877c:	0599      	lsls	r1, r3, #22
 801877e:	d402      	bmi.n	8018786 <_fflush_r+0x32>
 8018780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018782:	f7ff f9fe 	bl	8017b82 <__retarget_lock_acquire_recursive>
 8018786:	4628      	mov	r0, r5
 8018788:	4621      	mov	r1, r4
 801878a:	f7ff ff5d 	bl	8018648 <__sflush_r>
 801878e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018790:	07da      	lsls	r2, r3, #31
 8018792:	4605      	mov	r5, r0
 8018794:	d4e4      	bmi.n	8018760 <_fflush_r+0xc>
 8018796:	89a3      	ldrh	r3, [r4, #12]
 8018798:	059b      	lsls	r3, r3, #22
 801879a:	d4e1      	bmi.n	8018760 <_fflush_r+0xc>
 801879c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801879e:	f7ff f9f1 	bl	8017b84 <__retarget_lock_release_recursive>
 80187a2:	e7dd      	b.n	8018760 <_fflush_r+0xc>

080187a4 <fiprintf>:
 80187a4:	b40e      	push	{r1, r2, r3}
 80187a6:	b503      	push	{r0, r1, lr}
 80187a8:	4601      	mov	r1, r0
 80187aa:	ab03      	add	r3, sp, #12
 80187ac:	4805      	ldr	r0, [pc, #20]	; (80187c4 <fiprintf+0x20>)
 80187ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80187b2:	6800      	ldr	r0, [r0, #0]
 80187b4:	9301      	str	r3, [sp, #4]
 80187b6:	f7ff fc9d 	bl	80180f4 <_vfiprintf_r>
 80187ba:	b002      	add	sp, #8
 80187bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80187c0:	b003      	add	sp, #12
 80187c2:	4770      	bx	lr
 80187c4:	20000088 	.word	0x20000088

080187c8 <__swbuf_r>:
 80187c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187ca:	460e      	mov	r6, r1
 80187cc:	4614      	mov	r4, r2
 80187ce:	4605      	mov	r5, r0
 80187d0:	b118      	cbz	r0, 80187da <__swbuf_r+0x12>
 80187d2:	6a03      	ldr	r3, [r0, #32]
 80187d4:	b90b      	cbnz	r3, 80187da <__swbuf_r+0x12>
 80187d6:	f7ff f823 	bl	8017820 <__sinit>
 80187da:	69a3      	ldr	r3, [r4, #24]
 80187dc:	60a3      	str	r3, [r4, #8]
 80187de:	89a3      	ldrh	r3, [r4, #12]
 80187e0:	071a      	lsls	r2, r3, #28
 80187e2:	d525      	bpl.n	8018830 <__swbuf_r+0x68>
 80187e4:	6923      	ldr	r3, [r4, #16]
 80187e6:	b31b      	cbz	r3, 8018830 <__swbuf_r+0x68>
 80187e8:	6823      	ldr	r3, [r4, #0]
 80187ea:	6922      	ldr	r2, [r4, #16]
 80187ec:	1a98      	subs	r0, r3, r2
 80187ee:	6963      	ldr	r3, [r4, #20]
 80187f0:	b2f6      	uxtb	r6, r6
 80187f2:	4283      	cmp	r3, r0
 80187f4:	4637      	mov	r7, r6
 80187f6:	dc04      	bgt.n	8018802 <__swbuf_r+0x3a>
 80187f8:	4621      	mov	r1, r4
 80187fa:	4628      	mov	r0, r5
 80187fc:	f7ff ffaa 	bl	8018754 <_fflush_r>
 8018800:	b9e0      	cbnz	r0, 801883c <__swbuf_r+0x74>
 8018802:	68a3      	ldr	r3, [r4, #8]
 8018804:	3b01      	subs	r3, #1
 8018806:	60a3      	str	r3, [r4, #8]
 8018808:	6823      	ldr	r3, [r4, #0]
 801880a:	1c5a      	adds	r2, r3, #1
 801880c:	6022      	str	r2, [r4, #0]
 801880e:	701e      	strb	r6, [r3, #0]
 8018810:	6962      	ldr	r2, [r4, #20]
 8018812:	1c43      	adds	r3, r0, #1
 8018814:	429a      	cmp	r2, r3
 8018816:	d004      	beq.n	8018822 <__swbuf_r+0x5a>
 8018818:	89a3      	ldrh	r3, [r4, #12]
 801881a:	07db      	lsls	r3, r3, #31
 801881c:	d506      	bpl.n	801882c <__swbuf_r+0x64>
 801881e:	2e0a      	cmp	r6, #10
 8018820:	d104      	bne.n	801882c <__swbuf_r+0x64>
 8018822:	4621      	mov	r1, r4
 8018824:	4628      	mov	r0, r5
 8018826:	f7ff ff95 	bl	8018754 <_fflush_r>
 801882a:	b938      	cbnz	r0, 801883c <__swbuf_r+0x74>
 801882c:	4638      	mov	r0, r7
 801882e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018830:	4621      	mov	r1, r4
 8018832:	4628      	mov	r0, r5
 8018834:	f000 f806 	bl	8018844 <__swsetup_r>
 8018838:	2800      	cmp	r0, #0
 801883a:	d0d5      	beq.n	80187e8 <__swbuf_r+0x20>
 801883c:	f04f 37ff 	mov.w	r7, #4294967295
 8018840:	e7f4      	b.n	801882c <__swbuf_r+0x64>
	...

08018844 <__swsetup_r>:
 8018844:	b538      	push	{r3, r4, r5, lr}
 8018846:	4b2a      	ldr	r3, [pc, #168]	; (80188f0 <__swsetup_r+0xac>)
 8018848:	4605      	mov	r5, r0
 801884a:	6818      	ldr	r0, [r3, #0]
 801884c:	460c      	mov	r4, r1
 801884e:	b118      	cbz	r0, 8018858 <__swsetup_r+0x14>
 8018850:	6a03      	ldr	r3, [r0, #32]
 8018852:	b90b      	cbnz	r3, 8018858 <__swsetup_r+0x14>
 8018854:	f7fe ffe4 	bl	8017820 <__sinit>
 8018858:	89a3      	ldrh	r3, [r4, #12]
 801885a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801885e:	0718      	lsls	r0, r3, #28
 8018860:	d422      	bmi.n	80188a8 <__swsetup_r+0x64>
 8018862:	06d9      	lsls	r1, r3, #27
 8018864:	d407      	bmi.n	8018876 <__swsetup_r+0x32>
 8018866:	2309      	movs	r3, #9
 8018868:	602b      	str	r3, [r5, #0]
 801886a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801886e:	81a3      	strh	r3, [r4, #12]
 8018870:	f04f 30ff 	mov.w	r0, #4294967295
 8018874:	e034      	b.n	80188e0 <__swsetup_r+0x9c>
 8018876:	0758      	lsls	r0, r3, #29
 8018878:	d512      	bpl.n	80188a0 <__swsetup_r+0x5c>
 801887a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801887c:	b141      	cbz	r1, 8018890 <__swsetup_r+0x4c>
 801887e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018882:	4299      	cmp	r1, r3
 8018884:	d002      	beq.n	801888c <__swsetup_r+0x48>
 8018886:	4628      	mov	r0, r5
 8018888:	f7ff f9b2 	bl	8017bf0 <_free_r>
 801888c:	2300      	movs	r3, #0
 801888e:	6363      	str	r3, [r4, #52]	; 0x34
 8018890:	89a3      	ldrh	r3, [r4, #12]
 8018892:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018896:	81a3      	strh	r3, [r4, #12]
 8018898:	2300      	movs	r3, #0
 801889a:	6063      	str	r3, [r4, #4]
 801889c:	6923      	ldr	r3, [r4, #16]
 801889e:	6023      	str	r3, [r4, #0]
 80188a0:	89a3      	ldrh	r3, [r4, #12]
 80188a2:	f043 0308 	orr.w	r3, r3, #8
 80188a6:	81a3      	strh	r3, [r4, #12]
 80188a8:	6923      	ldr	r3, [r4, #16]
 80188aa:	b94b      	cbnz	r3, 80188c0 <__swsetup_r+0x7c>
 80188ac:	89a3      	ldrh	r3, [r4, #12]
 80188ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80188b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80188b6:	d003      	beq.n	80188c0 <__swsetup_r+0x7c>
 80188b8:	4621      	mov	r1, r4
 80188ba:	4628      	mov	r0, r5
 80188bc:	f000 f886 	bl	80189cc <__smakebuf_r>
 80188c0:	89a0      	ldrh	r0, [r4, #12]
 80188c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80188c6:	f010 0301 	ands.w	r3, r0, #1
 80188ca:	d00a      	beq.n	80188e2 <__swsetup_r+0x9e>
 80188cc:	2300      	movs	r3, #0
 80188ce:	60a3      	str	r3, [r4, #8]
 80188d0:	6963      	ldr	r3, [r4, #20]
 80188d2:	425b      	negs	r3, r3
 80188d4:	61a3      	str	r3, [r4, #24]
 80188d6:	6923      	ldr	r3, [r4, #16]
 80188d8:	b943      	cbnz	r3, 80188ec <__swsetup_r+0xa8>
 80188da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80188de:	d1c4      	bne.n	801886a <__swsetup_r+0x26>
 80188e0:	bd38      	pop	{r3, r4, r5, pc}
 80188e2:	0781      	lsls	r1, r0, #30
 80188e4:	bf58      	it	pl
 80188e6:	6963      	ldrpl	r3, [r4, #20]
 80188e8:	60a3      	str	r3, [r4, #8]
 80188ea:	e7f4      	b.n	80188d6 <__swsetup_r+0x92>
 80188ec:	2000      	movs	r0, #0
 80188ee:	e7f7      	b.n	80188e0 <__swsetup_r+0x9c>
 80188f0:	20000088 	.word	0x20000088

080188f4 <_sbrk_r>:
 80188f4:	b538      	push	{r3, r4, r5, lr}
 80188f6:	4d06      	ldr	r5, [pc, #24]	; (8018910 <_sbrk_r+0x1c>)
 80188f8:	2300      	movs	r3, #0
 80188fa:	4604      	mov	r4, r0
 80188fc:	4608      	mov	r0, r1
 80188fe:	602b      	str	r3, [r5, #0]
 8018900:	f7e8 fb80 	bl	8001004 <_sbrk>
 8018904:	1c43      	adds	r3, r0, #1
 8018906:	d102      	bne.n	801890e <_sbrk_r+0x1a>
 8018908:	682b      	ldr	r3, [r5, #0]
 801890a:	b103      	cbz	r3, 801890e <_sbrk_r+0x1a>
 801890c:	6023      	str	r3, [r4, #0]
 801890e:	bd38      	pop	{r3, r4, r5, pc}
 8018910:	2000d8d8 	.word	0x2000d8d8

08018914 <abort>:
 8018914:	b508      	push	{r3, lr}
 8018916:	2006      	movs	r0, #6
 8018918:	f000 f8bc 	bl	8018a94 <raise>
 801891c:	2001      	movs	r0, #1
 801891e:	f7e8 faf9 	bl	8000f14 <_exit>

08018922 <_realloc_r>:
 8018922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018926:	4680      	mov	r8, r0
 8018928:	4614      	mov	r4, r2
 801892a:	460e      	mov	r6, r1
 801892c:	b921      	cbnz	r1, 8018938 <_realloc_r+0x16>
 801892e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018932:	4611      	mov	r1, r2
 8018934:	f7ff b9d0 	b.w	8017cd8 <_malloc_r>
 8018938:	b92a      	cbnz	r2, 8018946 <_realloc_r+0x24>
 801893a:	f7ff f959 	bl	8017bf0 <_free_r>
 801893e:	4625      	mov	r5, r4
 8018940:	4628      	mov	r0, r5
 8018942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018946:	f000 f8e3 	bl	8018b10 <_malloc_usable_size_r>
 801894a:	4284      	cmp	r4, r0
 801894c:	4607      	mov	r7, r0
 801894e:	d802      	bhi.n	8018956 <_realloc_r+0x34>
 8018950:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018954:	d812      	bhi.n	801897c <_realloc_r+0x5a>
 8018956:	4621      	mov	r1, r4
 8018958:	4640      	mov	r0, r8
 801895a:	f7ff f9bd 	bl	8017cd8 <_malloc_r>
 801895e:	4605      	mov	r5, r0
 8018960:	2800      	cmp	r0, #0
 8018962:	d0ed      	beq.n	8018940 <_realloc_r+0x1e>
 8018964:	42bc      	cmp	r4, r7
 8018966:	4622      	mov	r2, r4
 8018968:	4631      	mov	r1, r6
 801896a:	bf28      	it	cs
 801896c:	463a      	movcs	r2, r7
 801896e:	f7ff f912 	bl	8017b96 <memcpy>
 8018972:	4631      	mov	r1, r6
 8018974:	4640      	mov	r0, r8
 8018976:	f7ff f93b 	bl	8017bf0 <_free_r>
 801897a:	e7e1      	b.n	8018940 <_realloc_r+0x1e>
 801897c:	4635      	mov	r5, r6
 801897e:	e7df      	b.n	8018940 <_realloc_r+0x1e>

08018980 <__swhatbuf_r>:
 8018980:	b570      	push	{r4, r5, r6, lr}
 8018982:	460c      	mov	r4, r1
 8018984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018988:	2900      	cmp	r1, #0
 801898a:	b096      	sub	sp, #88	; 0x58
 801898c:	4615      	mov	r5, r2
 801898e:	461e      	mov	r6, r3
 8018990:	da0d      	bge.n	80189ae <__swhatbuf_r+0x2e>
 8018992:	89a3      	ldrh	r3, [r4, #12]
 8018994:	f013 0f80 	tst.w	r3, #128	; 0x80
 8018998:	f04f 0100 	mov.w	r1, #0
 801899c:	bf0c      	ite	eq
 801899e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80189a2:	2340      	movne	r3, #64	; 0x40
 80189a4:	2000      	movs	r0, #0
 80189a6:	6031      	str	r1, [r6, #0]
 80189a8:	602b      	str	r3, [r5, #0]
 80189aa:	b016      	add	sp, #88	; 0x58
 80189ac:	bd70      	pop	{r4, r5, r6, pc}
 80189ae:	466a      	mov	r2, sp
 80189b0:	f000 f878 	bl	8018aa4 <_fstat_r>
 80189b4:	2800      	cmp	r0, #0
 80189b6:	dbec      	blt.n	8018992 <__swhatbuf_r+0x12>
 80189b8:	9901      	ldr	r1, [sp, #4]
 80189ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80189be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80189c2:	4259      	negs	r1, r3
 80189c4:	4159      	adcs	r1, r3
 80189c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80189ca:	e7eb      	b.n	80189a4 <__swhatbuf_r+0x24>

080189cc <__smakebuf_r>:
 80189cc:	898b      	ldrh	r3, [r1, #12]
 80189ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80189d0:	079d      	lsls	r5, r3, #30
 80189d2:	4606      	mov	r6, r0
 80189d4:	460c      	mov	r4, r1
 80189d6:	d507      	bpl.n	80189e8 <__smakebuf_r+0x1c>
 80189d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80189dc:	6023      	str	r3, [r4, #0]
 80189de:	6123      	str	r3, [r4, #16]
 80189e0:	2301      	movs	r3, #1
 80189e2:	6163      	str	r3, [r4, #20]
 80189e4:	b002      	add	sp, #8
 80189e6:	bd70      	pop	{r4, r5, r6, pc}
 80189e8:	ab01      	add	r3, sp, #4
 80189ea:	466a      	mov	r2, sp
 80189ec:	f7ff ffc8 	bl	8018980 <__swhatbuf_r>
 80189f0:	9900      	ldr	r1, [sp, #0]
 80189f2:	4605      	mov	r5, r0
 80189f4:	4630      	mov	r0, r6
 80189f6:	f7ff f96f 	bl	8017cd8 <_malloc_r>
 80189fa:	b948      	cbnz	r0, 8018a10 <__smakebuf_r+0x44>
 80189fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a00:	059a      	lsls	r2, r3, #22
 8018a02:	d4ef      	bmi.n	80189e4 <__smakebuf_r+0x18>
 8018a04:	f023 0303 	bic.w	r3, r3, #3
 8018a08:	f043 0302 	orr.w	r3, r3, #2
 8018a0c:	81a3      	strh	r3, [r4, #12]
 8018a0e:	e7e3      	b.n	80189d8 <__smakebuf_r+0xc>
 8018a10:	89a3      	ldrh	r3, [r4, #12]
 8018a12:	6020      	str	r0, [r4, #0]
 8018a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018a18:	81a3      	strh	r3, [r4, #12]
 8018a1a:	9b00      	ldr	r3, [sp, #0]
 8018a1c:	6163      	str	r3, [r4, #20]
 8018a1e:	9b01      	ldr	r3, [sp, #4]
 8018a20:	6120      	str	r0, [r4, #16]
 8018a22:	b15b      	cbz	r3, 8018a3c <__smakebuf_r+0x70>
 8018a24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018a28:	4630      	mov	r0, r6
 8018a2a:	f000 f84d 	bl	8018ac8 <_isatty_r>
 8018a2e:	b128      	cbz	r0, 8018a3c <__smakebuf_r+0x70>
 8018a30:	89a3      	ldrh	r3, [r4, #12]
 8018a32:	f023 0303 	bic.w	r3, r3, #3
 8018a36:	f043 0301 	orr.w	r3, r3, #1
 8018a3a:	81a3      	strh	r3, [r4, #12]
 8018a3c:	89a3      	ldrh	r3, [r4, #12]
 8018a3e:	431d      	orrs	r5, r3
 8018a40:	81a5      	strh	r5, [r4, #12]
 8018a42:	e7cf      	b.n	80189e4 <__smakebuf_r+0x18>

08018a44 <_raise_r>:
 8018a44:	291f      	cmp	r1, #31
 8018a46:	b538      	push	{r3, r4, r5, lr}
 8018a48:	4604      	mov	r4, r0
 8018a4a:	460d      	mov	r5, r1
 8018a4c:	d904      	bls.n	8018a58 <_raise_r+0x14>
 8018a4e:	2316      	movs	r3, #22
 8018a50:	6003      	str	r3, [r0, #0]
 8018a52:	f04f 30ff 	mov.w	r0, #4294967295
 8018a56:	bd38      	pop	{r3, r4, r5, pc}
 8018a58:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018a5a:	b112      	cbz	r2, 8018a62 <_raise_r+0x1e>
 8018a5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018a60:	b94b      	cbnz	r3, 8018a76 <_raise_r+0x32>
 8018a62:	4620      	mov	r0, r4
 8018a64:	f000 f852 	bl	8018b0c <_getpid_r>
 8018a68:	462a      	mov	r2, r5
 8018a6a:	4601      	mov	r1, r0
 8018a6c:	4620      	mov	r0, r4
 8018a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018a72:	f000 b839 	b.w	8018ae8 <_kill_r>
 8018a76:	2b01      	cmp	r3, #1
 8018a78:	d00a      	beq.n	8018a90 <_raise_r+0x4c>
 8018a7a:	1c59      	adds	r1, r3, #1
 8018a7c:	d103      	bne.n	8018a86 <_raise_r+0x42>
 8018a7e:	2316      	movs	r3, #22
 8018a80:	6003      	str	r3, [r0, #0]
 8018a82:	2001      	movs	r0, #1
 8018a84:	e7e7      	b.n	8018a56 <_raise_r+0x12>
 8018a86:	2400      	movs	r4, #0
 8018a88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018a8c:	4628      	mov	r0, r5
 8018a8e:	4798      	blx	r3
 8018a90:	2000      	movs	r0, #0
 8018a92:	e7e0      	b.n	8018a56 <_raise_r+0x12>

08018a94 <raise>:
 8018a94:	4b02      	ldr	r3, [pc, #8]	; (8018aa0 <raise+0xc>)
 8018a96:	4601      	mov	r1, r0
 8018a98:	6818      	ldr	r0, [r3, #0]
 8018a9a:	f7ff bfd3 	b.w	8018a44 <_raise_r>
 8018a9e:	bf00      	nop
 8018aa0:	20000088 	.word	0x20000088

08018aa4 <_fstat_r>:
 8018aa4:	b538      	push	{r3, r4, r5, lr}
 8018aa6:	4d07      	ldr	r5, [pc, #28]	; (8018ac4 <_fstat_r+0x20>)
 8018aa8:	2300      	movs	r3, #0
 8018aaa:	4604      	mov	r4, r0
 8018aac:	4608      	mov	r0, r1
 8018aae:	4611      	mov	r1, r2
 8018ab0:	602b      	str	r3, [r5, #0]
 8018ab2:	f7e8 fa7e 	bl	8000fb2 <_fstat>
 8018ab6:	1c43      	adds	r3, r0, #1
 8018ab8:	d102      	bne.n	8018ac0 <_fstat_r+0x1c>
 8018aba:	682b      	ldr	r3, [r5, #0]
 8018abc:	b103      	cbz	r3, 8018ac0 <_fstat_r+0x1c>
 8018abe:	6023      	str	r3, [r4, #0]
 8018ac0:	bd38      	pop	{r3, r4, r5, pc}
 8018ac2:	bf00      	nop
 8018ac4:	2000d8d8 	.word	0x2000d8d8

08018ac8 <_isatty_r>:
 8018ac8:	b538      	push	{r3, r4, r5, lr}
 8018aca:	4d06      	ldr	r5, [pc, #24]	; (8018ae4 <_isatty_r+0x1c>)
 8018acc:	2300      	movs	r3, #0
 8018ace:	4604      	mov	r4, r0
 8018ad0:	4608      	mov	r0, r1
 8018ad2:	602b      	str	r3, [r5, #0]
 8018ad4:	f7e8 fa7d 	bl	8000fd2 <_isatty>
 8018ad8:	1c43      	adds	r3, r0, #1
 8018ada:	d102      	bne.n	8018ae2 <_isatty_r+0x1a>
 8018adc:	682b      	ldr	r3, [r5, #0]
 8018ade:	b103      	cbz	r3, 8018ae2 <_isatty_r+0x1a>
 8018ae0:	6023      	str	r3, [r4, #0]
 8018ae2:	bd38      	pop	{r3, r4, r5, pc}
 8018ae4:	2000d8d8 	.word	0x2000d8d8

08018ae8 <_kill_r>:
 8018ae8:	b538      	push	{r3, r4, r5, lr}
 8018aea:	4d07      	ldr	r5, [pc, #28]	; (8018b08 <_kill_r+0x20>)
 8018aec:	2300      	movs	r3, #0
 8018aee:	4604      	mov	r4, r0
 8018af0:	4608      	mov	r0, r1
 8018af2:	4611      	mov	r1, r2
 8018af4:	602b      	str	r3, [r5, #0]
 8018af6:	f7e8 f9fb 	bl	8000ef0 <_kill>
 8018afa:	1c43      	adds	r3, r0, #1
 8018afc:	d102      	bne.n	8018b04 <_kill_r+0x1c>
 8018afe:	682b      	ldr	r3, [r5, #0]
 8018b00:	b103      	cbz	r3, 8018b04 <_kill_r+0x1c>
 8018b02:	6023      	str	r3, [r4, #0]
 8018b04:	bd38      	pop	{r3, r4, r5, pc}
 8018b06:	bf00      	nop
 8018b08:	2000d8d8 	.word	0x2000d8d8

08018b0c <_getpid_r>:
 8018b0c:	f7e8 b9e8 	b.w	8000ee0 <_getpid>

08018b10 <_malloc_usable_size_r>:
 8018b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b14:	1f18      	subs	r0, r3, #4
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	bfbc      	itt	lt
 8018b1a:	580b      	ldrlt	r3, [r1, r0]
 8018b1c:	18c0      	addlt	r0, r0, r3
 8018b1e:	4770      	bx	lr

08018b20 <_init>:
 8018b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b22:	bf00      	nop
 8018b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b26:	bc08      	pop	{r3}
 8018b28:	469e      	mov	lr, r3
 8018b2a:	4770      	bx	lr

08018b2c <_fini>:
 8018b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b2e:	bf00      	nop
 8018b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b32:	bc08      	pop	{r3}
 8018b34:	469e      	mov	lr, r3
 8018b36:	4770      	bx	lr
